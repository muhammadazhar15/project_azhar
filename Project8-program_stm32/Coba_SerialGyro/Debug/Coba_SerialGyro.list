
Coba_SerialGyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800337c  0800337c  0001337c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080033f8  080033f8  000133f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003400  08003400  00013400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003404  08003404  00013404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000000  08003408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
  8 .bss          00000100  20000078  20000078  00020078  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000178  20000178  00020078  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000e0e1  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000201c  00000000  00000000  0002e189  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002f70  00000000  00000000  000301a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000630  00000000  00000000  00033118  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000868  00000000  00000000  00033748  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000391e  00000000  00000000  00033fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000028d9  00000000  00000000  000378ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0003a1a7  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001560  00000000  00000000  0003a224  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003364 	.word	0x08003364

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08003364 	.word	0x08003364

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f092 0f00 	teq	r2, #0
 800055a:	bf14      	ite	ne
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800056c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000570:	e720      	b.n	80003b4 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_ul2d>:
 8000574:	ea50 0201 	orrs.w	r2, r0, r1
 8000578:	bf08      	it	eq
 800057a:	4770      	bxeq	lr
 800057c:	b530      	push	{r4, r5, lr}
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	e00a      	b.n	800059a <__aeabi_l2d+0x16>

08000584 <__aeabi_l2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000592:	d502      	bpl.n	800059a <__aeabi_l2d+0x16>
 8000594:	4240      	negs	r0, r0
 8000596:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800059a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a6:	f43f aedc 	beq.w	8000362 <__adddf3+0xe6>
 80005aa:	f04f 0203 	mov.w	r2, #3
 80005ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b2:	bf18      	it	ne
 80005b4:	3203      	addne	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005c2:	f1c2 0320 	rsb	r3, r2, #32
 80005c6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ca:	fa20 f002 	lsr.w	r0, r0, r2
 80005ce:	fa01 fe03 	lsl.w	lr, r1, r3
 80005d2:	ea40 000e 	orr.w	r0, r0, lr
 80005d6:	fa21 f102 	lsr.w	r1, r1, r2
 80005da:	4414      	add	r4, r2
 80005dc:	e6c1      	b.n	8000362 <__adddf3+0xe6>
 80005de:	bf00      	nop

080005e0 <__aeabi_dmul>:
 80005e0:	b570      	push	{r4, r5, r6, lr}
 80005e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ee:	bf1d      	ittte	ne
 80005f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f4:	ea94 0f0c 	teqne	r4, ip
 80005f8:	ea95 0f0c 	teqne	r5, ip
 80005fc:	f000 f8de 	bleq	80007bc <__aeabi_dmul+0x1dc>
 8000600:	442c      	add	r4, r5
 8000602:	ea81 0603 	eor.w	r6, r1, r3
 8000606:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800060a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000612:	bf18      	it	ne
 8000614:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000620:	d038      	beq.n	8000694 <__aeabi_dmul+0xb4>
 8000622:	fba0 ce02 	umull	ip, lr, r0, r2
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000632:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000636:	f04f 0600 	mov.w	r6, #0
 800063a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063e:	f09c 0f00 	teq	ip, #0
 8000642:	bf18      	it	ne
 8000644:	f04e 0e01 	orrne.w	lr, lr, #1
 8000648:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800064c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000650:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000654:	d204      	bcs.n	8000660 <__aeabi_dmul+0x80>
 8000656:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800065a:	416d      	adcs	r5, r5
 800065c:	eb46 0606 	adc.w	r6, r6, r6
 8000660:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000664:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000668:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800066c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000670:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000674:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000678:	bf88      	it	hi
 800067a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067e:	d81e      	bhi.n	80006be <__aeabi_dmul+0xde>
 8000680:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000684:	bf08      	it	eq
 8000686:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800068a:	f150 0000 	adcs.w	r0, r0, #0
 800068e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000698:	ea46 0101 	orr.w	r1, r6, r1
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	ea81 0103 	eor.w	r1, r1, r3
 80006a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a8:	bfc2      	ittt	gt
 80006aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	popgt	{r4, r5, r6, pc}
 80006b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b8:	f04f 0e00 	mov.w	lr, #0
 80006bc:	3c01      	subs	r4, #1
 80006be:	f300 80ab 	bgt.w	8000818 <__aeabi_dmul+0x238>
 80006c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c6:	bfde      	ittt	le
 80006c8:	2000      	movle	r0, #0
 80006ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ce:	bd70      	pople	{r4, r5, r6, pc}
 80006d0:	f1c4 0400 	rsb	r4, r4, #0
 80006d4:	3c20      	subs	r4, #32
 80006d6:	da35      	bge.n	8000744 <__aeabi_dmul+0x164>
 80006d8:	340c      	adds	r4, #12
 80006da:	dc1b      	bgt.n	8000714 <__aeabi_dmul+0x134>
 80006dc:	f104 0414 	add.w	r4, r4, #20
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f305 	lsl.w	r3, r0, r5
 80006e8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000700:	fa21 f604 	lsr.w	r6, r1, r4
 8000704:	eb42 0106 	adc.w	r1, r2, r6
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 040c 	rsb	r4, r4, #12
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f304 	lsl.w	r3, r0, r4
 8000720:	fa20 f005 	lsr.w	r0, r0, r5
 8000724:	fa01 f204 	lsl.w	r2, r1, r4
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000730:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000734:	f141 0100 	adc.w	r1, r1, #0
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f205 	lsl.w	r2, r0, r5
 800074c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000750:	fa20 f304 	lsr.w	r3, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea43 0302 	orr.w	r3, r3, r2
 800075c:	fa21 f004 	lsr.w	r0, r1, r4
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	fa21 f204 	lsr.w	r2, r1, r4
 8000768:	ea20 0002 	bic.w	r0, r0, r2
 800076c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f094 0f00 	teq	r4, #0
 8000780:	d10f      	bne.n	80007a2 <__aeabi_dmul+0x1c2>
 8000782:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000786:	0040      	lsls	r0, r0, #1
 8000788:	eb41 0101 	adc.w	r1, r1, r1
 800078c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000790:	bf08      	it	eq
 8000792:	3c01      	subeq	r4, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1a6>
 8000796:	ea41 0106 	orr.w	r1, r1, r6
 800079a:	f095 0f00 	teq	r5, #0
 800079e:	bf18      	it	ne
 80007a0:	4770      	bxne	lr
 80007a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a6:	0052      	lsls	r2, r2, #1
 80007a8:	eb43 0303 	adc.w	r3, r3, r3
 80007ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3d01      	subeq	r5, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1c6>
 80007b6:	ea43 0306 	orr.w	r3, r3, r6
 80007ba:	4770      	bx	lr
 80007bc:	ea94 0f0c 	teq	r4, ip
 80007c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c4:	bf18      	it	ne
 80007c6:	ea95 0f0c 	teqne	r5, ip
 80007ca:	d00c      	beq.n	80007e6 <__aeabi_dmul+0x206>
 80007cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d0:	bf18      	it	ne
 80007d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d6:	d1d1      	bne.n	800077c <__aeabi_dmul+0x19c>
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	f04f 0000 	mov.w	r0, #0
 80007e4:	bd70      	pop	{r4, r5, r6, pc}
 80007e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ea:	bf06      	itte	eq
 80007ec:	4610      	moveq	r0, r2
 80007ee:	4619      	moveq	r1, r3
 80007f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f4:	d019      	beq.n	800082a <__aeabi_dmul+0x24a>
 80007f6:	ea94 0f0c 	teq	r4, ip
 80007fa:	d102      	bne.n	8000802 <__aeabi_dmul+0x222>
 80007fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000800:	d113      	bne.n	800082a <__aeabi_dmul+0x24a>
 8000802:	ea95 0f0c 	teq	r5, ip
 8000806:	d105      	bne.n	8000814 <__aeabi_dmul+0x234>
 8000808:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800080c:	bf1c      	itt	ne
 800080e:	4610      	movne	r0, r2
 8000810:	4619      	movne	r1, r3
 8000812:	d10a      	bne.n	800082a <__aeabi_dmul+0x24a>
 8000814:	ea81 0103 	eor.w	r1, r1, r3
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800081c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000820:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000824:	f04f 0000 	mov.w	r0, #0
 8000828:	bd70      	pop	{r4, r5, r6, pc}
 800082a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000832:	bd70      	pop	{r4, r5, r6, pc}

08000834 <__aeabi_ddiv>:
 8000834:	b570      	push	{r4, r5, r6, lr}
 8000836:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800083a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000842:	bf1d      	ittte	ne
 8000844:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000848:	ea94 0f0c 	teqne	r4, ip
 800084c:	ea95 0f0c 	teqne	r5, ip
 8000850:	f000 f8a7 	bleq	80009a2 <__aeabi_ddiv+0x16e>
 8000854:	eba4 0405 	sub.w	r4, r4, r5
 8000858:	ea81 0e03 	eor.w	lr, r1, r3
 800085c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000860:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000864:	f000 8088 	beq.w	8000978 <__aeabi_ddiv+0x144>
 8000868:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800086c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000870:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000874:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000878:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800087c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000880:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000884:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000888:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800088c:	429d      	cmp	r5, r3
 800088e:	bf08      	it	eq
 8000890:	4296      	cmpeq	r6, r2
 8000892:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000896:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800089a:	d202      	bcs.n	80008a2 <__aeabi_ddiv+0x6e>
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a2:	1ab6      	subs	r6, r6, r2
 80008a4:	eb65 0503 	sbc.w	r5, r5, r3
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000910:	ea55 0e06 	orrs.w	lr, r5, r6
 8000914:	d018      	beq.n	8000948 <__aeabi_ddiv+0x114>
 8000916:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800091a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000922:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000926:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800092a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000932:	d1c0      	bne.n	80008b6 <__aeabi_ddiv+0x82>
 8000934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000938:	d10b      	bne.n	8000952 <__aeabi_ddiv+0x11e>
 800093a:	ea41 0100 	orr.w	r1, r1, r0
 800093e:	f04f 0000 	mov.w	r0, #0
 8000942:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000946:	e7b6      	b.n	80008b6 <__aeabi_ddiv+0x82>
 8000948:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800094c:	bf04      	itt	eq
 800094e:	4301      	orreq	r1, r0
 8000950:	2000      	moveq	r0, #0
 8000952:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000956:	bf88      	it	hi
 8000958:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800095c:	f63f aeaf 	bhi.w	80006be <__aeabi_dmul+0xde>
 8000960:	ebb5 0c03 	subs.w	ip, r5, r3
 8000964:	bf04      	itt	eq
 8000966:	ebb6 0c02 	subseq.w	ip, r6, r2
 800096a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096e:	f150 0000 	adcs.w	r0, r0, #0
 8000972:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000976:	bd70      	pop	{r4, r5, r6, pc}
 8000978:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800097c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000980:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000984:	bfc2      	ittt	gt
 8000986:	ebd4 050c 	rsbsgt	r5, r4, ip
 800098a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098e:	bd70      	popgt	{r4, r5, r6, pc}
 8000990:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000994:	f04f 0e00 	mov.w	lr, #0
 8000998:	3c01      	subs	r4, #1
 800099a:	e690      	b.n	80006be <__aeabi_dmul+0xde>
 800099c:	ea45 0e06 	orr.w	lr, r5, r6
 80009a0:	e68d      	b.n	80006be <__aeabi_dmul+0xde>
 80009a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a6:	ea94 0f0c 	teq	r4, ip
 80009aa:	bf08      	it	eq
 80009ac:	ea95 0f0c 	teqeq	r5, ip
 80009b0:	f43f af3b 	beq.w	800082a <__aeabi_dmul+0x24a>
 80009b4:	ea94 0f0c 	teq	r4, ip
 80009b8:	d10a      	bne.n	80009d0 <__aeabi_ddiv+0x19c>
 80009ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009be:	f47f af34 	bne.w	800082a <__aeabi_dmul+0x24a>
 80009c2:	ea95 0f0c 	teq	r5, ip
 80009c6:	f47f af25 	bne.w	8000814 <__aeabi_dmul+0x234>
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	e72c      	b.n	800082a <__aeabi_dmul+0x24a>
 80009d0:	ea95 0f0c 	teq	r5, ip
 80009d4:	d106      	bne.n	80009e4 <__aeabi_ddiv+0x1b0>
 80009d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009da:	f43f aefd 	beq.w	80007d8 <__aeabi_dmul+0x1f8>
 80009de:	4610      	mov	r0, r2
 80009e0:	4619      	mov	r1, r3
 80009e2:	e722      	b.n	800082a <__aeabi_dmul+0x24a>
 80009e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ee:	f47f aec5 	bne.w	800077c <__aeabi_dmul+0x19c>
 80009f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f6:	f47f af0d 	bne.w	8000814 <__aeabi_dmul+0x234>
 80009fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fe:	f47f aeeb 	bne.w	80007d8 <__aeabi_dmul+0x1f8>
 8000a02:	e712      	b.n	800082a <__aeabi_dmul+0x24a>

08000a04 <__gedf2>:
 8000a04:	f04f 3cff 	mov.w	ip, #4294967295
 8000a08:	e006      	b.n	8000a18 <__cmpdf2+0x4>
 8000a0a:	bf00      	nop

08000a0c <__ledf2>:
 8000a0c:	f04f 0c01 	mov.w	ip, #1
 8000a10:	e002      	b.n	8000a18 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__cmpdf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a2e:	d01b      	beq.n	8000a68 <__cmpdf2+0x54>
 8000a30:	b001      	add	sp, #4
 8000a32:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a36:	bf0c      	ite	eq
 8000a38:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a3c:	ea91 0f03 	teqne	r1, r3
 8000a40:	bf02      	ittt	eq
 8000a42:	ea90 0f02 	teqeq	r0, r2
 8000a46:	2000      	moveq	r0, #0
 8000a48:	4770      	bxeq	lr
 8000a4a:	f110 0f00 	cmn.w	r0, #0
 8000a4e:	ea91 0f03 	teq	r1, r3
 8000a52:	bf58      	it	pl
 8000a54:	4299      	cmppl	r1, r3
 8000a56:	bf08      	it	eq
 8000a58:	4290      	cmpeq	r0, r2
 8000a5a:	bf2c      	ite	cs
 8000a5c:	17d8      	asrcs	r0, r3, #31
 8000a5e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a62:	f040 0001 	orr.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a70:	d102      	bne.n	8000a78 <__cmpdf2+0x64>
 8000a72:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a76:	d107      	bne.n	8000a88 <__cmpdf2+0x74>
 8000a78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d1d6      	bne.n	8000a30 <__cmpdf2+0x1c>
 8000a82:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a86:	d0d3      	beq.n	8000a30 <__cmpdf2+0x1c>
 8000a88:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop

08000a90 <__aeabi_cdrcmple>:
 8000a90:	4684      	mov	ip, r0
 8000a92:	4610      	mov	r0, r2
 8000a94:	4662      	mov	r2, ip
 8000a96:	468c      	mov	ip, r1
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4663      	mov	r3, ip
 8000a9c:	e000      	b.n	8000aa0 <__aeabi_cdcmpeq>
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdcmpeq>:
 8000aa0:	b501      	push	{r0, lr}
 8000aa2:	f7ff ffb7 	bl	8000a14 <__cmpdf2>
 8000aa6:	2800      	cmp	r0, #0
 8000aa8:	bf48      	it	mi
 8000aaa:	f110 0f00 	cmnmi.w	r0, #0
 8000aae:	bd01      	pop	{r0, pc}

08000ab0 <__aeabi_dcmpeq>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff fff4 	bl	8000aa0 <__aeabi_cdcmpeq>
 8000ab8:	bf0c      	ite	eq
 8000aba:	2001      	moveq	r0, #1
 8000abc:	2000      	movne	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmplt>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffea 	bl	8000aa0 <__aeabi_cdcmpeq>
 8000acc:	bf34      	ite	cc
 8000ace:	2001      	movcc	r0, #1
 8000ad0:	2000      	movcs	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmple>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffe0 	bl	8000aa0 <__aeabi_cdcmpeq>
 8000ae0:	bf94      	ite	ls
 8000ae2:	2001      	movls	r0, #1
 8000ae4:	2000      	movhi	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpge>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffce 	bl	8000a90 <__aeabi_cdrcmple>
 8000af4:	bf94      	ite	ls
 8000af6:	2001      	movls	r0, #1
 8000af8:	2000      	movhi	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmpgt>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffc4 	bl	8000a90 <__aeabi_cdrcmple>
 8000b08:	bf34      	ite	cc
 8000b0a:	2001      	movcc	r0, #1
 8000b0c:	2000      	movcs	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b97a 	b.w	8000f00 <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	468c      	mov	ip, r1
 8000c2a:	460d      	mov	r5, r1
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	9e08      	ldr	r6, [sp, #32]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d151      	bne.n	8000cd8 <__udivmoddi4+0xb4>
 8000c34:	428a      	cmp	r2, r1
 8000c36:	4617      	mov	r7, r2
 8000c38:	d96d      	bls.n	8000d16 <__udivmoddi4+0xf2>
 8000c3a:	fab2 fe82 	clz	lr, r2
 8000c3e:	f1be 0f00 	cmp.w	lr, #0
 8000c42:	d00b      	beq.n	8000c5c <__udivmoddi4+0x38>
 8000c44:	f1ce 0c20 	rsb	ip, lr, #32
 8000c48:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c4c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c50:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c54:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c58:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c5c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c60:	0c25      	lsrs	r5, r4, #16
 8000c62:	fbbc f8fa 	udiv	r8, ip, sl
 8000c66:	fa1f f987 	uxth.w	r9, r7
 8000c6a:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c6e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c72:	fb08 f309 	mul.w	r3, r8, r9
 8000c76:	42ab      	cmp	r3, r5
 8000c78:	d90a      	bls.n	8000c90 <__udivmoddi4+0x6c>
 8000c7a:	19ed      	adds	r5, r5, r7
 8000c7c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c80:	f080 8123 	bcs.w	8000eca <__udivmoddi4+0x2a6>
 8000c84:	42ab      	cmp	r3, r5
 8000c86:	f240 8120 	bls.w	8000eca <__udivmoddi4+0x2a6>
 8000c8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000c8e:	443d      	add	r5, r7
 8000c90:	1aed      	subs	r5, r5, r3
 8000c92:	b2a4      	uxth	r4, r4
 8000c94:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c98:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ca0:	fb00 f909 	mul.w	r9, r0, r9
 8000ca4:	45a1      	cmp	r9, r4
 8000ca6:	d909      	bls.n	8000cbc <__udivmoddi4+0x98>
 8000ca8:	19e4      	adds	r4, r4, r7
 8000caa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cae:	f080 810a 	bcs.w	8000ec6 <__udivmoddi4+0x2a2>
 8000cb2:	45a1      	cmp	r9, r4
 8000cb4:	f240 8107 	bls.w	8000ec6 <__udivmoddi4+0x2a2>
 8000cb8:	3802      	subs	r0, #2
 8000cba:	443c      	add	r4, r7
 8000cbc:	eba4 0409 	sub.w	r4, r4, r9
 8000cc0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d061      	beq.n	8000d8e <__udivmoddi4+0x16a>
 8000cca:	fa24 f40e 	lsr.w	r4, r4, lr
 8000cce:	2300      	movs	r3, #0
 8000cd0:	6034      	str	r4, [r6, #0]
 8000cd2:	6073      	str	r3, [r6, #4]
 8000cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d907      	bls.n	8000cec <__udivmoddi4+0xc8>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d054      	beq.n	8000d8a <__udivmoddi4+0x166>
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	e886 0021 	stmia.w	r6, {r0, r5}
 8000ce6:	4608      	mov	r0, r1
 8000ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cec:	fab3 f183 	clz	r1, r3
 8000cf0:	2900      	cmp	r1, #0
 8000cf2:	f040 808e 	bne.w	8000e12 <__udivmoddi4+0x1ee>
 8000cf6:	42ab      	cmp	r3, r5
 8000cf8:	d302      	bcc.n	8000d00 <__udivmoddi4+0xdc>
 8000cfa:	4282      	cmp	r2, r0
 8000cfc:	f200 80fa 	bhi.w	8000ef4 <__udivmoddi4+0x2d0>
 8000d00:	1a84      	subs	r4, r0, r2
 8000d02:	eb65 0503 	sbc.w	r5, r5, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	46ac      	mov	ip, r5
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d03f      	beq.n	8000d8e <__udivmoddi4+0x16a>
 8000d0e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	b912      	cbnz	r2, 8000d1e <__udivmoddi4+0xfa>
 8000d18:	2701      	movs	r7, #1
 8000d1a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d1e:	fab7 fe87 	clz	lr, r7
 8000d22:	f1be 0f00 	cmp.w	lr, #0
 8000d26:	d134      	bne.n	8000d92 <__udivmoddi4+0x16e>
 8000d28:	1beb      	subs	r3, r5, r7
 8000d2a:	0c3a      	lsrs	r2, r7, #16
 8000d2c:	fa1f fc87 	uxth.w	ip, r7
 8000d30:	2101      	movs	r1, #1
 8000d32:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d36:	0c25      	lsrs	r5, r4, #16
 8000d38:	fb02 3318 	mls	r3, r2, r8, r3
 8000d3c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d40:	fb0c f308 	mul.w	r3, ip, r8
 8000d44:	42ab      	cmp	r3, r5
 8000d46:	d907      	bls.n	8000d58 <__udivmoddi4+0x134>
 8000d48:	19ed      	adds	r5, r5, r7
 8000d4a:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x132>
 8000d50:	42ab      	cmp	r3, r5
 8000d52:	f200 80d1 	bhi.w	8000ef8 <__udivmoddi4+0x2d4>
 8000d56:	4680      	mov	r8, r0
 8000d58:	1aed      	subs	r5, r5, r3
 8000d5a:	b2a3      	uxth	r3, r4
 8000d5c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d60:	fb02 5510 	mls	r5, r2, r0, r5
 8000d64:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d68:	fb0c fc00 	mul.w	ip, ip, r0
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d907      	bls.n	8000d80 <__udivmoddi4+0x15c>
 8000d70:	19e4      	adds	r4, r4, r7
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0x15a>
 8000d78:	45a4      	cmp	ip, r4
 8000d7a:	f200 80b8 	bhi.w	8000eee <__udivmoddi4+0x2ca>
 8000d7e:	4618      	mov	r0, r3
 8000d80:	eba4 040c 	sub.w	r4, r4, ip
 8000d84:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d88:	e79d      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000d8a:	4631      	mov	r1, r6
 8000d8c:	4630      	mov	r0, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	f1ce 0420 	rsb	r4, lr, #32
 8000d96:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d9a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d9e:	fa20 f804 	lsr.w	r8, r0, r4
 8000da2:	0c3a      	lsrs	r2, r7, #16
 8000da4:	fa25 f404 	lsr.w	r4, r5, r4
 8000da8:	ea48 0803 	orr.w	r8, r8, r3
 8000dac:	fbb4 f1f2 	udiv	r1, r4, r2
 8000db0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000db4:	fb02 4411 	mls	r4, r2, r1, r4
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000dc0:	fb01 f30c 	mul.w	r3, r1, ip
 8000dc4:	42ab      	cmp	r3, r5
 8000dc6:	fa00 f40e 	lsl.w	r4, r0, lr
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x1bc>
 8000dcc:	19ed      	adds	r5, r5, r7
 8000dce:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dd2:	f080 808a 	bcs.w	8000eea <__udivmoddi4+0x2c6>
 8000dd6:	42ab      	cmp	r3, r5
 8000dd8:	f240 8087 	bls.w	8000eea <__udivmoddi4+0x2c6>
 8000ddc:	3902      	subs	r1, #2
 8000dde:	443d      	add	r5, r7
 8000de0:	1aeb      	subs	r3, r5, r3
 8000de2:	fa1f f588 	uxth.w	r5, r8
 8000de6:	fbb3 f0f2 	udiv	r0, r3, r2
 8000dea:	fb02 3310 	mls	r3, r2, r0, r3
 8000dee:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000df2:	fb00 f30c 	mul.w	r3, r0, ip
 8000df6:	42ab      	cmp	r3, r5
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x1e6>
 8000dfa:	19ed      	adds	r5, r5, r7
 8000dfc:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e00:	d26f      	bcs.n	8000ee2 <__udivmoddi4+0x2be>
 8000e02:	42ab      	cmp	r3, r5
 8000e04:	d96d      	bls.n	8000ee2 <__udivmoddi4+0x2be>
 8000e06:	3802      	subs	r0, #2
 8000e08:	443d      	add	r5, r7
 8000e0a:	1aeb      	subs	r3, r5, r3
 8000e0c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e10:	e78f      	b.n	8000d32 <__udivmoddi4+0x10e>
 8000e12:	f1c1 0720 	rsb	r7, r1, #32
 8000e16:	fa22 f807 	lsr.w	r8, r2, r7
 8000e1a:	408b      	lsls	r3, r1
 8000e1c:	fa05 f401 	lsl.w	r4, r5, r1
 8000e20:	ea48 0303 	orr.w	r3, r8, r3
 8000e24:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e28:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e2c:	40fd      	lsrs	r5, r7
 8000e2e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e32:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e36:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e3a:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e3e:	fa1f f883 	uxth.w	r8, r3
 8000e42:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e46:	fb09 f408 	mul.w	r4, r9, r8
 8000e4a:	42ac      	cmp	r4, r5
 8000e4c:	fa02 f201 	lsl.w	r2, r2, r1
 8000e50:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x244>
 8000e56:	18ed      	adds	r5, r5, r3
 8000e58:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e5c:	d243      	bcs.n	8000ee6 <__udivmoddi4+0x2c2>
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	d941      	bls.n	8000ee6 <__udivmoddi4+0x2c2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	441d      	add	r5, r3
 8000e68:	1b2d      	subs	r5, r5, r4
 8000e6a:	fa1f fe8e 	uxth.w	lr, lr
 8000e6e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e72:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e76:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e7a:	fb00 f808 	mul.w	r8, r0, r8
 8000e7e:	45a0      	cmp	r8, r4
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x26e>
 8000e82:	18e4      	adds	r4, r4, r3
 8000e84:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e88:	d229      	bcs.n	8000ede <__udivmoddi4+0x2ba>
 8000e8a:	45a0      	cmp	r8, r4
 8000e8c:	d927      	bls.n	8000ede <__udivmoddi4+0x2ba>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	441c      	add	r4, r3
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	eba4 0408 	sub.w	r4, r4, r8
 8000e9a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c6      	mov	lr, r8
 8000ea2:	464d      	mov	r5, r9
 8000ea4:	d315      	bcc.n	8000ed2 <__udivmoddi4+0x2ae>
 8000ea6:	d012      	beq.n	8000ece <__udivmoddi4+0x2aa>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x29c>
 8000eaa:	ebba 030e 	subs.w	r3, sl, lr
 8000eae:	eb64 0405 	sbc.w	r4, r4, r5
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40cb      	lsrs	r3, r1
 8000eb8:	431f      	orrs	r7, r3
 8000eba:	40cc      	lsrs	r4, r1
 8000ebc:	6037      	str	r7, [r6, #0]
 8000ebe:	6074      	str	r4, [r6, #4]
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	e6f8      	b.n	8000cbc <__udivmoddi4+0x98>
 8000eca:	4690      	mov	r8, r2
 8000ecc:	e6e0      	b.n	8000c90 <__udivmoddi4+0x6c>
 8000ece:	45c2      	cmp	sl, r8
 8000ed0:	d2ea      	bcs.n	8000ea8 <__udivmoddi4+0x284>
 8000ed2:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ed6:	eb69 0503 	sbc.w	r5, r9, r3
 8000eda:	3801      	subs	r0, #1
 8000edc:	e7e4      	b.n	8000ea8 <__udivmoddi4+0x284>
 8000ede:	4628      	mov	r0, r5
 8000ee0:	e7d7      	b.n	8000e92 <__udivmoddi4+0x26e>
 8000ee2:	4640      	mov	r0, r8
 8000ee4:	e791      	b.n	8000e0a <__udivmoddi4+0x1e6>
 8000ee6:	4681      	mov	r9, r0
 8000ee8:	e7be      	b.n	8000e68 <__udivmoddi4+0x244>
 8000eea:	4601      	mov	r1, r0
 8000eec:	e778      	b.n	8000de0 <__udivmoddi4+0x1bc>
 8000eee:	3802      	subs	r0, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	e745      	b.n	8000d80 <__udivmoddi4+0x15c>
 8000ef4:	4608      	mov	r0, r1
 8000ef6:	e708      	b.n	8000d0a <__udivmoddi4+0xe6>
 8000ef8:	f1a8 0802 	sub.w	r8, r8, #2
 8000efc:	443d      	add	r5, r7
 8000efe:	e72b      	b.n	8000d58 <__udivmoddi4+0x134>

08000f00 <__aeabi_idiv0>:
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f04:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <HAL_InitTick+0x24>)
{
 8000f08:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000f0a:	6818      	ldr	r0, [r3, #0]
 8000f0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f10:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f14:	f000 f894 	bl	8001040 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	4621      	mov	r1, r4
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f20:	f000 f84e 	bl	8000fc0 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000f24:	2000      	movs	r0, #0
 8000f26:	bd10      	pop	{r4, pc}
 8000f28:	20000010 	.word	0x20000010

08000f2c <HAL_Init>:
{
 8000f2c:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_Init+0x30>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f36:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f3e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f46:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f48:	2003      	movs	r0, #3
 8000f4a:	f000 f827 	bl	8000f9c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f7ff ffd8 	bl	8000f04 <HAL_InitTick>
  HAL_MspInit();
 8000f54:	f001 fcc7 	bl	80028e6 <HAL_MspInit>
}
 8000f58:	2000      	movs	r0, #0
 8000f5a:	bd08      	pop	{r3, pc}
 8000f5c:	40023c00 	.word	0x40023c00

08000f60 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000f60:	4a02      	ldr	r2, [pc, #8]	; (8000f6c <HAL_IncTick+0xc>)
 8000f62:	6813      	ldr	r3, [r2, #0]
 8000f64:	3301      	adds	r3, #1
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	200000c4 	.word	0x200000c4

08000f70 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f70:	4b01      	ldr	r3, [pc, #4]	; (8000f78 <HAL_GetTick+0x8>)
 8000f72:	6818      	ldr	r0, [r3, #0]
}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	200000c4 	.word	0x200000c4

08000f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000f7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000f7e:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f80:	f7ff fff6 	bl	8000f70 <HAL_GetTick>
  uint32_t wait = Delay;
 8000f84:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f86:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000f88:	4605      	mov	r5, r0
  {
     wait++;
 8000f8a:	bf18      	it	ne
 8000f8c:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f8e:	f7ff ffef 	bl	8000f70 <HAL_GetTick>
 8000f92:	1b40      	subs	r0, r0, r5
 8000f94:	42a0      	cmp	r0, r4
 8000f96:	d3fa      	bcc.n	8000f8e <HAL_Delay+0x12>
  {
  }
}
 8000f98:	b003      	add	sp, #12
 8000f9a:	bd30      	pop	{r4, r5, pc}

08000f9c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f9c:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f9e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fa4:	041b      	lsls	r3, r3, #16
 8000fa6:	0c1b      	lsrs	r3, r3, #16
 8000fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000fac:	0200      	lsls	r0, r0, #8
 8000fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000fb6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000fb8:	60d3      	str	r3, [r2, #12]
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc0:	4b17      	ldr	r3, [pc, #92]	; (8001020 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fc2:	b530      	push	{r4, r5, lr}
 8000fc4:	68dc      	ldr	r4, [r3, #12]
 8000fc6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fca:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fce:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd0:	2b04      	cmp	r3, #4
 8000fd2:	bf28      	it	cs
 8000fd4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	f04f 0501 	mov.w	r5, #1
 8000fdc:	fa05 f303 	lsl.w	r3, r5, r3
 8000fe0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe4:	bf8c      	ite	hi
 8000fe6:	3c03      	subhi	r4, #3
 8000fe8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fea:	4019      	ands	r1, r3
 8000fec:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fee:	fa05 f404 	lsl.w	r4, r5, r4
 8000ff2:	3c01      	subs	r4, #1
 8000ff4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000ff6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	ea42 0201 	orr.w	r2, r2, r1
 8000ffc:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001000:	bfaf      	iteee	ge
 8001002:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	f000 000f 	andlt.w	r0, r0, #15
 800100a:	4b06      	ldrlt	r3, [pc, #24]	; (8001024 <HAL_NVIC_SetPriority+0x64>)
 800100c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100e:	bfa5      	ittet	ge
 8001010:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001014:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001016:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001018:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800101c:	bd30      	pop	{r4, r5, pc}
 800101e:	bf00      	nop
 8001020:	e000ed00 	.word	0xe000ed00
 8001024:	e000ed14 	.word	0xe000ed14

08001028 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001028:	0942      	lsrs	r2, r0, #5
 800102a:	2301      	movs	r3, #1
 800102c:	f000 001f 	and.w	r0, r0, #31
 8001030:	fa03 f000 	lsl.w	r0, r3, r0
 8001034:	4b01      	ldr	r3, [pc, #4]	; (800103c <HAL_NVIC_EnableIRQ+0x14>)
 8001036:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800103a:	4770      	bx	lr
 800103c:	e000e100 	.word	0xe000e100

08001040 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001040:	3801      	subs	r0, #1
 8001042:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001046:	d20a      	bcs.n	800105e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104a:	4a07      	ldr	r2, [pc, #28]	; (8001068 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104e:	21f0      	movs	r1, #240	; 0xf0
 8001050:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001054:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001056:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001058:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800105e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000e010 	.word	0xe000e010
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800106e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001070:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001072:	bf0c      	ite	eq
 8001074:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001078:	f022 0204 	bicne.w	r2, r2, #4
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	4770      	bx	lr
 8001080:	e000e010 	.word	0xe000e010

08001084 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001084:	4770      	bx	lr

08001086 <HAL_SYSTICK_IRQHandler>:
{
 8001086:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001088:	f7ff fffc 	bl	8001084 <HAL_SYSTICK_Callback>
 800108c:	bd08      	pop	{r3, pc}
	...

08001090 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001090:	6803      	ldr	r3, [r0, #0]
 8001092:	b2da      	uxtb	r2, r3
 8001094:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001098:	f023 0303 	bic.w	r3, r3, #3
 800109c:	2118      	movs	r1, #24
 800109e:	3a10      	subs	r2, #16
 80010a0:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80010a4:	4904      	ldr	r1, [pc, #16]	; (80010b8 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80010a6:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80010a8:	bf88      	it	hi
 80010aa:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80010ac:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80010ae:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80010b0:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 80010b2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	0800337c 	.word	0x0800337c

080010bc <HAL_DMA_Init>:
{
 80010bc:	b570      	push	{r4, r5, r6, lr}
 80010be:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80010c0:	f7ff ff56 	bl	8000f70 <HAL_GetTick>
 80010c4:	4605      	mov	r5, r0
  if(hdma == NULL)
 80010c6:	2c00      	cmp	r4, #0
 80010c8:	d071      	beq.n	80011ae <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80010ca:	2300      	movs	r3, #0
 80010cc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80010d0:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80010d2:	2302      	movs	r3, #2
 80010d4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80010d8:	6813      	ldr	r3, [r2, #0]
 80010da:	f023 0301 	bic.w	r3, r3, #1
 80010de:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010e0:	6821      	ldr	r1, [r4, #0]
 80010e2:	680b      	ldr	r3, [r1, #0]
 80010e4:	07d8      	lsls	r0, r3, #31
 80010e6:	d43c      	bmi.n	8001162 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 80010e8:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010ea:	4d32      	ldr	r5, [pc, #200]	; (80011b4 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010ec:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ee:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010f0:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010f2:	68a3      	ldr	r3, [r4, #8]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	68e2      	ldr	r2, [r4, #12]
 80010f8:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010fa:	6922      	ldr	r2, [r4, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	6962      	ldr	r2, [r4, #20]
 8001100:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001102:	69e2      	ldr	r2, [r4, #28]
 8001104:	4303      	orrs	r3, r0
 8001106:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001108:	6a22      	ldr	r2, [r4, #32]
 800110a:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800110c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800110e:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001110:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001114:	bf01      	itttt	eq
 8001116:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8001118:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 800111a:	4335      	orreq	r5, r6
 800111c:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 800111e:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8001120:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001122:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001124:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001128:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800112c:	d10b      	bne.n	8001146 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 800112e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001130:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8001132:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001134:	b13d      	cbz	r5, 8001146 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001136:	b9f8      	cbnz	r0, 8001178 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8001138:	2a01      	cmp	r2, #1
 800113a:	d02d      	beq.n	8001198 <HAL_DMA_Init+0xdc>
 800113c:	d301      	bcc.n	8001142 <HAL_DMA_Init+0x86>
 800113e:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001140:	d101      	bne.n	8001146 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001142:	01ea      	lsls	r2, r5, #7
 8001144:	d42b      	bmi.n	800119e <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8001146:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001148:	4620      	mov	r0, r4
 800114a:	f7ff ffa1 	bl	8001090 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800114e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001150:	233f      	movs	r3, #63	; 0x3f
 8001152:	4093      	lsls	r3, r2
 8001154:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001156:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001158:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800115a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800115c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001160:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001162:	f7ff ff05 	bl	8000f70 <HAL_GetTick>
 8001166:	1b40      	subs	r0, r0, r5
 8001168:	2805      	cmp	r0, #5
 800116a:	d9b9      	bls.n	80010e0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800116c:	2320      	movs	r3, #32
 800116e:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001170:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8001172:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001176:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001178:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800117c:	d113      	bne.n	80011a6 <HAL_DMA_Init+0xea>
    switch (tmp)
 800117e:	2a03      	cmp	r2, #3
 8001180:	d8e1      	bhi.n	8001146 <HAL_DMA_Init+0x8a>
 8001182:	a001      	add	r0, pc, #4	; (adr r0, 8001188 <HAL_DMA_Init+0xcc>)
 8001184:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001188:	0800119f 	.word	0x0800119f
 800118c:	08001143 	.word	0x08001143
 8001190:	0800119f 	.word	0x0800119f
 8001194:	08001199 	.word	0x08001199
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001198:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800119c:	d1d3      	bne.n	8001146 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800119e:	2340      	movs	r3, #64	; 0x40
 80011a0:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80011a2:	2001      	movs	r0, #1
 80011a4:	e7e5      	b.n	8001172 <HAL_DMA_Init+0xb6>
    switch (tmp)
 80011a6:	2a02      	cmp	r2, #2
 80011a8:	d9f9      	bls.n	800119e <HAL_DMA_Init+0xe2>
 80011aa:	2a03      	cmp	r2, #3
 80011ac:	e7c8      	b.n	8001140 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 80011ae:	2001      	movs	r0, #1
 80011b0:	bd70      	pop	{r4, r5, r6, pc}
 80011b2:	bf00      	nop
 80011b4:	f010803f 	.word	0xf010803f

080011b8 <HAL_DMA_Start_IT>:
{
 80011b8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80011ba:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80011be:	2c01      	cmp	r4, #1
 80011c0:	d036      	beq.n	8001230 <HAL_DMA_Start_IT+0x78>
 80011c2:	2401      	movs	r4, #1
 80011c4:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80011c8:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011cc:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 80011ce:	2c01      	cmp	r4, #1
 80011d0:	f04f 0500 	mov.w	r5, #0
 80011d4:	f04f 0402 	mov.w	r4, #2
 80011d8:	d128      	bne.n	800122c <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 80011da:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80011de:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011e0:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80011e2:	6825      	ldr	r5, [r4, #0]
 80011e4:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80011e8:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80011ea:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011ec:	6883      	ldr	r3, [r0, #8]
 80011ee:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 80011f0:	bf0e      	itee	eq
 80011f2:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80011f4:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80011f6:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011f8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 80011fa:	bf08      	it	eq
 80011fc:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011fe:	233f      	movs	r3, #63	; 0x3f
 8001200:	4093      	lsls	r3, r2
 8001202:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001204:	6823      	ldr	r3, [r4, #0]
 8001206:	f043 0316 	orr.w	r3, r3, #22
 800120a:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800120c:	6963      	ldr	r3, [r4, #20]
 800120e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001212:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8001214:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001216:	b11b      	cbz	r3, 8001220 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001218:	6823      	ldr	r3, [r4, #0]
 800121a:	f043 0308 	orr.w	r3, r3, #8
 800121e:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001220:	6823      	ldr	r3, [r4, #0]
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001228:	2000      	movs	r0, #0
 800122a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 800122c:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8001230:	2002      	movs	r0, #2
}
 8001232:	bd70      	pop	{r4, r5, r6, pc}

08001234 <HAL_DMA_Abort>:
{
 8001234:	b570      	push	{r4, r5, r6, lr}
 8001236:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001238:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800123a:	f7ff fe99 	bl	8000f70 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800123e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001242:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 8001244:	4606      	mov	r6, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001246:	d006      	beq.n	8001256 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001248:	2380      	movs	r3, #128	; 0x80
 800124a:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800124c:	2300      	movs	r3, #0
 800124e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8001252:	2001      	movs	r0, #1
 8001254:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001256:	6823      	ldr	r3, [r4, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	f022 0216 	bic.w	r2, r2, #22
 800125e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001260:	695a      	ldr	r2, [r3, #20]
 8001262:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001266:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001268:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800126a:	b90a      	cbnz	r2, 8001270 <HAL_DMA_Abort+0x3c>
 800126c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800126e:	b11a      	cbz	r2, 8001278 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	f022 0208 	bic.w	r2, r2, #8
 8001276:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	f022 0201 	bic.w	r2, r2, #1
 800127e:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001280:	6823      	ldr	r3, [r4, #0]
 8001282:	6818      	ldr	r0, [r3, #0]
 8001284:	f010 0001 	ands.w	r0, r0, #1
 8001288:	d109      	bne.n	800129e <HAL_DMA_Abort+0x6a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800128a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800128c:	233f      	movs	r3, #63	; 0x3f
 800128e:	4093      	lsls	r3, r2
 8001290:	60ab      	str	r3, [r5, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8001292:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8001294:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8001298:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800129c:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800129e:	f7ff fe67 	bl	8000f70 <HAL_GetTick>
 80012a2:	1b80      	subs	r0, r0, r6
 80012a4:	2805      	cmp	r0, #5
 80012a6:	d9eb      	bls.n	8001280 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012a8:	2320      	movs	r3, #32
 80012aa:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012ac:	2003      	movs	r0, #3
        __HAL_UNLOCK(hdma);
 80012ae:	2300      	movs	r3, #0
 80012b0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012b4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 80012b8:	bd70      	pop	{r4, r5, r6, pc}

080012ba <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012ba:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d003      	beq.n	80012ca <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012c2:	2380      	movs	r3, #128	; 0x80
 80012c4:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80012c6:	2001      	movs	r0, #1
 80012c8:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80012ca:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80012cc:	2305      	movs	r3, #5
 80012ce:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80012d2:	6813      	ldr	r3, [r2, #0]
 80012d4:	f023 0301 	bic.w	r3, r3, #1
 80012d8:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80012da:	2000      	movs	r0, #0
}
 80012dc:	4770      	bx	lr
	...

080012e0 <HAL_DMA_IRQHandler>:
{
 80012e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80012e6:	4b5a      	ldr	r3, [pc, #360]	; (8001450 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012e8:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80012ea:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012ec:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80012ee:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012f0:	2208      	movs	r2, #8
 80012f2:	409a      	lsls	r2, r3
 80012f4:	4216      	tst	r6, r2
{
 80012f6:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012f8:	d00c      	beq.n	8001314 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80012fa:	6801      	ldr	r1, [r0, #0]
 80012fc:	6808      	ldr	r0, [r1, #0]
 80012fe:	0740      	lsls	r0, r0, #29
 8001300:	d508      	bpl.n	8001314 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001302:	6808      	ldr	r0, [r1, #0]
 8001304:	f020 0004 	bic.w	r0, r0, #4
 8001308:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800130a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800130c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800130e:	f042 0201 	orr.w	r2, r2, #1
 8001312:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001314:	2201      	movs	r2, #1
 8001316:	409a      	lsls	r2, r3
 8001318:	4216      	tst	r6, r2
 800131a:	d008      	beq.n	800132e <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800131c:	6821      	ldr	r1, [r4, #0]
 800131e:	6949      	ldr	r1, [r1, #20]
 8001320:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001322:	bf41      	itttt	mi
 8001324:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001326:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8001328:	f042 0202 	orrmi.w	r2, r2, #2
 800132c:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800132e:	2204      	movs	r2, #4
 8001330:	409a      	lsls	r2, r3
 8001332:	4216      	tst	r6, r2
 8001334:	d008      	beq.n	8001348 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001336:	6821      	ldr	r1, [r4, #0]
 8001338:	6809      	ldr	r1, [r1, #0]
 800133a:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800133c:	bf41      	itttt	mi
 800133e:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001340:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8001342:	f042 0204 	orrmi.w	r2, r2, #4
 8001346:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001348:	2210      	movs	r2, #16
 800134a:	409a      	lsls	r2, r3
 800134c:	4216      	tst	r6, r2
 800134e:	d010      	beq.n	8001372 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001350:	6823      	ldr	r3, [r4, #0]
 8001352:	6819      	ldr	r1, [r3, #0]
 8001354:	0709      	lsls	r1, r1, #28
 8001356:	d50c      	bpl.n	8001372 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001358:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	0350      	lsls	r0, r2, #13
 800135e:	d535      	bpl.n	80013cc <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	0319      	lsls	r1, r3, #12
 8001364:	d401      	bmi.n	800136a <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8001366:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001368:	e000      	b.n	800136c <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800136a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 800136c:	b10b      	cbz	r3, 8001372 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 800136e:	4620      	mov	r0, r4
 8001370:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001372:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001374:	2220      	movs	r2, #32
 8001376:	408a      	lsls	r2, r1
 8001378:	4216      	tst	r6, r2
 800137a:	d038      	beq.n	80013ee <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800137c:	6823      	ldr	r3, [r4, #0]
 800137e:	6818      	ldr	r0, [r3, #0]
 8001380:	06c6      	lsls	r6, r0, #27
 8001382:	d534      	bpl.n	80013ee <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001384:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001386:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800138a:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800138c:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800138e:	d125      	bne.n	80013dc <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001390:	f022 0216 	bic.w	r2, r2, #22
 8001394:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001396:	695a      	ldr	r2, [r3, #20]
 8001398:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800139c:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800139e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80013a0:	b90a      	cbnz	r2, 80013a6 <HAL_DMA_IRQHandler+0xc6>
 80013a2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80013a4:	b11a      	cbz	r2, 80013ae <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	f022 0208 	bic.w	r2, r2, #8
 80013ac:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013ae:	233f      	movs	r3, #63	; 0x3f
 80013b0:	408b      	lsls	r3, r1
 80013b2:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 80013b4:	2300      	movs	r3, #0
 80013b6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80013ba:	2301      	movs	r3, #1
 80013bc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80013c0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 80013c2:	b10b      	cbz	r3, 80013c8 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 80013c4:	4620      	mov	r0, r4
 80013c6:	4798      	blx	r3
}
 80013c8:	b003      	add	sp, #12
 80013ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013d0:	bf5e      	ittt	pl
 80013d2:	681a      	ldrpl	r2, [r3, #0]
 80013d4:	f022 0208 	bicpl.w	r2, r2, #8
 80013d8:	601a      	strpl	r2, [r3, #0]
 80013da:	e7c4      	b.n	8001366 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013dc:	0350      	lsls	r0, r2, #13
 80013de:	d528      	bpl.n	8001432 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	0319      	lsls	r1, r3, #12
 80013e4:	d432      	bmi.n	800144c <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 80013e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80013e8:	b10b      	cbz	r3, 80013ee <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 80013ea:	4620      	mov	r0, r4
 80013ec:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d0e9      	beq.n	80013c8 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80013f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80013f6:	07da      	lsls	r2, r3, #31
 80013f8:	d519      	bpl.n	800142e <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 80013fa:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 80013fc:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80013fe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001402:	6813      	ldr	r3, [r2, #0]
 8001404:	f023 0301 	bic.w	r3, r3, #1
 8001408:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800140a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800140e:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8001412:	9b01      	ldr	r3, [sp, #4]
 8001414:	3301      	adds	r3, #1
 8001416:	429f      	cmp	r7, r3
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	d302      	bcc.n	8001422 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800141c:	6813      	ldr	r3, [r2, #0]
 800141e:	07db      	lsls	r3, r3, #31
 8001420:	d4f7      	bmi.n	8001412 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8001422:	2300      	movs	r3, #0
 8001424:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001428:	2301      	movs	r3, #1
 800142a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800142e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001430:	e7c7      	b.n	80013c2 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8001438:	d108      	bne.n	800144c <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800143a:	6819      	ldr	r1, [r3, #0]
 800143c:	f021 0110 	bic.w	r1, r1, #16
 8001440:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001442:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8001444:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001448:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800144c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800144e:	e7cb      	b.n	80013e8 <HAL_DMA_IRQHandler+0x108>
 8001450:	20000010 	.word	0x20000010

08001454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001458:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800145a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800160c <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001460:	4a68      	ldr	r2, [pc, #416]	; (8001604 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001462:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8001610 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001466:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001468:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800146a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800146e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001470:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001474:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001478:	45b6      	cmp	lr, r6
 800147a:	f040 80ae 	bne.w	80015da <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800147e:	684c      	ldr	r4, [r1, #4]
 8001480:	f024 0710 	bic.w	r7, r4, #16
 8001484:	2f02      	cmp	r7, #2
 8001486:	d116      	bne.n	80014b6 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001488:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800148c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001490:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001494:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001498:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800149c:	f04f 0c0f 	mov.w	ip, #15
 80014a0:	fa0c fc0b 	lsl.w	ip, ip, fp
 80014a4:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014a8:	690d      	ldr	r5, [r1, #16]
 80014aa:	fa05 f50b 	lsl.w	r5, r5, fp
 80014ae:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80014b2:	f8ca 5020 	str.w	r5, [sl, #32]
 80014b6:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ba:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80014bc:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014c0:	fa05 f50a 	lsl.w	r5, r5, sl
 80014c4:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014c6:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ca:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014ce:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014d2:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014d4:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014d8:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80014da:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014de:	d811      	bhi.n	8001504 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80014e0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014e2:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014e6:	68cf      	ldr	r7, [r1, #12]
 80014e8:	fa07 fc0a 	lsl.w	ip, r7, sl
 80014ec:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80014f0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80014f2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014f4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014f8:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80014fc:	409f      	lsls	r7, r3
 80014fe:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001502:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001504:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001506:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001508:	688f      	ldr	r7, [r1, #8]
 800150a:	fa07 f70a 	lsl.w	r7, r7, sl
 800150e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001510:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001512:	00e5      	lsls	r5, r4, #3
 8001514:	d561      	bpl.n	80015da <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001516:	f04f 0b00 	mov.w	fp, #0
 800151a:	f8cd b00c 	str.w	fp, [sp, #12]
 800151e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001522:	4d39      	ldr	r5, [pc, #228]	; (8001608 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001524:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001528:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800152c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001530:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001534:	9703      	str	r7, [sp, #12]
 8001536:	9f03      	ldr	r7, [sp, #12]
 8001538:	f023 0703 	bic.w	r7, r3, #3
 800153c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001540:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001544:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001548:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800154c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001550:	f04f 0e0f 	mov.w	lr, #15
 8001554:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001558:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800155a:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800155e:	d043      	beq.n	80015e8 <HAL_GPIO_Init+0x194>
 8001560:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001564:	42a8      	cmp	r0, r5
 8001566:	d041      	beq.n	80015ec <HAL_GPIO_Init+0x198>
 8001568:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800156c:	42a8      	cmp	r0, r5
 800156e:	d03f      	beq.n	80015f0 <HAL_GPIO_Init+0x19c>
 8001570:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001574:	42a8      	cmp	r0, r5
 8001576:	d03d      	beq.n	80015f4 <HAL_GPIO_Init+0x1a0>
 8001578:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800157c:	42a8      	cmp	r0, r5
 800157e:	d03b      	beq.n	80015f8 <HAL_GPIO_Init+0x1a4>
 8001580:	4548      	cmp	r0, r9
 8001582:	d03b      	beq.n	80015fc <HAL_GPIO_Init+0x1a8>
 8001584:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001588:	42a8      	cmp	r0, r5
 800158a:	d039      	beq.n	8001600 <HAL_GPIO_Init+0x1ac>
 800158c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001590:	42a8      	cmp	r0, r5
 8001592:	bf14      	ite	ne
 8001594:	2508      	movne	r5, #8
 8001596:	2507      	moveq	r5, #7
 8001598:	fa05 f50c 	lsl.w	r5, r5, ip
 800159c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015a0:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80015a2:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80015a4:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015a6:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80015aa:	bf0c      	ite	eq
 80015ac:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80015ae:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80015b0:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80015b2:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015b4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80015b8:	bf0c      	ite	eq
 80015ba:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80015bc:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80015be:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015c0:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015c2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80015c6:	bf0c      	ite	eq
 80015c8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80015ca:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80015cc:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80015ce:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015d0:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80015d2:	bf54      	ite	pl
 80015d4:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80015d6:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80015d8:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015da:	3301      	adds	r3, #1
 80015dc:	2b10      	cmp	r3, #16
 80015de:	f47f af44 	bne.w	800146a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80015e2:	b005      	add	sp, #20
 80015e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015e8:	465d      	mov	r5, fp
 80015ea:	e7d5      	b.n	8001598 <HAL_GPIO_Init+0x144>
 80015ec:	2501      	movs	r5, #1
 80015ee:	e7d3      	b.n	8001598 <HAL_GPIO_Init+0x144>
 80015f0:	2502      	movs	r5, #2
 80015f2:	e7d1      	b.n	8001598 <HAL_GPIO_Init+0x144>
 80015f4:	2503      	movs	r5, #3
 80015f6:	e7cf      	b.n	8001598 <HAL_GPIO_Init+0x144>
 80015f8:	2504      	movs	r5, #4
 80015fa:	e7cd      	b.n	8001598 <HAL_GPIO_Init+0x144>
 80015fc:	2505      	movs	r5, #5
 80015fe:	e7cb      	b.n	8001598 <HAL_GPIO_Init+0x144>
 8001600:	2506      	movs	r5, #6
 8001602:	e7c9      	b.n	8001598 <HAL_GPIO_Init+0x144>
 8001604:	40013c00 	.word	0x40013c00
 8001608:	40020000 	.word	0x40020000
 800160c:	40023800 	.word	0x40023800
 8001610:	40021400 	.word	0x40021400

08001614 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001614:	b10a      	cbz	r2, 800161a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001616:	6181      	str	r1, [r0, #24]
 8001618:	4770      	bx	lr
 800161a:	0409      	lsls	r1, r1, #16
 800161c:	e7fb      	b.n	8001616 <HAL_GPIO_WritePin+0x2>
	...

08001620 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001622:	4604      	mov	r4, r0
 8001624:	b910      	cbnz	r0, 800162c <HAL_RCC_OscConfig+0xc>
  {
    return HAL_ERROR;
 8001626:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001628:	b003      	add	sp, #12
 800162a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800162c:	6803      	ldr	r3, [r0, #0]
 800162e:	07d8      	lsls	r0, r3, #31
 8001630:	d43b      	bmi.n	80016aa <HAL_RCC_OscConfig+0x8a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001632:	6823      	ldr	r3, [r4, #0]
 8001634:	0799      	lsls	r1, r3, #30
 8001636:	f100 8084 	bmi.w	8001742 <HAL_RCC_OscConfig+0x122>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800163a:	6823      	ldr	r3, [r4, #0]
 800163c:	071e      	lsls	r6, r3, #28
 800163e:	f100 80c6 	bmi.w	80017ce <HAL_RCC_OscConfig+0x1ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001642:	6823      	ldr	r3, [r4, #0]
 8001644:	075d      	lsls	r5, r3, #29
 8001646:	d52a      	bpl.n	800169e <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001648:	2300      	movs	r3, #0
 800164a:	9301      	str	r3, [sp, #4]
 800164c:	4baa      	ldr	r3, [pc, #680]	; (80018f8 <HAL_RCC_OscConfig+0x2d8>)
    PWR->CR |= PWR_CR_DBP;
 800164e:	4dab      	ldr	r5, [pc, #684]	; (80018fc <HAL_RCC_OscConfig+0x2dc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001650:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001652:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001656:	641a      	str	r2, [r3, #64]	; 0x40
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165e:	9301      	str	r3, [sp, #4]
 8001660:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001662:	682b      	ldr	r3, [r5, #0]
 8001664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001668:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800166a:	f7ff fc81 	bl	8000f70 <HAL_GetTick>
 800166e:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001670:	682b      	ldr	r3, [r5, #0]
 8001672:	05da      	lsls	r2, r3, #23
 8001674:	f140 80cd 	bpl.w	8001812 <HAL_RCC_OscConfig+0x1f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001678:	68a3      	ldr	r3, [r4, #8]
 800167a:	4d9f      	ldr	r5, [pc, #636]	; (80018f8 <HAL_RCC_OscConfig+0x2d8>)
 800167c:	2b01      	cmp	r3, #1
 800167e:	f040 80cf 	bne.w	8001820 <HAL_RCC_OscConfig+0x200>
 8001682:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800168a:	f7ff fc71 	bl	8000f70 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800168e:	4d9a      	ldr	r5, [pc, #616]	; (80018f8 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8001690:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001692:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001696:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001698:	079b      	lsls	r3, r3, #30
 800169a:	f140 80e2 	bpl.w	8001862 <HAL_RCC_OscConfig+0x242>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800169e:	69a2      	ldr	r2, [r4, #24]
 80016a0:	2a00      	cmp	r2, #0
 80016a2:	f040 80e5 	bne.w	8001870 <HAL_RCC_OscConfig+0x250>
  return HAL_OK;
 80016a6:	2000      	movs	r0, #0
 80016a8:	e7be      	b.n	8001628 <HAL_RCC_OscConfig+0x8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016aa:	4b93      	ldr	r3, [pc, #588]	; (80018f8 <HAL_RCC_OscConfig+0x2d8>)
 80016ac:	689a      	ldr	r2, [r3, #8]
 80016ae:	f002 020c 	and.w	r2, r2, #12
 80016b2:	2a04      	cmp	r2, #4
 80016b4:	d007      	beq.n	80016c6 <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016bc:	2a08      	cmp	r2, #8
 80016be:	d10a      	bne.n	80016d6 <HAL_RCC_OscConfig+0xb6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	025a      	lsls	r2, r3, #9
 80016c4:	d507      	bpl.n	80016d6 <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c6:	4b8c      	ldr	r3, [pc, #560]	; (80018f8 <HAL_RCC_OscConfig+0x2d8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	039b      	lsls	r3, r3, #14
 80016cc:	d5b1      	bpl.n	8001632 <HAL_RCC_OscConfig+0x12>
 80016ce:	6863      	ldr	r3, [r4, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1ae      	bne.n	8001632 <HAL_RCC_OscConfig+0x12>
 80016d4:	e7a7      	b.n	8001626 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d6:	6863      	ldr	r3, [r4, #4]
 80016d8:	4d87      	ldr	r5, [pc, #540]	; (80018f8 <HAL_RCC_OscConfig+0x2d8>)
 80016da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016de:	d111      	bne.n	8001704 <HAL_RCC_OscConfig+0xe4>
 80016e0:	682b      	ldr	r3, [r5, #0]
 80016e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80016e8:	f7ff fc42 	bl	8000f70 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ec:	4d82      	ldr	r5, [pc, #520]	; (80018f8 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 80016ee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f0:	682b      	ldr	r3, [r5, #0]
 80016f2:	039f      	lsls	r7, r3, #14
 80016f4:	d49d      	bmi.n	8001632 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016f6:	f7ff fc3b 	bl	8000f70 <HAL_GetTick>
 80016fa:	1b80      	subs	r0, r0, r6
 80016fc:	2864      	cmp	r0, #100	; 0x64
 80016fe:	d9f7      	bls.n	80016f0 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8001700:	2003      	movs	r0, #3
 8001702:	e791      	b.n	8001628 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001704:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001708:	d104      	bne.n	8001714 <HAL_RCC_OscConfig+0xf4>
 800170a:	682b      	ldr	r3, [r5, #0]
 800170c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001710:	602b      	str	r3, [r5, #0]
 8001712:	e7e5      	b.n	80016e0 <HAL_RCC_OscConfig+0xc0>
 8001714:	682a      	ldr	r2, [r5, #0]
 8001716:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800171a:	602a      	str	r2, [r5, #0]
 800171c:	682a      	ldr	r2, [r5, #0]
 800171e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001722:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1df      	bne.n	80016e8 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 8001728:	f7ff fc22 	bl	8000f70 <HAL_GetTick>
 800172c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800172e:	682b      	ldr	r3, [r5, #0]
 8001730:	0398      	lsls	r0, r3, #14
 8001732:	f57f af7e 	bpl.w	8001632 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001736:	f7ff fc1b 	bl	8000f70 <HAL_GetTick>
 800173a:	1b80      	subs	r0, r0, r6
 800173c:	2864      	cmp	r0, #100	; 0x64
 800173e:	d9f6      	bls.n	800172e <HAL_RCC_OscConfig+0x10e>
 8001740:	e7de      	b.n	8001700 <HAL_RCC_OscConfig+0xe0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001742:	4b6d      	ldr	r3, [pc, #436]	; (80018f8 <HAL_RCC_OscConfig+0x2d8>)
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	f012 0f0c 	tst.w	r2, #12
 800174a:	d007      	beq.n	800175c <HAL_RCC_OscConfig+0x13c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800174c:	689a      	ldr	r2, [r3, #8]
 800174e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001752:	2a08      	cmp	r2, #8
 8001754:	d112      	bne.n	800177c <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	0259      	lsls	r1, r3, #9
 800175a:	d40f      	bmi.n	800177c <HAL_RCC_OscConfig+0x15c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175c:	4b66      	ldr	r3, [pc, #408]	; (80018f8 <HAL_RCC_OscConfig+0x2d8>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	0792      	lsls	r2, r2, #30
 8001762:	d503      	bpl.n	800176c <HAL_RCC_OscConfig+0x14c>
 8001764:	68e2      	ldr	r2, [r4, #12]
 8001766:	2a01      	cmp	r2, #1
 8001768:	f47f af5d 	bne.w	8001626 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	6921      	ldr	r1, [r4, #16]
 8001770:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001774:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001778:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800177a:	e75e      	b.n	800163a <HAL_RCC_OscConfig+0x1a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800177c:	68e2      	ldr	r2, [r4, #12]
 800177e:	4b60      	ldr	r3, [pc, #384]	; (8001900 <HAL_RCC_OscConfig+0x2e0>)
 8001780:	b1b2      	cbz	r2, 80017b0 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 8001782:	2201      	movs	r2, #1
 8001784:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001786:	f7ff fbf3 	bl	8000f70 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178a:	4d5b      	ldr	r5, [pc, #364]	; (80018f8 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 800178c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178e:	682b      	ldr	r3, [r5, #0]
 8001790:	079b      	lsls	r3, r3, #30
 8001792:	d507      	bpl.n	80017a4 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001794:	682b      	ldr	r3, [r5, #0]
 8001796:	6922      	ldr	r2, [r4, #16]
 8001798:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800179c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80017a0:	602b      	str	r3, [r5, #0]
 80017a2:	e74a      	b.n	800163a <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017a4:	f7ff fbe4 	bl	8000f70 <HAL_GetTick>
 80017a8:	1b80      	subs	r0, r0, r6
 80017aa:	2802      	cmp	r0, #2
 80017ac:	d9ef      	bls.n	800178e <HAL_RCC_OscConfig+0x16e>
 80017ae:	e7a7      	b.n	8001700 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 80017b0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017b2:	f7ff fbdd 	bl	8000f70 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b6:	4d50      	ldr	r5, [pc, #320]	; (80018f8 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 80017b8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ba:	682b      	ldr	r3, [r5, #0]
 80017bc:	079f      	lsls	r7, r3, #30
 80017be:	f57f af3c 	bpl.w	800163a <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017c2:	f7ff fbd5 	bl	8000f70 <HAL_GetTick>
 80017c6:	1b80      	subs	r0, r0, r6
 80017c8:	2802      	cmp	r0, #2
 80017ca:	d9f6      	bls.n	80017ba <HAL_RCC_OscConfig+0x19a>
 80017cc:	e798      	b.n	8001700 <HAL_RCC_OscConfig+0xe0>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017ce:	6962      	ldr	r2, [r4, #20]
 80017d0:	4b4c      	ldr	r3, [pc, #304]	; (8001904 <HAL_RCC_OscConfig+0x2e4>)
 80017d2:	b17a      	cbz	r2, 80017f4 <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_LSI_ENABLE();
 80017d4:	2201      	movs	r2, #1
 80017d6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80017d8:	f7ff fbca 	bl	8000f70 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017dc:	4d46      	ldr	r5, [pc, #280]	; (80018f8 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 80017de:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017e0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80017e2:	0798      	lsls	r0, r3, #30
 80017e4:	f53f af2d 	bmi.w	8001642 <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017e8:	f7ff fbc2 	bl	8000f70 <HAL_GetTick>
 80017ec:	1b80      	subs	r0, r0, r6
 80017ee:	2802      	cmp	r0, #2
 80017f0:	d9f6      	bls.n	80017e0 <HAL_RCC_OscConfig+0x1c0>
 80017f2:	e785      	b.n	8001700 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_LSI_DISABLE();
 80017f4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80017f6:	f7ff fbbb 	bl	8000f70 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017fa:	4d3f      	ldr	r5, [pc, #252]	; (80018f8 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 80017fc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017fe:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001800:	0799      	lsls	r1, r3, #30
 8001802:	f57f af1e 	bpl.w	8001642 <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001806:	f7ff fbb3 	bl	8000f70 <HAL_GetTick>
 800180a:	1b80      	subs	r0, r0, r6
 800180c:	2802      	cmp	r0, #2
 800180e:	d9f6      	bls.n	80017fe <HAL_RCC_OscConfig+0x1de>
 8001810:	e776      	b.n	8001700 <HAL_RCC_OscConfig+0xe0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001812:	f7ff fbad 	bl	8000f70 <HAL_GetTick>
 8001816:	1b80      	subs	r0, r0, r6
 8001818:	2802      	cmp	r0, #2
 800181a:	f67f af29 	bls.w	8001670 <HAL_RCC_OscConfig+0x50>
 800181e:	e76f      	b.n	8001700 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001820:	2b05      	cmp	r3, #5
 8001822:	d104      	bne.n	800182e <HAL_RCC_OscConfig+0x20e>
 8001824:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001826:	f043 0304 	orr.w	r3, r3, #4
 800182a:	672b      	str	r3, [r5, #112]	; 0x70
 800182c:	e729      	b.n	8001682 <HAL_RCC_OscConfig+0x62>
 800182e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001830:	f022 0201 	bic.w	r2, r2, #1
 8001834:	672a      	str	r2, [r5, #112]	; 0x70
 8001836:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001838:	f022 0204 	bic.w	r2, r2, #4
 800183c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800183e:	2b00      	cmp	r3, #0
 8001840:	f47f af23 	bne.w	800168a <HAL_RCC_OscConfig+0x6a>
      tickstart = HAL_GetTick();
 8001844:	f7ff fb94 	bl	8000f70 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001848:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800184c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800184e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001850:	0798      	lsls	r0, r3, #30
 8001852:	f57f af24 	bpl.w	800169e <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001856:	f7ff fb8b 	bl	8000f70 <HAL_GetTick>
 800185a:	1b80      	subs	r0, r0, r6
 800185c:	42b8      	cmp	r0, r7
 800185e:	d9f6      	bls.n	800184e <HAL_RCC_OscConfig+0x22e>
 8001860:	e74e      	b.n	8001700 <HAL_RCC_OscConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001862:	f7ff fb85 	bl	8000f70 <HAL_GetTick>
 8001866:	1b80      	subs	r0, r0, r6
 8001868:	42b8      	cmp	r0, r7
 800186a:	f67f af14 	bls.w	8001696 <HAL_RCC_OscConfig+0x76>
 800186e:	e747      	b.n	8001700 <HAL_RCC_OscConfig+0xe0>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001870:	4d21      	ldr	r5, [pc, #132]	; (80018f8 <HAL_RCC_OscConfig+0x2d8>)
 8001872:	68ab      	ldr	r3, [r5, #8]
 8001874:	f003 030c 	and.w	r3, r3, #12
 8001878:	2b08      	cmp	r3, #8
 800187a:	f43f aed4 	beq.w	8001626 <HAL_RCC_OscConfig+0x6>
 800187e:	4e22      	ldr	r6, [pc, #136]	; (8001908 <HAL_RCC_OscConfig+0x2e8>)
 8001880:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001882:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001884:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001886:	d12a      	bne.n	80018de <HAL_RCC_OscConfig+0x2be>
        tickstart = HAL_GetTick();
 8001888:	f7ff fb72 	bl	8000f70 <HAL_GetTick>
 800188c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188e:	682b      	ldr	r3, [r5, #0]
 8001890:	0199      	lsls	r1, r3, #6
 8001892:	d41e      	bmi.n	80018d2 <HAL_RCC_OscConfig+0x2b2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001894:	6a22      	ldr	r2, [r4, #32]
 8001896:	69e3      	ldr	r3, [r4, #28]
 8001898:	4313      	orrs	r3, r2
 800189a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800189c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80018a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80018a2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80018a6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a8:	4c13      	ldr	r4, [pc, #76]	; (80018f8 <HAL_RCC_OscConfig+0x2d8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018aa:	0852      	lsrs	r2, r2, #1
 80018ac:	3a01      	subs	r2, #1
 80018ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80018b2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80018b4:	2301      	movs	r3, #1
 80018b6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80018b8:	f7ff fb5a 	bl	8000f70 <HAL_GetTick>
 80018bc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018be:	6823      	ldr	r3, [r4, #0]
 80018c0:	019a      	lsls	r2, r3, #6
 80018c2:	f53f aef0 	bmi.w	80016a6 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c6:	f7ff fb53 	bl	8000f70 <HAL_GetTick>
 80018ca:	1b40      	subs	r0, r0, r5
 80018cc:	2802      	cmp	r0, #2
 80018ce:	d9f6      	bls.n	80018be <HAL_RCC_OscConfig+0x29e>
 80018d0:	e716      	b.n	8001700 <HAL_RCC_OscConfig+0xe0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d2:	f7ff fb4d 	bl	8000f70 <HAL_GetTick>
 80018d6:	1bc0      	subs	r0, r0, r7
 80018d8:	2802      	cmp	r0, #2
 80018da:	d9d8      	bls.n	800188e <HAL_RCC_OscConfig+0x26e>
 80018dc:	e710      	b.n	8001700 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 80018de:	f7ff fb47 	bl	8000f70 <HAL_GetTick>
 80018e2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018e4:	682b      	ldr	r3, [r5, #0]
 80018e6:	019b      	lsls	r3, r3, #6
 80018e8:	f57f aedd 	bpl.w	80016a6 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ec:	f7ff fb40 	bl	8000f70 <HAL_GetTick>
 80018f0:	1b00      	subs	r0, r0, r4
 80018f2:	2802      	cmp	r0, #2
 80018f4:	d9f6      	bls.n	80018e4 <HAL_RCC_OscConfig+0x2c4>
 80018f6:	e703      	b.n	8001700 <HAL_RCC_OscConfig+0xe0>
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40007000 	.word	0x40007000
 8001900:	42470000 	.word	0x42470000
 8001904:	42470e80 	.word	0x42470e80
 8001908:	42470060 	.word	0x42470060

0800190c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800190c:	4913      	ldr	r1, [pc, #76]	; (800195c <HAL_RCC_GetSysClockFreq+0x50>)
{
 800190e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001910:	688b      	ldr	r3, [r1, #8]
 8001912:	f003 030c 	and.w	r3, r3, #12
 8001916:	2b04      	cmp	r3, #4
 8001918:	d003      	beq.n	8001922 <HAL_RCC_GetSysClockFreq+0x16>
 800191a:	2b08      	cmp	r3, #8
 800191c:	d003      	beq.n	8001926 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800191e:	4810      	ldr	r0, [pc, #64]	; (8001960 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001920:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001922:	4810      	ldr	r0, [pc, #64]	; (8001964 <HAL_RCC_GetSysClockFreq+0x58>)
 8001924:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001926:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001928:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800192a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800192c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001930:	bf14      	ite	ne
 8001932:	480c      	ldrne	r0, [pc, #48]	; (8001964 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001934:	480a      	ldreq	r0, [pc, #40]	; (8001960 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001936:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800193a:	bf18      	it	ne
 800193c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800193e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001942:	fba1 0100 	umull	r0, r1, r1, r0
 8001946:	f7ff f955 	bl	8000bf4 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800194a:	4b04      	ldr	r3, [pc, #16]	; (800195c <HAL_RCC_GetSysClockFreq+0x50>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001952:	3301      	adds	r3, #1
 8001954:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001956:	fbb0 f0f3 	udiv	r0, r0, r3
 800195a:	bd08      	pop	{r3, pc}
 800195c:	40023800 	.word	0x40023800
 8001960:	00f42400 	.word	0x00f42400
 8001964:	017d7840 	.word	0x017d7840

08001968 <HAL_RCC_ClockConfig>:
{
 8001968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800196c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800196e:	4604      	mov	r4, r0
 8001970:	b910      	cbnz	r0, 8001978 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001972:	2001      	movs	r0, #1
 8001974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001978:	4b44      	ldr	r3, [pc, #272]	; (8001a8c <HAL_RCC_ClockConfig+0x124>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	f002 020f 	and.w	r2, r2, #15
 8001980:	428a      	cmp	r2, r1
 8001982:	d328      	bcc.n	80019d6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001984:	6821      	ldr	r1, [r4, #0]
 8001986:	078f      	lsls	r7, r1, #30
 8001988:	d42d      	bmi.n	80019e6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800198a:	07c8      	lsls	r0, r1, #31
 800198c:	d440      	bmi.n	8001a10 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800198e:	4b3f      	ldr	r3, [pc, #252]	; (8001a8c <HAL_RCC_ClockConfig+0x124>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	f002 020f 	and.w	r2, r2, #15
 8001996:	4295      	cmp	r5, r2
 8001998:	d366      	bcc.n	8001a68 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800199a:	6822      	ldr	r2, [r4, #0]
 800199c:	0751      	lsls	r1, r2, #29
 800199e:	d46c      	bmi.n	8001a7a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a0:	0713      	lsls	r3, r2, #28
 80019a2:	d507      	bpl.n	80019b4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019a4:	4a3a      	ldr	r2, [pc, #232]	; (8001a90 <HAL_RCC_ClockConfig+0x128>)
 80019a6:	6921      	ldr	r1, [r4, #16]
 80019a8:	6893      	ldr	r3, [r2, #8]
 80019aa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80019ae:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80019b2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019b4:	f7ff ffaa 	bl	800190c <HAL_RCC_GetSysClockFreq>
 80019b8:	4b35      	ldr	r3, [pc, #212]	; (8001a90 <HAL_RCC_ClockConfig+0x128>)
 80019ba:	4a36      	ldr	r2, [pc, #216]	; (8001a94 <HAL_RCC_ClockConfig+0x12c>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80019c2:	5cd3      	ldrb	r3, [r2, r3]
 80019c4:	40d8      	lsrs	r0, r3
 80019c6:	4b34      	ldr	r3, [pc, #208]	; (8001a98 <HAL_RCC_ClockConfig+0x130>)
 80019c8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80019ca:	2000      	movs	r0, #0
 80019cc:	f7ff fa9a 	bl	8000f04 <HAL_InitTick>
  return HAL_OK;
 80019d0:	2000      	movs	r0, #0
 80019d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d6:	b2ca      	uxtb	r2, r1
 80019d8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 030f 	and.w	r3, r3, #15
 80019e0:	4299      	cmp	r1, r3
 80019e2:	d1c6      	bne.n	8001972 <HAL_RCC_ClockConfig+0xa>
 80019e4:	e7ce      	b.n	8001984 <HAL_RCC_ClockConfig+0x1c>
 80019e6:	4b2a      	ldr	r3, [pc, #168]	; (8001a90 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019ec:	bf1e      	ittt	ne
 80019ee:	689a      	ldrne	r2, [r3, #8]
 80019f0:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80019f4:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f6:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019f8:	bf42      	ittt	mi
 80019fa:	689a      	ldrmi	r2, [r3, #8]
 80019fc:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001a00:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	68a0      	ldr	r0, [r4, #8]
 8001a06:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001a0a:	4302      	orrs	r2, r0
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	e7bc      	b.n	800198a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a10:	6862      	ldr	r2, [r4, #4]
 8001a12:	4b1f      	ldr	r3, [pc, #124]	; (8001a90 <HAL_RCC_ClockConfig+0x128>)
 8001a14:	2a01      	cmp	r2, #1
 8001a16:	d11d      	bne.n	8001a54 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1e:	d0a8      	beq.n	8001972 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a20:	4e1b      	ldr	r6, [pc, #108]	; (8001a90 <HAL_RCC_ClockConfig+0x128>)
 8001a22:	68b3      	ldr	r3, [r6, #8]
 8001a24:	f023 0303 	bic.w	r3, r3, #3
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001a2c:	f7ff faa0 	bl	8000f70 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a30:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001a34:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a36:	68b3      	ldr	r3, [r6, #8]
 8001a38:	6862      	ldr	r2, [r4, #4]
 8001a3a:	f003 030c 	and.w	r3, r3, #12
 8001a3e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001a42:	d0a4      	beq.n	800198e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a44:	f7ff fa94 	bl	8000f70 <HAL_GetTick>
 8001a48:	1bc0      	subs	r0, r0, r7
 8001a4a:	4540      	cmp	r0, r8
 8001a4c:	d9f3      	bls.n	8001a36 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001a4e:	2003      	movs	r0, #3
}
 8001a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a54:	1e91      	subs	r1, r2, #2
 8001a56:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a58:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a5a:	d802      	bhi.n	8001a62 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a5c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001a60:	e7dd      	b.n	8001a1e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a62:	f013 0f02 	tst.w	r3, #2
 8001a66:	e7da      	b.n	8001a1e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a68:	b2ea      	uxtb	r2, r5
 8001a6a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	429d      	cmp	r5, r3
 8001a74:	f47f af7d 	bne.w	8001972 <HAL_RCC_ClockConfig+0xa>
 8001a78:	e78f      	b.n	800199a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a7a:	4905      	ldr	r1, [pc, #20]	; (8001a90 <HAL_RCC_ClockConfig+0x128>)
 8001a7c:	68e0      	ldr	r0, [r4, #12]
 8001a7e:	688b      	ldr	r3, [r1, #8]
 8001a80:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001a84:	4303      	orrs	r3, r0
 8001a86:	608b      	str	r3, [r1, #8]
 8001a88:	e78a      	b.n	80019a0 <HAL_RCC_ClockConfig+0x38>
 8001a8a:	bf00      	nop
 8001a8c:	40023c00 	.word	0x40023c00
 8001a90:	40023800 	.word	0x40023800
 8001a94:	080033ab 	.word	0x080033ab
 8001a98:	20000010 	.word	0x20000010

08001a9c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001a9c:	4b01      	ldr	r3, [pc, #4]	; (8001aa4 <HAL_RCC_GetHCLKFreq+0x8>)
 8001a9e:	6818      	ldr	r0, [r3, #0]
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	20000010 	.word	0x20000010

08001aa8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001aa8:	4b04      	ldr	r3, [pc, #16]	; (8001abc <HAL_RCC_GetPCLK1Freq+0x14>)
 8001aaa:	4a05      	ldr	r2, [pc, #20]	; (8001ac0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001ab2:	5cd3      	ldrb	r3, [r2, r3]
 8001ab4:	4a03      	ldr	r2, [pc, #12]	; (8001ac4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001ab6:	6810      	ldr	r0, [r2, #0]
}
 8001ab8:	40d8      	lsrs	r0, r3
 8001aba:	4770      	bx	lr
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	080033bb 	.word	0x080033bb
 8001ac4:	20000010 	.word	0x20000010

08001ac8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ac8:	4b04      	ldr	r3, [pc, #16]	; (8001adc <HAL_RCC_GetPCLK2Freq+0x14>)
 8001aca:	4a05      	ldr	r2, [pc, #20]	; (8001ae0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001ad2:	5cd3      	ldrb	r3, [r2, r3]
 8001ad4:	4a03      	ldr	r2, [pc, #12]	; (8001ae4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001ad6:	6810      	ldr	r0, [r2, #0]
}
 8001ad8:	40d8      	lsrs	r0, r3
 8001ada:	4770      	bx	lr
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	080033bb 	.word	0x080033bb
 8001ae4:	20000010 	.word	0x20000010

08001ae8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ae8:	230f      	movs	r3, #15
 8001aea:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001aec:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <HAL_RCC_GetClockConfig+0x34>)
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	f002 0203 	and.w	r2, r2, #3
 8001af4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001afc:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001b04:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	08db      	lsrs	r3, r3, #3
 8001b0a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001b0e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b10:	4b03      	ldr	r3, [pc, #12]	; (8001b20 <HAL_RCC_GetClockConfig+0x38>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 030f 	and.w	r3, r3, #15
 8001b18:	600b      	str	r3, [r1, #0]
 8001b1a:	4770      	bx	lr
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40023c00 	.word	0x40023c00

08001b24 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b24:	6803      	ldr	r3, [r0, #0]
 8001b26:	68da      	ldr	r2, [r3, #12]
 8001b28:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001b2c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b2e:	695a      	ldr	r2, [r3, #20]
 8001b30:	f022 0201 	bic.w	r2, r2, #1
 8001b34:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001b36:	2320      	movs	r3, #32
 8001b38:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001b3c:	4770      	bx	lr
	...

08001b40 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001b44:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001b46:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8001b48:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b4a:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001b4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001b50:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001b52:	6133      	str	r3, [r6, #16]
{
 8001b54:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b56:	6883      	ldr	r3, [r0, #8]
 8001b58:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8001b5a:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b5c:	4303      	orrs	r3, r0
 8001b5e:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001b60:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b64:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001b66:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b6a:	430b      	orrs	r3, r1
 8001b6c:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001b6e:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001b70:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001b72:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001b74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001b78:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b7a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001b7e:	6173      	str	r3, [r6, #20]
 8001b80:	4b7a      	ldr	r3, [pc, #488]	; (8001d6c <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b82:	d17c      	bne.n	8001c7e <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001b84:	429e      	cmp	r6, r3
 8001b86:	d003      	beq.n	8001b90 <UART_SetConfig+0x50>
 8001b88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b8c:	429e      	cmp	r6, r3
 8001b8e:	d144      	bne.n	8001c1a <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001b90:	f7ff ff9a 	bl	8001ac8 <HAL_RCC_GetPCLK2Freq>
 8001b94:	2519      	movs	r5, #25
 8001b96:	fb05 f300 	mul.w	r3, r5, r0
 8001b9a:	6860      	ldr	r0, [r4, #4]
 8001b9c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001ba0:	0040      	lsls	r0, r0, #1
 8001ba2:	fbb3 f3f0 	udiv	r3, r3, r0
 8001ba6:	fbb3 f3f9 	udiv	r3, r3, r9
 8001baa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001bae:	f7ff ff8b 	bl	8001ac8 <HAL_RCC_GetPCLK2Freq>
 8001bb2:	6863      	ldr	r3, [r4, #4]
 8001bb4:	4368      	muls	r0, r5
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	fbb0 f7f3 	udiv	r7, r0, r3
 8001bbc:	f7ff ff84 	bl	8001ac8 <HAL_RCC_GetPCLK2Freq>
 8001bc0:	6863      	ldr	r3, [r4, #4]
 8001bc2:	4368      	muls	r0, r5
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bca:	fbb3 f3f9 	udiv	r3, r3, r9
 8001bce:	fb09 7313 	mls	r3, r9, r3, r7
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	3332      	adds	r3, #50	; 0x32
 8001bd6:	fbb3 f3f9 	udiv	r3, r3, r9
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001be0:	f7ff ff72 	bl	8001ac8 <HAL_RCC_GetPCLK2Freq>
 8001be4:	6862      	ldr	r2, [r4, #4]
 8001be6:	4368      	muls	r0, r5
 8001be8:	0052      	lsls	r2, r2, #1
 8001bea:	fbb0 faf2 	udiv	sl, r0, r2
 8001bee:	f7ff ff6b 	bl	8001ac8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001bf2:	6863      	ldr	r3, [r4, #4]
 8001bf4:	4368      	muls	r0, r5
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bfc:	fbb3 f3f9 	udiv	r3, r3, r9
 8001c00:	fb09 a313 	mls	r3, r9, r3, sl
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	3332      	adds	r3, #50	; 0x32
 8001c08:	fbb3 f3f9 	udiv	r3, r3, r9
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001c12:	443b      	add	r3, r7
 8001c14:	60b3      	str	r3, [r6, #8]
 8001c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001c1a:	f7ff ff45 	bl	8001aa8 <HAL_RCC_GetPCLK1Freq>
 8001c1e:	2519      	movs	r5, #25
 8001c20:	fb05 f300 	mul.w	r3, r5, r0
 8001c24:	6860      	ldr	r0, [r4, #4]
 8001c26:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001c2a:	0040      	lsls	r0, r0, #1
 8001c2c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001c30:	fbb3 f3f9 	udiv	r3, r3, r9
 8001c34:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001c38:	f7ff ff36 	bl	8001aa8 <HAL_RCC_GetPCLK1Freq>
 8001c3c:	6863      	ldr	r3, [r4, #4]
 8001c3e:	4368      	muls	r0, r5
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	fbb0 f7f3 	udiv	r7, r0, r3
 8001c46:	f7ff ff2f 	bl	8001aa8 <HAL_RCC_GetPCLK1Freq>
 8001c4a:	6863      	ldr	r3, [r4, #4]
 8001c4c:	4368      	muls	r0, r5
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c54:	fbb3 f3f9 	udiv	r3, r3, r9
 8001c58:	fb09 7313 	mls	r3, r9, r3, r7
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	3332      	adds	r3, #50	; 0x32
 8001c60:	fbb3 f3f9 	udiv	r3, r3, r9
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001c6a:	f7ff ff1d 	bl	8001aa8 <HAL_RCC_GetPCLK1Freq>
 8001c6e:	6862      	ldr	r2, [r4, #4]
 8001c70:	4368      	muls	r0, r5
 8001c72:	0052      	lsls	r2, r2, #1
 8001c74:	fbb0 faf2 	udiv	sl, r0, r2
 8001c78:	f7ff ff16 	bl	8001aa8 <HAL_RCC_GetPCLK1Freq>
 8001c7c:	e7b9      	b.n	8001bf2 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c7e:	429e      	cmp	r6, r3
 8001c80:	d002      	beq.n	8001c88 <UART_SetConfig+0x148>
 8001c82:	4b3b      	ldr	r3, [pc, #236]	; (8001d70 <UART_SetConfig+0x230>)
 8001c84:	429e      	cmp	r6, r3
 8001c86:	d140      	bne.n	8001d0a <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001c88:	f7ff ff1e 	bl	8001ac8 <HAL_RCC_GetPCLK2Freq>
 8001c8c:	6867      	ldr	r7, [r4, #4]
 8001c8e:	2519      	movs	r5, #25
 8001c90:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001c94:	fb05 f300 	mul.w	r3, r5, r0
 8001c98:	00bf      	lsls	r7, r7, #2
 8001c9a:	fbb3 f3f7 	udiv	r3, r3, r7
 8001c9e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ca2:	011f      	lsls	r7, r3, #4
 8001ca4:	f7ff ff10 	bl	8001ac8 <HAL_RCC_GetPCLK2Freq>
 8001ca8:	6863      	ldr	r3, [r4, #4]
 8001caa:	4368      	muls	r0, r5
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	fbb0 f8f3 	udiv	r8, r0, r3
 8001cb2:	f7ff ff09 	bl	8001ac8 <HAL_RCC_GetPCLK2Freq>
 8001cb6:	6863      	ldr	r3, [r4, #4]
 8001cb8:	4368      	muls	r0, r5
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cc0:	fbb3 f3f9 	udiv	r3, r3, r9
 8001cc4:	fb09 8313 	mls	r3, r9, r3, r8
 8001cc8:	011b      	lsls	r3, r3, #4
 8001cca:	3332      	adds	r3, #50	; 0x32
 8001ccc:	fbb3 f3f9 	udiv	r3, r3, r9
 8001cd0:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001cd4:	f7ff fef8 	bl	8001ac8 <HAL_RCC_GetPCLK2Freq>
 8001cd8:	6862      	ldr	r2, [r4, #4]
 8001cda:	4368      	muls	r0, r5
 8001cdc:	0092      	lsls	r2, r2, #2
 8001cde:	fbb0 faf2 	udiv	sl, r0, r2
 8001ce2:	f7ff fef1 	bl	8001ac8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001ce6:	6863      	ldr	r3, [r4, #4]
 8001ce8:	4368      	muls	r0, r5
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cf0:	fbb3 f3f9 	udiv	r3, r3, r9
 8001cf4:	fb09 a313 	mls	r3, r9, r3, sl
 8001cf8:	011b      	lsls	r3, r3, #4
 8001cfa:	3332      	adds	r3, #50	; 0x32
 8001cfc:	fbb3 f3f9 	udiv	r3, r3, r9
 8001d00:	f003 030f 	and.w	r3, r3, #15
 8001d04:	ea43 0308 	orr.w	r3, r3, r8
 8001d08:	e783      	b.n	8001c12 <UART_SetConfig+0xd2>
 8001d0a:	f7ff fecd 	bl	8001aa8 <HAL_RCC_GetPCLK1Freq>
 8001d0e:	6867      	ldr	r7, [r4, #4]
 8001d10:	2519      	movs	r5, #25
 8001d12:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001d16:	fb05 f300 	mul.w	r3, r5, r0
 8001d1a:	00bf      	lsls	r7, r7, #2
 8001d1c:	fbb3 f3f7 	udiv	r3, r3, r7
 8001d20:	fbb3 f3f9 	udiv	r3, r3, r9
 8001d24:	011f      	lsls	r7, r3, #4
 8001d26:	f7ff febf 	bl	8001aa8 <HAL_RCC_GetPCLK1Freq>
 8001d2a:	6863      	ldr	r3, [r4, #4]
 8001d2c:	4368      	muls	r0, r5
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	fbb0 f8f3 	udiv	r8, r0, r3
 8001d34:	f7ff feb8 	bl	8001aa8 <HAL_RCC_GetPCLK1Freq>
 8001d38:	6863      	ldr	r3, [r4, #4]
 8001d3a:	4368      	muls	r0, r5
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d42:	fbb3 f3f9 	udiv	r3, r3, r9
 8001d46:	fb09 8313 	mls	r3, r9, r3, r8
 8001d4a:	011b      	lsls	r3, r3, #4
 8001d4c:	3332      	adds	r3, #50	; 0x32
 8001d4e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001d52:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001d56:	f7ff fea7 	bl	8001aa8 <HAL_RCC_GetPCLK1Freq>
 8001d5a:	6862      	ldr	r2, [r4, #4]
 8001d5c:	4368      	muls	r0, r5
 8001d5e:	0092      	lsls	r2, r2, #2
 8001d60:	fbb0 faf2 	udiv	sl, r0, r2
 8001d64:	f7ff fea0 	bl	8001aa8 <HAL_RCC_GetPCLK1Freq>
 8001d68:	e7bd      	b.n	8001ce6 <UART_SetConfig+0x1a6>
 8001d6a:	bf00      	nop
 8001d6c:	40011000 	.word	0x40011000
 8001d70:	40011400 	.word	0x40011400

08001d74 <HAL_UART_Init>:
{
 8001d74:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001d76:	4604      	mov	r4, r0
 8001d78:	b340      	cbz	r0, 8001dcc <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001d7a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001d7e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d82:	b91b      	cbnz	r3, 8001d8c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001d84:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001d88:	f000 fdde 	bl	8002948 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001d8c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001d8e:	2324      	movs	r3, #36	; 0x24
 8001d90:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001d94:	68d3      	ldr	r3, [r2, #12]
 8001d96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d9a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	f7ff fecf 	bl	8001b40 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001da2:	6823      	ldr	r3, [r4, #0]
 8001da4:	691a      	ldr	r2, [r3, #16]
 8001da6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001daa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dac:	695a      	ldr	r2, [r3, #20]
 8001dae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001db2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dba:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dbc:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001dbe:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dc0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001dc2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001dc6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001dca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001dcc:	2001      	movs	r0, #1
}
 8001dce:	bd10      	pop	{r4, pc}

08001dd0 <HAL_UART_Receive_DMA>:
{  
 8001dd0:	4613      	mov	r3, r2
  if(huart->RxState == HAL_UART_STATE_READY) 
 8001dd2:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 8001dd6:	2a20      	cmp	r2, #32
{  
 8001dd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001dda:	4605      	mov	r5, r0
  if(huart->RxState == HAL_UART_STATE_READY) 
 8001ddc:	d138      	bne.n	8001e50 <HAL_UART_Receive_DMA+0x80>
    if((pData == NULL ) || (Size == 0)) 
 8001dde:	2900      	cmp	r1, #0
 8001de0:	d034      	beq.n	8001e4c <HAL_UART_Receive_DMA+0x7c>
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d032      	beq.n	8001e4c <HAL_UART_Receive_DMA+0x7c>
    __HAL_LOCK(huart);
 8001de6:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8001dea:	2a01      	cmp	r2, #1
 8001dec:	d030      	beq.n	8001e50 <HAL_UART_Receive_DMA+0x80>
 8001dee:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001df0:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 8001df2:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001df6:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001df8:	63c4      	str	r4, [r0, #60]	; 0x3c
    huart->pRxBuffPtr = pData;
 8001dfa:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8001dfc:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001dfe:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001e02:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001e04:	4a13      	ldr	r2, [pc, #76]	; (8001e54 <HAL_UART_Receive_DMA+0x84>)
 8001e06:	63c2      	str	r2, [r0, #60]	; 0x3c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8001e08:	682e      	ldr	r6, [r5, #0]
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001e0a:	4a13      	ldr	r2, [pc, #76]	; (8001e58 <HAL_UART_Receive_DMA+0x88>)
 8001e0c:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001e0e:	4a13      	ldr	r2, [pc, #76]	; (8001e5c <HAL_UART_Receive_DMA+0x8c>)
 8001e10:	64c2      	str	r2, [r0, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 8001e12:	6504      	str	r4, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8001e14:	460a      	mov	r2, r1
 8001e16:	1d31      	adds	r1, r6, #4
 8001e18:	f7ff f9ce 	bl	80011b8 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 8001e1c:	682b      	ldr	r3, [r5, #0]
 8001e1e:	9401      	str	r4, [sp, #4]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	9201      	str	r2, [sp, #4]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	9201      	str	r2, [sp, #4]
 8001e28:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e2a:	68da      	ldr	r2, [r3, #12]
    __HAL_UNLOCK(huart);
 8001e2c:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e34:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e36:	695a      	ldr	r2, [r3, #20]
 8001e38:	f042 0201 	orr.w	r2, r2, #1
 8001e3c:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e3e:	695a      	ldr	r2, [r3, #20]
 8001e40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e44:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8001e46:	4620      	mov	r0, r4
}
 8001e48:	b002      	add	sp, #8
 8001e4a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	e7fb      	b.n	8001e48 <HAL_UART_Receive_DMA+0x78>
    return HAL_BUSY; 
 8001e50:	2002      	movs	r0, #2
 8001e52:	e7f9      	b.n	8001e48 <HAL_UART_Receive_DMA+0x78>
 8001e54:	08001e9f 	.word	0x08001e9f
 8001e58:	08001f4b 	.word	0x08001f4b
 8001e5c:	08001f57 	.word	0x08001f57

08001e60 <HAL_UART_AbortReceive>:
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e60:	6803      	ldr	r3, [r0, #0]
 8001e62:	68da      	ldr	r2, [r3, #12]
 8001e64:	f422 7290 	bic.w	r2, r2, #288	; 0x120
{
 8001e68:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e6a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e6c:	695a      	ldr	r2, [r3, #20]
 8001e6e:	f022 0201 	bic.w	r2, r2, #1
 8001e72:	615a      	str	r2, [r3, #20]
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e74:	695a      	ldr	r2, [r3, #20]
 8001e76:	0652      	lsls	r2, r2, #25
{
 8001e78:	4604      	mov	r4, r0
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e7a:	d509      	bpl.n	8001e90 <HAL_UART_AbortReceive+0x30>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e7c:	695a      	ldr	r2, [r3, #20]
    if(huart->hdmarx != NULL)
 8001e7e:	6b40      	ldr	r0, [r0, #52]	; 0x34
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e84:	615a      	str	r2, [r3, #20]
    if(huart->hdmarx != NULL)
 8001e86:	b118      	cbz	r0, 8001e90 <HAL_UART_AbortReceive+0x30>
      huart->hdmarx->XferAbortCallback = NULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	6503      	str	r3, [r0, #80]	; 0x50
      HAL_DMA_Abort(huart->hdmarx);
 8001e8c:	f7ff f9d2 	bl	8001234 <HAL_DMA_Abort>
  huart->RxXferCount = 0x00U;
 8001e90:	2000      	movs	r0, #0
  huart->RxState = HAL_UART_STATE_READY;
 8001e92:	2320      	movs	r3, #32
  huart->RxXferCount = 0x00U;
 8001e94:	85e0      	strh	r0, [r4, #46]	; 0x2e
  huart->RxState = HAL_UART_STATE_READY;
 8001e96:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8001e9a:	bd10      	pop	{r4, pc}

08001e9c <HAL_UART_TxCpltCallback>:
 8001e9c:	4770      	bx	lr

08001e9e <UART_DMAReceiveCplt>:
{
 8001e9e:	b508      	push	{r3, lr}
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8001ea0:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ea2:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8001eaa:	d110      	bne.n	8001ece <UART_DMAReceiveCplt+0x30>
    huart->RxXferCount = 0U;
 8001eac:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001eae:	6813      	ldr	r3, [r2, #0]
 8001eb0:	68d9      	ldr	r1, [r3, #12]
 8001eb2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001eb6:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001eb8:	6959      	ldr	r1, [r3, #20]
 8001eba:	f021 0101 	bic.w	r1, r1, #1
 8001ebe:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ec0:	6959      	ldr	r1, [r3, #20]
 8001ec2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8001ec6:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8001ec8:	2320      	movs	r3, #32
 8001eca:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8001ece:	4610      	mov	r0, r2
 8001ed0:	f000 fb22 	bl	8002518 <HAL_UART_RxCpltCallback>
 8001ed4:	bd08      	pop	{r3, pc}

08001ed6 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001ed6:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001eda:	2b22      	cmp	r3, #34	; 0x22
{
 8001edc:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001ede:	d132      	bne.n	8001f46 <UART_Receive_IT+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ee0:	6883      	ldr	r3, [r0, #8]
 8001ee2:	6901      	ldr	r1, [r0, #16]
 8001ee4:	6802      	ldr	r2, [r0, #0]
 8001ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001eec:	d11f      	bne.n	8001f2e <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001eee:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001ef0:	b9c9      	cbnz	r1, 8001f26 <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001ef2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ef6:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001efa:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8001efc:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001efe:	3c01      	subs	r4, #1
 8001f00:	b2a4      	uxth	r4, r4
 8001f02:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001f04:	b96c      	cbnz	r4, 8001f22 <UART_Receive_IT+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f06:	6803      	ldr	r3, [r0, #0]
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001f0e:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f10:	695a      	ldr	r2, [r3, #20]
 8001f12:	f022 0201 	bic.w	r2, r2, #1
 8001f16:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001f18:	2320      	movs	r3, #32
 8001f1a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001f1e:	f000 fafb 	bl	8002518 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8001f22:	2000      	movs	r0, #0
}
 8001f24:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	f823 2b01 	strh.w	r2, [r3], #1
 8001f2c:	e7e5      	b.n	8001efa <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001f2e:	b921      	cbnz	r1, 8001f3a <UART_Receive_IT+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001f30:	1c59      	adds	r1, r3, #1
 8001f32:	6852      	ldr	r2, [r2, #4]
 8001f34:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001f36:	701a      	strb	r2, [r3, #0]
 8001f38:	e7e0      	b.n	8001efc <UART_Receive_IT+0x26>
 8001f3a:	6852      	ldr	r2, [r2, #4]
 8001f3c:	1c59      	adds	r1, r3, #1
 8001f3e:	6281      	str	r1, [r0, #40]	; 0x28
 8001f40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f44:	e7f7      	b.n	8001f36 <UART_Receive_IT+0x60>
    return HAL_BUSY;
 8001f46:	2002      	movs	r0, #2
 8001f48:	bd10      	pop	{r4, pc}

08001f4a <UART_DMARxHalfCplt>:
{
 8001f4a:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart); 
 8001f4c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001f4e:	f000 faff 	bl	8002550 <HAL_UART_RxHalfCpltCallback>
 8001f52:	bd08      	pop	{r3, pc}

08001f54 <HAL_UART_ErrorCallback>:
 8001f54:	4770      	bx	lr

08001f56 <UART_DMAError>:
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f56:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
 8001f58:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001f5a:	680b      	ldr	r3, [r1, #0]
 8001f5c:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001f5e:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8001f62:	2821      	cmp	r0, #33	; 0x21
 8001f64:	d10a      	bne.n	8001f7c <UART_DMAError+0x26>
 8001f66:	0612      	lsls	r2, r2, #24
 8001f68:	d508      	bpl.n	8001f7c <UART_DMAError+0x26>
    huart->TxXferCount = 0U;
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001f6e:	68da      	ldr	r2, [r3, #12]
 8001f70:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001f74:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001f76:	2220      	movs	r2, #32
 8001f78:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8001f7c:	695b      	ldr	r3, [r3, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001f7e:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8001f82:	2a22      	cmp	r2, #34	; 0x22
 8001f84:	d106      	bne.n	8001f94 <UART_DMAError+0x3e>
 8001f86:	065b      	lsls	r3, r3, #25
 8001f88:	d504      	bpl.n	8001f94 <UART_DMAError+0x3e>
    huart->RxXferCount = 0U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8001f8e:	4608      	mov	r0, r1
 8001f90:	f7ff fdc8 	bl	8001b24 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001f94:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8001f96:	f043 0310 	orr.w	r3, r3, #16
 8001f9a:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8001f9c:	4608      	mov	r0, r1
 8001f9e:	f7ff ffd9 	bl	8001f54 <HAL_UART_ErrorCallback>
 8001fa2:	bd08      	pop	{r3, pc}

08001fa4 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001fa4:	6803      	ldr	r3, [r0, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001fa8:	68d9      	ldr	r1, [r3, #12]
{
 8001faa:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 8001fac:	0716      	lsls	r6, r2, #28
{
 8001fae:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001fb0:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8001fb2:	d107      	bne.n	8001fc4 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fb4:	0696      	lsls	r6, r2, #26
 8001fb6:	d55a      	bpl.n	800206e <HAL_UART_IRQHandler+0xca>
 8001fb8:	068d      	lsls	r5, r1, #26
 8001fba:	d558      	bpl.n	800206e <HAL_UART_IRQHandler+0xca>
}
 8001fbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001fc0:	f7ff bf89 	b.w	8001ed6 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001fc4:	f015 0501 	ands.w	r5, r5, #1
 8001fc8:	d102      	bne.n	8001fd0 <HAL_UART_IRQHandler+0x2c>
 8001fca:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001fce:	d04e      	beq.n	800206e <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001fd0:	07d3      	lsls	r3, r2, #31
 8001fd2:	d505      	bpl.n	8001fe0 <HAL_UART_IRQHandler+0x3c>
 8001fd4:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001fd6:	bf42      	ittt	mi
 8001fd8:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001fda:	f043 0301 	orrmi.w	r3, r3, #1
 8001fde:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fe0:	0750      	lsls	r0, r2, #29
 8001fe2:	d504      	bpl.n	8001fee <HAL_UART_IRQHandler+0x4a>
 8001fe4:	b11d      	cbz	r5, 8001fee <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001fe6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001fe8:	f043 0302 	orr.w	r3, r3, #2
 8001fec:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fee:	0793      	lsls	r3, r2, #30
 8001ff0:	d504      	bpl.n	8001ffc <HAL_UART_IRQHandler+0x58>
 8001ff2:	b11d      	cbz	r5, 8001ffc <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ff4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ff6:	f043 0304 	orr.w	r3, r3, #4
 8001ffa:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ffc:	0716      	lsls	r6, r2, #28
 8001ffe:	d504      	bpl.n	800200a <HAL_UART_IRQHandler+0x66>
 8002000:	b11d      	cbz	r5, 800200a <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002002:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002004:	f043 0308 	orr.w	r3, r3, #8
 8002008:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800200a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800200c:	2b00      	cmp	r3, #0
 800200e:	d066      	beq.n	80020de <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002010:	0695      	lsls	r5, r2, #26
 8002012:	d504      	bpl.n	800201e <HAL_UART_IRQHandler+0x7a>
 8002014:	0688      	lsls	r0, r1, #26
 8002016:	d502      	bpl.n	800201e <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8002018:	4620      	mov	r0, r4
 800201a:	f7ff ff5c 	bl	8001ed6 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800201e:	6823      	ldr	r3, [r4, #0]
 8002020:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002022:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002024:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8002026:	4620      	mov	r0, r4
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002028:	d402      	bmi.n	8002030 <HAL_UART_IRQHandler+0x8c>
 800202a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800202e:	d01a      	beq.n	8002066 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8002030:	f7ff fd78 	bl	8001b24 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002034:	6823      	ldr	r3, [r4, #0]
 8002036:	695a      	ldr	r2, [r3, #20]
 8002038:	0652      	lsls	r2, r2, #25
 800203a:	d510      	bpl.n	800205e <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800203c:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800203e:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002044:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002046:	b150      	cbz	r0, 800205e <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002048:	4b25      	ldr	r3, [pc, #148]	; (80020e0 <HAL_UART_IRQHandler+0x13c>)
 800204a:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800204c:	f7ff f935 	bl	80012ba <HAL_DMA_Abort_IT>
 8002050:	2800      	cmp	r0, #0
 8002052:	d044      	beq.n	80020de <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002054:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8002056:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800205a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800205c:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800205e:	4620      	mov	r0, r4
 8002060:	f7ff ff78 	bl	8001f54 <HAL_UART_ErrorCallback>
 8002064:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002066:	f7ff ff75 	bl	8001f54 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800206a:	63e5      	str	r5, [r4, #60]	; 0x3c
 800206c:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800206e:	0616      	lsls	r6, r2, #24
 8002070:	d527      	bpl.n	80020c2 <HAL_UART_IRQHandler+0x11e>
 8002072:	060d      	lsls	r5, r1, #24
 8002074:	d525      	bpl.n	80020c2 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8002076:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800207a:	2a21      	cmp	r2, #33	; 0x21
 800207c:	d12f      	bne.n	80020de <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800207e:	68a2      	ldr	r2, [r4, #8]
 8002080:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002084:	6a22      	ldr	r2, [r4, #32]
 8002086:	d117      	bne.n	80020b8 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002088:	8811      	ldrh	r1, [r2, #0]
 800208a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800208e:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002090:	6921      	ldr	r1, [r4, #16]
 8002092:	b979      	cbnz	r1, 80020b4 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8002094:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8002096:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8002098:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800209a:	3a01      	subs	r2, #1
 800209c:	b292      	uxth	r2, r2
 800209e:	84e2      	strh	r2, [r4, #38]	; 0x26
 80020a0:	b9ea      	cbnz	r2, 80020de <HAL_UART_IRQHandler+0x13a>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020a8:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80020aa:	68da      	ldr	r2, [r3, #12]
 80020ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80020b4:	3201      	adds	r2, #1
 80020b6:	e7ee      	b.n	8002096 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80020b8:	1c51      	adds	r1, r2, #1
 80020ba:	6221      	str	r1, [r4, #32]
 80020bc:	7812      	ldrb	r2, [r2, #0]
 80020be:	605a      	str	r2, [r3, #4]
 80020c0:	e7ea      	b.n	8002098 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80020c2:	0650      	lsls	r0, r2, #25
 80020c4:	d50b      	bpl.n	80020de <HAL_UART_IRQHandler+0x13a>
 80020c6:	064a      	lsls	r2, r1, #25
 80020c8:	d509      	bpl.n	80020de <HAL_UART_IRQHandler+0x13a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020d0:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80020d2:	2320      	movs	r3, #32
 80020d4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80020d8:	4620      	mov	r0, r4
 80020da:	f7ff fedf 	bl	8001e9c <HAL_UART_TxCpltCallback>
 80020de:	bd70      	pop	{r4, r5, r6, pc}
 80020e0:	080020e5 	.word	0x080020e5

080020e4 <UART_DMAAbortOnError>:
{
 80020e4:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020e6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 80020ec:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80020ee:	f7ff ff31 	bl	8001f54 <HAL_UART_ErrorCallback>
 80020f2:	bd08      	pop	{r3, pc}

080020f4 <LCD1602_TIM_MicorSecDelay>:
	TIM3->EGR = 1; 					//Update generate auto
	TIM3->SR &= ~(0x0001);	//Clear Update interrupt flag
}
static void LCD1602_TIM_MicorSecDelay(uint32_t uSecDelay)
{
	TIM3->ARR = uSecDelay-1;
 80020f4:	4b07      	ldr	r3, [pc, #28]	; (8002114 <LCD1602_TIM_MicorSecDelay+0x20>)
 80020f6:	3801      	subs	r0, #1
 80020f8:	62d8      	str	r0, [r3, #44]	; 0x2c
	TIM3->SR &= ~(0x0001);  // Clear UEV flag
 80020fa:	691a      	ldr	r2, [r3, #16]
 80020fc:	f022 0201 	bic.w	r2, r2, #1
 8002100:	611a      	str	r2, [r3, #16]
	TIM3->CR1 |= 1UL;
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	f042 0201 	orr.w	r2, r2, #1
 8002108:	601a      	str	r2, [r3, #0]
	while((TIM3->SR&0x0001) != 1);
 800210a:	691a      	ldr	r2, [r3, #16]
 800210c:	07d2      	lsls	r2, r2, #31
 800210e:	d5fc      	bpl.n	800210a <LCD1602_TIM_MicorSecDelay+0x16>
}
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40000400 	.word	0x40000400

08002118 <LCD1602_TIM_Config>:
{
 8002118:	b510      	push	{r4, lr}
 800211a:	b086      	sub	sp, #24
	HAL_RCC_GetClockConfig(&myCLKtypeDef, &flashLatencyVar);
 800211c:	4669      	mov	r1, sp
 800211e:	a801      	add	r0, sp, #4
 8002120:	f7ff fce2 	bl	8001ae8 <HAL_RCC_GetClockConfig>
	if(myCLKtypeDef.APB1CLKDivider == RCC_HCLK_DIV1)
 8002124:	9b04      	ldr	r3, [sp, #16]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d12c      	bne.n	8002184 <LCD1602_TIM_Config+0x6c>
		clockSpeed = HAL_RCC_GetPCLK1Freq();
 800212a:	f7ff fcbd 	bl	8001aa8 <HAL_RCC_GetPCLK1Freq>
	clockSpeed *= 0.000001;
 800212e:	f7fe f9e1 	bl	80004f4 <__aeabi_ui2d>
 8002132:	a319      	add	r3, pc, #100	; (adr r3, 8002198 <LCD1602_TIM_Config+0x80>)
 8002134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002138:	f7fe fa52 	bl	80005e0 <__aeabi_dmul>
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;  // 0x1
 800213c:	4a14      	ldr	r2, [pc, #80]	; (8002190 <LCD1602_TIM_Config+0x78>)
	TIM3->CR1 &= ~(0x0010);
 800213e:	4c15      	ldr	r4, [pc, #84]	; (8002194 <LCD1602_TIM_Config+0x7c>)
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;  // 0x1
 8002140:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002142:	f043 0302 	orr.w	r3, r3, #2
 8002146:	6413      	str	r3, [r2, #64]	; 0x40
	TIM3->CR1 &= ~(0x0010);
 8002148:	6823      	ldr	r3, [r4, #0]
 800214a:	f023 0310 	bic.w	r3, r3, #16
 800214e:	6023      	str	r3, [r4, #0]
	TIM3->CR1 &= ~(0x0001);
 8002150:	6823      	ldr	r3, [r4, #0]
 8002152:	f023 0301 	bic.w	r3, r3, #1
 8002156:	6023      	str	r3, [r4, #0]
	TIM3->CR1 &= ~(1UL << 2);
 8002158:	6823      	ldr	r3, [r4, #0]
 800215a:	f023 0304 	bic.w	r3, r3, #4
 800215e:	6023      	str	r3, [r4, #0]
	TIM3->CR1 |= (1UL << 3);				  
 8002160:	6823      	ldr	r3, [r4, #0]
 8002162:	f043 0308 	orr.w	r3, r3, #8
 8002166:	6023      	str	r3, [r4, #0]
	clockSpeed *= 0.000001;
 8002168:	f7fe fcd4 	bl	8000b14 <__aeabi_d2uiz>
	TIM3->ARR = 10-1; 								// The Flag sets when overflows
 800216c:	2309      	movs	r3, #9
	TIM3->PSC = clockSpeed-1;
 800216e:	3801      	subs	r0, #1
 8002170:	62a0      	str	r0, [r4, #40]	; 0x28
	TIM3->ARR = 10-1; 								// The Flag sets when overflows
 8002172:	62e3      	str	r3, [r4, #44]	; 0x2c
	TIM3->EGR = 1; 					//Update generate auto
 8002174:	2301      	movs	r3, #1
 8002176:	6163      	str	r3, [r4, #20]
	TIM3->SR &= ~(0x0001);	//Clear Update interrupt flag
 8002178:	6923      	ldr	r3, [r4, #16]
 800217a:	f023 0301 	bic.w	r3, r3, #1
 800217e:	6123      	str	r3, [r4, #16]
}
 8002180:	b006      	add	sp, #24
 8002182:	bd10      	pop	{r4, pc}
		clockSpeed = HAL_RCC_GetPCLK1Freq()*2;
 8002184:	f7ff fc90 	bl	8001aa8 <HAL_RCC_GetPCLK1Freq>
 8002188:	0040      	lsls	r0, r0, #1
 800218a:	e7d0      	b.n	800212e <LCD1602_TIM_Config+0x16>
 800218c:	f3af 8000 	nop.w
 8002190:	40023800 	.word	0x40023800
 8002194:	40000400 	.word	0x40000400
 8002198:	a0b5ed8d 	.word	0xa0b5ed8d
 800219c:	3eb0c6f7 	.word	0x3eb0c6f7

080021a0 <LCD1602_EnablePulse>:
{
 80021a0:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 80021a2:	4d0a      	ldr	r5, [pc, #40]	; (80021cc <LCD1602_EnablePulse+0x2c>)
 80021a4:	4c0a      	ldr	r4, [pc, #40]	; (80021d0 <LCD1602_EnablePulse+0x30>)
 80021a6:	8829      	ldrh	r1, [r5, #0]
 80021a8:	6820      	ldr	r0, [r4, #0]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f7ff fa32 	bl	8001614 <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(writeTimeConstant);
 80021b0:	200a      	movs	r0, #10
 80021b2:	f7ff ff9f 	bl	80020f4 <LCD1602_TIM_MicorSecDelay>
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 80021b6:	6820      	ldr	r0, [r4, #0]
 80021b8:	8829      	ldrh	r1, [r5, #0]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f7ff fa2a 	bl	8001614 <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(60);
 80021c0:	203c      	movs	r0, #60	; 0x3c
}
 80021c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	LCD1602_TIM_MicorSecDelay(60);
 80021c6:	f7ff bf95 	b.w	80020f4 <LCD1602_TIM_MicorSecDelay>
 80021ca:	bf00      	nop
 80021cc:	200000a4 	.word	0x200000a4
 80021d0:	200000b0 	.word	0x200000b0

080021d4 <LCD1602_write>:
{
 80021d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(mode_8_4_I2C == 1)		//8bits mode
 80021d8:	4b43      	ldr	r3, [pc, #268]	; (80022e8 <LCD1602_write+0x114>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b01      	cmp	r3, #1
{
 80021de:	4604      	mov	r4, r0
	uint8_t LSB_nibble = byte&0xF, MSB_nibble = (byte>>4)&0xF;
 80021e0:	ea4f 1610 	mov.w	r6, r0, lsr #4
	if(mode_8_4_I2C == 1)		//8bits mode
 80021e4:	d13d      	bne.n	8002262 <LCD1602_write+0x8e>
		HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 80021e6:	4d41      	ldr	r5, [pc, #260]	; (80022ec <LCD1602_write+0x118>)
 80021e8:	4b41      	ldr	r3, [pc, #260]	; (80022f0 <LCD1602_write+0x11c>)
 80021ea:	f000 0201 	and.w	r2, r0, #1
 80021ee:	8819      	ldrh	r1, [r3, #0]
 80021f0:	6828      	ldr	r0, [r5, #0]
 80021f2:	f7ff fa0f 	bl	8001614 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 80021f6:	4b3f      	ldr	r3, [pc, #252]	; (80022f4 <LCD1602_write+0x120>)
 80021f8:	6828      	ldr	r0, [r5, #0]
 80021fa:	8819      	ldrh	r1, [r3, #0]
 80021fc:	f004 0202 	and.w	r2, r4, #2
 8002200:	f7ff fa08 	bl	8001614 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8002204:	4b3c      	ldr	r3, [pc, #240]	; (80022f8 <LCD1602_write+0x124>)
 8002206:	6828      	ldr	r0, [r5, #0]
 8002208:	8819      	ldrh	r1, [r3, #0]
 800220a:	f004 0204 	and.w	r2, r4, #4
 800220e:	f7ff fa01 	bl	8001614 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8002212:	4b3a      	ldr	r3, [pc, #232]	; (80022fc <LCD1602_write+0x128>)
 8002214:	6828      	ldr	r0, [r5, #0]
 8002216:	8819      	ldrh	r1, [r3, #0]
 8002218:	f004 0208 	and.w	r2, r4, #8
 800221c:	f7ff f9fa 	bl	8001614 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8002220:	4c37      	ldr	r4, [pc, #220]	; (8002300 <LCD1602_write+0x12c>)
 8002222:	4b38      	ldr	r3, [pc, #224]	; (8002304 <LCD1602_write+0x130>)
 8002224:	6820      	ldr	r0, [r4, #0]
 8002226:	8819      	ldrh	r1, [r3, #0]
 8002228:	f006 0201 	and.w	r2, r6, #1
 800222c:	f7ff f9f2 	bl	8001614 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8002230:	4b35      	ldr	r3, [pc, #212]	; (8002308 <LCD1602_write+0x134>)
 8002232:	6820      	ldr	r0, [r4, #0]
 8002234:	8819      	ldrh	r1, [r3, #0]
 8002236:	f006 0202 	and.w	r2, r6, #2
 800223a:	f7ff f9eb 	bl	8001614 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 800223e:	4b33      	ldr	r3, [pc, #204]	; (800230c <LCD1602_write+0x138>)
 8002240:	6820      	ldr	r0, [r4, #0]
 8002242:	8819      	ldrh	r1, [r3, #0]
 8002244:	f006 0204 	and.w	r2, r6, #4
 8002248:	f7ff f9e4 	bl	8001614 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 800224c:	4b30      	ldr	r3, [pc, #192]	; (8002310 <LCD1602_write+0x13c>)
 800224e:	6820      	ldr	r0, [r4, #0]
 8002250:	8819      	ldrh	r1, [r3, #0]
 8002252:	f006 0208 	and.w	r2, r6, #8
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8002256:	f7ff f9dd 	bl	8001614 <HAL_GPIO_WritePin>
}
 800225a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		LCD1602_EnablePulse();
 800225e:	f7ff bf9f 	b.w	80021a0 <LCD1602_EnablePulse>
	else if(mode_8_4_I2C == 2)	//4 bits mode
 8002262:	2b02      	cmp	r3, #2
 8002264:	d13e      	bne.n	80022e4 <LCD1602_write+0x110>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8002266:	4d26      	ldr	r5, [pc, #152]	; (8002300 <LCD1602_write+0x12c>)
 8002268:	f8df a098 	ldr.w	sl, [pc, #152]	; 8002304 <LCD1602_write+0x130>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 800226c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8002308 <LCD1602_write+0x134>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8002270:	f8ba 1000 	ldrh.w	r1, [sl]
 8002274:	6828      	ldr	r0, [r5, #0]
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8002276:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800230c <LCD1602_write+0x138>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 800227a:	4f25      	ldr	r7, [pc, #148]	; (8002310 <LCD1602_write+0x13c>)
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 800227c:	f006 0201 	and.w	r2, r6, #1
 8002280:	f7ff f9c8 	bl	8001614 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8002284:	f006 0202 	and.w	r2, r6, #2
 8002288:	f8b9 1000 	ldrh.w	r1, [r9]
 800228c:	6828      	ldr	r0, [r5, #0]
 800228e:	f7ff f9c1 	bl	8001614 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8002292:	f006 0204 	and.w	r2, r6, #4
 8002296:	f8b8 1000 	ldrh.w	r1, [r8]
 800229a:	6828      	ldr	r0, [r5, #0]
 800229c:	f7ff f9ba 	bl	8001614 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 80022a0:	f006 0208 	and.w	r2, r6, #8
 80022a4:	8839      	ldrh	r1, [r7, #0]
 80022a6:	6828      	ldr	r0, [r5, #0]
 80022a8:	f7ff f9b4 	bl	8001614 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 80022ac:	f7ff ff78 	bl	80021a0 <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 80022b0:	f004 0201 	and.w	r2, r4, #1
 80022b4:	f8ba 1000 	ldrh.w	r1, [sl]
 80022b8:	6828      	ldr	r0, [r5, #0]
 80022ba:	f7ff f9ab 	bl	8001614 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 80022be:	f004 0202 	and.w	r2, r4, #2
 80022c2:	f8b9 1000 	ldrh.w	r1, [r9]
 80022c6:	6828      	ldr	r0, [r5, #0]
 80022c8:	f7ff f9a4 	bl	8001614 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 80022cc:	f004 0204 	and.w	r2, r4, #4
 80022d0:	f8b8 1000 	ldrh.w	r1, [r8]
 80022d4:	6828      	ldr	r0, [r5, #0]
 80022d6:	f7ff f99d 	bl	8001614 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 80022da:	f004 0208 	and.w	r2, r4, #8
 80022de:	8839      	ldrh	r1, [r7, #0]
 80022e0:	6828      	ldr	r0, [r5, #0]
 80022e2:	e7b8      	b.n	8002256 <LCD1602_write+0x82>
 80022e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022e8:	20000002 	.word	0x20000002
 80022ec:	200000a8 	.word	0x200000a8
 80022f0:	20000094 	.word	0x20000094
 80022f4:	20000096 	.word	0x20000096
 80022f8:	20000098 	.word	0x20000098
 80022fc:	2000009a 	.word	0x2000009a
 8002300:	200000ac 	.word	0x200000ac
 8002304:	2000009c 	.word	0x2000009c
 8002308:	2000009e 	.word	0x2000009e
 800230c:	200000a0 	.word	0x200000a0
 8002310:	200000a2 	.word	0x200000a2

08002314 <LCD1602_write4bitCommand>:
	//Call low level write parallel function
	LCD1602_write(data);
}
//7) Write 4 bits command, *FOR 4 BITS MODE ONLY*
static void LCD1602_write4bitCommand(uint8_t nibble)
{
 8002314:	b538      	push	{r3, r4, r5, lr}
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 8002316:	4b14      	ldr	r3, [pc, #80]	; (8002368 <LCD1602_write4bitCommand+0x54>)
	uint8_t LSB_nibble = nibble&0xF;
	//Set RS to 0
	LCD1602_RS(false);
	//LSB data
	HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8002318:	4c14      	ldr	r4, [pc, #80]	; (800236c <LCD1602_write4bitCommand+0x58>)
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 800231a:	8819      	ldrh	r1, [r3, #0]
 800231c:	4b14      	ldr	r3, [pc, #80]	; (8002370 <LCD1602_write4bitCommand+0x5c>)
{
 800231e:	4605      	mov	r5, r0
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 8002320:	2200      	movs	r2, #0
 8002322:	6818      	ldr	r0, [r3, #0]
 8002324:	f7ff f976 	bl	8001614 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8002328:	4b12      	ldr	r3, [pc, #72]	; (8002374 <LCD1602_write4bitCommand+0x60>)
 800232a:	6820      	ldr	r0, [r4, #0]
 800232c:	8819      	ldrh	r1, [r3, #0]
 800232e:	f005 0201 	and.w	r2, r5, #1
 8002332:	f7ff f96f 	bl	8001614 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8002336:	4b10      	ldr	r3, [pc, #64]	; (8002378 <LCD1602_write4bitCommand+0x64>)
 8002338:	6820      	ldr	r0, [r4, #0]
 800233a:	8819      	ldrh	r1, [r3, #0]
 800233c:	f005 0202 	and.w	r2, r5, #2
 8002340:	f7ff f968 	bl	8001614 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8002344:	4b0d      	ldr	r3, [pc, #52]	; (800237c <LCD1602_write4bitCommand+0x68>)
 8002346:	6820      	ldr	r0, [r4, #0]
 8002348:	8819      	ldrh	r1, [r3, #0]
 800234a:	f005 0204 	and.w	r2, r5, #4
 800234e:	f7ff f961 	bl	8001614 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8002352:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <LCD1602_write4bitCommand+0x6c>)
 8002354:	6820      	ldr	r0, [r4, #0]
 8002356:	8819      	ldrh	r1, [r3, #0]
 8002358:	f005 0208 	and.w	r2, r5, #8
 800235c:	f7ff f95a 	bl	8001614 <HAL_GPIO_WritePin>
	//Write the Enable pulse
	LCD1602_EnablePulse();
}
 8002360:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	LCD1602_EnablePulse();
 8002364:	f7ff bf1c 	b.w	80021a0 <LCD1602_EnablePulse>
 8002368:	200000a6 	.word	0x200000a6
 800236c:	200000ac 	.word	0x200000ac
 8002370:	200000b0 	.word	0x200000b0
 8002374:	2000009c 	.word	0x2000009c
 8002378:	2000009e 	.word	0x2000009e
 800237c:	200000a0 	.word	0x200000a0
 8002380:	200000a2 	.word	0x200000a2

08002384 <LCD1602_writeCommand>:
{
 8002384:	b510      	push	{r4, lr}
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 8002386:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <LCD1602_writeCommand+0x1c>)
 8002388:	8819      	ldrh	r1, [r3, #0]
 800238a:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <LCD1602_writeCommand+0x20>)
{
 800238c:	4604      	mov	r4, r0
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 800238e:	2200      	movs	r2, #0
 8002390:	6818      	ldr	r0, [r3, #0]
 8002392:	f7ff f93f 	bl	8001614 <HAL_GPIO_WritePin>
	LCD1602_write(command);
 8002396:	4620      	mov	r0, r4
}
 8002398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LCD1602_write(command);
 800239c:	f7ff bf1a 	b.w	80021d4 <LCD1602_write>
 80023a0:	200000a6 	.word	0x200000a6
 80023a4:	200000b0 	.word	0x200000b0

080023a8 <LCD1602_Begin4BIT>:
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
	HAL_Delay(2);
}
//2) LCD begin 4 bits function
void LCD1602_Begin4BIT(GPIO_TypeDef* PORT_RS_E, uint16_t RS, uint16_t E, GPIO_TypeDef* PORT_MSBs4to7, uint16_t D4, uint16_t D5, uint16_t D6, uint16_t D7)
{
 80023a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Set GPIO Ports and Pins data
	PORT_RS_and_E = PORT_RS_E;
 80023aa:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 800246c <LCD1602_Begin4BIT+0xc4>
{
 80023ae:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	PORT_RS_and_E = PORT_RS_E;
 80023b2:	f8ce 0000 	str.w	r0, [lr]
	PIN_RS = RS;
 80023b6:	4824      	ldr	r0, [pc, #144]	; (8002448 <LCD1602_Begin4BIT+0xa0>)
{
 80023b8:	f8bd 601c 	ldrh.w	r6, [sp, #28]
	PIN_RS = RS;
 80023bc:	8001      	strh	r1, [r0, #0]
	PIN_E = E;
 80023be:	4923      	ldr	r1, [pc, #140]	; (800244c <LCD1602_Begin4BIT+0xa4>)
{
 80023c0:	f8bd 5020 	ldrh.w	r5, [sp, #32]
	PIN_E = E;
 80023c4:	800a      	strh	r2, [r1, #0]
	PORT_MSB = PORT_MSBs4to7;
 80023c6:	4a22      	ldr	r2, [pc, #136]	; (8002450 <LCD1602_Begin4BIT+0xa8>)
{
 80023c8:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	PORT_MSB = PORT_MSBs4to7;
 80023cc:	6013      	str	r3, [r2, #0]
	D4_PIN = D4;
 80023ce:	4b21      	ldr	r3, [pc, #132]	; (8002454 <LCD1602_Begin4BIT+0xac>)
 80023d0:	801f      	strh	r7, [r3, #0]
	D5_PIN = D5;
 80023d2:	4b21      	ldr	r3, [pc, #132]	; (8002458 <LCD1602_Begin4BIT+0xb0>)
 80023d4:	801e      	strh	r6, [r3, #0]
	D6_PIN = D6;
 80023d6:	4b21      	ldr	r3, [pc, #132]	; (800245c <LCD1602_Begin4BIT+0xb4>)
 80023d8:	801d      	strh	r5, [r3, #0]
	D7_PIN = D7;
 80023da:	4b21      	ldr	r3, [pc, #132]	; (8002460 <LCD1602_Begin4BIT+0xb8>)
 80023dc:	801c      	strh	r4, [r3, #0]
	//Initialise microsecond timer
	LCD1602_TIM_Config();
 80023de:	f7ff fe9b 	bl	8002118 <LCD1602_TIM_Config>
	//Set the mode to 4 bits
	mode_8_4_I2C = 2;
 80023e2:	4b20      	ldr	r3, [pc, #128]	; (8002464 <LCD1602_Begin4BIT+0xbc>)
 80023e4:	2502      	movs	r5, #2
 80023e6:	701d      	strb	r5, [r3, #0]
	//Function set variable to 4 bits mode
	FunctionSet = 0x28;
 80023e8:	4b1f      	ldr	r3, [pc, #124]	; (8002468 <LCD1602_Begin4BIT+0xc0>)
 80023ea:	2428      	movs	r4, #40	; 0x28
	
	//Initialise LCD
	//1. Wait at least 15ms
	HAL_Delay(20);
 80023ec:	2014      	movs	r0, #20
	FunctionSet = 0x28;
 80023ee:	701c      	strb	r4, [r3, #0]
	HAL_Delay(20);
 80023f0:	f7fe fdc4 	bl	8000f7c <HAL_Delay>
	//2. Attentions sequence
	LCD1602_write4bitCommand(0x3);
 80023f4:	2003      	movs	r0, #3
 80023f6:	f7ff ff8d 	bl	8002314 <LCD1602_write4bitCommand>
	HAL_Delay(5);
 80023fa:	2005      	movs	r0, #5
 80023fc:	f7fe fdbe 	bl	8000f7c <HAL_Delay>
	LCD1602_write4bitCommand(0x3);
 8002400:	2003      	movs	r0, #3
 8002402:	f7ff ff87 	bl	8002314 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 8002406:	2001      	movs	r0, #1
 8002408:	f7fe fdb8 	bl	8000f7c <HAL_Delay>
	LCD1602_write4bitCommand(0x3);
 800240c:	2003      	movs	r0, #3
 800240e:	f7ff ff81 	bl	8002314 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 8002412:	2001      	movs	r0, #1
 8002414:	f7fe fdb2 	bl	8000f7c <HAL_Delay>
	LCD1602_write4bitCommand(0x2);  //4 bit mode
 8002418:	4628      	mov	r0, r5
 800241a:	f7ff ff7b 	bl	8002314 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 800241e:	2001      	movs	r0, #1
 8002420:	f7fe fdac 	bl	8000f7c <HAL_Delay>
	//3. Display control (Display ON, Cursor ON, blink cursor)
	LCD1602_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 8002424:	200f      	movs	r0, #15
 8002426:	f7ff ffad 	bl	8002384 <LCD1602_writeCommand>
	//4. Clear LCD and return home
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 800242a:	2001      	movs	r0, #1
 800242c:	f7ff ffaa 	bl	8002384 <LCD1602_writeCommand>
	HAL_Delay(3);
 8002430:	2003      	movs	r0, #3
 8002432:	f7fe fda3 	bl	8000f7c <HAL_Delay>
	//4. Function set; Enable 2 lines, Data length to 8 bits
	LCD1602_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8002436:	4620      	mov	r0, r4
 8002438:	f7ff ffa4 	bl	8002384 <LCD1602_writeCommand>
	HAL_Delay(3);
 800243c:	2003      	movs	r0, #3
}
 800243e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_Delay(3);
 8002442:	f7fe bd9b 	b.w	8000f7c <HAL_Delay>
 8002446:	bf00      	nop
 8002448:	200000a6 	.word	0x200000a6
 800244c:	200000a4 	.word	0x200000a4
 8002450:	200000ac 	.word	0x200000ac
 8002454:	2000009c 	.word	0x2000009c
 8002458:	2000009e 	.word	0x2000009e
 800245c:	200000a0 	.word	0x200000a0
 8002460:	200000a2 	.word	0x200000a2
 8002464:	20000002 	.word	0x20000002
 8002468:	20000001 	.word	0x20000001
 800246c:	200000b0 	.word	0x200000b0

08002470 <LCD1602_print>:
//3) LCD print string
void LCD1602_print(char string[])
{
 8002470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if(state) HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_SET);
 8002474:	4f0a      	ldr	r7, [pc, #40]	; (80024a0 <LCD1602_print+0x30>)
 8002476:	f8df 802c 	ldr.w	r8, [pc, #44]	; 80024a4 <LCD1602_print+0x34>
 800247a:	1e45      	subs	r5, r0, #1
 800247c:	f100 040f 	add.w	r4, r0, #15
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 8002480:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8002484:	b156      	cbz	r6, 800249c <LCD1602_print+0x2c>
	if(state) HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_SET);
 8002486:	2201      	movs	r2, #1
 8002488:	8839      	ldrh	r1, [r7, #0]
 800248a:	f8d8 0000 	ldr.w	r0, [r8]
 800248e:	f7ff f8c1 	bl	8001614 <HAL_GPIO_WritePin>
	LCD1602_write(data);
 8002492:	4630      	mov	r0, r6
 8002494:	f7ff fe9e 	bl	80021d4 <LCD1602_write>
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 8002498:	42a5      	cmp	r5, r4
 800249a:	d1f1      	bne.n	8002480 <LCD1602_print+0x10>
 800249c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024a0:	200000a6 	.word	0x200000a6
 80024a4:	200000b0 	.word	0x200000b0

080024a8 <LCD1602_setCursor>:
}
//4) set cursor position
void LCD1602_setCursor(uint8_t row, uint8_t col)
{
	uint8_t maskData;
	maskData = (col-1)&0x0F;
 80024a8:	3901      	subs	r1, #1
 80024aa:	f001 010f 	and.w	r1, r1, #15
	if(row==1)
 80024ae:	2801      	cmp	r0, #1
	{
		maskData |= (0x80);
		LCD1602_writeCommand(maskData);
 80024b0:	bf0c      	ite	eq
 80024b2:	f041 0080 	orreq.w	r0, r1, #128	; 0x80
	}
	else
	{
		maskData |= (0xc0);
		LCD1602_writeCommand(maskData);
 80024b6:	f041 00c0 	orrne.w	r0, r1, #192	; 0xc0
 80024ba:	f7ff bf63 	b.w	8002384 <LCD1602_writeCommand>
	...

080024c0 <LCD1602_noCursor>:
	LCD1602_writeCommand(FunctionSet);
}
//6) Cursor ON/OFF
void LCD1602_noCursor(void)
{
	DisplayControl &= ~(0x02);
 80024c0:	4b03      	ldr	r3, [pc, #12]	; (80024d0 <LCD1602_noCursor+0x10>)
 80024c2:	7818      	ldrb	r0, [r3, #0]
 80024c4:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 80024c8:	7018      	strb	r0, [r3, #0]
	LCD1602_writeCommand(DisplayControl);
 80024ca:	f7ff bf5b 	b.w	8002384 <LCD1602_writeCommand>
 80024ce:	bf00      	nop
 80024d0:	20000000 	.word	0x20000000

080024d4 <LCD1602_clear>:
	DisplayControl |= (0x02);
	LCD1602_writeCommand(DisplayControl);
}
//7) Clear display
void LCD1602_clear(void)
{
 80024d4:	b508      	push	{r3, lr}
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 80024d6:	2001      	movs	r0, #1
 80024d8:	f7ff ff54 	bl	8002384 <LCD1602_writeCommand>
	HAL_Delay(3);
 80024dc:	2003      	movs	r0, #3
}
 80024de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(3);
 80024e2:	f7fe bd4b 	b.w	8000f7c <HAL_Delay>
	...

080024e8 <LCD1602_noBlink>:
//8) Blinking cursor
void LCD1602_noBlink(void)
{
	DisplayControl &= ~(0x01);
 80024e8:	4b03      	ldr	r3, [pc, #12]	; (80024f8 <LCD1602_noBlink+0x10>)
 80024ea:	7818      	ldrb	r0, [r3, #0]
 80024ec:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 80024f0:	7018      	strb	r0, [r3, #0]
	LCD1602_writeCommand(DisplayControl);
 80024f2:	f7ff bf47 	b.w	8002384 <LCD1602_writeCommand>
 80024f6:	bf00      	nop
 80024f8:	20000000 	.word	0x20000000

080024fc <LCD1602_PrintInt>:
}

//********** Print numbers to LCD **********//
//1. Integer
void LCD1602_PrintInt(int number)
{
 80024fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char numStr[16];
	sprintf(numStr,"%d", number);
 80024fe:	4602      	mov	r2, r0
 8002500:	4904      	ldr	r1, [pc, #16]	; (8002514 <LCD1602_PrintInt+0x18>)
 8002502:	4668      	mov	r0, sp
 8002504:	f000 fb02 	bl	8002b0c <siprintf>
	LCD1602_print(numStr);
 8002508:	4668      	mov	r0, sp
 800250a:	f7ff ffb1 	bl	8002470 <LCD1602_print>
}
 800250e:	b005      	add	sp, #20
 8002510:	f85d fb04 	ldr.w	pc, [sp], #4
 8002514:	08003384 	.word	0x08003384

08002518 <HAL_UART_RxCpltCallback>:
  /* USER CODE END 3 */

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002518:	b510      	push	{r4, lr}
	if(status == RESET)
 800251a:	4c09      	ldr	r4, [pc, #36]	; (8002540 <HAL_UART_RxCpltCallback+0x28>)
 800251c:	6823      	ldr	r3, [r4, #0]
 800251e:	b943      	cbnz	r3, 8002532 <HAL_UART_RxCpltCallback+0x1a>
	{
		LCD1602_setCursor(1,8);
 8002520:	2108      	movs	r1, #8
 8002522:	2001      	movs	r0, #1
 8002524:	f7ff ffc0 	bl	80024a8 <LCD1602_setCursor>
		LCD1602_print("REDE GAN");
 8002528:	4806      	ldr	r0, [pc, #24]	; (8002544 <HAL_UART_RxCpltCallback+0x2c>)
 800252a:	f7ff ffa1 	bl	8002470 <LCD1602_print>
		status = SET;
 800252e:	2301      	movs	r3, #1
 8002530:	6023      	str	r3, [r4, #0]
	}
  HAL_UART_Receive_DMA(&huart3, (uint8_t*)data_terima, 7);
 8002532:	2207      	movs	r2, #7
 8002534:	4904      	ldr	r1, [pc, #16]	; (8002548 <HAL_UART_RxCpltCallback+0x30>)
 8002536:	4805      	ldr	r0, [pc, #20]	; (800254c <HAL_UART_RxCpltCallback+0x34>)
}
 8002538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_UART_Receive_DMA(&huart3, (uint8_t*)data_terima, 7);
 800253c:	f7ff bc48 	b.w	8001dd0 <HAL_UART_Receive_DMA>
 8002540:	20000170 	.word	0x20000170
 8002544:	08003387 	.word	0x08003387
 8002548:	20000168 	.word	0x20000168
 800254c:	20000128 	.word	0x20000128

08002550 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002550:	b570      	push	{r4, r5, r6, lr}
				usart3_status = 0;
			}
		else
			{
				usart3_status = 0;
				HAL_UART_AbortReceive(&huart3);
 8002552:	4e11      	ldr	r6, [pc, #68]	; (8002598 <HAL_UART_RxHalfCpltCallback+0x48>)
				HAL_UART_Receive_DMA(&huart3, (uint8_t*)data_terima, 7);
 8002554:	4c11      	ldr	r4, [pc, #68]	; (800259c <HAL_UART_RxHalfCpltCallback+0x4c>)
{
 8002556:	2503      	movs	r5, #3
	int usart3_status = 0;
 8002558:	2300      	movs	r3, #0
		if(usart3_status == 0 && data_terima[0] == 'i') usart3_status++;
 800255a:	b933      	cbnz	r3, 800256a <HAL_UART_RxHalfCpltCallback+0x1a>
 800255c:	7823      	ldrb	r3, [r4, #0]
 800255e:	2b69      	cmp	r3, #105	; 0x69
 8002560:	d10f      	bne.n	8002582 <HAL_UART_RxHalfCpltCallback+0x32>
 8002562:	2301      	movs	r3, #1
	for(i=0;i<3;i++)
 8002564:	3d01      	subs	r5, #1
 8002566:	d1f8      	bne.n	800255a <HAL_UART_RxHalfCpltCallback+0xa>
			}

	 }

}
 8002568:	bd70      	pop	{r4, r5, r6, pc}
		else if(usart3_status == 1 && data_terima[1] == 't') usart3_status++;
 800256a:	2b01      	cmp	r3, #1
 800256c:	d104      	bne.n	8002578 <HAL_UART_RxHalfCpltCallback+0x28>
 800256e:	7863      	ldrb	r3, [r4, #1]
 8002570:	2b74      	cmp	r3, #116	; 0x74
 8002572:	d106      	bne.n	8002582 <HAL_UART_RxHalfCpltCallback+0x32>
 8002574:	2302      	movs	r3, #2
 8002576:	e7f5      	b.n	8002564 <HAL_UART_RxHalfCpltCallback+0x14>
		else if(usart3_status == 2 && data_terima[2] == 's')
 8002578:	2b02      	cmp	r3, #2
 800257a:	d102      	bne.n	8002582 <HAL_UART_RxHalfCpltCallback+0x32>
 800257c:	78a3      	ldrb	r3, [r4, #2]
 800257e:	2b73      	cmp	r3, #115	; 0x73
 8002580:	d007      	beq.n	8002592 <HAL_UART_RxHalfCpltCallback+0x42>
				HAL_UART_AbortReceive(&huart3);
 8002582:	4630      	mov	r0, r6
 8002584:	f7ff fc6c 	bl	8001e60 <HAL_UART_AbortReceive>
				HAL_UART_Receive_DMA(&huart3, (uint8_t*)data_terima, 7);
 8002588:	2207      	movs	r2, #7
 800258a:	4621      	mov	r1, r4
 800258c:	4630      	mov	r0, r6
 800258e:	f7ff fc1f 	bl	8001dd0 <HAL_UART_Receive_DMA>
				usart3_status = 0;
 8002592:	2300      	movs	r3, #0
 8002594:	e7e6      	b.n	8002564 <HAL_UART_RxHalfCpltCallback+0x14>
 8002596:	bf00      	nop
 8002598:	20000128 	.word	0x20000128
 800259c:	20000168 	.word	0x20000168

080025a0 <SystemClock_Config>:

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80025a0:	b530      	push	{r4, r5, lr}
 80025a2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80025a4:	2300      	movs	r3, #0
 80025a6:	4a27      	ldr	r2, [pc, #156]	; (8002644 <SystemClock_Config+0xa4>)
 80025a8:	9301      	str	r3, [sp, #4]
 80025aa:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80025ac:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80025b0:	6411      	str	r1, [r2, #64]	; 0x40
 80025b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025b4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80025b8:	9201      	str	r2, [sp, #4]
 80025ba:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025bc:	4a22      	ldr	r2, [pc, #136]	; (8002648 <SystemClock_Config+0xa8>)
 80025be:	9302      	str	r3, [sp, #8]
 80025c0:	6811      	ldr	r1, [r2, #0]
 80025c2:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80025c6:	6011      	str	r1, [r2, #0]
 80025c8:	6812      	ldr	r2, [r2, #0]
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025ca:	930f      	str	r3, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025cc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80025d0:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 8;
 80025d2:	2308      	movs	r3, #8
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025d4:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 8;
 80025d6:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025d8:	2201      	movs	r2, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025da:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025dc:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80025de:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80025e0:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80025e2:	2504      	movs	r5, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025e4:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025e6:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80025e8:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025ea:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 168;
 80025ec:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025ee:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80025f0:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025f2:	f7ff f815 	bl	8001620 <HAL_RCC_OscConfig>
 80025f6:	b100      	cbz	r0, 80025fa <SystemClock_Config+0x5a>
 80025f8:	e7fe      	b.n	80025f8 <SystemClock_Config+0x58>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025fa:	230f      	movs	r3, #15
 80025fc:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80025fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002602:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002604:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002606:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800260c:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800260e:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002610:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002612:	f7ff f9a9 	bl	8001968 <HAL_RCC_ClockConfig>
 8002616:	4604      	mov	r4, r0
 8002618:	b100      	cbz	r0, 800261c <SystemClock_Config+0x7c>
 800261a:	e7fe      	b.n	800261a <SystemClock_Config+0x7a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800261c:	f7ff fa3e 	bl	8001a9c <HAL_RCC_GetHCLKFreq>
 8002620:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002624:	fbb0 f0f3 	udiv	r0, r0, r3
 8002628:	f7fe fd0a 	bl	8001040 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800262c:	4628      	mov	r0, r5
 800262e:	f7fe fd1d 	bl	800106c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002632:	4622      	mov	r2, r4
 8002634:	4621      	mov	r1, r4
 8002636:	f04f 30ff 	mov.w	r0, #4294967295
 800263a:	f7fe fcc1 	bl	8000fc0 <HAL_NVIC_SetPriority>
}
 800263e:	b015      	add	sp, #84	; 0x54
 8002640:	bd30      	pop	{r4, r5, pc}
 8002642:	bf00      	nop
 8002644:	40023800 	.word	0x40023800
 8002648:	40007000 	.word	0x40007000
 800264c:	00000000 	.word	0x00000000

08002650 <main>:
{
 8002650:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002654:	b08d      	sub	sp, #52	; 0x34
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002656:	2400      	movs	r4, #0
 8002658:	4d95      	ldr	r5, [pc, #596]	; (80028b0 <main+0x260>)
  HAL_Init();
 800265a:	f7fe fc67 	bl	8000f2c <HAL_Init>
  SystemClock_Config();
 800265e:	f7ff ff9f 	bl	80025a0 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002662:	9404      	str	r4, [sp, #16]
 8002664:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8002666:	4893      	ldr	r0, [pc, #588]	; (80028b4 <main+0x264>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800266c:	632b      	str	r3, [r5, #48]	; 0x30
 800266e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002674:	9304      	str	r3, [sp, #16]
 8002676:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002678:	9405      	str	r4, [sp, #20]
 800267a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800267c:	f043 0302 	orr.w	r3, r3, #2
 8002680:	632b      	str	r3, [r5, #48]	; 0x30
 8002682:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	9305      	str	r3, [sp, #20]
 800268a:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800268c:	9406      	str	r4, [sp, #24]
 800268e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002690:	f043 0308 	orr.w	r3, r3, #8
 8002694:	632b      	str	r3, [r5, #48]	; 0x30
 8002696:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 800269e:	4622      	mov	r2, r4
 80026a0:	f44f 4120 	mov.w	r1, #40960	; 0xa000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026a4:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 80026a6:	f7fe ffb5 	bl	8001614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 80026aa:	4622      	mov	r2, r4
 80026ac:	f44f 412a 	mov.w	r1, #43520	; 0xaa00
 80026b0:	4881      	ldr	r0, [pc, #516]	; (80028b8 <main+0x268>)
 80026b2:	f7fe ffaf 	bl	8001614 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026b6:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80026b8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026bc:	a907      	add	r1, sp, #28
 80026be:	487d      	ldr	r0, [pc, #500]	; (80028b4 <main+0x264>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80026c0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026c2:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c6:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c8:	f7fe fec4 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD11 PD13 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15;
 80026cc:	f44f 432a 	mov.w	r3, #43520	; 0xaa00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026d0:	a907      	add	r1, sp, #28
 80026d2:	4879      	ldr	r0, [pc, #484]	; (80028b8 <main+0x268>)
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15;
 80026d4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026d6:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026da:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026dc:	f7fe feba 	bl	8001454 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026e0:	9407      	str	r4, [sp, #28]
 80026e2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80026e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026e8:	632b      	str	r3, [r5, #48]	; 0x30
 80026ea:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  huart3.Instance = USART3;
 80026ec:	4d73      	ldr	r5, [pc, #460]	; (80028bc <main+0x26c>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026f2:	9307      	str	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80026f4:	4622      	mov	r2, r4
 80026f6:	4621      	mov	r1, r4
 80026f8:	200c      	movs	r0, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026fa:	9b07      	ldr	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80026fc:	f7fe fc60 	bl	8000fc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002700:	200c      	movs	r0, #12
 8002702:	f7fe fc91 	bl	8001028 <HAL_NVIC_EnableIRQ>
  huart3.Init.BaudRate = 115200;
 8002706:	4b6e      	ldr	r3, [pc, #440]	; (80028c0 <main+0x270>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002708:	60ac      	str	r4, [r5, #8]
  huart3.Init.BaudRate = 115200;
 800270a:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
 800270e:	e885 0088 	stmia.w	r5, {r3, r7}
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002712:	4628      	mov	r0, r5
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002714:	230c      	movs	r3, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002716:	60ec      	str	r4, [r5, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002718:	612c      	str	r4, [r5, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800271a:	616b      	str	r3, [r5, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800271c:	61ac      	str	r4, [r5, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800271e:	61ec      	str	r4, [r5, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002720:	f7ff fb28 	bl	8001d74 <HAL_UART_Init>
 8002724:	b100      	cbz	r0, 8002728 <main+0xd8>
 8002726:	e7fe      	b.n	8002726 <main+0xd6>
  LCD1602_Begin4BIT(GPIOB, GPIO_PIN_13, GPIO_PIN_15, GPIOD, GPIO_PIN_9, GPIO_PIN_11, GPIO_PIN_13, GPIO_PIN_15);
 8002728:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800272c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002730:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002734:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8002738:	9203      	str	r2, [sp, #12]
 800273a:	9102      	str	r1, [sp, #8]
 800273c:	485d      	ldr	r0, [pc, #372]	; (80028b4 <main+0x264>)
 800273e:	e88d 0048 	stmia.w	sp, {r3, r6}
 8002742:	4b5d      	ldr	r3, [pc, #372]	; (80028b8 <main+0x268>)
 8002744:	f7ff fe30 	bl	80023a8 <LCD1602_Begin4BIT>
  LCD1602_noCursor();
 8002748:	f7ff feba 	bl	80024c0 <LCD1602_noCursor>
  LCD1602_noBlink();
 800274c:	f7ff fecc 	bl	80024e8 <LCD1602_noBlink>
  HAL_UART_Receive_DMA(&huart3, (uint8_t*)data_terima, 7);
 8002750:	2207      	movs	r2, #7
 8002752:	495c      	ldr	r1, [pc, #368]	; (80028c4 <main+0x274>)
 8002754:	4628      	mov	r0, r5
 8002756:	f7ff fb3b 	bl	8001dd0 <HAL_UART_Receive_DMA>
	      memcpy(&gyro_buffer, data_terima + 3, 4);
 800275a:	4b5a      	ldr	r3, [pc, #360]	; (80028c4 <main+0x274>)
 800275c:	4a5a      	ldr	r2, [pc, #360]	; (80028c8 <main+0x278>)
 800275e:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8002762:	6013      	str	r3, [r2, #0]
	  	  gyro_derajat = (gyro_offset - gyro_buffer);
 8002764:	4a59      	ldr	r2, [pc, #356]	; (80028cc <main+0x27c>)
 8002766:	4c5a      	ldr	r4, [pc, #360]	; (80028d0 <main+0x280>)
 8002768:	edd2 7a00 	vldr	s15, [r2]
	  	  gyro_radian = (gyro_offset - gyro_buffer) * 0.01745329252;
 800276c:	4d59      	ldr	r5, [pc, #356]	; (80028d4 <main+0x284>)
	  	  gyro_derajat = (gyro_offset - gyro_buffer);
 800276e:	ee07 3a10 	vmov	s14, r3
 8002772:	ee37 8ac7 	vsub.f32	s16, s15, s14
 8002776:	ed84 8a00 	vstr	s16, [r4]
	  	  gyro_radian = (gyro_offset - gyro_buffer) * 0.01745329252;
 800277a:	ee18 0a10 	vmov	r0, s16
 800277e:	f7fd fedb 	bl	8000538 <__aeabi_f2d>
 8002782:	a343      	add	r3, pc, #268	; (adr r3, 8002890 <main+0x240>)
 8002784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002788:	f7fd ff2a 	bl	80005e0 <__aeabi_dmul>
 800278c:	f7fe f9e2 	bl	8000b54 <__aeabi_d2f>
	  	  while(gyro_derajat > 180) gyro_derajat -= 360;
 8002790:	eddf 7a51 	vldr	s15, [pc, #324]	; 80028d8 <main+0x288>
 8002794:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80028dc <main+0x28c>
	  	  gyro_radian = (gyro_offset - gyro_buffer) * 0.01745329252;
 8002798:	6028      	str	r0, [r5, #0]
 800279a:	4682      	mov	sl, r0
	  	  while(gyro_derajat > 180) gyro_derajat -= 360;
 800279c:	2300      	movs	r3, #0
 800279e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80027a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a6:	dc4e      	bgt.n	8002846 <main+0x1f6>
 80027a8:	b10b      	cbz	r3, 80027ae <main+0x15e>
 80027aa:	ed84 8a00 	vstr	s16, [r4]
 80027ae:	edd4 7a00 	vldr	s15, [r4]
	  	  while(gyro_derajat < -180) gyro_derajat +=360;
 80027b2:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80028e0 <main+0x290>
 80027b6:	eddf 6a49 	vldr	s13, [pc, #292]	; 80028dc <main+0x28c>
	  	  while(gyro_derajat > 180) gyro_derajat -= 360;
 80027ba:	2300      	movs	r3, #0
	  	  while(gyro_derajat < -180) gyro_derajat +=360;
 80027bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c4:	d443      	bmi.n	800284e <main+0x1fe>
 80027c6:	b10b      	cbz	r3, 80027cc <main+0x17c>
 80027c8:	edc4 7a00 	vstr	s15, [r4]
	  	  while(gyro_radian > 3.14159265359) gyro_radian -= 6.28318530718;
 80027cc:	a732      	add	r7, pc, #200	; (adr r7, 8002898 <main+0x248>)
 80027ce:	e9d7 6700 	ldrd	r6, r7, [r7]
	  	  while(gyro_derajat > 180) gyro_derajat -= 360;
 80027d2:	f04f 0b00 	mov.w	fp, #0
	  	  while(gyro_radian > 3.14159265359) gyro_radian -= 6.28318530718;
 80027d6:	4650      	mov	r0, sl
 80027d8:	f7fd feae 	bl	8000538 <__aeabi_f2d>
 80027dc:	4632      	mov	r2, r6
 80027de:	463b      	mov	r3, r7
 80027e0:	4680      	mov	r8, r0
 80027e2:	4689      	mov	r9, r1
 80027e4:	f7fe f98c 	bl	8000b00 <__aeabi_dcmpgt>
 80027e8:	bba8      	cbnz	r0, 8002856 <main+0x206>
 80027ea:	f1bb 0f00 	cmp.w	fp, #0
 80027ee:	d001      	beq.n	80027f4 <main+0x1a4>
 80027f0:	f8c5 a000 	str.w	sl, [r5]
	  	  while(gyro_radian < -3.14159265359) gyro_radian += 6.28318530718;
 80027f4:	f20f 09a8 	addw	r9, pc, #168	; 0xa8
 80027f8:	e9d9 8900 	ldrd	r8, r9, [r9]
 80027fc:	f8d5 a000 	ldr.w	sl, [r5]
	  	  while(gyro_derajat > 180) gyro_derajat -= 360;
 8002800:	f04f 0b00 	mov.w	fp, #0
	  	  while(gyro_radian < -3.14159265359) gyro_radian += 6.28318530718;
 8002804:	4650      	mov	r0, sl
 8002806:	f7fd fe97 	bl	8000538 <__aeabi_f2d>
 800280a:	4642      	mov	r2, r8
 800280c:	464b      	mov	r3, r9
 800280e:	4606      	mov	r6, r0
 8002810:	460f      	mov	r7, r1
 8002812:	f7fe f957 	bl	8000ac4 <__aeabi_dcmplt>
 8002816:	bb58      	cbnz	r0, 8002870 <main+0x220>
 8002818:	f1bb 0f00 	cmp.w	fp, #0
 800281c:	d001      	beq.n	8002822 <main+0x1d2>
 800281e:	f8c5 a000 	str.w	sl, [r5]
	  	  LCD1602_clear();
 8002822:	f7ff fe57 	bl	80024d4 <LCD1602_clear>
	  	  LCD1602_setCursor(1,1);
 8002826:	2101      	movs	r1, #1
 8002828:	4608      	mov	r0, r1
 800282a:	f7ff fe3d 	bl	80024a8 <LCD1602_setCursor>
	  	  LCD1602_PrintInt(gyro_derajat);
 800282e:	edd4 7a00 	vldr	s15, [r4]
 8002832:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002836:	ee17 0a90 	vmov	r0, s15
 800283a:	f7ff fe5f 	bl	80024fc <LCD1602_PrintInt>
	  	  HAL_Delay(200);
 800283e:	20c8      	movs	r0, #200	; 0xc8
 8002840:	f7fe fb9c 	bl	8000f7c <HAL_Delay>
	      memcpy(&gyro_buffer, data_terima + 3, 4);
 8002844:	e789      	b.n	800275a <main+0x10a>
	  	  while(gyro_derajat > 180) gyro_derajat -= 360;
 8002846:	ee38 8a47 	vsub.f32	s16, s16, s14
 800284a:	2301      	movs	r3, #1
 800284c:	e7a7      	b.n	800279e <main+0x14e>
	  	  while(gyro_derajat < -180) gyro_derajat +=360;
 800284e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002852:	2301      	movs	r3, #1
 8002854:	e7b2      	b.n	80027bc <main+0x16c>
	  	  while(gyro_radian > 3.14159265359) gyro_radian -= 6.28318530718;
 8002856:	a314      	add	r3, pc, #80	; (adr r3, 80028a8 <main+0x258>)
 8002858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285c:	4640      	mov	r0, r8
 800285e:	4649      	mov	r1, r9
 8002860:	f7fd fd0a 	bl	8000278 <__aeabi_dsub>
 8002864:	f7fe f976 	bl	8000b54 <__aeabi_d2f>
 8002868:	f04f 0b01 	mov.w	fp, #1
 800286c:	4682      	mov	sl, r0
 800286e:	e7b2      	b.n	80027d6 <main+0x186>
	  	  while(gyro_radian < -3.14159265359) gyro_radian += 6.28318530718;
 8002870:	a30d      	add	r3, pc, #52	; (adr r3, 80028a8 <main+0x258>)
 8002872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002876:	4630      	mov	r0, r6
 8002878:	4639      	mov	r1, r7
 800287a:	f7fd fcff 	bl	800027c <__adddf3>
 800287e:	f7fe f969 	bl	8000b54 <__aeabi_d2f>
 8002882:	f04f 0b01 	mov.w	fp, #1
 8002886:	4682      	mov	sl, r0
 8002888:	e7bc      	b.n	8002804 <main+0x1b4>
 800288a:	bf00      	nop
 800288c:	f3af 8000 	nop.w
 8002890:	a252dd11 	.word	0xa252dd11
 8002894:	3f91df46 	.word	0x3f91df46
 8002898:	54442eea 	.word	0x54442eea
 800289c:	400921fb 	.word	0x400921fb
 80028a0:	54442eea 	.word	0x54442eea
 80028a4:	c00921fb 	.word	0xc00921fb
 80028a8:	54442eea 	.word	0x54442eea
 80028ac:	401921fb 	.word	0x401921fb
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40020400 	.word	0x40020400
 80028b8:	40020c00 	.word	0x40020c00
 80028bc:	20000128 	.word	0x20000128
 80028c0:	40004800 	.word	0x40004800
 80028c4:	20000168 	.word	0x20000168
 80028c8:	200000b4 	.word	0x200000b4
 80028cc:	20000008 	.word	0x20000008
 80028d0:	20000004 	.word	0x20000004
 80028d4:	2000000c 	.word	0x2000000c
 80028d8:	43340000 	.word	0x43340000
 80028dc:	43b40000 	.word	0x43b40000
 80028e0:	c3340000 	.word	0xc3340000

080028e4 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 80028e4:	e7fe      	b.n	80028e4 <_Error_Handler>

080028e6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028e6:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028e8:	2003      	movs	r0, #3
 80028ea:	f7fe fb57 	bl	8000f9c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80028ee:	2200      	movs	r2, #0
 80028f0:	4611      	mov	r1, r2
 80028f2:	f06f 000b 	mvn.w	r0, #11
 80028f6:	f7fe fb63 	bl	8000fc0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80028fa:	2200      	movs	r2, #0
 80028fc:	4611      	mov	r1, r2
 80028fe:	f06f 000a 	mvn.w	r0, #10
 8002902:	f7fe fb5d 	bl	8000fc0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002906:	2200      	movs	r2, #0
 8002908:	4611      	mov	r1, r2
 800290a:	f06f 0009 	mvn.w	r0, #9
 800290e:	f7fe fb57 	bl	8000fc0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002912:	2200      	movs	r2, #0
 8002914:	4611      	mov	r1, r2
 8002916:	f06f 0004 	mvn.w	r0, #4
 800291a:	f7fe fb51 	bl	8000fc0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800291e:	2200      	movs	r2, #0
 8002920:	4611      	mov	r1, r2
 8002922:	f06f 0003 	mvn.w	r0, #3
 8002926:	f7fe fb4b 	bl	8000fc0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800292a:	2200      	movs	r2, #0
 800292c:	4611      	mov	r1, r2
 800292e:	f06f 0001 	mvn.w	r0, #1
 8002932:	f7fe fb45 	bl	8000fc0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002936:	2200      	movs	r2, #0
 8002938:	4611      	mov	r1, r2
 800293a:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800293e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002942:	f7fe bb3d 	b.w	8000fc0 <HAL_NVIC_SetPriority>
	...

08002948 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002948:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART3)
 800294a:	6802      	ldr	r2, [r0, #0]
 800294c:	4b22      	ldr	r3, [pc, #136]	; (80029d8 <HAL_UART_MspInit+0x90>)
 800294e:	429a      	cmp	r2, r3
{
 8002950:	b086      	sub	sp, #24
 8002952:	4606      	mov	r6, r0
  if(huart->Instance==USART3)
 8002954:	d13d      	bne.n	80029d2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002956:	2500      	movs	r5, #0
 8002958:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 800295c:	9500      	str	r5, [sp, #0]
 800295e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002960:	481e      	ldr	r0, [pc, #120]	; (80029dc <HAL_UART_MspInit+0x94>)

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002962:	4c1f      	ldr	r4, [pc, #124]	; (80029e0 <HAL_UART_MspInit+0x98>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8002964:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002968:	641a      	str	r2, [r3, #64]	; 0x40
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002974:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002978:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297a:	2302      	movs	r3, #2
 800297c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800297e:	2301      	movs	r3, #1
 8002980:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002982:	2303      	movs	r3, #3
 8002984:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002986:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002988:	2307      	movs	r3, #7
 800298a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800298c:	f7fe fd62 	bl	8001454 <HAL_GPIO_Init>
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002990:	4a14      	ldr	r2, [pc, #80]	; (80029e4 <HAL_UART_MspInit+0x9c>)
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002992:	60a5      	str	r5, [r4, #8]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002994:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002998:	e884 000c 	stmia.w	r4, {r2, r3}
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800299c:	4620      	mov	r0, r4
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800299e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029a2:	60e5      	str	r5, [r4, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029a4:	6123      	str	r3, [r4, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029a6:	6165      	str	r5, [r4, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029a8:	61a5      	str	r5, [r4, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80029aa:	61e5      	str	r5, [r4, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029ac:	6225      	str	r5, [r4, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029ae:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80029b0:	f7fe fb84 	bl	80010bc <HAL_DMA_Init>
 80029b4:	b118      	cbz	r0, 80029be <HAL_UART_MspInit+0x76>
    {
      _Error_Handler(__FILE__, __LINE__);
 80029b6:	2175      	movs	r1, #117	; 0x75
 80029b8:	480b      	ldr	r0, [pc, #44]	; (80029e8 <HAL_UART_MspInit+0xa0>)
 80029ba:	f7ff ff93 	bl	80028e4 <_Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80029be:	2200      	movs	r2, #0
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80029c0:	6374      	str	r4, [r6, #52]	; 0x34
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80029c2:	2027      	movs	r0, #39	; 0x27
 80029c4:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80029c6:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80029c8:	f7fe fafa 	bl	8000fc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80029cc:	2027      	movs	r0, #39	; 0x27
 80029ce:	f7fe fb2b 	bl	8001028 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80029d2:	b006      	add	sp, #24
 80029d4:	bd70      	pop	{r4, r5, r6, pc}
 80029d6:	bf00      	nop
 80029d8:	40004800 	.word	0x40004800
 80029dc:	40020400 	.word	0x40020400
 80029e0:	200000c8 	.word	0x200000c8
 80029e4:	40026028 	.word	0x40026028
 80029e8:	08003390 	.word	0x08003390

080029ec <NMI_Handler>:
 80029ec:	4770      	bx	lr

080029ee <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80029ee:	e7fe      	b.n	80029ee <HardFault_Handler>

080029f0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80029f0:	e7fe      	b.n	80029f0 <MemManage_Handler>

080029f2 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80029f2:	e7fe      	b.n	80029f2 <BusFault_Handler>

080029f4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80029f4:	e7fe      	b.n	80029f4 <UsageFault_Handler>

080029f6 <SVC_Handler>:
 80029f6:	4770      	bx	lr

080029f8 <DebugMon_Handler>:
 80029f8:	4770      	bx	lr

080029fa <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80029fa:	4770      	bx	lr

080029fc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80029fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029fe:	f7fe faaf 	bl	8000f60 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002a06:	f7fe bb3e 	b.w	8001086 <HAL_SYSTICK_IRQHandler>
	...

08002a0c <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002a0c:	4801      	ldr	r0, [pc, #4]	; (8002a14 <DMA1_Stream1_IRQHandler+0x8>)
 8002a0e:	f7fe bc67 	b.w	80012e0 <HAL_DMA_IRQHandler>
 8002a12:	bf00      	nop
 8002a14:	200000c8 	.word	0x200000c8

08002a18 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002a18:	4801      	ldr	r0, [pc, #4]	; (8002a20 <USART3_IRQHandler+0x8>)
 8002a1a:	f7ff bac3 	b.w	8001fa4 <HAL_UART_IRQHandler>
 8002a1e:	bf00      	nop
 8002a20:	20000128 	.word	0x20000128

08002a24 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a24:	490f      	ldr	r1, [pc, #60]	; (8002a64 <SystemInit+0x40>)
 8002a26:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002a2a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002a32:	4b0d      	ldr	r3, [pc, #52]	; (8002a68 <SystemInit+0x44>)
 8002a34:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002a36:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002a38:	f042 0201 	orr.w	r2, r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002a3e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002a46:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a4a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002a4c:	4a07      	ldr	r2, [pc, #28]	; (8002a6c <SystemInit+0x48>)
 8002a4e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a56:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002a58:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002a5e:	608b      	str	r3, [r1, #8]
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	e000ed00 	.word	0xe000ed00
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	24003010 	.word	0x24003010

08002a70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002a70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002aa8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002a74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002a76:	e003      	b.n	8002a80 <LoopCopyDataInit>

08002a78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002a78:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002a7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002a7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002a7e:	3104      	adds	r1, #4

08002a80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002a80:	480b      	ldr	r0, [pc, #44]	; (8002ab0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002a82:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002a84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002a86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a88:	d3f6      	bcc.n	8002a78 <CopyDataInit>
  ldr  r2, =_sbss
 8002a8a:	4a0b      	ldr	r2, [pc, #44]	; (8002ab8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002a8c:	e002      	b.n	8002a94 <LoopFillZerobss>

08002a8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002a8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002a90:	f842 3b04 	str.w	r3, [r2], #4

08002a94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a94:	4b09      	ldr	r3, [pc, #36]	; (8002abc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002a96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a98:	d3f9      	bcc.n	8002a8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a9a:	f7ff ffc3 	bl	8002a24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a9e:	f000 f811 	bl	8002ac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aa2:	f7ff fdd5 	bl	8002650 <main>
  bx  lr    
 8002aa6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002aa8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002aac:	08003408 	.word	0x08003408
  ldr  r0, =_sdata
 8002ab0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002ab4:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8002ab8:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8002abc:	20000178 	.word	0x20000178

08002ac0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ac0:	e7fe      	b.n	8002ac0 <ADC_IRQHandler>
	...

08002ac4 <__libc_init_array>:
 8002ac4:	b570      	push	{r4, r5, r6, lr}
 8002ac6:	4e0d      	ldr	r6, [pc, #52]	; (8002afc <__libc_init_array+0x38>)
 8002ac8:	4c0d      	ldr	r4, [pc, #52]	; (8002b00 <__libc_init_array+0x3c>)
 8002aca:	1ba4      	subs	r4, r4, r6
 8002acc:	10a4      	asrs	r4, r4, #2
 8002ace:	2500      	movs	r5, #0
 8002ad0:	42a5      	cmp	r5, r4
 8002ad2:	d109      	bne.n	8002ae8 <__libc_init_array+0x24>
 8002ad4:	4e0b      	ldr	r6, [pc, #44]	; (8002b04 <__libc_init_array+0x40>)
 8002ad6:	4c0c      	ldr	r4, [pc, #48]	; (8002b08 <__libc_init_array+0x44>)
 8002ad8:	f000 fc44 	bl	8003364 <_init>
 8002adc:	1ba4      	subs	r4, r4, r6
 8002ade:	10a4      	asrs	r4, r4, #2
 8002ae0:	2500      	movs	r5, #0
 8002ae2:	42a5      	cmp	r5, r4
 8002ae4:	d105      	bne.n	8002af2 <__libc_init_array+0x2e>
 8002ae6:	bd70      	pop	{r4, r5, r6, pc}
 8002ae8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002aec:	4798      	blx	r3
 8002aee:	3501      	adds	r5, #1
 8002af0:	e7ee      	b.n	8002ad0 <__libc_init_array+0xc>
 8002af2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002af6:	4798      	blx	r3
 8002af8:	3501      	adds	r5, #1
 8002afa:	e7f2      	b.n	8002ae2 <__libc_init_array+0x1e>
 8002afc:	08003400 	.word	0x08003400
 8002b00:	08003400 	.word	0x08003400
 8002b04:	08003400 	.word	0x08003400
 8002b08:	08003404 	.word	0x08003404

08002b0c <siprintf>:
 8002b0c:	b40e      	push	{r1, r2, r3}
 8002b0e:	b500      	push	{lr}
 8002b10:	b09c      	sub	sp, #112	; 0x70
 8002b12:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002b16:	ab1d      	add	r3, sp, #116	; 0x74
 8002b18:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002b1c:	9002      	str	r0, [sp, #8]
 8002b1e:	9006      	str	r0, [sp, #24]
 8002b20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002b24:	480a      	ldr	r0, [pc, #40]	; (8002b50 <siprintf+0x44>)
 8002b26:	9104      	str	r1, [sp, #16]
 8002b28:	9107      	str	r1, [sp, #28]
 8002b2a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002b2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b32:	f8ad 1016 	strh.w	r1, [sp, #22]
 8002b36:	6800      	ldr	r0, [r0, #0]
 8002b38:	9301      	str	r3, [sp, #4]
 8002b3a:	a902      	add	r1, sp, #8
 8002b3c:	f000 f866 	bl	8002c0c <_svfiprintf_r>
 8002b40:	9b02      	ldr	r3, [sp, #8]
 8002b42:	2200      	movs	r2, #0
 8002b44:	701a      	strb	r2, [r3, #0]
 8002b46:	b01c      	add	sp, #112	; 0x70
 8002b48:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b4c:	b003      	add	sp, #12
 8002b4e:	4770      	bx	lr
 8002b50:	20000014 	.word	0x20000014

08002b54 <__ssputs_r>:
 8002b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b58:	688e      	ldr	r6, [r1, #8]
 8002b5a:	429e      	cmp	r6, r3
 8002b5c:	4682      	mov	sl, r0
 8002b5e:	460c      	mov	r4, r1
 8002b60:	4691      	mov	r9, r2
 8002b62:	4698      	mov	r8, r3
 8002b64:	d835      	bhi.n	8002bd2 <__ssputs_r+0x7e>
 8002b66:	898a      	ldrh	r2, [r1, #12]
 8002b68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002b6c:	d031      	beq.n	8002bd2 <__ssputs_r+0x7e>
 8002b6e:	6825      	ldr	r5, [r4, #0]
 8002b70:	6909      	ldr	r1, [r1, #16]
 8002b72:	1a6f      	subs	r7, r5, r1
 8002b74:	6965      	ldr	r5, [r4, #20]
 8002b76:	2302      	movs	r3, #2
 8002b78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002b7c:	fb95 f5f3 	sdiv	r5, r5, r3
 8002b80:	f108 0301 	add.w	r3, r8, #1
 8002b84:	443b      	add	r3, r7
 8002b86:	429d      	cmp	r5, r3
 8002b88:	bf38      	it	cc
 8002b8a:	461d      	movcc	r5, r3
 8002b8c:	0553      	lsls	r3, r2, #21
 8002b8e:	d531      	bpl.n	8002bf4 <__ssputs_r+0xa0>
 8002b90:	4629      	mov	r1, r5
 8002b92:	f000 fb39 	bl	8003208 <_malloc_r>
 8002b96:	4606      	mov	r6, r0
 8002b98:	b950      	cbnz	r0, 8002bb0 <__ssputs_r+0x5c>
 8002b9a:	230c      	movs	r3, #12
 8002b9c:	f8ca 3000 	str.w	r3, [sl]
 8002ba0:	89a3      	ldrh	r3, [r4, #12]
 8002ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ba6:	81a3      	strh	r3, [r4, #12]
 8002ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bb0:	463a      	mov	r2, r7
 8002bb2:	6921      	ldr	r1, [r4, #16]
 8002bb4:	f000 fab4 	bl	8003120 <memcpy>
 8002bb8:	89a3      	ldrh	r3, [r4, #12]
 8002bba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bc2:	81a3      	strh	r3, [r4, #12]
 8002bc4:	6126      	str	r6, [r4, #16]
 8002bc6:	6165      	str	r5, [r4, #20]
 8002bc8:	443e      	add	r6, r7
 8002bca:	1bed      	subs	r5, r5, r7
 8002bcc:	6026      	str	r6, [r4, #0]
 8002bce:	60a5      	str	r5, [r4, #8]
 8002bd0:	4646      	mov	r6, r8
 8002bd2:	4546      	cmp	r6, r8
 8002bd4:	bf28      	it	cs
 8002bd6:	4646      	movcs	r6, r8
 8002bd8:	4632      	mov	r2, r6
 8002bda:	4649      	mov	r1, r9
 8002bdc:	6820      	ldr	r0, [r4, #0]
 8002bde:	f000 faaa 	bl	8003136 <memmove>
 8002be2:	68a3      	ldr	r3, [r4, #8]
 8002be4:	1b9b      	subs	r3, r3, r6
 8002be6:	60a3      	str	r3, [r4, #8]
 8002be8:	6823      	ldr	r3, [r4, #0]
 8002bea:	441e      	add	r6, r3
 8002bec:	6026      	str	r6, [r4, #0]
 8002bee:	2000      	movs	r0, #0
 8002bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bf4:	462a      	mov	r2, r5
 8002bf6:	f000 fb65 	bl	80032c4 <_realloc_r>
 8002bfa:	4606      	mov	r6, r0
 8002bfc:	2800      	cmp	r0, #0
 8002bfe:	d1e1      	bne.n	8002bc4 <__ssputs_r+0x70>
 8002c00:	6921      	ldr	r1, [r4, #16]
 8002c02:	4650      	mov	r0, sl
 8002c04:	f000 fab2 	bl	800316c <_free_r>
 8002c08:	e7c7      	b.n	8002b9a <__ssputs_r+0x46>
	...

08002c0c <_svfiprintf_r>:
 8002c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c10:	b09d      	sub	sp, #116	; 0x74
 8002c12:	4680      	mov	r8, r0
 8002c14:	9303      	str	r3, [sp, #12]
 8002c16:	898b      	ldrh	r3, [r1, #12]
 8002c18:	061c      	lsls	r4, r3, #24
 8002c1a:	460d      	mov	r5, r1
 8002c1c:	4616      	mov	r6, r2
 8002c1e:	d50f      	bpl.n	8002c40 <_svfiprintf_r+0x34>
 8002c20:	690b      	ldr	r3, [r1, #16]
 8002c22:	b96b      	cbnz	r3, 8002c40 <_svfiprintf_r+0x34>
 8002c24:	2140      	movs	r1, #64	; 0x40
 8002c26:	f000 faef 	bl	8003208 <_malloc_r>
 8002c2a:	6028      	str	r0, [r5, #0]
 8002c2c:	6128      	str	r0, [r5, #16]
 8002c2e:	b928      	cbnz	r0, 8002c3c <_svfiprintf_r+0x30>
 8002c30:	230c      	movs	r3, #12
 8002c32:	f8c8 3000 	str.w	r3, [r8]
 8002c36:	f04f 30ff 	mov.w	r0, #4294967295
 8002c3a:	e0c5      	b.n	8002dc8 <_svfiprintf_r+0x1bc>
 8002c3c:	2340      	movs	r3, #64	; 0x40
 8002c3e:	616b      	str	r3, [r5, #20]
 8002c40:	2300      	movs	r3, #0
 8002c42:	9309      	str	r3, [sp, #36]	; 0x24
 8002c44:	2320      	movs	r3, #32
 8002c46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c4a:	2330      	movs	r3, #48	; 0x30
 8002c4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c50:	f04f 0b01 	mov.w	fp, #1
 8002c54:	4637      	mov	r7, r6
 8002c56:	463c      	mov	r4, r7
 8002c58:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d13c      	bne.n	8002cda <_svfiprintf_r+0xce>
 8002c60:	ebb7 0a06 	subs.w	sl, r7, r6
 8002c64:	d00b      	beq.n	8002c7e <_svfiprintf_r+0x72>
 8002c66:	4653      	mov	r3, sl
 8002c68:	4632      	mov	r2, r6
 8002c6a:	4629      	mov	r1, r5
 8002c6c:	4640      	mov	r0, r8
 8002c6e:	f7ff ff71 	bl	8002b54 <__ssputs_r>
 8002c72:	3001      	adds	r0, #1
 8002c74:	f000 80a3 	beq.w	8002dbe <_svfiprintf_r+0x1b2>
 8002c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c7a:	4453      	add	r3, sl
 8002c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8002c7e:	783b      	ldrb	r3, [r7, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 809c 	beq.w	8002dbe <_svfiprintf_r+0x1b2>
 8002c86:	2300      	movs	r3, #0
 8002c88:	f04f 32ff 	mov.w	r2, #4294967295
 8002c8c:	9304      	str	r3, [sp, #16]
 8002c8e:	9307      	str	r3, [sp, #28]
 8002c90:	9205      	str	r2, [sp, #20]
 8002c92:	9306      	str	r3, [sp, #24]
 8002c94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c98:	931a      	str	r3, [sp, #104]	; 0x68
 8002c9a:	2205      	movs	r2, #5
 8002c9c:	7821      	ldrb	r1, [r4, #0]
 8002c9e:	4850      	ldr	r0, [pc, #320]	; (8002de0 <_svfiprintf_r+0x1d4>)
 8002ca0:	f7fd fa96 	bl	80001d0 <memchr>
 8002ca4:	1c67      	adds	r7, r4, #1
 8002ca6:	9b04      	ldr	r3, [sp, #16]
 8002ca8:	b9d8      	cbnz	r0, 8002ce2 <_svfiprintf_r+0xd6>
 8002caa:	06d9      	lsls	r1, r3, #27
 8002cac:	bf44      	itt	mi
 8002cae:	2220      	movmi	r2, #32
 8002cb0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002cb4:	071a      	lsls	r2, r3, #28
 8002cb6:	bf44      	itt	mi
 8002cb8:	222b      	movmi	r2, #43	; 0x2b
 8002cba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002cbe:	7822      	ldrb	r2, [r4, #0]
 8002cc0:	2a2a      	cmp	r2, #42	; 0x2a
 8002cc2:	d016      	beq.n	8002cf2 <_svfiprintf_r+0xe6>
 8002cc4:	9a07      	ldr	r2, [sp, #28]
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	200a      	movs	r0, #10
 8002cca:	4627      	mov	r7, r4
 8002ccc:	3401      	adds	r4, #1
 8002cce:	783b      	ldrb	r3, [r7, #0]
 8002cd0:	3b30      	subs	r3, #48	; 0x30
 8002cd2:	2b09      	cmp	r3, #9
 8002cd4:	d951      	bls.n	8002d7a <_svfiprintf_r+0x16e>
 8002cd6:	b1c9      	cbz	r1, 8002d0c <_svfiprintf_r+0x100>
 8002cd8:	e011      	b.n	8002cfe <_svfiprintf_r+0xf2>
 8002cda:	2b25      	cmp	r3, #37	; 0x25
 8002cdc:	d0c0      	beq.n	8002c60 <_svfiprintf_r+0x54>
 8002cde:	4627      	mov	r7, r4
 8002ce0:	e7b9      	b.n	8002c56 <_svfiprintf_r+0x4a>
 8002ce2:	4a3f      	ldr	r2, [pc, #252]	; (8002de0 <_svfiprintf_r+0x1d4>)
 8002ce4:	1a80      	subs	r0, r0, r2
 8002ce6:	fa0b f000 	lsl.w	r0, fp, r0
 8002cea:	4318      	orrs	r0, r3
 8002cec:	9004      	str	r0, [sp, #16]
 8002cee:	463c      	mov	r4, r7
 8002cf0:	e7d3      	b.n	8002c9a <_svfiprintf_r+0x8e>
 8002cf2:	9a03      	ldr	r2, [sp, #12]
 8002cf4:	1d11      	adds	r1, r2, #4
 8002cf6:	6812      	ldr	r2, [r2, #0]
 8002cf8:	9103      	str	r1, [sp, #12]
 8002cfa:	2a00      	cmp	r2, #0
 8002cfc:	db01      	blt.n	8002d02 <_svfiprintf_r+0xf6>
 8002cfe:	9207      	str	r2, [sp, #28]
 8002d00:	e004      	b.n	8002d0c <_svfiprintf_r+0x100>
 8002d02:	4252      	negs	r2, r2
 8002d04:	f043 0302 	orr.w	r3, r3, #2
 8002d08:	9207      	str	r2, [sp, #28]
 8002d0a:	9304      	str	r3, [sp, #16]
 8002d0c:	783b      	ldrb	r3, [r7, #0]
 8002d0e:	2b2e      	cmp	r3, #46	; 0x2e
 8002d10:	d10e      	bne.n	8002d30 <_svfiprintf_r+0x124>
 8002d12:	787b      	ldrb	r3, [r7, #1]
 8002d14:	2b2a      	cmp	r3, #42	; 0x2a
 8002d16:	f107 0101 	add.w	r1, r7, #1
 8002d1a:	d132      	bne.n	8002d82 <_svfiprintf_r+0x176>
 8002d1c:	9b03      	ldr	r3, [sp, #12]
 8002d1e:	1d1a      	adds	r2, r3, #4
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	9203      	str	r2, [sp, #12]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	bfb8      	it	lt
 8002d28:	f04f 33ff 	movlt.w	r3, #4294967295
 8002d2c:	3702      	adds	r7, #2
 8002d2e:	9305      	str	r3, [sp, #20]
 8002d30:	4c2c      	ldr	r4, [pc, #176]	; (8002de4 <_svfiprintf_r+0x1d8>)
 8002d32:	7839      	ldrb	r1, [r7, #0]
 8002d34:	2203      	movs	r2, #3
 8002d36:	4620      	mov	r0, r4
 8002d38:	f7fd fa4a 	bl	80001d0 <memchr>
 8002d3c:	b138      	cbz	r0, 8002d4e <_svfiprintf_r+0x142>
 8002d3e:	2340      	movs	r3, #64	; 0x40
 8002d40:	1b00      	subs	r0, r0, r4
 8002d42:	fa03 f000 	lsl.w	r0, r3, r0
 8002d46:	9b04      	ldr	r3, [sp, #16]
 8002d48:	4303      	orrs	r3, r0
 8002d4a:	9304      	str	r3, [sp, #16]
 8002d4c:	3701      	adds	r7, #1
 8002d4e:	7839      	ldrb	r1, [r7, #0]
 8002d50:	4825      	ldr	r0, [pc, #148]	; (8002de8 <_svfiprintf_r+0x1dc>)
 8002d52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d56:	2206      	movs	r2, #6
 8002d58:	1c7e      	adds	r6, r7, #1
 8002d5a:	f7fd fa39 	bl	80001d0 <memchr>
 8002d5e:	2800      	cmp	r0, #0
 8002d60:	d035      	beq.n	8002dce <_svfiprintf_r+0x1c2>
 8002d62:	4b22      	ldr	r3, [pc, #136]	; (8002dec <_svfiprintf_r+0x1e0>)
 8002d64:	b9fb      	cbnz	r3, 8002da6 <_svfiprintf_r+0x19a>
 8002d66:	9b03      	ldr	r3, [sp, #12]
 8002d68:	3307      	adds	r3, #7
 8002d6a:	f023 0307 	bic.w	r3, r3, #7
 8002d6e:	3308      	adds	r3, #8
 8002d70:	9303      	str	r3, [sp, #12]
 8002d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d74:	444b      	add	r3, r9
 8002d76:	9309      	str	r3, [sp, #36]	; 0x24
 8002d78:	e76c      	b.n	8002c54 <_svfiprintf_r+0x48>
 8002d7a:	fb00 3202 	mla	r2, r0, r2, r3
 8002d7e:	2101      	movs	r1, #1
 8002d80:	e7a3      	b.n	8002cca <_svfiprintf_r+0xbe>
 8002d82:	2300      	movs	r3, #0
 8002d84:	9305      	str	r3, [sp, #20]
 8002d86:	4618      	mov	r0, r3
 8002d88:	240a      	movs	r4, #10
 8002d8a:	460f      	mov	r7, r1
 8002d8c:	3101      	adds	r1, #1
 8002d8e:	783a      	ldrb	r2, [r7, #0]
 8002d90:	3a30      	subs	r2, #48	; 0x30
 8002d92:	2a09      	cmp	r2, #9
 8002d94:	d903      	bls.n	8002d9e <_svfiprintf_r+0x192>
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0ca      	beq.n	8002d30 <_svfiprintf_r+0x124>
 8002d9a:	9005      	str	r0, [sp, #20]
 8002d9c:	e7c8      	b.n	8002d30 <_svfiprintf_r+0x124>
 8002d9e:	fb04 2000 	mla	r0, r4, r0, r2
 8002da2:	2301      	movs	r3, #1
 8002da4:	e7f1      	b.n	8002d8a <_svfiprintf_r+0x17e>
 8002da6:	ab03      	add	r3, sp, #12
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	462a      	mov	r2, r5
 8002dac:	4b10      	ldr	r3, [pc, #64]	; (8002df0 <_svfiprintf_r+0x1e4>)
 8002dae:	a904      	add	r1, sp, #16
 8002db0:	4640      	mov	r0, r8
 8002db2:	f3af 8000 	nop.w
 8002db6:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002dba:	4681      	mov	r9, r0
 8002dbc:	d1d9      	bne.n	8002d72 <_svfiprintf_r+0x166>
 8002dbe:	89ab      	ldrh	r3, [r5, #12]
 8002dc0:	065b      	lsls	r3, r3, #25
 8002dc2:	f53f af38 	bmi.w	8002c36 <_svfiprintf_r+0x2a>
 8002dc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002dc8:	b01d      	add	sp, #116	; 0x74
 8002dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dce:	ab03      	add	r3, sp, #12
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	462a      	mov	r2, r5
 8002dd4:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <_svfiprintf_r+0x1e4>)
 8002dd6:	a904      	add	r1, sp, #16
 8002dd8:	4640      	mov	r0, r8
 8002dda:	f000 f881 	bl	8002ee0 <_printf_i>
 8002dde:	e7ea      	b.n	8002db6 <_svfiprintf_r+0x1aa>
 8002de0:	080033c3 	.word	0x080033c3
 8002de4:	080033c9 	.word	0x080033c9
 8002de8:	080033cd 	.word	0x080033cd
 8002dec:	00000000 	.word	0x00000000
 8002df0:	08002b55 	.word	0x08002b55

08002df4 <_printf_common>:
 8002df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002df8:	4691      	mov	r9, r2
 8002dfa:	461f      	mov	r7, r3
 8002dfc:	688a      	ldr	r2, [r1, #8]
 8002dfe:	690b      	ldr	r3, [r1, #16]
 8002e00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e04:	4293      	cmp	r3, r2
 8002e06:	bfb8      	it	lt
 8002e08:	4613      	movlt	r3, r2
 8002e0a:	f8c9 3000 	str.w	r3, [r9]
 8002e0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e12:	4606      	mov	r6, r0
 8002e14:	460c      	mov	r4, r1
 8002e16:	b112      	cbz	r2, 8002e1e <_printf_common+0x2a>
 8002e18:	3301      	adds	r3, #1
 8002e1a:	f8c9 3000 	str.w	r3, [r9]
 8002e1e:	6823      	ldr	r3, [r4, #0]
 8002e20:	0699      	lsls	r1, r3, #26
 8002e22:	bf42      	ittt	mi
 8002e24:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002e28:	3302      	addmi	r3, #2
 8002e2a:	f8c9 3000 	strmi.w	r3, [r9]
 8002e2e:	6825      	ldr	r5, [r4, #0]
 8002e30:	f015 0506 	ands.w	r5, r5, #6
 8002e34:	d107      	bne.n	8002e46 <_printf_common+0x52>
 8002e36:	f104 0a19 	add.w	sl, r4, #25
 8002e3a:	68e3      	ldr	r3, [r4, #12]
 8002e3c:	f8d9 2000 	ldr.w	r2, [r9]
 8002e40:	1a9b      	subs	r3, r3, r2
 8002e42:	429d      	cmp	r5, r3
 8002e44:	db29      	blt.n	8002e9a <_printf_common+0xa6>
 8002e46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002e4a:	6822      	ldr	r2, [r4, #0]
 8002e4c:	3300      	adds	r3, #0
 8002e4e:	bf18      	it	ne
 8002e50:	2301      	movne	r3, #1
 8002e52:	0692      	lsls	r2, r2, #26
 8002e54:	d42e      	bmi.n	8002eb4 <_printf_common+0xc0>
 8002e56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e5a:	4639      	mov	r1, r7
 8002e5c:	4630      	mov	r0, r6
 8002e5e:	47c0      	blx	r8
 8002e60:	3001      	adds	r0, #1
 8002e62:	d021      	beq.n	8002ea8 <_printf_common+0xb4>
 8002e64:	6823      	ldr	r3, [r4, #0]
 8002e66:	68e5      	ldr	r5, [r4, #12]
 8002e68:	f8d9 2000 	ldr.w	r2, [r9]
 8002e6c:	f003 0306 	and.w	r3, r3, #6
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	bf08      	it	eq
 8002e74:	1aad      	subeq	r5, r5, r2
 8002e76:	68a3      	ldr	r3, [r4, #8]
 8002e78:	6922      	ldr	r2, [r4, #16]
 8002e7a:	bf0c      	ite	eq
 8002e7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e80:	2500      	movne	r5, #0
 8002e82:	4293      	cmp	r3, r2
 8002e84:	bfc4      	itt	gt
 8002e86:	1a9b      	subgt	r3, r3, r2
 8002e88:	18ed      	addgt	r5, r5, r3
 8002e8a:	f04f 0900 	mov.w	r9, #0
 8002e8e:	341a      	adds	r4, #26
 8002e90:	454d      	cmp	r5, r9
 8002e92:	d11b      	bne.n	8002ecc <_printf_common+0xd8>
 8002e94:	2000      	movs	r0, #0
 8002e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	4652      	mov	r2, sl
 8002e9e:	4639      	mov	r1, r7
 8002ea0:	4630      	mov	r0, r6
 8002ea2:	47c0      	blx	r8
 8002ea4:	3001      	adds	r0, #1
 8002ea6:	d103      	bne.n	8002eb0 <_printf_common+0xbc>
 8002ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8002eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002eb0:	3501      	adds	r5, #1
 8002eb2:	e7c2      	b.n	8002e3a <_printf_common+0x46>
 8002eb4:	18e1      	adds	r1, r4, r3
 8002eb6:	1c5a      	adds	r2, r3, #1
 8002eb8:	2030      	movs	r0, #48	; 0x30
 8002eba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ebe:	4422      	add	r2, r4
 8002ec0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ec4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ec8:	3302      	adds	r3, #2
 8002eca:	e7c4      	b.n	8002e56 <_printf_common+0x62>
 8002ecc:	2301      	movs	r3, #1
 8002ece:	4622      	mov	r2, r4
 8002ed0:	4639      	mov	r1, r7
 8002ed2:	4630      	mov	r0, r6
 8002ed4:	47c0      	blx	r8
 8002ed6:	3001      	adds	r0, #1
 8002ed8:	d0e6      	beq.n	8002ea8 <_printf_common+0xb4>
 8002eda:	f109 0901 	add.w	r9, r9, #1
 8002ede:	e7d7      	b.n	8002e90 <_printf_common+0x9c>

08002ee0 <_printf_i>:
 8002ee0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ee4:	4617      	mov	r7, r2
 8002ee6:	7e0a      	ldrb	r2, [r1, #24]
 8002ee8:	b085      	sub	sp, #20
 8002eea:	2a6e      	cmp	r2, #110	; 0x6e
 8002eec:	4698      	mov	r8, r3
 8002eee:	4606      	mov	r6, r0
 8002ef0:	460c      	mov	r4, r1
 8002ef2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002ef4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002ef8:	f000 80bc 	beq.w	8003074 <_printf_i+0x194>
 8002efc:	d81a      	bhi.n	8002f34 <_printf_i+0x54>
 8002efe:	2a63      	cmp	r2, #99	; 0x63
 8002f00:	d02e      	beq.n	8002f60 <_printf_i+0x80>
 8002f02:	d80a      	bhi.n	8002f1a <_printf_i+0x3a>
 8002f04:	2a00      	cmp	r2, #0
 8002f06:	f000 80c8 	beq.w	800309a <_printf_i+0x1ba>
 8002f0a:	2a58      	cmp	r2, #88	; 0x58
 8002f0c:	f000 808a 	beq.w	8003024 <_printf_i+0x144>
 8002f10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f14:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002f18:	e02a      	b.n	8002f70 <_printf_i+0x90>
 8002f1a:	2a64      	cmp	r2, #100	; 0x64
 8002f1c:	d001      	beq.n	8002f22 <_printf_i+0x42>
 8002f1e:	2a69      	cmp	r2, #105	; 0x69
 8002f20:	d1f6      	bne.n	8002f10 <_printf_i+0x30>
 8002f22:	6821      	ldr	r1, [r4, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002f2a:	d023      	beq.n	8002f74 <_printf_i+0x94>
 8002f2c:	1d11      	adds	r1, r2, #4
 8002f2e:	6019      	str	r1, [r3, #0]
 8002f30:	6813      	ldr	r3, [r2, #0]
 8002f32:	e027      	b.n	8002f84 <_printf_i+0xa4>
 8002f34:	2a73      	cmp	r2, #115	; 0x73
 8002f36:	f000 80b4 	beq.w	80030a2 <_printf_i+0x1c2>
 8002f3a:	d808      	bhi.n	8002f4e <_printf_i+0x6e>
 8002f3c:	2a6f      	cmp	r2, #111	; 0x6f
 8002f3e:	d02a      	beq.n	8002f96 <_printf_i+0xb6>
 8002f40:	2a70      	cmp	r2, #112	; 0x70
 8002f42:	d1e5      	bne.n	8002f10 <_printf_i+0x30>
 8002f44:	680a      	ldr	r2, [r1, #0]
 8002f46:	f042 0220 	orr.w	r2, r2, #32
 8002f4a:	600a      	str	r2, [r1, #0]
 8002f4c:	e003      	b.n	8002f56 <_printf_i+0x76>
 8002f4e:	2a75      	cmp	r2, #117	; 0x75
 8002f50:	d021      	beq.n	8002f96 <_printf_i+0xb6>
 8002f52:	2a78      	cmp	r2, #120	; 0x78
 8002f54:	d1dc      	bne.n	8002f10 <_printf_i+0x30>
 8002f56:	2278      	movs	r2, #120	; 0x78
 8002f58:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002f5c:	496e      	ldr	r1, [pc, #440]	; (8003118 <_printf_i+0x238>)
 8002f5e:	e064      	b.n	800302a <_printf_i+0x14a>
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002f66:	1d11      	adds	r1, r2, #4
 8002f68:	6019      	str	r1, [r3, #0]
 8002f6a:	6813      	ldr	r3, [r2, #0]
 8002f6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f70:	2301      	movs	r3, #1
 8002f72:	e0a3      	b.n	80030bc <_printf_i+0x1dc>
 8002f74:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002f78:	f102 0104 	add.w	r1, r2, #4
 8002f7c:	6019      	str	r1, [r3, #0]
 8002f7e:	d0d7      	beq.n	8002f30 <_printf_i+0x50>
 8002f80:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	da03      	bge.n	8002f90 <_printf_i+0xb0>
 8002f88:	222d      	movs	r2, #45	; 0x2d
 8002f8a:	425b      	negs	r3, r3
 8002f8c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002f90:	4962      	ldr	r1, [pc, #392]	; (800311c <_printf_i+0x23c>)
 8002f92:	220a      	movs	r2, #10
 8002f94:	e017      	b.n	8002fc6 <_printf_i+0xe6>
 8002f96:	6820      	ldr	r0, [r4, #0]
 8002f98:	6819      	ldr	r1, [r3, #0]
 8002f9a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002f9e:	d003      	beq.n	8002fa8 <_printf_i+0xc8>
 8002fa0:	1d08      	adds	r0, r1, #4
 8002fa2:	6018      	str	r0, [r3, #0]
 8002fa4:	680b      	ldr	r3, [r1, #0]
 8002fa6:	e006      	b.n	8002fb6 <_printf_i+0xd6>
 8002fa8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002fac:	f101 0004 	add.w	r0, r1, #4
 8002fb0:	6018      	str	r0, [r3, #0]
 8002fb2:	d0f7      	beq.n	8002fa4 <_printf_i+0xc4>
 8002fb4:	880b      	ldrh	r3, [r1, #0]
 8002fb6:	4959      	ldr	r1, [pc, #356]	; (800311c <_printf_i+0x23c>)
 8002fb8:	2a6f      	cmp	r2, #111	; 0x6f
 8002fba:	bf14      	ite	ne
 8002fbc:	220a      	movne	r2, #10
 8002fbe:	2208      	moveq	r2, #8
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002fc6:	6865      	ldr	r5, [r4, #4]
 8002fc8:	60a5      	str	r5, [r4, #8]
 8002fca:	2d00      	cmp	r5, #0
 8002fcc:	f2c0 809c 	blt.w	8003108 <_printf_i+0x228>
 8002fd0:	6820      	ldr	r0, [r4, #0]
 8002fd2:	f020 0004 	bic.w	r0, r0, #4
 8002fd6:	6020      	str	r0, [r4, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d13f      	bne.n	800305c <_printf_i+0x17c>
 8002fdc:	2d00      	cmp	r5, #0
 8002fde:	f040 8095 	bne.w	800310c <_printf_i+0x22c>
 8002fe2:	4675      	mov	r5, lr
 8002fe4:	2a08      	cmp	r2, #8
 8002fe6:	d10b      	bne.n	8003000 <_printf_i+0x120>
 8002fe8:	6823      	ldr	r3, [r4, #0]
 8002fea:	07da      	lsls	r2, r3, #31
 8002fec:	d508      	bpl.n	8003000 <_printf_i+0x120>
 8002fee:	6923      	ldr	r3, [r4, #16]
 8002ff0:	6862      	ldr	r2, [r4, #4]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	bfde      	ittt	le
 8002ff6:	2330      	movle	r3, #48	; 0x30
 8002ff8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ffc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003000:	ebae 0305 	sub.w	r3, lr, r5
 8003004:	6123      	str	r3, [r4, #16]
 8003006:	f8cd 8000 	str.w	r8, [sp]
 800300a:	463b      	mov	r3, r7
 800300c:	aa03      	add	r2, sp, #12
 800300e:	4621      	mov	r1, r4
 8003010:	4630      	mov	r0, r6
 8003012:	f7ff feef 	bl	8002df4 <_printf_common>
 8003016:	3001      	adds	r0, #1
 8003018:	d155      	bne.n	80030c6 <_printf_i+0x1e6>
 800301a:	f04f 30ff 	mov.w	r0, #4294967295
 800301e:	b005      	add	sp, #20
 8003020:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003024:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003028:	493c      	ldr	r1, [pc, #240]	; (800311c <_printf_i+0x23c>)
 800302a:	6822      	ldr	r2, [r4, #0]
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003032:	f100 0504 	add.w	r5, r0, #4
 8003036:	601d      	str	r5, [r3, #0]
 8003038:	d001      	beq.n	800303e <_printf_i+0x15e>
 800303a:	6803      	ldr	r3, [r0, #0]
 800303c:	e002      	b.n	8003044 <_printf_i+0x164>
 800303e:	0655      	lsls	r5, r2, #25
 8003040:	d5fb      	bpl.n	800303a <_printf_i+0x15a>
 8003042:	8803      	ldrh	r3, [r0, #0]
 8003044:	07d0      	lsls	r0, r2, #31
 8003046:	bf44      	itt	mi
 8003048:	f042 0220 	orrmi.w	r2, r2, #32
 800304c:	6022      	strmi	r2, [r4, #0]
 800304e:	b91b      	cbnz	r3, 8003058 <_printf_i+0x178>
 8003050:	6822      	ldr	r2, [r4, #0]
 8003052:	f022 0220 	bic.w	r2, r2, #32
 8003056:	6022      	str	r2, [r4, #0]
 8003058:	2210      	movs	r2, #16
 800305a:	e7b1      	b.n	8002fc0 <_printf_i+0xe0>
 800305c:	4675      	mov	r5, lr
 800305e:	fbb3 f0f2 	udiv	r0, r3, r2
 8003062:	fb02 3310 	mls	r3, r2, r0, r3
 8003066:	5ccb      	ldrb	r3, [r1, r3]
 8003068:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800306c:	4603      	mov	r3, r0
 800306e:	2800      	cmp	r0, #0
 8003070:	d1f5      	bne.n	800305e <_printf_i+0x17e>
 8003072:	e7b7      	b.n	8002fe4 <_printf_i+0x104>
 8003074:	6808      	ldr	r0, [r1, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	6949      	ldr	r1, [r1, #20]
 800307a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800307e:	d004      	beq.n	800308a <_printf_i+0x1aa>
 8003080:	1d10      	adds	r0, r2, #4
 8003082:	6018      	str	r0, [r3, #0]
 8003084:	6813      	ldr	r3, [r2, #0]
 8003086:	6019      	str	r1, [r3, #0]
 8003088:	e007      	b.n	800309a <_printf_i+0x1ba>
 800308a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800308e:	f102 0004 	add.w	r0, r2, #4
 8003092:	6018      	str	r0, [r3, #0]
 8003094:	6813      	ldr	r3, [r2, #0]
 8003096:	d0f6      	beq.n	8003086 <_printf_i+0x1a6>
 8003098:	8019      	strh	r1, [r3, #0]
 800309a:	2300      	movs	r3, #0
 800309c:	6123      	str	r3, [r4, #16]
 800309e:	4675      	mov	r5, lr
 80030a0:	e7b1      	b.n	8003006 <_printf_i+0x126>
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	1d11      	adds	r1, r2, #4
 80030a6:	6019      	str	r1, [r3, #0]
 80030a8:	6815      	ldr	r5, [r2, #0]
 80030aa:	6862      	ldr	r2, [r4, #4]
 80030ac:	2100      	movs	r1, #0
 80030ae:	4628      	mov	r0, r5
 80030b0:	f7fd f88e 	bl	80001d0 <memchr>
 80030b4:	b108      	cbz	r0, 80030ba <_printf_i+0x1da>
 80030b6:	1b40      	subs	r0, r0, r5
 80030b8:	6060      	str	r0, [r4, #4]
 80030ba:	6863      	ldr	r3, [r4, #4]
 80030bc:	6123      	str	r3, [r4, #16]
 80030be:	2300      	movs	r3, #0
 80030c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030c4:	e79f      	b.n	8003006 <_printf_i+0x126>
 80030c6:	6923      	ldr	r3, [r4, #16]
 80030c8:	462a      	mov	r2, r5
 80030ca:	4639      	mov	r1, r7
 80030cc:	4630      	mov	r0, r6
 80030ce:	47c0      	blx	r8
 80030d0:	3001      	adds	r0, #1
 80030d2:	d0a2      	beq.n	800301a <_printf_i+0x13a>
 80030d4:	6823      	ldr	r3, [r4, #0]
 80030d6:	079b      	lsls	r3, r3, #30
 80030d8:	d507      	bpl.n	80030ea <_printf_i+0x20a>
 80030da:	2500      	movs	r5, #0
 80030dc:	f104 0919 	add.w	r9, r4, #25
 80030e0:	68e3      	ldr	r3, [r4, #12]
 80030e2:	9a03      	ldr	r2, [sp, #12]
 80030e4:	1a9b      	subs	r3, r3, r2
 80030e6:	429d      	cmp	r5, r3
 80030e8:	db05      	blt.n	80030f6 <_printf_i+0x216>
 80030ea:	68e0      	ldr	r0, [r4, #12]
 80030ec:	9b03      	ldr	r3, [sp, #12]
 80030ee:	4298      	cmp	r0, r3
 80030f0:	bfb8      	it	lt
 80030f2:	4618      	movlt	r0, r3
 80030f4:	e793      	b.n	800301e <_printf_i+0x13e>
 80030f6:	2301      	movs	r3, #1
 80030f8:	464a      	mov	r2, r9
 80030fa:	4639      	mov	r1, r7
 80030fc:	4630      	mov	r0, r6
 80030fe:	47c0      	blx	r8
 8003100:	3001      	adds	r0, #1
 8003102:	d08a      	beq.n	800301a <_printf_i+0x13a>
 8003104:	3501      	adds	r5, #1
 8003106:	e7eb      	b.n	80030e0 <_printf_i+0x200>
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1a7      	bne.n	800305c <_printf_i+0x17c>
 800310c:	780b      	ldrb	r3, [r1, #0]
 800310e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003112:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003116:	e765      	b.n	8002fe4 <_printf_i+0x104>
 8003118:	080033e5 	.word	0x080033e5
 800311c:	080033d4 	.word	0x080033d4

08003120 <memcpy>:
 8003120:	b510      	push	{r4, lr}
 8003122:	1e43      	subs	r3, r0, #1
 8003124:	440a      	add	r2, r1
 8003126:	4291      	cmp	r1, r2
 8003128:	d100      	bne.n	800312c <memcpy+0xc>
 800312a:	bd10      	pop	{r4, pc}
 800312c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003130:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003134:	e7f7      	b.n	8003126 <memcpy+0x6>

08003136 <memmove>:
 8003136:	4288      	cmp	r0, r1
 8003138:	b510      	push	{r4, lr}
 800313a:	eb01 0302 	add.w	r3, r1, r2
 800313e:	d803      	bhi.n	8003148 <memmove+0x12>
 8003140:	1e42      	subs	r2, r0, #1
 8003142:	4299      	cmp	r1, r3
 8003144:	d10c      	bne.n	8003160 <memmove+0x2a>
 8003146:	bd10      	pop	{r4, pc}
 8003148:	4298      	cmp	r0, r3
 800314a:	d2f9      	bcs.n	8003140 <memmove+0xa>
 800314c:	1881      	adds	r1, r0, r2
 800314e:	1ad2      	subs	r2, r2, r3
 8003150:	42d3      	cmn	r3, r2
 8003152:	d100      	bne.n	8003156 <memmove+0x20>
 8003154:	bd10      	pop	{r4, pc}
 8003156:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800315a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800315e:	e7f7      	b.n	8003150 <memmove+0x1a>
 8003160:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003164:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003168:	e7eb      	b.n	8003142 <memmove+0xc>
	...

0800316c <_free_r>:
 800316c:	b538      	push	{r3, r4, r5, lr}
 800316e:	4605      	mov	r5, r0
 8003170:	2900      	cmp	r1, #0
 8003172:	d045      	beq.n	8003200 <_free_r+0x94>
 8003174:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003178:	1f0c      	subs	r4, r1, #4
 800317a:	2b00      	cmp	r3, #0
 800317c:	bfb8      	it	lt
 800317e:	18e4      	addlt	r4, r4, r3
 8003180:	f000 f8d6 	bl	8003330 <__malloc_lock>
 8003184:	4a1f      	ldr	r2, [pc, #124]	; (8003204 <_free_r+0x98>)
 8003186:	6813      	ldr	r3, [r2, #0]
 8003188:	4610      	mov	r0, r2
 800318a:	b933      	cbnz	r3, 800319a <_free_r+0x2e>
 800318c:	6063      	str	r3, [r4, #4]
 800318e:	6014      	str	r4, [r2, #0]
 8003190:	4628      	mov	r0, r5
 8003192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003196:	f000 b8cc 	b.w	8003332 <__malloc_unlock>
 800319a:	42a3      	cmp	r3, r4
 800319c:	d90c      	bls.n	80031b8 <_free_r+0x4c>
 800319e:	6821      	ldr	r1, [r4, #0]
 80031a0:	1862      	adds	r2, r4, r1
 80031a2:	4293      	cmp	r3, r2
 80031a4:	bf04      	itt	eq
 80031a6:	681a      	ldreq	r2, [r3, #0]
 80031a8:	685b      	ldreq	r3, [r3, #4]
 80031aa:	6063      	str	r3, [r4, #4]
 80031ac:	bf04      	itt	eq
 80031ae:	1852      	addeq	r2, r2, r1
 80031b0:	6022      	streq	r2, [r4, #0]
 80031b2:	6004      	str	r4, [r0, #0]
 80031b4:	e7ec      	b.n	8003190 <_free_r+0x24>
 80031b6:	4613      	mov	r3, r2
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	b10a      	cbz	r2, 80031c0 <_free_r+0x54>
 80031bc:	42a2      	cmp	r2, r4
 80031be:	d9fa      	bls.n	80031b6 <_free_r+0x4a>
 80031c0:	6819      	ldr	r1, [r3, #0]
 80031c2:	1858      	adds	r0, r3, r1
 80031c4:	42a0      	cmp	r0, r4
 80031c6:	d10b      	bne.n	80031e0 <_free_r+0x74>
 80031c8:	6820      	ldr	r0, [r4, #0]
 80031ca:	4401      	add	r1, r0
 80031cc:	1858      	adds	r0, r3, r1
 80031ce:	4282      	cmp	r2, r0
 80031d0:	6019      	str	r1, [r3, #0]
 80031d2:	d1dd      	bne.n	8003190 <_free_r+0x24>
 80031d4:	6810      	ldr	r0, [r2, #0]
 80031d6:	6852      	ldr	r2, [r2, #4]
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	4401      	add	r1, r0
 80031dc:	6019      	str	r1, [r3, #0]
 80031de:	e7d7      	b.n	8003190 <_free_r+0x24>
 80031e0:	d902      	bls.n	80031e8 <_free_r+0x7c>
 80031e2:	230c      	movs	r3, #12
 80031e4:	602b      	str	r3, [r5, #0]
 80031e6:	e7d3      	b.n	8003190 <_free_r+0x24>
 80031e8:	6820      	ldr	r0, [r4, #0]
 80031ea:	1821      	adds	r1, r4, r0
 80031ec:	428a      	cmp	r2, r1
 80031ee:	bf04      	itt	eq
 80031f0:	6811      	ldreq	r1, [r2, #0]
 80031f2:	6852      	ldreq	r2, [r2, #4]
 80031f4:	6062      	str	r2, [r4, #4]
 80031f6:	bf04      	itt	eq
 80031f8:	1809      	addeq	r1, r1, r0
 80031fa:	6021      	streq	r1, [r4, #0]
 80031fc:	605c      	str	r4, [r3, #4]
 80031fe:	e7c7      	b.n	8003190 <_free_r+0x24>
 8003200:	bd38      	pop	{r3, r4, r5, pc}
 8003202:	bf00      	nop
 8003204:	200000b8 	.word	0x200000b8

08003208 <_malloc_r>:
 8003208:	b570      	push	{r4, r5, r6, lr}
 800320a:	1ccd      	adds	r5, r1, #3
 800320c:	f025 0503 	bic.w	r5, r5, #3
 8003210:	3508      	adds	r5, #8
 8003212:	2d0c      	cmp	r5, #12
 8003214:	bf38      	it	cc
 8003216:	250c      	movcc	r5, #12
 8003218:	2d00      	cmp	r5, #0
 800321a:	4606      	mov	r6, r0
 800321c:	db01      	blt.n	8003222 <_malloc_r+0x1a>
 800321e:	42a9      	cmp	r1, r5
 8003220:	d903      	bls.n	800322a <_malloc_r+0x22>
 8003222:	230c      	movs	r3, #12
 8003224:	6033      	str	r3, [r6, #0]
 8003226:	2000      	movs	r0, #0
 8003228:	bd70      	pop	{r4, r5, r6, pc}
 800322a:	f000 f881 	bl	8003330 <__malloc_lock>
 800322e:	4a23      	ldr	r2, [pc, #140]	; (80032bc <_malloc_r+0xb4>)
 8003230:	6814      	ldr	r4, [r2, #0]
 8003232:	4621      	mov	r1, r4
 8003234:	b991      	cbnz	r1, 800325c <_malloc_r+0x54>
 8003236:	4c22      	ldr	r4, [pc, #136]	; (80032c0 <_malloc_r+0xb8>)
 8003238:	6823      	ldr	r3, [r4, #0]
 800323a:	b91b      	cbnz	r3, 8003244 <_malloc_r+0x3c>
 800323c:	4630      	mov	r0, r6
 800323e:	f000 f867 	bl	8003310 <_sbrk_r>
 8003242:	6020      	str	r0, [r4, #0]
 8003244:	4629      	mov	r1, r5
 8003246:	4630      	mov	r0, r6
 8003248:	f000 f862 	bl	8003310 <_sbrk_r>
 800324c:	1c43      	adds	r3, r0, #1
 800324e:	d126      	bne.n	800329e <_malloc_r+0x96>
 8003250:	230c      	movs	r3, #12
 8003252:	6033      	str	r3, [r6, #0]
 8003254:	4630      	mov	r0, r6
 8003256:	f000 f86c 	bl	8003332 <__malloc_unlock>
 800325a:	e7e4      	b.n	8003226 <_malloc_r+0x1e>
 800325c:	680b      	ldr	r3, [r1, #0]
 800325e:	1b5b      	subs	r3, r3, r5
 8003260:	d41a      	bmi.n	8003298 <_malloc_r+0x90>
 8003262:	2b0b      	cmp	r3, #11
 8003264:	d90f      	bls.n	8003286 <_malloc_r+0x7e>
 8003266:	600b      	str	r3, [r1, #0]
 8003268:	50cd      	str	r5, [r1, r3]
 800326a:	18cc      	adds	r4, r1, r3
 800326c:	4630      	mov	r0, r6
 800326e:	f000 f860 	bl	8003332 <__malloc_unlock>
 8003272:	f104 000b 	add.w	r0, r4, #11
 8003276:	1d23      	adds	r3, r4, #4
 8003278:	f020 0007 	bic.w	r0, r0, #7
 800327c:	1ac3      	subs	r3, r0, r3
 800327e:	d01b      	beq.n	80032b8 <_malloc_r+0xb0>
 8003280:	425a      	negs	r2, r3
 8003282:	50e2      	str	r2, [r4, r3]
 8003284:	bd70      	pop	{r4, r5, r6, pc}
 8003286:	428c      	cmp	r4, r1
 8003288:	bf0d      	iteet	eq
 800328a:	6863      	ldreq	r3, [r4, #4]
 800328c:	684b      	ldrne	r3, [r1, #4]
 800328e:	6063      	strne	r3, [r4, #4]
 8003290:	6013      	streq	r3, [r2, #0]
 8003292:	bf18      	it	ne
 8003294:	460c      	movne	r4, r1
 8003296:	e7e9      	b.n	800326c <_malloc_r+0x64>
 8003298:	460c      	mov	r4, r1
 800329a:	6849      	ldr	r1, [r1, #4]
 800329c:	e7ca      	b.n	8003234 <_malloc_r+0x2c>
 800329e:	1cc4      	adds	r4, r0, #3
 80032a0:	f024 0403 	bic.w	r4, r4, #3
 80032a4:	42a0      	cmp	r0, r4
 80032a6:	d005      	beq.n	80032b4 <_malloc_r+0xac>
 80032a8:	1a21      	subs	r1, r4, r0
 80032aa:	4630      	mov	r0, r6
 80032ac:	f000 f830 	bl	8003310 <_sbrk_r>
 80032b0:	3001      	adds	r0, #1
 80032b2:	d0cd      	beq.n	8003250 <_malloc_r+0x48>
 80032b4:	6025      	str	r5, [r4, #0]
 80032b6:	e7d9      	b.n	800326c <_malloc_r+0x64>
 80032b8:	bd70      	pop	{r4, r5, r6, pc}
 80032ba:	bf00      	nop
 80032bc:	200000b8 	.word	0x200000b8
 80032c0:	200000bc 	.word	0x200000bc

080032c4 <_realloc_r>:
 80032c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032c6:	4607      	mov	r7, r0
 80032c8:	4614      	mov	r4, r2
 80032ca:	460e      	mov	r6, r1
 80032cc:	b921      	cbnz	r1, 80032d8 <_realloc_r+0x14>
 80032ce:	4611      	mov	r1, r2
 80032d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80032d4:	f7ff bf98 	b.w	8003208 <_malloc_r>
 80032d8:	b922      	cbnz	r2, 80032e4 <_realloc_r+0x20>
 80032da:	f7ff ff47 	bl	800316c <_free_r>
 80032de:	4625      	mov	r5, r4
 80032e0:	4628      	mov	r0, r5
 80032e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032e4:	f000 f826 	bl	8003334 <_malloc_usable_size_r>
 80032e8:	4284      	cmp	r4, r0
 80032ea:	d90f      	bls.n	800330c <_realloc_r+0x48>
 80032ec:	4621      	mov	r1, r4
 80032ee:	4638      	mov	r0, r7
 80032f0:	f7ff ff8a 	bl	8003208 <_malloc_r>
 80032f4:	4605      	mov	r5, r0
 80032f6:	2800      	cmp	r0, #0
 80032f8:	d0f2      	beq.n	80032e0 <_realloc_r+0x1c>
 80032fa:	4631      	mov	r1, r6
 80032fc:	4622      	mov	r2, r4
 80032fe:	f7ff ff0f 	bl	8003120 <memcpy>
 8003302:	4631      	mov	r1, r6
 8003304:	4638      	mov	r0, r7
 8003306:	f7ff ff31 	bl	800316c <_free_r>
 800330a:	e7e9      	b.n	80032e0 <_realloc_r+0x1c>
 800330c:	4635      	mov	r5, r6
 800330e:	e7e7      	b.n	80032e0 <_realloc_r+0x1c>

08003310 <_sbrk_r>:
 8003310:	b538      	push	{r3, r4, r5, lr}
 8003312:	4c06      	ldr	r4, [pc, #24]	; (800332c <_sbrk_r+0x1c>)
 8003314:	2300      	movs	r3, #0
 8003316:	4605      	mov	r5, r0
 8003318:	4608      	mov	r0, r1
 800331a:	6023      	str	r3, [r4, #0]
 800331c:	f000 f814 	bl	8003348 <_sbrk>
 8003320:	1c43      	adds	r3, r0, #1
 8003322:	d102      	bne.n	800332a <_sbrk_r+0x1a>
 8003324:	6823      	ldr	r3, [r4, #0]
 8003326:	b103      	cbz	r3, 800332a <_sbrk_r+0x1a>
 8003328:	602b      	str	r3, [r5, #0]
 800332a:	bd38      	pop	{r3, r4, r5, pc}
 800332c:	20000174 	.word	0x20000174

08003330 <__malloc_lock>:
 8003330:	4770      	bx	lr

08003332 <__malloc_unlock>:
 8003332:	4770      	bx	lr

08003334 <_malloc_usable_size_r>:
 8003334:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003338:	2800      	cmp	r0, #0
 800333a:	f1a0 0004 	sub.w	r0, r0, #4
 800333e:	bfbc      	itt	lt
 8003340:	580b      	ldrlt	r3, [r1, r0]
 8003342:	18c0      	addlt	r0, r0, r3
 8003344:	4770      	bx	lr
	...

08003348 <_sbrk>:
 8003348:	4b04      	ldr	r3, [pc, #16]	; (800335c <_sbrk+0x14>)
 800334a:	6819      	ldr	r1, [r3, #0]
 800334c:	4602      	mov	r2, r0
 800334e:	b909      	cbnz	r1, 8003354 <_sbrk+0xc>
 8003350:	4903      	ldr	r1, [pc, #12]	; (8003360 <_sbrk+0x18>)
 8003352:	6019      	str	r1, [r3, #0]
 8003354:	6818      	ldr	r0, [r3, #0]
 8003356:	4402      	add	r2, r0
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	4770      	bx	lr
 800335c:	200000c0 	.word	0x200000c0
 8003360:	20000178 	.word	0x20000178

08003364 <_init>:
 8003364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003366:	bf00      	nop
 8003368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800336a:	bc08      	pop	{r3}
 800336c:	469e      	mov	lr, r3
 800336e:	4770      	bx	lr

08003370 <_fini>:
 8003370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003372:	bf00      	nop
 8003374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003376:	bc08      	pop	{r3}
 8003378:	469e      	mov	lr, r3
 800337a:	4770      	bx	lr
