
Coba_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a10  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001b98  08001b98  00011b98  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001bbc  08001bbc  00011bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001bc4  08001bc4  00011bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001bc8  08001bc8  00011bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000008  20000000  08001bcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
  8 .bss          00000040  20000008  20000008  00020008  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000048  20000048  00020008  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 11 .debug_info   00009ae2  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001846  00000000  00000000  00029b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000013ea  00000000  00000000  0002b360  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000410  00000000  00000000  0002c750  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000598  00000000  00000000  0002cb60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00002510  00000000  00000000  0002d0f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00001bcb  00000000  00000000  0002f608  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000311d3  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000aa0  00000000  00000000  00031250  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001b80 	.word	0x08001b80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	08001b80 	.word	0x08001b80

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2uiz>:
 800095c:	004a      	lsls	r2, r1, #1
 800095e:	d211      	bcs.n	8000984 <__aeabi_d2uiz+0x28>
 8000960:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000964:	d211      	bcs.n	800098a <__aeabi_d2uiz+0x2e>
 8000966:	d50d      	bpl.n	8000984 <__aeabi_d2uiz+0x28>
 8000968:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800096c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000970:	d40e      	bmi.n	8000990 <__aeabi_d2uiz+0x34>
 8000972:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800097a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800097e:	fa23 f002 	lsr.w	r0, r3, r2
 8000982:	4770      	bx	lr
 8000984:	f04f 0000 	mov.w	r0, #0
 8000988:	4770      	bx	lr
 800098a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800098e:	d102      	bne.n	8000996 <__aeabi_d2uiz+0x3a>
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	4770      	bx	lr
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	4770      	bx	lr

0800099c <__aeabi_uldivmod>:
 800099c:	b953      	cbnz	r3, 80009b4 <__aeabi_uldivmod+0x18>
 800099e:	b94a      	cbnz	r2, 80009b4 <__aeabi_uldivmod+0x18>
 80009a0:	2900      	cmp	r1, #0
 80009a2:	bf08      	it	eq
 80009a4:	2800      	cmpeq	r0, #0
 80009a6:	bf1c      	itt	ne
 80009a8:	f04f 31ff 	movne.w	r1, #4294967295
 80009ac:	f04f 30ff 	movne.w	r0, #4294967295
 80009b0:	f000 b97a 	b.w	8000ca8 <__aeabi_idiv0>
 80009b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009bc:	f000 f806 	bl	80009cc <__udivmoddi4>
 80009c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009c8:	b004      	add	sp, #16
 80009ca:	4770      	bx	lr

080009cc <__udivmoddi4>:
 80009cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d0:	468c      	mov	ip, r1
 80009d2:	460d      	mov	r5, r1
 80009d4:	4604      	mov	r4, r0
 80009d6:	9e08      	ldr	r6, [sp, #32]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d151      	bne.n	8000a80 <__udivmoddi4+0xb4>
 80009dc:	428a      	cmp	r2, r1
 80009de:	4617      	mov	r7, r2
 80009e0:	d96d      	bls.n	8000abe <__udivmoddi4+0xf2>
 80009e2:	fab2 fe82 	clz	lr, r2
 80009e6:	f1be 0f00 	cmp.w	lr, #0
 80009ea:	d00b      	beq.n	8000a04 <__udivmoddi4+0x38>
 80009ec:	f1ce 0c20 	rsb	ip, lr, #32
 80009f0:	fa01 f50e 	lsl.w	r5, r1, lr
 80009f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80009f8:	fa02 f70e 	lsl.w	r7, r2, lr
 80009fc:	ea4c 0c05 	orr.w	ip, ip, r5
 8000a00:	fa00 f40e 	lsl.w	r4, r0, lr
 8000a04:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000a08:	0c25      	lsrs	r5, r4, #16
 8000a0a:	fbbc f8fa 	udiv	r8, ip, sl
 8000a0e:	fa1f f987 	uxth.w	r9, r7
 8000a12:	fb0a cc18 	mls	ip, sl, r8, ip
 8000a16:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000a1a:	fb08 f309 	mul.w	r3, r8, r9
 8000a1e:	42ab      	cmp	r3, r5
 8000a20:	d90a      	bls.n	8000a38 <__udivmoddi4+0x6c>
 8000a22:	19ed      	adds	r5, r5, r7
 8000a24:	f108 32ff 	add.w	r2, r8, #4294967295
 8000a28:	f080 8123 	bcs.w	8000c72 <__udivmoddi4+0x2a6>
 8000a2c:	42ab      	cmp	r3, r5
 8000a2e:	f240 8120 	bls.w	8000c72 <__udivmoddi4+0x2a6>
 8000a32:	f1a8 0802 	sub.w	r8, r8, #2
 8000a36:	443d      	add	r5, r7
 8000a38:	1aed      	subs	r5, r5, r3
 8000a3a:	b2a4      	uxth	r4, r4
 8000a3c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000a40:	fb0a 5510 	mls	r5, sl, r0, r5
 8000a44:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a48:	fb00 f909 	mul.w	r9, r0, r9
 8000a4c:	45a1      	cmp	r9, r4
 8000a4e:	d909      	bls.n	8000a64 <__udivmoddi4+0x98>
 8000a50:	19e4      	adds	r4, r4, r7
 8000a52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a56:	f080 810a 	bcs.w	8000c6e <__udivmoddi4+0x2a2>
 8000a5a:	45a1      	cmp	r9, r4
 8000a5c:	f240 8107 	bls.w	8000c6e <__udivmoddi4+0x2a2>
 8000a60:	3802      	subs	r0, #2
 8000a62:	443c      	add	r4, r7
 8000a64:	eba4 0409 	sub.w	r4, r4, r9
 8000a68:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2e00      	cmp	r6, #0
 8000a70:	d061      	beq.n	8000b36 <__udivmoddi4+0x16a>
 8000a72:	fa24 f40e 	lsr.w	r4, r4, lr
 8000a76:	2300      	movs	r3, #0
 8000a78:	6034      	str	r4, [r6, #0]
 8000a7a:	6073      	str	r3, [r6, #4]
 8000a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a80:	428b      	cmp	r3, r1
 8000a82:	d907      	bls.n	8000a94 <__udivmoddi4+0xc8>
 8000a84:	2e00      	cmp	r6, #0
 8000a86:	d054      	beq.n	8000b32 <__udivmoddi4+0x166>
 8000a88:	2100      	movs	r1, #0
 8000a8a:	e886 0021 	stmia.w	r6, {r0, r5}
 8000a8e:	4608      	mov	r0, r1
 8000a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a94:	fab3 f183 	clz	r1, r3
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	f040 808e 	bne.w	8000bba <__udivmoddi4+0x1ee>
 8000a9e:	42ab      	cmp	r3, r5
 8000aa0:	d302      	bcc.n	8000aa8 <__udivmoddi4+0xdc>
 8000aa2:	4282      	cmp	r2, r0
 8000aa4:	f200 80fa 	bhi.w	8000c9c <__udivmoddi4+0x2d0>
 8000aa8:	1a84      	subs	r4, r0, r2
 8000aaa:	eb65 0503 	sbc.w	r5, r5, r3
 8000aae:	2001      	movs	r0, #1
 8000ab0:	46ac      	mov	ip, r5
 8000ab2:	2e00      	cmp	r6, #0
 8000ab4:	d03f      	beq.n	8000b36 <__udivmoddi4+0x16a>
 8000ab6:	e886 1010 	stmia.w	r6, {r4, ip}
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abe:	b912      	cbnz	r2, 8000ac6 <__udivmoddi4+0xfa>
 8000ac0:	2701      	movs	r7, #1
 8000ac2:	fbb7 f7f2 	udiv	r7, r7, r2
 8000ac6:	fab7 fe87 	clz	lr, r7
 8000aca:	f1be 0f00 	cmp.w	lr, #0
 8000ace:	d134      	bne.n	8000b3a <__udivmoddi4+0x16e>
 8000ad0:	1beb      	subs	r3, r5, r7
 8000ad2:	0c3a      	lsrs	r2, r7, #16
 8000ad4:	fa1f fc87 	uxth.w	ip, r7
 8000ad8:	2101      	movs	r1, #1
 8000ada:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ade:	0c25      	lsrs	r5, r4, #16
 8000ae0:	fb02 3318 	mls	r3, r2, r8, r3
 8000ae4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ae8:	fb0c f308 	mul.w	r3, ip, r8
 8000aec:	42ab      	cmp	r3, r5
 8000aee:	d907      	bls.n	8000b00 <__udivmoddi4+0x134>
 8000af0:	19ed      	adds	r5, r5, r7
 8000af2:	f108 30ff 	add.w	r0, r8, #4294967295
 8000af6:	d202      	bcs.n	8000afe <__udivmoddi4+0x132>
 8000af8:	42ab      	cmp	r3, r5
 8000afa:	f200 80d1 	bhi.w	8000ca0 <__udivmoddi4+0x2d4>
 8000afe:	4680      	mov	r8, r0
 8000b00:	1aed      	subs	r5, r5, r3
 8000b02:	b2a3      	uxth	r3, r4
 8000b04:	fbb5 f0f2 	udiv	r0, r5, r2
 8000b08:	fb02 5510 	mls	r5, r2, r0, r5
 8000b0c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000b10:	fb0c fc00 	mul.w	ip, ip, r0
 8000b14:	45a4      	cmp	ip, r4
 8000b16:	d907      	bls.n	8000b28 <__udivmoddi4+0x15c>
 8000b18:	19e4      	adds	r4, r4, r7
 8000b1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b1e:	d202      	bcs.n	8000b26 <__udivmoddi4+0x15a>
 8000b20:	45a4      	cmp	ip, r4
 8000b22:	f200 80b8 	bhi.w	8000c96 <__udivmoddi4+0x2ca>
 8000b26:	4618      	mov	r0, r3
 8000b28:	eba4 040c 	sub.w	r4, r4, ip
 8000b2c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b30:	e79d      	b.n	8000a6e <__udivmoddi4+0xa2>
 8000b32:	4631      	mov	r1, r6
 8000b34:	4630      	mov	r0, r6
 8000b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3a:	f1ce 0420 	rsb	r4, lr, #32
 8000b3e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000b42:	fa07 f70e 	lsl.w	r7, r7, lr
 8000b46:	fa20 f804 	lsr.w	r8, r0, r4
 8000b4a:	0c3a      	lsrs	r2, r7, #16
 8000b4c:	fa25 f404 	lsr.w	r4, r5, r4
 8000b50:	ea48 0803 	orr.w	r8, r8, r3
 8000b54:	fbb4 f1f2 	udiv	r1, r4, r2
 8000b58:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000b5c:	fb02 4411 	mls	r4, r2, r1, r4
 8000b60:	fa1f fc87 	uxth.w	ip, r7
 8000b64:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000b68:	fb01 f30c 	mul.w	r3, r1, ip
 8000b6c:	42ab      	cmp	r3, r5
 8000b6e:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b72:	d909      	bls.n	8000b88 <__udivmoddi4+0x1bc>
 8000b74:	19ed      	adds	r5, r5, r7
 8000b76:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b7a:	f080 808a 	bcs.w	8000c92 <__udivmoddi4+0x2c6>
 8000b7e:	42ab      	cmp	r3, r5
 8000b80:	f240 8087 	bls.w	8000c92 <__udivmoddi4+0x2c6>
 8000b84:	3902      	subs	r1, #2
 8000b86:	443d      	add	r5, r7
 8000b88:	1aeb      	subs	r3, r5, r3
 8000b8a:	fa1f f588 	uxth.w	r5, r8
 8000b8e:	fbb3 f0f2 	udiv	r0, r3, r2
 8000b92:	fb02 3310 	mls	r3, r2, r0, r3
 8000b96:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b9a:	fb00 f30c 	mul.w	r3, r0, ip
 8000b9e:	42ab      	cmp	r3, r5
 8000ba0:	d907      	bls.n	8000bb2 <__udivmoddi4+0x1e6>
 8000ba2:	19ed      	adds	r5, r5, r7
 8000ba4:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ba8:	d26f      	bcs.n	8000c8a <__udivmoddi4+0x2be>
 8000baa:	42ab      	cmp	r3, r5
 8000bac:	d96d      	bls.n	8000c8a <__udivmoddi4+0x2be>
 8000bae:	3802      	subs	r0, #2
 8000bb0:	443d      	add	r5, r7
 8000bb2:	1aeb      	subs	r3, r5, r3
 8000bb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bb8:	e78f      	b.n	8000ada <__udivmoddi4+0x10e>
 8000bba:	f1c1 0720 	rsb	r7, r1, #32
 8000bbe:	fa22 f807 	lsr.w	r8, r2, r7
 8000bc2:	408b      	lsls	r3, r1
 8000bc4:	fa05 f401 	lsl.w	r4, r5, r1
 8000bc8:	ea48 0303 	orr.w	r3, r8, r3
 8000bcc:	fa20 fe07 	lsr.w	lr, r0, r7
 8000bd0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000bd4:	40fd      	lsrs	r5, r7
 8000bd6:	ea4e 0e04 	orr.w	lr, lr, r4
 8000bda:	fbb5 f9fc 	udiv	r9, r5, ip
 8000bde:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000be2:	fb0c 5519 	mls	r5, ip, r9, r5
 8000be6:	fa1f f883 	uxth.w	r8, r3
 8000bea:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000bee:	fb09 f408 	mul.w	r4, r9, r8
 8000bf2:	42ac      	cmp	r4, r5
 8000bf4:	fa02 f201 	lsl.w	r2, r2, r1
 8000bf8:	fa00 fa01 	lsl.w	sl, r0, r1
 8000bfc:	d908      	bls.n	8000c10 <__udivmoddi4+0x244>
 8000bfe:	18ed      	adds	r5, r5, r3
 8000c00:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c04:	d243      	bcs.n	8000c8e <__udivmoddi4+0x2c2>
 8000c06:	42ac      	cmp	r4, r5
 8000c08:	d941      	bls.n	8000c8e <__udivmoddi4+0x2c2>
 8000c0a:	f1a9 0902 	sub.w	r9, r9, #2
 8000c0e:	441d      	add	r5, r3
 8000c10:	1b2d      	subs	r5, r5, r4
 8000c12:	fa1f fe8e 	uxth.w	lr, lr
 8000c16:	fbb5 f0fc 	udiv	r0, r5, ip
 8000c1a:	fb0c 5510 	mls	r5, ip, r0, r5
 8000c1e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000c22:	fb00 f808 	mul.w	r8, r0, r8
 8000c26:	45a0      	cmp	r8, r4
 8000c28:	d907      	bls.n	8000c3a <__udivmoddi4+0x26e>
 8000c2a:	18e4      	adds	r4, r4, r3
 8000c2c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c30:	d229      	bcs.n	8000c86 <__udivmoddi4+0x2ba>
 8000c32:	45a0      	cmp	r8, r4
 8000c34:	d927      	bls.n	8000c86 <__udivmoddi4+0x2ba>
 8000c36:	3802      	subs	r0, #2
 8000c38:	441c      	add	r4, r3
 8000c3a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c3e:	eba4 0408 	sub.w	r4, r4, r8
 8000c42:	fba0 8902 	umull	r8, r9, r0, r2
 8000c46:	454c      	cmp	r4, r9
 8000c48:	46c6      	mov	lr, r8
 8000c4a:	464d      	mov	r5, r9
 8000c4c:	d315      	bcc.n	8000c7a <__udivmoddi4+0x2ae>
 8000c4e:	d012      	beq.n	8000c76 <__udivmoddi4+0x2aa>
 8000c50:	b156      	cbz	r6, 8000c68 <__udivmoddi4+0x29c>
 8000c52:	ebba 030e 	subs.w	r3, sl, lr
 8000c56:	eb64 0405 	sbc.w	r4, r4, r5
 8000c5a:	fa04 f707 	lsl.w	r7, r4, r7
 8000c5e:	40cb      	lsrs	r3, r1
 8000c60:	431f      	orrs	r7, r3
 8000c62:	40cc      	lsrs	r4, r1
 8000c64:	6037      	str	r7, [r6, #0]
 8000c66:	6074      	str	r4, [r6, #4]
 8000c68:	2100      	movs	r1, #0
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	e6f8      	b.n	8000a64 <__udivmoddi4+0x98>
 8000c72:	4690      	mov	r8, r2
 8000c74:	e6e0      	b.n	8000a38 <__udivmoddi4+0x6c>
 8000c76:	45c2      	cmp	sl, r8
 8000c78:	d2ea      	bcs.n	8000c50 <__udivmoddi4+0x284>
 8000c7a:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c7e:	eb69 0503 	sbc.w	r5, r9, r3
 8000c82:	3801      	subs	r0, #1
 8000c84:	e7e4      	b.n	8000c50 <__udivmoddi4+0x284>
 8000c86:	4628      	mov	r0, r5
 8000c88:	e7d7      	b.n	8000c3a <__udivmoddi4+0x26e>
 8000c8a:	4640      	mov	r0, r8
 8000c8c:	e791      	b.n	8000bb2 <__udivmoddi4+0x1e6>
 8000c8e:	4681      	mov	r9, r0
 8000c90:	e7be      	b.n	8000c10 <__udivmoddi4+0x244>
 8000c92:	4601      	mov	r1, r0
 8000c94:	e778      	b.n	8000b88 <__udivmoddi4+0x1bc>
 8000c96:	3802      	subs	r0, #2
 8000c98:	443c      	add	r4, r7
 8000c9a:	e745      	b.n	8000b28 <__udivmoddi4+0x15c>
 8000c9c:	4608      	mov	r0, r1
 8000c9e:	e708      	b.n	8000ab2 <__udivmoddi4+0xe6>
 8000ca0:	f1a8 0802 	sub.w	r8, r8, #2
 8000ca4:	443d      	add	r5, r7
 8000ca6:	e72b      	b.n	8000b00 <__udivmoddi4+0x134>

08000ca8 <__aeabi_idiv0>:
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cac:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <HAL_InitTick+0x24>)
{
 8000cb0:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000cb2:	6818      	ldr	r0, [r3, #0]
 8000cb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cbc:	f000 f888 	bl	8000dd0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4621      	mov	r1, r4
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc8:	f000 f84e 	bl	8000d68 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000ccc:	2000      	movs	r0, #0
 8000cce:	bd10      	pop	{r4, pc}
 8000cd0:	20000004 	.word	0x20000004

08000cd4 <HAL_Init>:
{
 8000cd4:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <HAL_Init+0x30>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cde:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ce6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000cee:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf0:	2003      	movs	r0, #3
 8000cf2:	f000 f827 	bl	8000d44 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f7ff ffd8 	bl	8000cac <HAL_InitTick>
  HAL_MspInit();
 8000cfc:	f000 fe8c 	bl	8001a18 <HAL_MspInit>
}
 8000d00:	2000      	movs	r0, #0
 8000d02:	bd08      	pop	{r3, pc}
 8000d04:	40023c00 	.word	0x40023c00

08000d08 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000d08:	4a02      	ldr	r2, [pc, #8]	; (8000d14 <HAL_IncTick+0xc>)
 8000d0a:	6813      	ldr	r3, [r2, #0]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	6013      	str	r3, [r2, #0]
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000044 	.word	0x20000044

08000d18 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d18:	4b01      	ldr	r3, [pc, #4]	; (8000d20 <HAL_GetTick+0x8>)
 8000d1a:	6818      	ldr	r0, [r3, #0]
}
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000044 	.word	0x20000044

08000d24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000d24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000d26:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d28:	f7ff fff6 	bl	8000d18 <HAL_GetTick>
  uint32_t wait = Delay;
 8000d2c:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2e:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000d30:	4605      	mov	r5, r0
  {
     wait++;
 8000d32:	bf18      	it	ne
 8000d34:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d36:	f7ff ffef 	bl	8000d18 <HAL_GetTick>
 8000d3a:	1b40      	subs	r0, r0, r5
 8000d3c:	42a0      	cmp	r0, r4
 8000d3e:	d3fa      	bcc.n	8000d36 <HAL_Delay+0x12>
  {
  }
}
 8000d40:	b003      	add	sp, #12
 8000d42:	bd30      	pop	{r4, r5, pc}

08000d44 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d44:	4a07      	ldr	r2, [pc, #28]	; (8000d64 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000d46:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d48:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d4c:	041b      	lsls	r3, r3, #16
 8000d4e:	0c1b      	lsrs	r3, r3, #16
 8000d50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000d54:	0200      	lsls	r0, r0, #8
 8000d56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d5a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000d5e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000d60:	60d3      	str	r3, [r2, #12]
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d68:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6a:	b530      	push	{r4, r5, lr}
 8000d6c:	68dc      	ldr	r4, [r3, #12]
 8000d6e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d72:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d76:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d78:	2b04      	cmp	r3, #4
 8000d7a:	bf28      	it	cs
 8000d7c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	f04f 0501 	mov.w	r5, #1
 8000d84:	fa05 f303 	lsl.w	r3, r5, r3
 8000d88:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8c:	bf8c      	ite	hi
 8000d8e:	3c03      	subhi	r4, #3
 8000d90:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d92:	4019      	ands	r1, r3
 8000d94:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d96:	fa05 f404 	lsl.w	r4, r5, r4
 8000d9a:	3c01      	subs	r4, #1
 8000d9c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000d9e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	ea42 0201 	orr.w	r2, r2, r1
 8000da4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da8:	bfaf      	iteee	ge
 8000daa:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dae:	f000 000f 	andlt.w	r0, r0, #15
 8000db2:	4b06      	ldrlt	r3, [pc, #24]	; (8000dcc <HAL_NVIC_SetPriority+0x64>)
 8000db4:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db6:	bfa5      	ittet	ge
 8000db8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000dbc:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbe:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000dc4:	bd30      	pop	{r4, r5, pc}
 8000dc6:	bf00      	nop
 8000dc8:	e000ed00 	.word	0xe000ed00
 8000dcc:	e000ed14 	.word	0xe000ed14

08000dd0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd0:	3801      	subs	r0, #1
 8000dd2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000dd6:	d20a      	bcs.n	8000dee <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dda:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ddc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dde:	21f0      	movs	r1, #240	; 0xf0
 8000de0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000dee:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000e010 	.word	0xe000e010
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000dfc:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000dfe:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000e00:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000e02:	bf0c      	ite	eq
 8000e04:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000e08:	f022 0204 	bicne.w	r2, r2, #4
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	4770      	bx	lr
 8000e10:	e000e010 	.word	0xe000e010

08000e14 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000e14:	4770      	bx	lr

08000e16 <HAL_SYSTICK_IRQHandler>:
{
 8000e16:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000e18:	f7ff fffc 	bl	8000e14 <HAL_SYSTICK_Callback>
 8000e1c:	bd08      	pop	{r3, pc}
	...

08000e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e24:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e26:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e28:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000fd8 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e2c:	4a68      	ldr	r2, [pc, #416]	; (8000fd0 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e2e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000fdc <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e32:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e34:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000e36:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e3a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000e3c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e40:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000e44:	45b6      	cmp	lr, r6
 8000e46:	f040 80ae 	bne.w	8000fa6 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e4a:	684c      	ldr	r4, [r1, #4]
 8000e4c:	f024 0710 	bic.w	r7, r4, #16
 8000e50:	2f02      	cmp	r7, #2
 8000e52:	d116      	bne.n	8000e82 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000e54:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000e58:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e5c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000e60:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e64:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000e68:	f04f 0c0f 	mov.w	ip, #15
 8000e6c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000e70:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e74:	690d      	ldr	r5, [r1, #16]
 8000e76:	fa05 f50b 	lsl.w	r5, r5, fp
 8000e7a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000e7e:	f8ca 5020 	str.w	r5, [sl, #32]
 8000e82:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e86:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000e88:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e8c:	fa05 f50a 	lsl.w	r5, r5, sl
 8000e90:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e92:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e96:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e9a:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e9e:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ea0:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ea4:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000ea6:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eaa:	d811      	bhi.n	8000ed0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000eac:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eae:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eb2:	68cf      	ldr	r7, [r1, #12]
 8000eb4:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000eb8:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000ebc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000ebe:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ec4:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000ec8:	409f      	lsls	r7, r3
 8000eca:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000ece:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000ed0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ed2:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ed4:	688f      	ldr	r7, [r1, #8]
 8000ed6:	fa07 f70a 	lsl.w	r7, r7, sl
 8000eda:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000edc:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ede:	00e5      	lsls	r5, r4, #3
 8000ee0:	d561      	bpl.n	8000fa6 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee2:	f04f 0b00 	mov.w	fp, #0
 8000ee6:	f8cd b00c 	str.w	fp, [sp, #12]
 8000eea:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eee:	4d39      	ldr	r5, [pc, #228]	; (8000fd4 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef0:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000ef4:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000ef8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000efc:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000f00:	9703      	str	r7, [sp, #12]
 8000f02:	9f03      	ldr	r7, [sp, #12]
 8000f04:	f023 0703 	bic.w	r7, r3, #3
 8000f08:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000f0c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f10:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000f14:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f18:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000f1c:	f04f 0e0f 	mov.w	lr, #15
 8000f20:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f24:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f26:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f2a:	d043      	beq.n	8000fb4 <HAL_GPIO_Init+0x194>
 8000f2c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f30:	42a8      	cmp	r0, r5
 8000f32:	d041      	beq.n	8000fb8 <HAL_GPIO_Init+0x198>
 8000f34:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f38:	42a8      	cmp	r0, r5
 8000f3a:	d03f      	beq.n	8000fbc <HAL_GPIO_Init+0x19c>
 8000f3c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f40:	42a8      	cmp	r0, r5
 8000f42:	d03d      	beq.n	8000fc0 <HAL_GPIO_Init+0x1a0>
 8000f44:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f48:	42a8      	cmp	r0, r5
 8000f4a:	d03b      	beq.n	8000fc4 <HAL_GPIO_Init+0x1a4>
 8000f4c:	4548      	cmp	r0, r9
 8000f4e:	d03b      	beq.n	8000fc8 <HAL_GPIO_Init+0x1a8>
 8000f50:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000f54:	42a8      	cmp	r0, r5
 8000f56:	d039      	beq.n	8000fcc <HAL_GPIO_Init+0x1ac>
 8000f58:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f5c:	42a8      	cmp	r0, r5
 8000f5e:	bf14      	ite	ne
 8000f60:	2508      	movne	r5, #8
 8000f62:	2507      	moveq	r5, #7
 8000f64:	fa05 f50c 	lsl.w	r5, r5, ip
 8000f68:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f6c:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000f6e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f70:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f72:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000f76:	bf0c      	ite	eq
 8000f78:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f7a:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000f7c:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000f7e:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f80:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000f84:	bf0c      	ite	eq
 8000f86:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f88:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000f8a:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f8c:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f8e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000f92:	bf0c      	ite	eq
 8000f94:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f96:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000f98:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000f9a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f9c:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000f9e:	bf54      	ite	pl
 8000fa0:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000fa2:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000fa4:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	2b10      	cmp	r3, #16
 8000faa:	f47f af44 	bne.w	8000e36 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000fae:	b005      	add	sp, #20
 8000fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fb4:	465d      	mov	r5, fp
 8000fb6:	e7d5      	b.n	8000f64 <HAL_GPIO_Init+0x144>
 8000fb8:	2501      	movs	r5, #1
 8000fba:	e7d3      	b.n	8000f64 <HAL_GPIO_Init+0x144>
 8000fbc:	2502      	movs	r5, #2
 8000fbe:	e7d1      	b.n	8000f64 <HAL_GPIO_Init+0x144>
 8000fc0:	2503      	movs	r5, #3
 8000fc2:	e7cf      	b.n	8000f64 <HAL_GPIO_Init+0x144>
 8000fc4:	2504      	movs	r5, #4
 8000fc6:	e7cd      	b.n	8000f64 <HAL_GPIO_Init+0x144>
 8000fc8:	2505      	movs	r5, #5
 8000fca:	e7cb      	b.n	8000f64 <HAL_GPIO_Init+0x144>
 8000fcc:	2506      	movs	r5, #6
 8000fce:	e7c9      	b.n	8000f64 <HAL_GPIO_Init+0x144>
 8000fd0:	40013c00 	.word	0x40013c00
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40021400 	.word	0x40021400

08000fe0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fe0:	b10a      	cbz	r2, 8000fe6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fe2:	6181      	str	r1, [r0, #24]
 8000fe4:	4770      	bx	lr
 8000fe6:	0409      	lsls	r1, r1, #16
 8000fe8:	e7fb      	b.n	8000fe2 <HAL_GPIO_WritePin+0x2>
	...

08000fec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fee:	4604      	mov	r4, r0
 8000ff0:	b910      	cbnz	r0, 8000ff8 <HAL_RCC_OscConfig+0xc>
  {
    return HAL_ERROR;
 8000ff2:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000ff4:	b003      	add	sp, #12
 8000ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ff8:	6803      	ldr	r3, [r0, #0]
 8000ffa:	07d8      	lsls	r0, r3, #31
 8000ffc:	d43b      	bmi.n	8001076 <HAL_RCC_OscConfig+0x8a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ffe:	6823      	ldr	r3, [r4, #0]
 8001000:	0799      	lsls	r1, r3, #30
 8001002:	f100 8084 	bmi.w	800110e <HAL_RCC_OscConfig+0x122>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001006:	6823      	ldr	r3, [r4, #0]
 8001008:	071e      	lsls	r6, r3, #28
 800100a:	f100 80c6 	bmi.w	800119a <HAL_RCC_OscConfig+0x1ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800100e:	6823      	ldr	r3, [r4, #0]
 8001010:	075d      	lsls	r5, r3, #29
 8001012:	d52a      	bpl.n	800106a <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001014:	2300      	movs	r3, #0
 8001016:	9301      	str	r3, [sp, #4]
 8001018:	4baa      	ldr	r3, [pc, #680]	; (80012c4 <HAL_RCC_OscConfig+0x2d8>)
    PWR->CR |= PWR_CR_DBP;
 800101a:	4dab      	ldr	r5, [pc, #684]	; (80012c8 <HAL_RCC_OscConfig+0x2dc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800101c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800101e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001022:	641a      	str	r2, [r3, #64]	; 0x40
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800102e:	682b      	ldr	r3, [r5, #0]
 8001030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001034:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001036:	f7ff fe6f 	bl	8000d18 <HAL_GetTick>
 800103a:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800103c:	682b      	ldr	r3, [r5, #0]
 800103e:	05da      	lsls	r2, r3, #23
 8001040:	f140 80cd 	bpl.w	80011de <HAL_RCC_OscConfig+0x1f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001044:	68a3      	ldr	r3, [r4, #8]
 8001046:	4d9f      	ldr	r5, [pc, #636]	; (80012c4 <HAL_RCC_OscConfig+0x2d8>)
 8001048:	2b01      	cmp	r3, #1
 800104a:	f040 80cf 	bne.w	80011ec <HAL_RCC_OscConfig+0x200>
 800104e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001056:	f7ff fe5f 	bl	8000d18 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800105a:	4d9a      	ldr	r5, [pc, #616]	; (80012c4 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 800105c:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800105e:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001062:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001064:	079b      	lsls	r3, r3, #30
 8001066:	f140 80e2 	bpl.w	800122e <HAL_RCC_OscConfig+0x242>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800106a:	69a2      	ldr	r2, [r4, #24]
 800106c:	2a00      	cmp	r2, #0
 800106e:	f040 80e5 	bne.w	800123c <HAL_RCC_OscConfig+0x250>
  return HAL_OK;
 8001072:	2000      	movs	r0, #0
 8001074:	e7be      	b.n	8000ff4 <HAL_RCC_OscConfig+0x8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001076:	4b93      	ldr	r3, [pc, #588]	; (80012c4 <HAL_RCC_OscConfig+0x2d8>)
 8001078:	689a      	ldr	r2, [r3, #8]
 800107a:	f002 020c 	and.w	r2, r2, #12
 800107e:	2a04      	cmp	r2, #4
 8001080:	d007      	beq.n	8001092 <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001082:	689a      	ldr	r2, [r3, #8]
 8001084:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001088:	2a08      	cmp	r2, #8
 800108a:	d10a      	bne.n	80010a2 <HAL_RCC_OscConfig+0xb6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	025a      	lsls	r2, r3, #9
 8001090:	d507      	bpl.n	80010a2 <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001092:	4b8c      	ldr	r3, [pc, #560]	; (80012c4 <HAL_RCC_OscConfig+0x2d8>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	039b      	lsls	r3, r3, #14
 8001098:	d5b1      	bpl.n	8000ffe <HAL_RCC_OscConfig+0x12>
 800109a:	6863      	ldr	r3, [r4, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1ae      	bne.n	8000ffe <HAL_RCC_OscConfig+0x12>
 80010a0:	e7a7      	b.n	8000ff2 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010a2:	6863      	ldr	r3, [r4, #4]
 80010a4:	4d87      	ldr	r5, [pc, #540]	; (80012c4 <HAL_RCC_OscConfig+0x2d8>)
 80010a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010aa:	d111      	bne.n	80010d0 <HAL_RCC_OscConfig+0xe4>
 80010ac:	682b      	ldr	r3, [r5, #0]
 80010ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80010b4:	f7ff fe30 	bl	8000d18 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b8:	4d82      	ldr	r5, [pc, #520]	; (80012c4 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 80010ba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010bc:	682b      	ldr	r3, [r5, #0]
 80010be:	039f      	lsls	r7, r3, #14
 80010c0:	d49d      	bmi.n	8000ffe <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010c2:	f7ff fe29 	bl	8000d18 <HAL_GetTick>
 80010c6:	1b80      	subs	r0, r0, r6
 80010c8:	2864      	cmp	r0, #100	; 0x64
 80010ca:	d9f7      	bls.n	80010bc <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 80010cc:	2003      	movs	r0, #3
 80010ce:	e791      	b.n	8000ff4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010d4:	d104      	bne.n	80010e0 <HAL_RCC_OscConfig+0xf4>
 80010d6:	682b      	ldr	r3, [r5, #0]
 80010d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010dc:	602b      	str	r3, [r5, #0]
 80010de:	e7e5      	b.n	80010ac <HAL_RCC_OscConfig+0xc0>
 80010e0:	682a      	ldr	r2, [r5, #0]
 80010e2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80010e6:	602a      	str	r2, [r5, #0]
 80010e8:	682a      	ldr	r2, [r5, #0]
 80010ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80010ee:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1df      	bne.n	80010b4 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 80010f4:	f7ff fe10 	bl	8000d18 <HAL_GetTick>
 80010f8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010fa:	682b      	ldr	r3, [r5, #0]
 80010fc:	0398      	lsls	r0, r3, #14
 80010fe:	f57f af7e 	bpl.w	8000ffe <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001102:	f7ff fe09 	bl	8000d18 <HAL_GetTick>
 8001106:	1b80      	subs	r0, r0, r6
 8001108:	2864      	cmp	r0, #100	; 0x64
 800110a:	d9f6      	bls.n	80010fa <HAL_RCC_OscConfig+0x10e>
 800110c:	e7de      	b.n	80010cc <HAL_RCC_OscConfig+0xe0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800110e:	4b6d      	ldr	r3, [pc, #436]	; (80012c4 <HAL_RCC_OscConfig+0x2d8>)
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	f012 0f0c 	tst.w	r2, #12
 8001116:	d007      	beq.n	8001128 <HAL_RCC_OscConfig+0x13c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001118:	689a      	ldr	r2, [r3, #8]
 800111a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800111e:	2a08      	cmp	r2, #8
 8001120:	d112      	bne.n	8001148 <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	0259      	lsls	r1, r3, #9
 8001126:	d40f      	bmi.n	8001148 <HAL_RCC_OscConfig+0x15c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001128:	4b66      	ldr	r3, [pc, #408]	; (80012c4 <HAL_RCC_OscConfig+0x2d8>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	0792      	lsls	r2, r2, #30
 800112e:	d503      	bpl.n	8001138 <HAL_RCC_OscConfig+0x14c>
 8001130:	68e2      	ldr	r2, [r4, #12]
 8001132:	2a01      	cmp	r2, #1
 8001134:	f47f af5d 	bne.w	8000ff2 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	6921      	ldr	r1, [r4, #16]
 800113c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001140:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001144:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001146:	e75e      	b.n	8001006 <HAL_RCC_OscConfig+0x1a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001148:	68e2      	ldr	r2, [r4, #12]
 800114a:	4b60      	ldr	r3, [pc, #384]	; (80012cc <HAL_RCC_OscConfig+0x2e0>)
 800114c:	b1b2      	cbz	r2, 800117c <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 800114e:	2201      	movs	r2, #1
 8001150:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001152:	f7ff fde1 	bl	8000d18 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001156:	4d5b      	ldr	r5, [pc, #364]	; (80012c4 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8001158:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800115a:	682b      	ldr	r3, [r5, #0]
 800115c:	079b      	lsls	r3, r3, #30
 800115e:	d507      	bpl.n	8001170 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001160:	682b      	ldr	r3, [r5, #0]
 8001162:	6922      	ldr	r2, [r4, #16]
 8001164:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001168:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800116c:	602b      	str	r3, [r5, #0]
 800116e:	e74a      	b.n	8001006 <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001170:	f7ff fdd2 	bl	8000d18 <HAL_GetTick>
 8001174:	1b80      	subs	r0, r0, r6
 8001176:	2802      	cmp	r0, #2
 8001178:	d9ef      	bls.n	800115a <HAL_RCC_OscConfig+0x16e>
 800117a:	e7a7      	b.n	80010cc <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 800117c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800117e:	f7ff fdcb 	bl	8000d18 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001182:	4d50      	ldr	r5, [pc, #320]	; (80012c4 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8001184:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001186:	682b      	ldr	r3, [r5, #0]
 8001188:	079f      	lsls	r7, r3, #30
 800118a:	f57f af3c 	bpl.w	8001006 <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800118e:	f7ff fdc3 	bl	8000d18 <HAL_GetTick>
 8001192:	1b80      	subs	r0, r0, r6
 8001194:	2802      	cmp	r0, #2
 8001196:	d9f6      	bls.n	8001186 <HAL_RCC_OscConfig+0x19a>
 8001198:	e798      	b.n	80010cc <HAL_RCC_OscConfig+0xe0>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800119a:	6962      	ldr	r2, [r4, #20]
 800119c:	4b4c      	ldr	r3, [pc, #304]	; (80012d0 <HAL_RCC_OscConfig+0x2e4>)
 800119e:	b17a      	cbz	r2, 80011c0 <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_LSI_ENABLE();
 80011a0:	2201      	movs	r2, #1
 80011a2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80011a4:	f7ff fdb8 	bl	8000d18 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011a8:	4d46      	ldr	r5, [pc, #280]	; (80012c4 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 80011aa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ac:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80011ae:	0798      	lsls	r0, r3, #30
 80011b0:	f53f af2d 	bmi.w	800100e <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011b4:	f7ff fdb0 	bl	8000d18 <HAL_GetTick>
 80011b8:	1b80      	subs	r0, r0, r6
 80011ba:	2802      	cmp	r0, #2
 80011bc:	d9f6      	bls.n	80011ac <HAL_RCC_OscConfig+0x1c0>
 80011be:	e785      	b.n	80010cc <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_LSI_DISABLE();
 80011c0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80011c2:	f7ff fda9 	bl	8000d18 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c6:	4d3f      	ldr	r5, [pc, #252]	; (80012c4 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 80011c8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ca:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80011cc:	0799      	lsls	r1, r3, #30
 80011ce:	f57f af1e 	bpl.w	800100e <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011d2:	f7ff fda1 	bl	8000d18 <HAL_GetTick>
 80011d6:	1b80      	subs	r0, r0, r6
 80011d8:	2802      	cmp	r0, #2
 80011da:	d9f6      	bls.n	80011ca <HAL_RCC_OscConfig+0x1de>
 80011dc:	e776      	b.n	80010cc <HAL_RCC_OscConfig+0xe0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80011de:	f7ff fd9b 	bl	8000d18 <HAL_GetTick>
 80011e2:	1b80      	subs	r0, r0, r6
 80011e4:	2802      	cmp	r0, #2
 80011e6:	f67f af29 	bls.w	800103c <HAL_RCC_OscConfig+0x50>
 80011ea:	e76f      	b.n	80010cc <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011ec:	2b05      	cmp	r3, #5
 80011ee:	d104      	bne.n	80011fa <HAL_RCC_OscConfig+0x20e>
 80011f0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80011f2:	f043 0304 	orr.w	r3, r3, #4
 80011f6:	672b      	str	r3, [r5, #112]	; 0x70
 80011f8:	e729      	b.n	800104e <HAL_RCC_OscConfig+0x62>
 80011fa:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80011fc:	f022 0201 	bic.w	r2, r2, #1
 8001200:	672a      	str	r2, [r5, #112]	; 0x70
 8001202:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001204:	f022 0204 	bic.w	r2, r2, #4
 8001208:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800120a:	2b00      	cmp	r3, #0
 800120c:	f47f af23 	bne.w	8001056 <HAL_RCC_OscConfig+0x6a>
      tickstart = HAL_GetTick();
 8001210:	f7ff fd82 	bl	8000d18 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001214:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001218:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800121a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800121c:	0798      	lsls	r0, r3, #30
 800121e:	f57f af24 	bpl.w	800106a <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001222:	f7ff fd79 	bl	8000d18 <HAL_GetTick>
 8001226:	1b80      	subs	r0, r0, r6
 8001228:	42b8      	cmp	r0, r7
 800122a:	d9f6      	bls.n	800121a <HAL_RCC_OscConfig+0x22e>
 800122c:	e74e      	b.n	80010cc <HAL_RCC_OscConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800122e:	f7ff fd73 	bl	8000d18 <HAL_GetTick>
 8001232:	1b80      	subs	r0, r0, r6
 8001234:	42b8      	cmp	r0, r7
 8001236:	f67f af14 	bls.w	8001062 <HAL_RCC_OscConfig+0x76>
 800123a:	e747      	b.n	80010cc <HAL_RCC_OscConfig+0xe0>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800123c:	4d21      	ldr	r5, [pc, #132]	; (80012c4 <HAL_RCC_OscConfig+0x2d8>)
 800123e:	68ab      	ldr	r3, [r5, #8]
 8001240:	f003 030c 	and.w	r3, r3, #12
 8001244:	2b08      	cmp	r3, #8
 8001246:	f43f aed4 	beq.w	8000ff2 <HAL_RCC_OscConfig+0x6>
 800124a:	4e22      	ldr	r6, [pc, #136]	; (80012d4 <HAL_RCC_OscConfig+0x2e8>)
 800124c:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800124e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001250:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001252:	d12a      	bne.n	80012aa <HAL_RCC_OscConfig+0x2be>
        tickstart = HAL_GetTick();
 8001254:	f7ff fd60 	bl	8000d18 <HAL_GetTick>
 8001258:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800125a:	682b      	ldr	r3, [r5, #0]
 800125c:	0199      	lsls	r1, r3, #6
 800125e:	d41e      	bmi.n	800129e <HAL_RCC_OscConfig+0x2b2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001260:	6a22      	ldr	r2, [r4, #32]
 8001262:	69e3      	ldr	r3, [r4, #28]
 8001264:	4313      	orrs	r3, r2
 8001266:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001268:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800126c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800126e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001272:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001274:	4c13      	ldr	r4, [pc, #76]	; (80012c4 <HAL_RCC_OscConfig+0x2d8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001276:	0852      	lsrs	r2, r2, #1
 8001278:	3a01      	subs	r2, #1
 800127a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800127e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001280:	2301      	movs	r3, #1
 8001282:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001284:	f7ff fd48 	bl	8000d18 <HAL_GetTick>
 8001288:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800128a:	6823      	ldr	r3, [r4, #0]
 800128c:	019a      	lsls	r2, r3, #6
 800128e:	f53f aef0 	bmi.w	8001072 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001292:	f7ff fd41 	bl	8000d18 <HAL_GetTick>
 8001296:	1b40      	subs	r0, r0, r5
 8001298:	2802      	cmp	r0, #2
 800129a:	d9f6      	bls.n	800128a <HAL_RCC_OscConfig+0x29e>
 800129c:	e716      	b.n	80010cc <HAL_RCC_OscConfig+0xe0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800129e:	f7ff fd3b 	bl	8000d18 <HAL_GetTick>
 80012a2:	1bc0      	subs	r0, r0, r7
 80012a4:	2802      	cmp	r0, #2
 80012a6:	d9d8      	bls.n	800125a <HAL_RCC_OscConfig+0x26e>
 80012a8:	e710      	b.n	80010cc <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 80012aa:	f7ff fd35 	bl	8000d18 <HAL_GetTick>
 80012ae:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012b0:	682b      	ldr	r3, [r5, #0]
 80012b2:	019b      	lsls	r3, r3, #6
 80012b4:	f57f aedd 	bpl.w	8001072 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012b8:	f7ff fd2e 	bl	8000d18 <HAL_GetTick>
 80012bc:	1b00      	subs	r0, r0, r4
 80012be:	2802      	cmp	r0, #2
 80012c0:	d9f6      	bls.n	80012b0 <HAL_RCC_OscConfig+0x2c4>
 80012c2:	e703      	b.n	80010cc <HAL_RCC_OscConfig+0xe0>
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40007000 	.word	0x40007000
 80012cc:	42470000 	.word	0x42470000
 80012d0:	42470e80 	.word	0x42470e80
 80012d4:	42470060 	.word	0x42470060

080012d8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012d8:	4913      	ldr	r1, [pc, #76]	; (8001328 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80012da:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012dc:	688b      	ldr	r3, [r1, #8]
 80012de:	f003 030c 	and.w	r3, r3, #12
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	d003      	beq.n	80012ee <HAL_RCC_GetSysClockFreq+0x16>
 80012e6:	2b08      	cmp	r3, #8
 80012e8:	d003      	beq.n	80012f2 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012ea:	4810      	ldr	r0, [pc, #64]	; (800132c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80012ec:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80012ee:	4810      	ldr	r0, [pc, #64]	; (8001330 <HAL_RCC_GetSysClockFreq+0x58>)
 80012f0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012f2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012f4:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012f6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012f8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012fc:	bf14      	ite	ne
 80012fe:	480c      	ldrne	r0, [pc, #48]	; (8001330 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001300:	480a      	ldreq	r0, [pc, #40]	; (800132c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001302:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001306:	bf18      	it	ne
 8001308:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800130a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800130e:	fba1 0100 	umull	r0, r1, r1, r0
 8001312:	f7ff fb43 	bl	800099c <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001316:	4b04      	ldr	r3, [pc, #16]	; (8001328 <HAL_RCC_GetSysClockFreq+0x50>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800131e:	3301      	adds	r3, #1
 8001320:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001322:	fbb0 f0f3 	udiv	r0, r0, r3
 8001326:	bd08      	pop	{r3, pc}
 8001328:	40023800 	.word	0x40023800
 800132c:	00f42400 	.word	0x00f42400
 8001330:	017d7840 	.word	0x017d7840

08001334 <HAL_RCC_ClockConfig>:
{
 8001334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001338:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800133a:	4604      	mov	r4, r0
 800133c:	b910      	cbnz	r0, 8001344 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800133e:	2001      	movs	r0, #1
 8001340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001344:	4b44      	ldr	r3, [pc, #272]	; (8001458 <HAL_RCC_ClockConfig+0x124>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	f002 020f 	and.w	r2, r2, #15
 800134c:	428a      	cmp	r2, r1
 800134e:	d328      	bcc.n	80013a2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001350:	6821      	ldr	r1, [r4, #0]
 8001352:	078f      	lsls	r7, r1, #30
 8001354:	d42d      	bmi.n	80013b2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001356:	07c8      	lsls	r0, r1, #31
 8001358:	d440      	bmi.n	80013dc <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800135a:	4b3f      	ldr	r3, [pc, #252]	; (8001458 <HAL_RCC_ClockConfig+0x124>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	f002 020f 	and.w	r2, r2, #15
 8001362:	4295      	cmp	r5, r2
 8001364:	d366      	bcc.n	8001434 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001366:	6822      	ldr	r2, [r4, #0]
 8001368:	0751      	lsls	r1, r2, #29
 800136a:	d46c      	bmi.n	8001446 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800136c:	0713      	lsls	r3, r2, #28
 800136e:	d507      	bpl.n	8001380 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001370:	4a3a      	ldr	r2, [pc, #232]	; (800145c <HAL_RCC_ClockConfig+0x128>)
 8001372:	6921      	ldr	r1, [r4, #16]
 8001374:	6893      	ldr	r3, [r2, #8]
 8001376:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800137a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800137e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001380:	f7ff ffaa 	bl	80012d8 <HAL_RCC_GetSysClockFreq>
 8001384:	4b35      	ldr	r3, [pc, #212]	; (800145c <HAL_RCC_ClockConfig+0x128>)
 8001386:	4a36      	ldr	r2, [pc, #216]	; (8001460 <HAL_RCC_ClockConfig+0x12c>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800138e:	5cd3      	ldrb	r3, [r2, r3]
 8001390:	40d8      	lsrs	r0, r3
 8001392:	4b34      	ldr	r3, [pc, #208]	; (8001464 <HAL_RCC_ClockConfig+0x130>)
 8001394:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001396:	2000      	movs	r0, #0
 8001398:	f7ff fc88 	bl	8000cac <HAL_InitTick>
  return HAL_OK;
 800139c:	2000      	movs	r0, #0
 800139e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013a2:	b2ca      	uxtb	r2, r1
 80013a4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 030f 	and.w	r3, r3, #15
 80013ac:	4299      	cmp	r1, r3
 80013ae:	d1c6      	bne.n	800133e <HAL_RCC_ClockConfig+0xa>
 80013b0:	e7ce      	b.n	8001350 <HAL_RCC_ClockConfig+0x1c>
 80013b2:	4b2a      	ldr	r3, [pc, #168]	; (800145c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013b4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013b8:	bf1e      	ittt	ne
 80013ba:	689a      	ldrne	r2, [r3, #8]
 80013bc:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80013c0:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013c2:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013c4:	bf42      	ittt	mi
 80013c6:	689a      	ldrmi	r2, [r3, #8]
 80013c8:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80013cc:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	68a0      	ldr	r0, [r4, #8]
 80013d2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80013d6:	4302      	orrs	r2, r0
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	e7bc      	b.n	8001356 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013dc:	6862      	ldr	r2, [r4, #4]
 80013de:	4b1f      	ldr	r3, [pc, #124]	; (800145c <HAL_RCC_ClockConfig+0x128>)
 80013e0:	2a01      	cmp	r2, #1
 80013e2:	d11d      	bne.n	8001420 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ea:	d0a8      	beq.n	800133e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013ec:	4e1b      	ldr	r6, [pc, #108]	; (800145c <HAL_RCC_ClockConfig+0x128>)
 80013ee:	68b3      	ldr	r3, [r6, #8]
 80013f0:	f023 0303 	bic.w	r3, r3, #3
 80013f4:	4313      	orrs	r3, r2
 80013f6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80013f8:	f7ff fc8e 	bl	8000d18 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013fc:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001400:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001402:	68b3      	ldr	r3, [r6, #8]
 8001404:	6862      	ldr	r2, [r4, #4]
 8001406:	f003 030c 	and.w	r3, r3, #12
 800140a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800140e:	d0a4      	beq.n	800135a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001410:	f7ff fc82 	bl	8000d18 <HAL_GetTick>
 8001414:	1bc0      	subs	r0, r0, r7
 8001416:	4540      	cmp	r0, r8
 8001418:	d9f3      	bls.n	8001402 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800141a:	2003      	movs	r0, #3
}
 800141c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001420:	1e91      	subs	r1, r2, #2
 8001422:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001424:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001426:	d802      	bhi.n	800142e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001428:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800142c:	e7dd      	b.n	80013ea <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800142e:	f013 0f02 	tst.w	r3, #2
 8001432:	e7da      	b.n	80013ea <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001434:	b2ea      	uxtb	r2, r5
 8001436:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 030f 	and.w	r3, r3, #15
 800143e:	429d      	cmp	r5, r3
 8001440:	f47f af7d 	bne.w	800133e <HAL_RCC_ClockConfig+0xa>
 8001444:	e78f      	b.n	8001366 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001446:	4905      	ldr	r1, [pc, #20]	; (800145c <HAL_RCC_ClockConfig+0x128>)
 8001448:	68e0      	ldr	r0, [r4, #12]
 800144a:	688b      	ldr	r3, [r1, #8]
 800144c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001450:	4303      	orrs	r3, r0
 8001452:	608b      	str	r3, [r1, #8]
 8001454:	e78a      	b.n	800136c <HAL_RCC_ClockConfig+0x38>
 8001456:	bf00      	nop
 8001458:	40023c00 	.word	0x40023c00
 800145c:	40023800 	.word	0x40023800
 8001460:	08001ba4 	.word	0x08001ba4
 8001464:	20000004 	.word	0x20000004

08001468 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001468:	4b01      	ldr	r3, [pc, #4]	; (8001470 <HAL_RCC_GetHCLKFreq+0x8>)
 800146a:	6818      	ldr	r0, [r3, #0]
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000004 	.word	0x20000004

08001474 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001474:	4b04      	ldr	r3, [pc, #16]	; (8001488 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001476:	4a05      	ldr	r2, [pc, #20]	; (800148c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800147e:	5cd3      	ldrb	r3, [r2, r3]
 8001480:	4a03      	ldr	r2, [pc, #12]	; (8001490 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001482:	6810      	ldr	r0, [r2, #0]
}
 8001484:	40d8      	lsrs	r0, r3
 8001486:	4770      	bx	lr
 8001488:	40023800 	.word	0x40023800
 800148c:	08001bb4 	.word	0x08001bb4
 8001490:	20000004 	.word	0x20000004

08001494 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001494:	230f      	movs	r3, #15
 8001496:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <HAL_RCC_GetClockConfig+0x34>)
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	f002 0203 	and.w	r2, r2, #3
 80014a0:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80014a8:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80014b0:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	08db      	lsrs	r3, r3, #3
 80014b6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80014ba:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014bc:	4b03      	ldr	r3, [pc, #12]	; (80014cc <HAL_RCC_GetClockConfig+0x38>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 030f 	and.w	r3, r3, #15
 80014c4:	600b      	str	r3, [r1, #0]
 80014c6:	4770      	bx	lr
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40023c00 	.word	0x40023c00

080014d0 <LCD1602_TIM_MicorSecDelay>:
	TIM3->EGR = 1; 					//Update generate auto
	TIM3->SR &= ~(0x0001);	//Clear Update interrupt flag
}
static void LCD1602_TIM_MicorSecDelay(uint32_t uSecDelay)
{
	TIM3->ARR = uSecDelay-1;
 80014d0:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <LCD1602_TIM_MicorSecDelay+0x20>)
 80014d2:	3801      	subs	r0, #1
 80014d4:	62d8      	str	r0, [r3, #44]	; 0x2c
	TIM3->SR &= ~(0x0001);  // Clear UEV flag
 80014d6:	691a      	ldr	r2, [r3, #16]
 80014d8:	f022 0201 	bic.w	r2, r2, #1
 80014dc:	611a      	str	r2, [r3, #16]
	TIM3->CR1 |= 1UL;
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	f042 0201 	orr.w	r2, r2, #1
 80014e4:	601a      	str	r2, [r3, #0]
	while((TIM3->SR&0x0001) != 1);
 80014e6:	691a      	ldr	r2, [r3, #16]
 80014e8:	07d2      	lsls	r2, r2, #31
 80014ea:	d5fc      	bpl.n	80014e6 <LCD1602_TIM_MicorSecDelay+0x16>
}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40000400 	.word	0x40000400
 80014f4:	00000000 	.word	0x00000000

080014f8 <LCD1602_TIM_Config>:
{
 80014f8:	b510      	push	{r4, lr}
 80014fa:	b086      	sub	sp, #24
	HAL_RCC_GetClockConfig(&myCLKtypeDef, &flashLatencyVar);
 80014fc:	4669      	mov	r1, sp
 80014fe:	a801      	add	r0, sp, #4
 8001500:	f7ff ffc8 	bl	8001494 <HAL_RCC_GetClockConfig>
	if(myCLKtypeDef.APB1CLKDivider == RCC_HCLK_DIV1)
 8001504:	9b04      	ldr	r3, [sp, #16]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d12c      	bne.n	8001564 <LCD1602_TIM_Config+0x6c>
		clockSpeed = HAL_RCC_GetPCLK1Freq();
 800150a:	f7ff ffb3 	bl	8001474 <HAL_RCC_GetPCLK1Freq>
	clockSpeed *= 0.000001;
 800150e:	f7fe ff9d 	bl	800044c <__aeabi_ui2d>
 8001512:	a319      	add	r3, pc, #100	; (adr r3, 8001578 <LCD1602_TIM_Config+0x80>)
 8001514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001518:	f7ff f80e 	bl	8000538 <__aeabi_dmul>
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;  // 0x1
 800151c:	4a14      	ldr	r2, [pc, #80]	; (8001570 <LCD1602_TIM_Config+0x78>)
	TIM3->CR1 &= ~(0x0010);
 800151e:	4c15      	ldr	r4, [pc, #84]	; (8001574 <LCD1602_TIM_Config+0x7c>)
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;  // 0x1
 8001520:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001522:	f043 0302 	orr.w	r3, r3, #2
 8001526:	6413      	str	r3, [r2, #64]	; 0x40
	TIM3->CR1 &= ~(0x0010);
 8001528:	6823      	ldr	r3, [r4, #0]
 800152a:	f023 0310 	bic.w	r3, r3, #16
 800152e:	6023      	str	r3, [r4, #0]
	TIM3->CR1 &= ~(0x0001);
 8001530:	6823      	ldr	r3, [r4, #0]
 8001532:	f023 0301 	bic.w	r3, r3, #1
 8001536:	6023      	str	r3, [r4, #0]
	TIM3->CR1 &= ~(1UL << 2);
 8001538:	6823      	ldr	r3, [r4, #0]
 800153a:	f023 0304 	bic.w	r3, r3, #4
 800153e:	6023      	str	r3, [r4, #0]
	TIM3->CR1 |= (1UL << 3);				  
 8001540:	6823      	ldr	r3, [r4, #0]
 8001542:	f043 0308 	orr.w	r3, r3, #8
 8001546:	6023      	str	r3, [r4, #0]
	clockSpeed *= 0.000001;
 8001548:	f7ff fa08 	bl	800095c <__aeabi_d2uiz>
	TIM3->ARR = 10-1; 								// The Flag sets when overflows
 800154c:	2309      	movs	r3, #9
	TIM3->PSC = clockSpeed-1;
 800154e:	3801      	subs	r0, #1
 8001550:	62a0      	str	r0, [r4, #40]	; 0x28
	TIM3->ARR = 10-1; 								// The Flag sets when overflows
 8001552:	62e3      	str	r3, [r4, #44]	; 0x2c
	TIM3->EGR = 1; 					//Update generate auto
 8001554:	2301      	movs	r3, #1
 8001556:	6163      	str	r3, [r4, #20]
	TIM3->SR &= ~(0x0001);	//Clear Update interrupt flag
 8001558:	6923      	ldr	r3, [r4, #16]
 800155a:	f023 0301 	bic.w	r3, r3, #1
 800155e:	6123      	str	r3, [r4, #16]
}
 8001560:	b006      	add	sp, #24
 8001562:	bd10      	pop	{r4, pc}
		clockSpeed = HAL_RCC_GetPCLK1Freq()*2;
 8001564:	f7ff ff86 	bl	8001474 <HAL_RCC_GetPCLK1Freq>
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	e7d0      	b.n	800150e <LCD1602_TIM_Config+0x16>
 800156c:	f3af 8000 	nop.w
 8001570:	40023800 	.word	0x40023800
 8001574:	40000400 	.word	0x40000400
 8001578:	a0b5ed8d 	.word	0xa0b5ed8d
 800157c:	3eb0c6f7 	.word	0x3eb0c6f7

08001580 <LCD1602_EnablePulse>:
{
 8001580:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8001582:	4d0a      	ldr	r5, [pc, #40]	; (80015ac <LCD1602_EnablePulse+0x2c>)
 8001584:	4c0a      	ldr	r4, [pc, #40]	; (80015b0 <LCD1602_EnablePulse+0x30>)
 8001586:	8829      	ldrh	r1, [r5, #0]
 8001588:	6820      	ldr	r0, [r4, #0]
 800158a:	2201      	movs	r2, #1
 800158c:	f7ff fd28 	bl	8000fe0 <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(writeTimeConstant);
 8001590:	200a      	movs	r0, #10
 8001592:	f7ff ff9d 	bl	80014d0 <LCD1602_TIM_MicorSecDelay>
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 8001596:	6820      	ldr	r0, [r4, #0]
 8001598:	8829      	ldrh	r1, [r5, #0]
 800159a:	2200      	movs	r2, #0
 800159c:	f7ff fd20 	bl	8000fe0 <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(60);
 80015a0:	203c      	movs	r0, #60	; 0x3c
}
 80015a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	LCD1602_TIM_MicorSecDelay(60);
 80015a6:	f7ff bf93 	b.w	80014d0 <LCD1602_TIM_MicorSecDelay>
 80015aa:	bf00      	nop
 80015ac:	20000034 	.word	0x20000034
 80015b0:	20000040 	.word	0x20000040

080015b4 <LCD1602_write>:
{
 80015b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(mode_8_4_I2C == 1)		//8bits mode
 80015b8:	4b43      	ldr	r3, [pc, #268]	; (80016c8 <LCD1602_write+0x114>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b01      	cmp	r3, #1
{
 80015be:	4604      	mov	r4, r0
	uint8_t LSB_nibble = byte&0xF, MSB_nibble = (byte>>4)&0xF;
 80015c0:	ea4f 1610 	mov.w	r6, r0, lsr #4
	if(mode_8_4_I2C == 1)		//8bits mode
 80015c4:	d13d      	bne.n	8001642 <LCD1602_write+0x8e>
		HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 80015c6:	4d41      	ldr	r5, [pc, #260]	; (80016cc <LCD1602_write+0x118>)
 80015c8:	4b41      	ldr	r3, [pc, #260]	; (80016d0 <LCD1602_write+0x11c>)
 80015ca:	f000 0201 	and.w	r2, r0, #1
 80015ce:	8819      	ldrh	r1, [r3, #0]
 80015d0:	6828      	ldr	r0, [r5, #0]
 80015d2:	f7ff fd05 	bl	8000fe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 80015d6:	4b3f      	ldr	r3, [pc, #252]	; (80016d4 <LCD1602_write+0x120>)
 80015d8:	6828      	ldr	r0, [r5, #0]
 80015da:	8819      	ldrh	r1, [r3, #0]
 80015dc:	f004 0202 	and.w	r2, r4, #2
 80015e0:	f7ff fcfe 	bl	8000fe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 80015e4:	4b3c      	ldr	r3, [pc, #240]	; (80016d8 <LCD1602_write+0x124>)
 80015e6:	6828      	ldr	r0, [r5, #0]
 80015e8:	8819      	ldrh	r1, [r3, #0]
 80015ea:	f004 0204 	and.w	r2, r4, #4
 80015ee:	f7ff fcf7 	bl	8000fe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 80015f2:	4b3a      	ldr	r3, [pc, #232]	; (80016dc <LCD1602_write+0x128>)
 80015f4:	6828      	ldr	r0, [r5, #0]
 80015f6:	8819      	ldrh	r1, [r3, #0]
 80015f8:	f004 0208 	and.w	r2, r4, #8
 80015fc:	f7ff fcf0 	bl	8000fe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8001600:	4c37      	ldr	r4, [pc, #220]	; (80016e0 <LCD1602_write+0x12c>)
 8001602:	4b38      	ldr	r3, [pc, #224]	; (80016e4 <LCD1602_write+0x130>)
 8001604:	6820      	ldr	r0, [r4, #0]
 8001606:	8819      	ldrh	r1, [r3, #0]
 8001608:	f006 0201 	and.w	r2, r6, #1
 800160c:	f7ff fce8 	bl	8000fe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8001610:	4b35      	ldr	r3, [pc, #212]	; (80016e8 <LCD1602_write+0x134>)
 8001612:	6820      	ldr	r0, [r4, #0]
 8001614:	8819      	ldrh	r1, [r3, #0]
 8001616:	f006 0202 	and.w	r2, r6, #2
 800161a:	f7ff fce1 	bl	8000fe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 800161e:	4b33      	ldr	r3, [pc, #204]	; (80016ec <LCD1602_write+0x138>)
 8001620:	6820      	ldr	r0, [r4, #0]
 8001622:	8819      	ldrh	r1, [r3, #0]
 8001624:	f006 0204 	and.w	r2, r6, #4
 8001628:	f7ff fcda 	bl	8000fe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 800162c:	4b30      	ldr	r3, [pc, #192]	; (80016f0 <LCD1602_write+0x13c>)
 800162e:	6820      	ldr	r0, [r4, #0]
 8001630:	8819      	ldrh	r1, [r3, #0]
 8001632:	f006 0208 	and.w	r2, r6, #8
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8001636:	f7ff fcd3 	bl	8000fe0 <HAL_GPIO_WritePin>
}
 800163a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		LCD1602_EnablePulse();
 800163e:	f7ff bf9f 	b.w	8001580 <LCD1602_EnablePulse>
	else if(mode_8_4_I2C == 2)	//4 bits mode
 8001642:	2b02      	cmp	r3, #2
 8001644:	d13e      	bne.n	80016c4 <LCD1602_write+0x110>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8001646:	4d26      	ldr	r5, [pc, #152]	; (80016e0 <LCD1602_write+0x12c>)
 8001648:	f8df a098 	ldr.w	sl, [pc, #152]	; 80016e4 <LCD1602_write+0x130>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 800164c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80016e8 <LCD1602_write+0x134>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8001650:	f8ba 1000 	ldrh.w	r1, [sl]
 8001654:	6828      	ldr	r0, [r5, #0]
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8001656:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80016ec <LCD1602_write+0x138>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 800165a:	4f25      	ldr	r7, [pc, #148]	; (80016f0 <LCD1602_write+0x13c>)
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 800165c:	f006 0201 	and.w	r2, r6, #1
 8001660:	f7ff fcbe 	bl	8000fe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8001664:	f006 0202 	and.w	r2, r6, #2
 8001668:	f8b9 1000 	ldrh.w	r1, [r9]
 800166c:	6828      	ldr	r0, [r5, #0]
 800166e:	f7ff fcb7 	bl	8000fe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8001672:	f006 0204 	and.w	r2, r6, #4
 8001676:	f8b8 1000 	ldrh.w	r1, [r8]
 800167a:	6828      	ldr	r0, [r5, #0]
 800167c:	f7ff fcb0 	bl	8000fe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8001680:	f006 0208 	and.w	r2, r6, #8
 8001684:	8839      	ldrh	r1, [r7, #0]
 8001686:	6828      	ldr	r0, [r5, #0]
 8001688:	f7ff fcaa 	bl	8000fe0 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 800168c:	f7ff ff78 	bl	8001580 <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8001690:	f004 0201 	and.w	r2, r4, #1
 8001694:	f8ba 1000 	ldrh.w	r1, [sl]
 8001698:	6828      	ldr	r0, [r5, #0]
 800169a:	f7ff fca1 	bl	8000fe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 800169e:	f004 0202 	and.w	r2, r4, #2
 80016a2:	f8b9 1000 	ldrh.w	r1, [r9]
 80016a6:	6828      	ldr	r0, [r5, #0]
 80016a8:	f7ff fc9a 	bl	8000fe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 80016ac:	f004 0204 	and.w	r2, r4, #4
 80016b0:	f8b8 1000 	ldrh.w	r1, [r8]
 80016b4:	6828      	ldr	r0, [r5, #0]
 80016b6:	f7ff fc93 	bl	8000fe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 80016ba:	f004 0208 	and.w	r2, r4, #8
 80016be:	8839      	ldrh	r1, [r7, #0]
 80016c0:	6828      	ldr	r0, [r5, #0]
 80016c2:	e7b8      	b.n	8001636 <LCD1602_write+0x82>
 80016c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016c8:	20000002 	.word	0x20000002
 80016cc:	20000038 	.word	0x20000038
 80016d0:	20000024 	.word	0x20000024
 80016d4:	20000026 	.word	0x20000026
 80016d8:	20000028 	.word	0x20000028
 80016dc:	2000002a 	.word	0x2000002a
 80016e0:	2000003c 	.word	0x2000003c
 80016e4:	2000002c 	.word	0x2000002c
 80016e8:	2000002e 	.word	0x2000002e
 80016ec:	20000030 	.word	0x20000030
 80016f0:	20000032 	.word	0x20000032

080016f4 <LCD1602_write4bitCommand>:
	//Call low level write parallel function
	LCD1602_write(data);
}
//7) Write 4 bits command, *FOR 4 BITS MODE ONLY*
static void LCD1602_write4bitCommand(uint8_t nibble)
{
 80016f4:	b538      	push	{r3, r4, r5, lr}
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 80016f6:	4b14      	ldr	r3, [pc, #80]	; (8001748 <LCD1602_write4bitCommand+0x54>)
	uint8_t LSB_nibble = nibble&0xF;
	//Set RS to 0
	LCD1602_RS(false);
	//LSB data
	HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 80016f8:	4c14      	ldr	r4, [pc, #80]	; (800174c <LCD1602_write4bitCommand+0x58>)
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 80016fa:	8819      	ldrh	r1, [r3, #0]
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <LCD1602_write4bitCommand+0x5c>)
{
 80016fe:	4605      	mov	r5, r0
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 8001700:	2200      	movs	r2, #0
 8001702:	6818      	ldr	r0, [r3, #0]
 8001704:	f7ff fc6c 	bl	8000fe0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8001708:	4b12      	ldr	r3, [pc, #72]	; (8001754 <LCD1602_write4bitCommand+0x60>)
 800170a:	6820      	ldr	r0, [r4, #0]
 800170c:	8819      	ldrh	r1, [r3, #0]
 800170e:	f005 0201 	and.w	r2, r5, #1
 8001712:	f7ff fc65 	bl	8000fe0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <LCD1602_write4bitCommand+0x64>)
 8001718:	6820      	ldr	r0, [r4, #0]
 800171a:	8819      	ldrh	r1, [r3, #0]
 800171c:	f005 0202 	and.w	r2, r5, #2
 8001720:	f7ff fc5e 	bl	8000fe0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8001724:	4b0d      	ldr	r3, [pc, #52]	; (800175c <LCD1602_write4bitCommand+0x68>)
 8001726:	6820      	ldr	r0, [r4, #0]
 8001728:	8819      	ldrh	r1, [r3, #0]
 800172a:	f005 0204 	and.w	r2, r5, #4
 800172e:	f7ff fc57 	bl	8000fe0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <LCD1602_write4bitCommand+0x6c>)
 8001734:	6820      	ldr	r0, [r4, #0]
 8001736:	8819      	ldrh	r1, [r3, #0]
 8001738:	f005 0208 	and.w	r2, r5, #8
 800173c:	f7ff fc50 	bl	8000fe0 <HAL_GPIO_WritePin>
	//Write the Enable pulse
	LCD1602_EnablePulse();
}
 8001740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	LCD1602_EnablePulse();
 8001744:	f7ff bf1c 	b.w	8001580 <LCD1602_EnablePulse>
 8001748:	20000036 	.word	0x20000036
 800174c:	2000003c 	.word	0x2000003c
 8001750:	20000040 	.word	0x20000040
 8001754:	2000002c 	.word	0x2000002c
 8001758:	2000002e 	.word	0x2000002e
 800175c:	20000030 	.word	0x20000030
 8001760:	20000032 	.word	0x20000032

08001764 <LCD1602_writeCommand>:
{
 8001764:	b510      	push	{r4, lr}
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 8001766:	4b06      	ldr	r3, [pc, #24]	; (8001780 <LCD1602_writeCommand+0x1c>)
 8001768:	8819      	ldrh	r1, [r3, #0]
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <LCD1602_writeCommand+0x20>)
{
 800176c:	4604      	mov	r4, r0
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 800176e:	2200      	movs	r2, #0
 8001770:	6818      	ldr	r0, [r3, #0]
 8001772:	f7ff fc35 	bl	8000fe0 <HAL_GPIO_WritePin>
	LCD1602_write(command);
 8001776:	4620      	mov	r0, r4
}
 8001778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LCD1602_write(command);
 800177c:	f7ff bf1a 	b.w	80015b4 <LCD1602_write>
 8001780:	20000036 	.word	0x20000036
 8001784:	20000040 	.word	0x20000040

08001788 <LCD1602_Begin4BIT>:
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
	HAL_Delay(2);
}
//2) LCD begin 4 bits function
void LCD1602_Begin4BIT(GPIO_TypeDef* PORT_RS_E, uint16_t RS, uint16_t E, GPIO_TypeDef* PORT_MSBs4to7, uint16_t D4, uint16_t D5, uint16_t D6, uint16_t D7)
{
 8001788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Set GPIO Ports and Pins data
	PORT_RS_and_E = PORT_RS_E;
 800178a:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 800184c <LCD1602_Begin4BIT+0xc4>
{
 800178e:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	PORT_RS_and_E = PORT_RS_E;
 8001792:	f8ce 0000 	str.w	r0, [lr]
	PIN_RS = RS;
 8001796:	4824      	ldr	r0, [pc, #144]	; (8001828 <LCD1602_Begin4BIT+0xa0>)
{
 8001798:	f8bd 601c 	ldrh.w	r6, [sp, #28]
	PIN_RS = RS;
 800179c:	8001      	strh	r1, [r0, #0]
	PIN_E = E;
 800179e:	4923      	ldr	r1, [pc, #140]	; (800182c <LCD1602_Begin4BIT+0xa4>)
{
 80017a0:	f8bd 5020 	ldrh.w	r5, [sp, #32]
	PIN_E = E;
 80017a4:	800a      	strh	r2, [r1, #0]
	PORT_MSB = PORT_MSBs4to7;
 80017a6:	4a22      	ldr	r2, [pc, #136]	; (8001830 <LCD1602_Begin4BIT+0xa8>)
{
 80017a8:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	PORT_MSB = PORT_MSBs4to7;
 80017ac:	6013      	str	r3, [r2, #0]
	D4_PIN = D4;
 80017ae:	4b21      	ldr	r3, [pc, #132]	; (8001834 <LCD1602_Begin4BIT+0xac>)
 80017b0:	801f      	strh	r7, [r3, #0]
	D5_PIN = D5;
 80017b2:	4b21      	ldr	r3, [pc, #132]	; (8001838 <LCD1602_Begin4BIT+0xb0>)
 80017b4:	801e      	strh	r6, [r3, #0]
	D6_PIN = D6;
 80017b6:	4b21      	ldr	r3, [pc, #132]	; (800183c <LCD1602_Begin4BIT+0xb4>)
 80017b8:	801d      	strh	r5, [r3, #0]
	D7_PIN = D7;
 80017ba:	4b21      	ldr	r3, [pc, #132]	; (8001840 <LCD1602_Begin4BIT+0xb8>)
 80017bc:	801c      	strh	r4, [r3, #0]
	//Initialise microsecond timer
	LCD1602_TIM_Config();
 80017be:	f7ff fe9b 	bl	80014f8 <LCD1602_TIM_Config>
	//Set the mode to 4 bits
	mode_8_4_I2C = 2;
 80017c2:	4b20      	ldr	r3, [pc, #128]	; (8001844 <LCD1602_Begin4BIT+0xbc>)
 80017c4:	2502      	movs	r5, #2
 80017c6:	701d      	strb	r5, [r3, #0]
	//Function set variable to 4 bits mode
	FunctionSet = 0x28;
 80017c8:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <LCD1602_Begin4BIT+0xc0>)
 80017ca:	2428      	movs	r4, #40	; 0x28
	
	//Initialise LCD
	//1. Wait at least 15ms
	HAL_Delay(20);
 80017cc:	2014      	movs	r0, #20
	FunctionSet = 0x28;
 80017ce:	701c      	strb	r4, [r3, #0]
	HAL_Delay(20);
 80017d0:	f7ff faa8 	bl	8000d24 <HAL_Delay>
	//2. Attentions sequence
	LCD1602_write4bitCommand(0x3);
 80017d4:	2003      	movs	r0, #3
 80017d6:	f7ff ff8d 	bl	80016f4 <LCD1602_write4bitCommand>
	HAL_Delay(5);
 80017da:	2005      	movs	r0, #5
 80017dc:	f7ff faa2 	bl	8000d24 <HAL_Delay>
	LCD1602_write4bitCommand(0x3);
 80017e0:	2003      	movs	r0, #3
 80017e2:	f7ff ff87 	bl	80016f4 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 80017e6:	2001      	movs	r0, #1
 80017e8:	f7ff fa9c 	bl	8000d24 <HAL_Delay>
	LCD1602_write4bitCommand(0x3);
 80017ec:	2003      	movs	r0, #3
 80017ee:	f7ff ff81 	bl	80016f4 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 80017f2:	2001      	movs	r0, #1
 80017f4:	f7ff fa96 	bl	8000d24 <HAL_Delay>
	LCD1602_write4bitCommand(0x2);  //4 bit mode
 80017f8:	4628      	mov	r0, r5
 80017fa:	f7ff ff7b 	bl	80016f4 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 80017fe:	2001      	movs	r0, #1
 8001800:	f7ff fa90 	bl	8000d24 <HAL_Delay>
	//3. Display control (Display ON, Cursor ON, blink cursor)
	LCD1602_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 8001804:	200f      	movs	r0, #15
 8001806:	f7ff ffad 	bl	8001764 <LCD1602_writeCommand>
	//4. Clear LCD and return home
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 800180a:	2001      	movs	r0, #1
 800180c:	f7ff ffaa 	bl	8001764 <LCD1602_writeCommand>
	HAL_Delay(3);
 8001810:	2003      	movs	r0, #3
 8001812:	f7ff fa87 	bl	8000d24 <HAL_Delay>
	//4. Function set; Enable 2 lines, Data length to 8 bits
	LCD1602_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8001816:	4620      	mov	r0, r4
 8001818:	f7ff ffa4 	bl	8001764 <LCD1602_writeCommand>
	HAL_Delay(3);
 800181c:	2003      	movs	r0, #3
}
 800181e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_Delay(3);
 8001822:	f7ff ba7f 	b.w	8000d24 <HAL_Delay>
 8001826:	bf00      	nop
 8001828:	20000036 	.word	0x20000036
 800182c:	20000034 	.word	0x20000034
 8001830:	2000003c 	.word	0x2000003c
 8001834:	2000002c 	.word	0x2000002c
 8001838:	2000002e 	.word	0x2000002e
 800183c:	20000030 	.word	0x20000030
 8001840:	20000032 	.word	0x20000032
 8001844:	20000002 	.word	0x20000002
 8001848:	20000001 	.word	0x20000001
 800184c:	20000040 	.word	0x20000040

08001850 <LCD1602_print>:
//3) LCD print string
void LCD1602_print(char string[])
{
 8001850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if(state) HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_SET);
 8001854:	4f0a      	ldr	r7, [pc, #40]	; (8001880 <LCD1602_print+0x30>)
 8001856:	f8df 802c 	ldr.w	r8, [pc, #44]	; 8001884 <LCD1602_print+0x34>
 800185a:	1e45      	subs	r5, r0, #1
 800185c:	f100 040f 	add.w	r4, r0, #15
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 8001860:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8001864:	b156      	cbz	r6, 800187c <LCD1602_print+0x2c>
	if(state) HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_SET);
 8001866:	2201      	movs	r2, #1
 8001868:	8839      	ldrh	r1, [r7, #0]
 800186a:	f8d8 0000 	ldr.w	r0, [r8]
 800186e:	f7ff fbb7 	bl	8000fe0 <HAL_GPIO_WritePin>
	LCD1602_write(data);
 8001872:	4630      	mov	r0, r6
 8001874:	f7ff fe9e 	bl	80015b4 <LCD1602_write>
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 8001878:	42a5      	cmp	r5, r4
 800187a:	d1f1      	bne.n	8001860 <LCD1602_print+0x10>
 800187c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001880:	20000036 	.word	0x20000036
 8001884:	20000040 	.word	0x20000040

08001888 <LCD1602_noCursor>:
	LCD1602_writeCommand(FunctionSet);
}
//6) Cursor ON/OFF
void LCD1602_noCursor(void)
{
	DisplayControl &= ~(0x02);
 8001888:	4b03      	ldr	r3, [pc, #12]	; (8001898 <LCD1602_noCursor+0x10>)
 800188a:	7818      	ldrb	r0, [r3, #0]
 800188c:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 8001890:	7018      	strb	r0, [r3, #0]
	LCD1602_writeCommand(DisplayControl);
 8001892:	f7ff bf67 	b.w	8001764 <LCD1602_writeCommand>
 8001896:	bf00      	nop
 8001898:	20000000 	.word	0x20000000

0800189c <LCD1602_noBlink>:
	HAL_Delay(3);
}
//8) Blinking cursor
void LCD1602_noBlink(void)
{
	DisplayControl &= ~(0x01);
 800189c:	4b03      	ldr	r3, [pc, #12]	; (80018ac <LCD1602_noBlink+0x10>)
 800189e:	7818      	ldrb	r0, [r3, #0]
 80018a0:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 80018a4:	7018      	strb	r0, [r3, #0]
	LCD1602_writeCommand(DisplayControl);
 80018a6:	f7ff bf5d 	b.w	8001764 <LCD1602_writeCommand>
 80018aa:	bf00      	nop
 80018ac:	20000000 	.word	0x20000000

080018b0 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80018b0:	b530      	push	{r4, r5, lr}
 80018b2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b4:	2300      	movs	r3, #0
 80018b6:	4a27      	ldr	r2, [pc, #156]	; (8001954 <SystemClock_Config+0xa4>)
 80018b8:	9301      	str	r3, [sp, #4]
 80018ba:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80018bc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80018c0:	6411      	str	r1, [r2, #64]	; 0x40
 80018c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018c4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80018c8:	9201      	str	r2, [sp, #4]
 80018ca:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018cc:	4a22      	ldr	r2, [pc, #136]	; (8001958 <SystemClock_Config+0xa8>)
 80018ce:	9302      	str	r3, [sp, #8]
 80018d0:	6811      	ldr	r1, [r2, #0]
 80018d2:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80018d6:	6011      	str	r1, [r2, #0]
 80018d8:	6812      	ldr	r2, [r2, #0]
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018da:	930f      	str	r3, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018dc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80018e0:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018e2:	2308      	movs	r3, #8
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018e4:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018e6:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018e8:	2201      	movs	r2, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018ea:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018ec:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80018ee:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80018f0:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018f2:	2504      	movs	r5, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018f4:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018f6:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80018f8:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018fa:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 168;
 80018fc:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018fe:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001900:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001902:	f7ff fb73 	bl	8000fec <HAL_RCC_OscConfig>
 8001906:	b100      	cbz	r0, 800190a <SystemClock_Config+0x5a>
 8001908:	e7fe      	b.n	8001908 <SystemClock_Config+0x58>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800190a:	230f      	movs	r3, #15
 800190c:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800190e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001912:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001914:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001916:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001918:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800191c:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800191e:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001920:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001922:	f7ff fd07 	bl	8001334 <HAL_RCC_ClockConfig>
 8001926:	4604      	mov	r4, r0
 8001928:	b100      	cbz	r0, 800192c <SystemClock_Config+0x7c>
 800192a:	e7fe      	b.n	800192a <SystemClock_Config+0x7a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800192c:	f7ff fd9c 	bl	8001468 <HAL_RCC_GetHCLKFreq>
 8001930:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001934:	fbb0 f0f3 	udiv	r0, r0, r3
 8001938:	f7ff fa4a 	bl	8000dd0 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800193c:	4628      	mov	r0, r5
 800193e:	f7ff fa5d 	bl	8000dfc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001942:	4622      	mov	r2, r4
 8001944:	4621      	mov	r1, r4
 8001946:	f04f 30ff 	mov.w	r0, #4294967295
 800194a:	f7ff fa0d 	bl	8000d68 <HAL_NVIC_SetPriority>
}
 800194e:	b015      	add	sp, #84	; 0x54
 8001950:	bd30      	pop	{r4, r5, pc}
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800
 8001958:	40007000 	.word	0x40007000

0800195c <main>:
{
 800195c:	b500      	push	{lr}
 800195e:	b08d      	sub	sp, #52	; 0x34
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001960:	2400      	movs	r4, #0
  HAL_Init();
 8001962:	f7ff f9b7 	bl	8000cd4 <HAL_Init>
  SystemClock_Config();
 8001966:	f7ff ffa3 	bl	80018b0 <SystemClock_Config>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800196a:	4b27      	ldr	r3, [pc, #156]	; (8001a08 <main+0xac>)
 800196c:	9405      	str	r4, [sp, #20]
 800196e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8001970:	4826      	ldr	r0, [pc, #152]	; (8001a0c <main+0xb0>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001972:	f042 0202 	orr.w	r2, r2, #2
 8001976:	631a      	str	r2, [r3, #48]	; 0x30
 8001978:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800197a:	f002 0202 	and.w	r2, r2, #2
 800197e:	9205      	str	r2, [sp, #20]
 8001980:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001982:	9406      	str	r4, [sp, #24]
 8001984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001986:	f042 0208 	orr.w	r2, r2, #8
 800198a:	631a      	str	r2, [r3, #48]	; 0x30
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8001994:	4622      	mov	r2, r4
 8001996:	f44f 4120 	mov.w	r1, #40960	; 0xa000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800199a:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 800199c:	f7ff fb20 	bl	8000fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 80019a0:	4622      	mov	r2, r4
 80019a2:	f44f 412a 	mov.w	r1, #43520	; 0xaa00
 80019a6:	481a      	ldr	r0, [pc, #104]	; (8001a10 <main+0xb4>)
 80019a8:	f7ff fb1a 	bl	8000fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ac:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80019ae:	f44f 4320 	mov.w	r3, #40960	; 0xa000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b2:	a907      	add	r1, sp, #28
 80019b4:	4815      	ldr	r0, [pc, #84]	; (8001a0c <main+0xb0>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80019b6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b8:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019bc:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019be:	f7ff fa2f 	bl	8000e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD11 PD13 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15;
 80019c2:	f44f 432a 	mov.w	r3, #43520	; 0xaa00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019c6:	a907      	add	r1, sp, #28
 80019c8:	4811      	ldr	r0, [pc, #68]	; (8001a10 <main+0xb4>)
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15;
 80019ca:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019cc:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	940a      	str	r4, [sp, #40]	; 0x28
  LCD1602_Begin4BIT(GPIOB, GPIO_PIN_13, GPIO_PIN_15, GPIOD, GPIO_PIN_9, GPIO_PIN_11, GPIO_PIN_13, GPIO_PIN_15);
 80019d2:	f44f 6500 	mov.w	r5, #2048	; 0x800
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019d6:	f7ff fa23 	bl	8000e20 <HAL_GPIO_Init>
  LCD1602_Begin4BIT(GPIOB, GPIO_PIN_13, GPIO_PIN_15, GPIOD, GPIO_PIN_9, GPIO_PIN_11, GPIO_PIN_13, GPIO_PIN_15);
 80019da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019e6:	4809      	ldr	r0, [pc, #36]	; (8001a0c <main+0xb0>)
 80019e8:	9203      	str	r2, [sp, #12]
 80019ea:	9102      	str	r1, [sp, #8]
 80019ec:	e88d 0028 	stmia.w	sp, {r3, r5}
 80019f0:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <main+0xb4>)
 80019f2:	f7ff fec9 	bl	8001788 <LCD1602_Begin4BIT>
  LCD1602_noCursor();
 80019f6:	f7ff ff47 	bl	8001888 <LCD1602_noCursor>
  LCD1602_noBlink();
 80019fa:	f7ff ff4f 	bl	800189c <LCD1602_noBlink>
  LCD1602_print("HELLO WORLD");
 80019fe:	4805      	ldr	r0, [pc, #20]	; (8001a14 <main+0xb8>)
 8001a00:	f7ff ff26 	bl	8001850 <LCD1602_print>
 8001a04:	e7fe      	b.n	8001a04 <main+0xa8>
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40020400 	.word	0x40020400
 8001a10:	40020c00 	.word	0x40020c00
 8001a14:	08001b98 	.word	0x08001b98

08001a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a1a:	2003      	movs	r0, #3
 8001a1c:	f7ff f992 	bl	8000d44 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001a20:	2200      	movs	r2, #0
 8001a22:	4611      	mov	r1, r2
 8001a24:	f06f 000b 	mvn.w	r0, #11
 8001a28:	f7ff f99e 	bl	8000d68 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	4611      	mov	r1, r2
 8001a30:	f06f 000a 	mvn.w	r0, #10
 8001a34:	f7ff f998 	bl	8000d68 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	f06f 0009 	mvn.w	r0, #9
 8001a40:	f7ff f992 	bl	8000d68 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001a44:	2200      	movs	r2, #0
 8001a46:	4611      	mov	r1, r2
 8001a48:	f06f 0004 	mvn.w	r0, #4
 8001a4c:	f7ff f98c 	bl	8000d68 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001a50:	2200      	movs	r2, #0
 8001a52:	4611      	mov	r1, r2
 8001a54:	f06f 0003 	mvn.w	r0, #3
 8001a58:	f7ff f986 	bl	8000d68 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	4611      	mov	r1, r2
 8001a60:	f06f 0001 	mvn.w	r0, #1
 8001a64:	f7ff f980 	bl	8000d68 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001a74:	f7ff b978 	b.w	8000d68 <HAL_NVIC_SetPriority>

08001a78 <NMI_Handler>:
 8001a78:	4770      	bx	lr

08001a7a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001a7a:	e7fe      	b.n	8001a7a <HardFault_Handler>

08001a7c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001a7c:	e7fe      	b.n	8001a7c <MemManage_Handler>

08001a7e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001a7e:	e7fe      	b.n	8001a7e <BusFault_Handler>

08001a80 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001a80:	e7fe      	b.n	8001a80 <UsageFault_Handler>

08001a82 <SVC_Handler>:
 8001a82:	4770      	bx	lr

08001a84 <DebugMon_Handler>:
 8001a84:	4770      	bx	lr

08001a86 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001a86:	4770      	bx	lr

08001a88 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001a88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a8a:	f7ff f93d 	bl	8000d08 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001a92:	f7ff b9c0 	b.w	8000e16 <HAL_SYSTICK_IRQHandler>
	...

08001a98 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a98:	490f      	ldr	r1, [pc, #60]	; (8001ad8 <SystemInit+0x40>)
 8001a9a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001a9e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001aa6:	4b0d      	ldr	r3, [pc, #52]	; (8001adc <SystemInit+0x44>)
 8001aa8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001aaa:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001aac:	f042 0201 	orr.w	r2, r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001ab2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001aba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001abe:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001ac0:	4a07      	ldr	r2, [pc, #28]	; (8001ae0 <SystemInit+0x48>)
 8001ac2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001aca:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001acc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ace:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001ad2:	608b      	str	r3, [r1, #8]
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000ed00 	.word	0xe000ed00
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	24003010 	.word	0x24003010

08001ae4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ae4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ae8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001aea:	e003      	b.n	8001af4 <LoopCopyDataInit>

08001aec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001aee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001af0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001af2:	3104      	adds	r1, #4

08001af4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001af4:	480b      	ldr	r0, [pc, #44]	; (8001b24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001af6:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001af8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001afa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001afc:	d3f6      	bcc.n	8001aec <CopyDataInit>
  ldr  r2, =_sbss
 8001afe:	4a0b      	ldr	r2, [pc, #44]	; (8001b2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b00:	e002      	b.n	8001b08 <LoopFillZerobss>

08001b02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b04:	f842 3b04 	str.w	r3, [r2], #4

08001b08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b08:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b0c:	d3f9      	bcc.n	8001b02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b0e:	f7ff ffc3 	bl	8001a98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b12:	f000 f811 	bl	8001b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b16:	f7ff ff21 	bl	800195c <main>
  bx  lr    
 8001b1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b1c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001b20:	08001bcc 	.word	0x08001bcc
  ldr  r0, =_sdata
 8001b24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b28:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 8001b2c:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 8001b30:	20000048 	.word	0x20000048

08001b34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b34:	e7fe      	b.n	8001b34 <ADC_IRQHandler>
	...

08001b38 <__libc_init_array>:
 8001b38:	b570      	push	{r4, r5, r6, lr}
 8001b3a:	4e0d      	ldr	r6, [pc, #52]	; (8001b70 <__libc_init_array+0x38>)
 8001b3c:	4c0d      	ldr	r4, [pc, #52]	; (8001b74 <__libc_init_array+0x3c>)
 8001b3e:	1ba4      	subs	r4, r4, r6
 8001b40:	10a4      	asrs	r4, r4, #2
 8001b42:	2500      	movs	r5, #0
 8001b44:	42a5      	cmp	r5, r4
 8001b46:	d109      	bne.n	8001b5c <__libc_init_array+0x24>
 8001b48:	4e0b      	ldr	r6, [pc, #44]	; (8001b78 <__libc_init_array+0x40>)
 8001b4a:	4c0c      	ldr	r4, [pc, #48]	; (8001b7c <__libc_init_array+0x44>)
 8001b4c:	f000 f818 	bl	8001b80 <_init>
 8001b50:	1ba4      	subs	r4, r4, r6
 8001b52:	10a4      	asrs	r4, r4, #2
 8001b54:	2500      	movs	r5, #0
 8001b56:	42a5      	cmp	r5, r4
 8001b58:	d105      	bne.n	8001b66 <__libc_init_array+0x2e>
 8001b5a:	bd70      	pop	{r4, r5, r6, pc}
 8001b5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b60:	4798      	blx	r3
 8001b62:	3501      	adds	r5, #1
 8001b64:	e7ee      	b.n	8001b44 <__libc_init_array+0xc>
 8001b66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b6a:	4798      	blx	r3
 8001b6c:	3501      	adds	r5, #1
 8001b6e:	e7f2      	b.n	8001b56 <__libc_init_array+0x1e>
 8001b70:	08001bc4 	.word	0x08001bc4
 8001b74:	08001bc4 	.word	0x08001bc4
 8001b78:	08001bc4 	.word	0x08001bc4
 8001b7c:	08001bc8 	.word	0x08001bc8

08001b80 <_init>:
 8001b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b82:	bf00      	nop
 8001b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b86:	bc08      	pop	{r3}
 8001b88:	469e      	mov	lr, r3
 8001b8a:	4770      	bx	lr

08001b8c <_fini>:
 8001b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b8e:	bf00      	nop
 8001b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b92:	bc08      	pop	{r3}
 8001b94:	469e      	mov	lr, r3
 8001b96:	4770      	bx	lr
