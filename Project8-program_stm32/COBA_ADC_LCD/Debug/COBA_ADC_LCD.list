
COBA_ADC_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002810  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080029a0  080029a0  000129a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080029f0  080029f0  000129f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080029f8  080029f8  000129f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080029fc  080029fc  000129fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  20000000  08002a00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
  8 .bss          0000009c  2000006c  2000006c  0002006c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000108  20000108  0002006c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000bec6  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001bd9  00000000  00000000  0002bf62  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001bd3  00000000  00000000  0002db3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004d8  00000000  00000000  0002f710  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006a8  00000000  00000000  0002fbe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00002d5c  00000000  00000000  00030290  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000229c  00000000  00000000  00032fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00035288  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001054  00000000  00000000  00035304  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002988 	.word	0x08002988

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08002988 	.word	0x08002988

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f092 0f00 	teq	r2, #0
 800055a:	bf14      	ite	ne
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800056c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000570:	e720      	b.n	80003b4 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_ul2d>:
 8000574:	ea50 0201 	orrs.w	r2, r0, r1
 8000578:	bf08      	it	eq
 800057a:	4770      	bxeq	lr
 800057c:	b530      	push	{r4, r5, lr}
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	e00a      	b.n	800059a <__aeabi_l2d+0x16>

08000584 <__aeabi_l2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000592:	d502      	bpl.n	800059a <__aeabi_l2d+0x16>
 8000594:	4240      	negs	r0, r0
 8000596:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800059a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a6:	f43f aedc 	beq.w	8000362 <__adddf3+0xe6>
 80005aa:	f04f 0203 	mov.w	r2, #3
 80005ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b2:	bf18      	it	ne
 80005b4:	3203      	addne	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005c2:	f1c2 0320 	rsb	r3, r2, #32
 80005c6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ca:	fa20 f002 	lsr.w	r0, r0, r2
 80005ce:	fa01 fe03 	lsl.w	lr, r1, r3
 80005d2:	ea40 000e 	orr.w	r0, r0, lr
 80005d6:	fa21 f102 	lsr.w	r1, r1, r2
 80005da:	4414      	add	r4, r2
 80005dc:	e6c1      	b.n	8000362 <__adddf3+0xe6>
 80005de:	bf00      	nop

080005e0 <__aeabi_dmul>:
 80005e0:	b570      	push	{r4, r5, r6, lr}
 80005e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ee:	bf1d      	ittte	ne
 80005f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f4:	ea94 0f0c 	teqne	r4, ip
 80005f8:	ea95 0f0c 	teqne	r5, ip
 80005fc:	f000 f8de 	bleq	80007bc <__aeabi_dmul+0x1dc>
 8000600:	442c      	add	r4, r5
 8000602:	ea81 0603 	eor.w	r6, r1, r3
 8000606:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800060a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000612:	bf18      	it	ne
 8000614:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000620:	d038      	beq.n	8000694 <__aeabi_dmul+0xb4>
 8000622:	fba0 ce02 	umull	ip, lr, r0, r2
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000632:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000636:	f04f 0600 	mov.w	r6, #0
 800063a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063e:	f09c 0f00 	teq	ip, #0
 8000642:	bf18      	it	ne
 8000644:	f04e 0e01 	orrne.w	lr, lr, #1
 8000648:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800064c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000650:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000654:	d204      	bcs.n	8000660 <__aeabi_dmul+0x80>
 8000656:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800065a:	416d      	adcs	r5, r5
 800065c:	eb46 0606 	adc.w	r6, r6, r6
 8000660:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000664:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000668:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800066c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000670:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000674:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000678:	bf88      	it	hi
 800067a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067e:	d81e      	bhi.n	80006be <__aeabi_dmul+0xde>
 8000680:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000684:	bf08      	it	eq
 8000686:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800068a:	f150 0000 	adcs.w	r0, r0, #0
 800068e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000698:	ea46 0101 	orr.w	r1, r6, r1
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	ea81 0103 	eor.w	r1, r1, r3
 80006a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a8:	bfc2      	ittt	gt
 80006aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	popgt	{r4, r5, r6, pc}
 80006b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b8:	f04f 0e00 	mov.w	lr, #0
 80006bc:	3c01      	subs	r4, #1
 80006be:	f300 80ab 	bgt.w	8000818 <__aeabi_dmul+0x238>
 80006c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c6:	bfde      	ittt	le
 80006c8:	2000      	movle	r0, #0
 80006ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ce:	bd70      	pople	{r4, r5, r6, pc}
 80006d0:	f1c4 0400 	rsb	r4, r4, #0
 80006d4:	3c20      	subs	r4, #32
 80006d6:	da35      	bge.n	8000744 <__aeabi_dmul+0x164>
 80006d8:	340c      	adds	r4, #12
 80006da:	dc1b      	bgt.n	8000714 <__aeabi_dmul+0x134>
 80006dc:	f104 0414 	add.w	r4, r4, #20
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f305 	lsl.w	r3, r0, r5
 80006e8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000700:	fa21 f604 	lsr.w	r6, r1, r4
 8000704:	eb42 0106 	adc.w	r1, r2, r6
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 040c 	rsb	r4, r4, #12
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f304 	lsl.w	r3, r0, r4
 8000720:	fa20 f005 	lsr.w	r0, r0, r5
 8000724:	fa01 f204 	lsl.w	r2, r1, r4
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000730:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000734:	f141 0100 	adc.w	r1, r1, #0
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f205 	lsl.w	r2, r0, r5
 800074c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000750:	fa20 f304 	lsr.w	r3, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea43 0302 	orr.w	r3, r3, r2
 800075c:	fa21 f004 	lsr.w	r0, r1, r4
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	fa21 f204 	lsr.w	r2, r1, r4
 8000768:	ea20 0002 	bic.w	r0, r0, r2
 800076c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f094 0f00 	teq	r4, #0
 8000780:	d10f      	bne.n	80007a2 <__aeabi_dmul+0x1c2>
 8000782:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000786:	0040      	lsls	r0, r0, #1
 8000788:	eb41 0101 	adc.w	r1, r1, r1
 800078c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000790:	bf08      	it	eq
 8000792:	3c01      	subeq	r4, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1a6>
 8000796:	ea41 0106 	orr.w	r1, r1, r6
 800079a:	f095 0f00 	teq	r5, #0
 800079e:	bf18      	it	ne
 80007a0:	4770      	bxne	lr
 80007a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a6:	0052      	lsls	r2, r2, #1
 80007a8:	eb43 0303 	adc.w	r3, r3, r3
 80007ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3d01      	subeq	r5, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1c6>
 80007b6:	ea43 0306 	orr.w	r3, r3, r6
 80007ba:	4770      	bx	lr
 80007bc:	ea94 0f0c 	teq	r4, ip
 80007c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c4:	bf18      	it	ne
 80007c6:	ea95 0f0c 	teqne	r5, ip
 80007ca:	d00c      	beq.n	80007e6 <__aeabi_dmul+0x206>
 80007cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d0:	bf18      	it	ne
 80007d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d6:	d1d1      	bne.n	800077c <__aeabi_dmul+0x19c>
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	f04f 0000 	mov.w	r0, #0
 80007e4:	bd70      	pop	{r4, r5, r6, pc}
 80007e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ea:	bf06      	itte	eq
 80007ec:	4610      	moveq	r0, r2
 80007ee:	4619      	moveq	r1, r3
 80007f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f4:	d019      	beq.n	800082a <__aeabi_dmul+0x24a>
 80007f6:	ea94 0f0c 	teq	r4, ip
 80007fa:	d102      	bne.n	8000802 <__aeabi_dmul+0x222>
 80007fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000800:	d113      	bne.n	800082a <__aeabi_dmul+0x24a>
 8000802:	ea95 0f0c 	teq	r5, ip
 8000806:	d105      	bne.n	8000814 <__aeabi_dmul+0x234>
 8000808:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800080c:	bf1c      	itt	ne
 800080e:	4610      	movne	r0, r2
 8000810:	4619      	movne	r1, r3
 8000812:	d10a      	bne.n	800082a <__aeabi_dmul+0x24a>
 8000814:	ea81 0103 	eor.w	r1, r1, r3
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800081c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000820:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000824:	f04f 0000 	mov.w	r0, #0
 8000828:	bd70      	pop	{r4, r5, r6, pc}
 800082a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000832:	bd70      	pop	{r4, r5, r6, pc}

08000834 <__aeabi_ddiv>:
 8000834:	b570      	push	{r4, r5, r6, lr}
 8000836:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800083a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000842:	bf1d      	ittte	ne
 8000844:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000848:	ea94 0f0c 	teqne	r4, ip
 800084c:	ea95 0f0c 	teqne	r5, ip
 8000850:	f000 f8a7 	bleq	80009a2 <__aeabi_ddiv+0x16e>
 8000854:	eba4 0405 	sub.w	r4, r4, r5
 8000858:	ea81 0e03 	eor.w	lr, r1, r3
 800085c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000860:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000864:	f000 8088 	beq.w	8000978 <__aeabi_ddiv+0x144>
 8000868:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800086c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000870:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000874:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000878:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800087c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000880:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000884:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000888:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800088c:	429d      	cmp	r5, r3
 800088e:	bf08      	it	eq
 8000890:	4296      	cmpeq	r6, r2
 8000892:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000896:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800089a:	d202      	bcs.n	80008a2 <__aeabi_ddiv+0x6e>
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a2:	1ab6      	subs	r6, r6, r2
 80008a4:	eb65 0503 	sbc.w	r5, r5, r3
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000910:	ea55 0e06 	orrs.w	lr, r5, r6
 8000914:	d018      	beq.n	8000948 <__aeabi_ddiv+0x114>
 8000916:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800091a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000922:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000926:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800092a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000932:	d1c0      	bne.n	80008b6 <__aeabi_ddiv+0x82>
 8000934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000938:	d10b      	bne.n	8000952 <__aeabi_ddiv+0x11e>
 800093a:	ea41 0100 	orr.w	r1, r1, r0
 800093e:	f04f 0000 	mov.w	r0, #0
 8000942:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000946:	e7b6      	b.n	80008b6 <__aeabi_ddiv+0x82>
 8000948:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800094c:	bf04      	itt	eq
 800094e:	4301      	orreq	r1, r0
 8000950:	2000      	moveq	r0, #0
 8000952:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000956:	bf88      	it	hi
 8000958:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800095c:	f63f aeaf 	bhi.w	80006be <__aeabi_dmul+0xde>
 8000960:	ebb5 0c03 	subs.w	ip, r5, r3
 8000964:	bf04      	itt	eq
 8000966:	ebb6 0c02 	subseq.w	ip, r6, r2
 800096a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096e:	f150 0000 	adcs.w	r0, r0, #0
 8000972:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000976:	bd70      	pop	{r4, r5, r6, pc}
 8000978:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800097c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000980:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000984:	bfc2      	ittt	gt
 8000986:	ebd4 050c 	rsbsgt	r5, r4, ip
 800098a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098e:	bd70      	popgt	{r4, r5, r6, pc}
 8000990:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000994:	f04f 0e00 	mov.w	lr, #0
 8000998:	3c01      	subs	r4, #1
 800099a:	e690      	b.n	80006be <__aeabi_dmul+0xde>
 800099c:	ea45 0e06 	orr.w	lr, r5, r6
 80009a0:	e68d      	b.n	80006be <__aeabi_dmul+0xde>
 80009a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a6:	ea94 0f0c 	teq	r4, ip
 80009aa:	bf08      	it	eq
 80009ac:	ea95 0f0c 	teqeq	r5, ip
 80009b0:	f43f af3b 	beq.w	800082a <__aeabi_dmul+0x24a>
 80009b4:	ea94 0f0c 	teq	r4, ip
 80009b8:	d10a      	bne.n	80009d0 <__aeabi_ddiv+0x19c>
 80009ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009be:	f47f af34 	bne.w	800082a <__aeabi_dmul+0x24a>
 80009c2:	ea95 0f0c 	teq	r5, ip
 80009c6:	f47f af25 	bne.w	8000814 <__aeabi_dmul+0x234>
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	e72c      	b.n	800082a <__aeabi_dmul+0x24a>
 80009d0:	ea95 0f0c 	teq	r5, ip
 80009d4:	d106      	bne.n	80009e4 <__aeabi_ddiv+0x1b0>
 80009d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009da:	f43f aefd 	beq.w	80007d8 <__aeabi_dmul+0x1f8>
 80009de:	4610      	mov	r0, r2
 80009e0:	4619      	mov	r1, r3
 80009e2:	e722      	b.n	800082a <__aeabi_dmul+0x24a>
 80009e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ee:	f47f aec5 	bne.w	800077c <__aeabi_dmul+0x19c>
 80009f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f6:	f47f af0d 	bne.w	8000814 <__aeabi_dmul+0x234>
 80009fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fe:	f47f aeeb 	bne.w	80007d8 <__aeabi_dmul+0x1f8>
 8000a02:	e712      	b.n	800082a <__aeabi_dmul+0x24a>

08000a04 <__aeabi_d2uiz>:
 8000a04:	004a      	lsls	r2, r1, #1
 8000a06:	d211      	bcs.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a0c:	d211      	bcs.n	8000a32 <__aeabi_d2uiz+0x2e>
 8000a0e:	d50d      	bpl.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a18:	d40e      	bmi.n	8000a38 <__aeabi_d2uiz+0x34>
 8000a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a26:	fa23 f002 	lsr.w	r0, r3, r2
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d102      	bne.n	8000a3e <__aeabi_d2uiz+0x3a>
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	4770      	bx	lr
 8000a3e:	f04f 0000 	mov.w	r0, #0
 8000a42:	4770      	bx	lr

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f000 b97a 	b.w	8000d50 <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	468c      	mov	ip, r1
 8000a7a:	460d      	mov	r5, r1
 8000a7c:	4604      	mov	r4, r0
 8000a7e:	9e08      	ldr	r6, [sp, #32]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d151      	bne.n	8000b28 <__udivmoddi4+0xb4>
 8000a84:	428a      	cmp	r2, r1
 8000a86:	4617      	mov	r7, r2
 8000a88:	d96d      	bls.n	8000b66 <__udivmoddi4+0xf2>
 8000a8a:	fab2 fe82 	clz	lr, r2
 8000a8e:	f1be 0f00 	cmp.w	lr, #0
 8000a92:	d00b      	beq.n	8000aac <__udivmoddi4+0x38>
 8000a94:	f1ce 0c20 	rsb	ip, lr, #32
 8000a98:	fa01 f50e 	lsl.w	r5, r1, lr
 8000a9c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000aa0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000aa4:	ea4c 0c05 	orr.w	ip, ip, r5
 8000aa8:	fa00 f40e 	lsl.w	r4, r0, lr
 8000aac:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000ab0:	0c25      	lsrs	r5, r4, #16
 8000ab2:	fbbc f8fa 	udiv	r8, ip, sl
 8000ab6:	fa1f f987 	uxth.w	r9, r7
 8000aba:	fb0a cc18 	mls	ip, sl, r8, ip
 8000abe:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000ac2:	fb08 f309 	mul.w	r3, r8, r9
 8000ac6:	42ab      	cmp	r3, r5
 8000ac8:	d90a      	bls.n	8000ae0 <__udivmoddi4+0x6c>
 8000aca:	19ed      	adds	r5, r5, r7
 8000acc:	f108 32ff 	add.w	r2, r8, #4294967295
 8000ad0:	f080 8123 	bcs.w	8000d1a <__udivmoddi4+0x2a6>
 8000ad4:	42ab      	cmp	r3, r5
 8000ad6:	f240 8120 	bls.w	8000d1a <__udivmoddi4+0x2a6>
 8000ada:	f1a8 0802 	sub.w	r8, r8, #2
 8000ade:	443d      	add	r5, r7
 8000ae0:	1aed      	subs	r5, r5, r3
 8000ae2:	b2a4      	uxth	r4, r4
 8000ae4:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ae8:	fb0a 5510 	mls	r5, sl, r0, r5
 8000aec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000af0:	fb00 f909 	mul.w	r9, r0, r9
 8000af4:	45a1      	cmp	r9, r4
 8000af6:	d909      	bls.n	8000b0c <__udivmoddi4+0x98>
 8000af8:	19e4      	adds	r4, r4, r7
 8000afa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000afe:	f080 810a 	bcs.w	8000d16 <__udivmoddi4+0x2a2>
 8000b02:	45a1      	cmp	r9, r4
 8000b04:	f240 8107 	bls.w	8000d16 <__udivmoddi4+0x2a2>
 8000b08:	3802      	subs	r0, #2
 8000b0a:	443c      	add	r4, r7
 8000b0c:	eba4 0409 	sub.w	r4, r4, r9
 8000b10:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b14:	2100      	movs	r1, #0
 8000b16:	2e00      	cmp	r6, #0
 8000b18:	d061      	beq.n	8000bde <__udivmoddi4+0x16a>
 8000b1a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000b1e:	2300      	movs	r3, #0
 8000b20:	6034      	str	r4, [r6, #0]
 8000b22:	6073      	str	r3, [r6, #4]
 8000b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b28:	428b      	cmp	r3, r1
 8000b2a:	d907      	bls.n	8000b3c <__udivmoddi4+0xc8>
 8000b2c:	2e00      	cmp	r6, #0
 8000b2e:	d054      	beq.n	8000bda <__udivmoddi4+0x166>
 8000b30:	2100      	movs	r1, #0
 8000b32:	e886 0021 	stmia.w	r6, {r0, r5}
 8000b36:	4608      	mov	r0, r1
 8000b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3c:	fab3 f183 	clz	r1, r3
 8000b40:	2900      	cmp	r1, #0
 8000b42:	f040 808e 	bne.w	8000c62 <__udivmoddi4+0x1ee>
 8000b46:	42ab      	cmp	r3, r5
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xdc>
 8000b4a:	4282      	cmp	r2, r0
 8000b4c:	f200 80fa 	bhi.w	8000d44 <__udivmoddi4+0x2d0>
 8000b50:	1a84      	subs	r4, r0, r2
 8000b52:	eb65 0503 	sbc.w	r5, r5, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	46ac      	mov	ip, r5
 8000b5a:	2e00      	cmp	r6, #0
 8000b5c:	d03f      	beq.n	8000bde <__udivmoddi4+0x16a>
 8000b5e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	b912      	cbnz	r2, 8000b6e <__udivmoddi4+0xfa>
 8000b68:	2701      	movs	r7, #1
 8000b6a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000b6e:	fab7 fe87 	clz	lr, r7
 8000b72:	f1be 0f00 	cmp.w	lr, #0
 8000b76:	d134      	bne.n	8000be2 <__udivmoddi4+0x16e>
 8000b78:	1beb      	subs	r3, r5, r7
 8000b7a:	0c3a      	lsrs	r2, r7, #16
 8000b7c:	fa1f fc87 	uxth.w	ip, r7
 8000b80:	2101      	movs	r1, #1
 8000b82:	fbb3 f8f2 	udiv	r8, r3, r2
 8000b86:	0c25      	lsrs	r5, r4, #16
 8000b88:	fb02 3318 	mls	r3, r2, r8, r3
 8000b8c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b90:	fb0c f308 	mul.w	r3, ip, r8
 8000b94:	42ab      	cmp	r3, r5
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x134>
 8000b98:	19ed      	adds	r5, r5, r7
 8000b9a:	f108 30ff 	add.w	r0, r8, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x132>
 8000ba0:	42ab      	cmp	r3, r5
 8000ba2:	f200 80d1 	bhi.w	8000d48 <__udivmoddi4+0x2d4>
 8000ba6:	4680      	mov	r8, r0
 8000ba8:	1aed      	subs	r5, r5, r3
 8000baa:	b2a3      	uxth	r3, r4
 8000bac:	fbb5 f0f2 	udiv	r0, r5, r2
 8000bb0:	fb02 5510 	mls	r5, r2, r0, r5
 8000bb4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000bb8:	fb0c fc00 	mul.w	ip, ip, r0
 8000bbc:	45a4      	cmp	ip, r4
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0x15c>
 8000bc0:	19e4      	adds	r4, r4, r7
 8000bc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x15a>
 8000bc8:	45a4      	cmp	ip, r4
 8000bca:	f200 80b8 	bhi.w	8000d3e <__udivmoddi4+0x2ca>
 8000bce:	4618      	mov	r0, r3
 8000bd0:	eba4 040c 	sub.w	r4, r4, ip
 8000bd4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bd8:	e79d      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000bda:	4631      	mov	r1, r6
 8000bdc:	4630      	mov	r0, r6
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	f1ce 0420 	rsb	r4, lr, #32
 8000be6:	fa05 f30e 	lsl.w	r3, r5, lr
 8000bea:	fa07 f70e 	lsl.w	r7, r7, lr
 8000bee:	fa20 f804 	lsr.w	r8, r0, r4
 8000bf2:	0c3a      	lsrs	r2, r7, #16
 8000bf4:	fa25 f404 	lsr.w	r4, r5, r4
 8000bf8:	ea48 0803 	orr.w	r8, r8, r3
 8000bfc:	fbb4 f1f2 	udiv	r1, r4, r2
 8000c00:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000c04:	fb02 4411 	mls	r4, r2, r1, r4
 8000c08:	fa1f fc87 	uxth.w	ip, r7
 8000c0c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000c10:	fb01 f30c 	mul.w	r3, r1, ip
 8000c14:	42ab      	cmp	r3, r5
 8000c16:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c1a:	d909      	bls.n	8000c30 <__udivmoddi4+0x1bc>
 8000c1c:	19ed      	adds	r5, r5, r7
 8000c1e:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c22:	f080 808a 	bcs.w	8000d3a <__udivmoddi4+0x2c6>
 8000c26:	42ab      	cmp	r3, r5
 8000c28:	f240 8087 	bls.w	8000d3a <__udivmoddi4+0x2c6>
 8000c2c:	3902      	subs	r1, #2
 8000c2e:	443d      	add	r5, r7
 8000c30:	1aeb      	subs	r3, r5, r3
 8000c32:	fa1f f588 	uxth.w	r5, r8
 8000c36:	fbb3 f0f2 	udiv	r0, r3, r2
 8000c3a:	fb02 3310 	mls	r3, r2, r0, r3
 8000c3e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c42:	fb00 f30c 	mul.w	r3, r0, ip
 8000c46:	42ab      	cmp	r3, r5
 8000c48:	d907      	bls.n	8000c5a <__udivmoddi4+0x1e6>
 8000c4a:	19ed      	adds	r5, r5, r7
 8000c4c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c50:	d26f      	bcs.n	8000d32 <__udivmoddi4+0x2be>
 8000c52:	42ab      	cmp	r3, r5
 8000c54:	d96d      	bls.n	8000d32 <__udivmoddi4+0x2be>
 8000c56:	3802      	subs	r0, #2
 8000c58:	443d      	add	r5, r7
 8000c5a:	1aeb      	subs	r3, r5, r3
 8000c5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c60:	e78f      	b.n	8000b82 <__udivmoddi4+0x10e>
 8000c62:	f1c1 0720 	rsb	r7, r1, #32
 8000c66:	fa22 f807 	lsr.w	r8, r2, r7
 8000c6a:	408b      	lsls	r3, r1
 8000c6c:	fa05 f401 	lsl.w	r4, r5, r1
 8000c70:	ea48 0303 	orr.w	r3, r8, r3
 8000c74:	fa20 fe07 	lsr.w	lr, r0, r7
 8000c78:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000c7c:	40fd      	lsrs	r5, r7
 8000c7e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000c82:	fbb5 f9fc 	udiv	r9, r5, ip
 8000c86:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000c8a:	fb0c 5519 	mls	r5, ip, r9, r5
 8000c8e:	fa1f f883 	uxth.w	r8, r3
 8000c92:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000c96:	fb09 f408 	mul.w	r4, r9, r8
 8000c9a:	42ac      	cmp	r4, r5
 8000c9c:	fa02 f201 	lsl.w	r2, r2, r1
 8000ca0:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x244>
 8000ca6:	18ed      	adds	r5, r5, r3
 8000ca8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cac:	d243      	bcs.n	8000d36 <__udivmoddi4+0x2c2>
 8000cae:	42ac      	cmp	r4, r5
 8000cb0:	d941      	bls.n	8000d36 <__udivmoddi4+0x2c2>
 8000cb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000cb6:	441d      	add	r5, r3
 8000cb8:	1b2d      	subs	r5, r5, r4
 8000cba:	fa1f fe8e 	uxth.w	lr, lr
 8000cbe:	fbb5 f0fc 	udiv	r0, r5, ip
 8000cc2:	fb0c 5510 	mls	r5, ip, r0, r5
 8000cc6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000cca:	fb00 f808 	mul.w	r8, r0, r8
 8000cce:	45a0      	cmp	r8, r4
 8000cd0:	d907      	bls.n	8000ce2 <__udivmoddi4+0x26e>
 8000cd2:	18e4      	adds	r4, r4, r3
 8000cd4:	f100 35ff 	add.w	r5, r0, #4294967295
 8000cd8:	d229      	bcs.n	8000d2e <__udivmoddi4+0x2ba>
 8000cda:	45a0      	cmp	r8, r4
 8000cdc:	d927      	bls.n	8000d2e <__udivmoddi4+0x2ba>
 8000cde:	3802      	subs	r0, #2
 8000ce0:	441c      	add	r4, r3
 8000ce2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ce6:	eba4 0408 	sub.w	r4, r4, r8
 8000cea:	fba0 8902 	umull	r8, r9, r0, r2
 8000cee:	454c      	cmp	r4, r9
 8000cf0:	46c6      	mov	lr, r8
 8000cf2:	464d      	mov	r5, r9
 8000cf4:	d315      	bcc.n	8000d22 <__udivmoddi4+0x2ae>
 8000cf6:	d012      	beq.n	8000d1e <__udivmoddi4+0x2aa>
 8000cf8:	b156      	cbz	r6, 8000d10 <__udivmoddi4+0x29c>
 8000cfa:	ebba 030e 	subs.w	r3, sl, lr
 8000cfe:	eb64 0405 	sbc.w	r4, r4, r5
 8000d02:	fa04 f707 	lsl.w	r7, r4, r7
 8000d06:	40cb      	lsrs	r3, r1
 8000d08:	431f      	orrs	r7, r3
 8000d0a:	40cc      	lsrs	r4, r1
 8000d0c:	6037      	str	r7, [r6, #0]
 8000d0e:	6074      	str	r4, [r6, #4]
 8000d10:	2100      	movs	r1, #0
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	4618      	mov	r0, r3
 8000d18:	e6f8      	b.n	8000b0c <__udivmoddi4+0x98>
 8000d1a:	4690      	mov	r8, r2
 8000d1c:	e6e0      	b.n	8000ae0 <__udivmoddi4+0x6c>
 8000d1e:	45c2      	cmp	sl, r8
 8000d20:	d2ea      	bcs.n	8000cf8 <__udivmoddi4+0x284>
 8000d22:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d26:	eb69 0503 	sbc.w	r5, r9, r3
 8000d2a:	3801      	subs	r0, #1
 8000d2c:	e7e4      	b.n	8000cf8 <__udivmoddi4+0x284>
 8000d2e:	4628      	mov	r0, r5
 8000d30:	e7d7      	b.n	8000ce2 <__udivmoddi4+0x26e>
 8000d32:	4640      	mov	r0, r8
 8000d34:	e791      	b.n	8000c5a <__udivmoddi4+0x1e6>
 8000d36:	4681      	mov	r9, r0
 8000d38:	e7be      	b.n	8000cb8 <__udivmoddi4+0x244>
 8000d3a:	4601      	mov	r1, r0
 8000d3c:	e778      	b.n	8000c30 <__udivmoddi4+0x1bc>
 8000d3e:	3802      	subs	r0, #2
 8000d40:	443c      	add	r4, r7
 8000d42:	e745      	b.n	8000bd0 <__udivmoddi4+0x15c>
 8000d44:	4608      	mov	r0, r1
 8000d46:	e708      	b.n	8000b5a <__udivmoddi4+0xe6>
 8000d48:	f1a8 0802 	sub.w	r8, r8, #2
 8000d4c:	443d      	add	r5, r7
 8000d4e:	e72b      	b.n	8000ba8 <__udivmoddi4+0x134>

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d54:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000d56:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <HAL_InitTick+0x24>)
{
 8000d58:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000d5a:	6818      	ldr	r0, [r3, #0]
 8000d5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d60:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d64:	f000 fa76 	bl	8001254 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	4621      	mov	r1, r4
 8000d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d70:	f000 fa3c 	bl	80011ec <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000d74:	2000      	movs	r0, #0
 8000d76:	bd10      	pop	{r4, pc}
 8000d78:	20000004 	.word	0x20000004

08000d7c <HAL_Init>:
{
 8000d7c:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <HAL_Init+0x30>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d86:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d8e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d96:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d98:	2003      	movs	r0, #3
 8000d9a:	f000 fa15 	bl	80011c8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d9e:	2000      	movs	r0, #0
 8000da0:	f7ff ffd8 	bl	8000d54 <HAL_InitTick>
  HAL_MspInit();
 8000da4:	f001 f8ee 	bl	8001f84 <HAL_MspInit>
}
 8000da8:	2000      	movs	r0, #0
 8000daa:	bd08      	pop	{r3, pc}
 8000dac:	40023c00 	.word	0x40023c00

08000db0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000db0:	4a02      	ldr	r2, [pc, #8]	; (8000dbc <HAL_IncTick+0xc>)
 8000db2:	6813      	ldr	r3, [r2, #0]
 8000db4:	3301      	adds	r3, #1
 8000db6:	6013      	str	r3, [r2, #0]
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	200000b4 	.word	0x200000b4

08000dc0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000dc0:	4b01      	ldr	r3, [pc, #4]	; (8000dc8 <HAL_GetTick+0x8>)
 8000dc2:	6818      	ldr	r0, [r3, #0]
}
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	200000b4 	.word	0x200000b4

08000dcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000dcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000dce:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd0:	f7ff fff6 	bl	8000dc0 <HAL_GetTick>
  uint32_t wait = Delay;
 8000dd4:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dd6:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000dd8:	4605      	mov	r5, r0
  {
     wait++;
 8000dda:	bf18      	it	ne
 8000ddc:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000dde:	f7ff ffef 	bl	8000dc0 <HAL_GetTick>
 8000de2:	1b40      	subs	r0, r0, r5
 8000de4:	42a0      	cmp	r0, r4
 8000de6:	d3fa      	bcc.n	8000dde <HAL_Delay+0x12>
  {
  }
}
 8000de8:	b003      	add	sp, #12
 8000dea:	bd30      	pop	{r4, r5, pc}

08000dec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000dec:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000dee:	4604      	mov	r4, r0
 8000df0:	2800      	cmp	r0, #0
 8000df2:	f000 8099 	beq.w	8000f28 <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000df6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000df8:	b923      	cbnz	r3, 8000e04 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dfa:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000dfc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e00:	f001 f8f0 	bl	8001fe4 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e06:	06db      	lsls	r3, r3, #27
 8000e08:	f100 808c 	bmi.w	8000f24 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e0e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e12:	f023 0302 	bic.w	r3, r3, #2
 8000e16:	f043 0302 	orr.w	r3, r3, #2
 8000e1a:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000e1c:	4b43      	ldr	r3, [pc, #268]	; (8000f2c <HAL_ADC_Init+0x140>)
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000e24:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000e26:	685a      	ldr	r2, [r3, #4]
 8000e28:	6861      	ldr	r1, [r4, #4]
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000e2e:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000e30:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000e3a:	685a      	ldr	r2, [r3, #4]
 8000e3c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000e40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000e42:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000e44:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000e46:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000e4a:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000e4c:	685a      	ldr	r2, [r3, #4]
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000e52:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000e54:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000e56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000e5c:	689a      	ldr	r2, [r3, #8]
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e62:	4933      	ldr	r1, [pc, #204]	; (8000f30 <HAL_ADC_Init+0x144>)
 8000e64:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000e66:	428a      	cmp	r2, r1
 8000e68:	d050      	beq.n	8000f0c <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e6a:	6899      	ldr	r1, [r3, #8]
 8000e6c:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000e70:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000e72:	6899      	ldr	r1, [r3, #8]
 8000e74:	430a      	orrs	r2, r1
 8000e76:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e78:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000e7a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e86:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000e88:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000e8a:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000e8c:	f022 0202 	bic.w	r2, r2, #2
 8000e90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000e92:	689a      	ldr	r2, [r3, #8]
 8000e94:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000e98:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000e9a:	6a22      	ldr	r2, [r4, #32]
 8000e9c:	2a00      	cmp	r2, #0
 8000e9e:	d03d      	beq.n	8000f1c <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000ea0:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000ea2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000ea4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000ea8:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000eb0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000eb2:	685a      	ldr	r2, [r3, #4]
 8000eb4:	3901      	subs	r1, #1
 8000eb6:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000eba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000ebe:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000ec0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000ec4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ec8:	3901      	subs	r1, #1
 8000eca:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000ece:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000ed0:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000ed2:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000ed4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ed8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000eda:	689a      	ldr	r2, [r3, #8]
 8000edc:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000ee0:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000ee2:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000ee4:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000eea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000eec:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000eee:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000ef0:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000ef4:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000ef6:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000ef8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000efa:	f023 0303 	bic.w	r3, r3, #3
 8000efe:	f043 0301 	orr.w	r3, r3, #1
 8000f02:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000f04:	2300      	movs	r3, #0
 8000f06:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8000f0a:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000f0c:	689a      	ldr	r2, [r3, #8]
 8000f0e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f14:	689a      	ldr	r2, [r3, #8]
 8000f16:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f1a:	e7b4      	b.n	8000e86 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000f1c:	685a      	ldr	r2, [r3, #4]
 8000f1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f22:	e7ca      	b.n	8000eba <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8000f24:	2001      	movs	r0, #1
 8000f26:	e7ed      	b.n	8000f04 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 8000f28:	2001      	movs	r0, #1
}
 8000f2a:	bd10      	pop	{r4, pc}
 8000f2c:	40012300 	.word	0x40012300
 8000f30:	0f000001 	.word	0x0f000001

08000f34 <HAL_ADC_Start>:
{
 8000f34:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8000f36:	2300      	movs	r3, #0
 8000f38:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000f3a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d04e      	beq.n	8000fe0 <HAL_ADC_Start+0xac>
 8000f42:	2301      	movs	r3, #1
 8000f44:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f48:	6803      	ldr	r3, [r0, #0]
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	07d1      	lsls	r1, r2, #31
 8000f4e:	d505      	bpl.n	8000f5c <HAL_ADC_Start+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f50:	689a      	ldr	r2, [r3, #8]
 8000f52:	07d2      	lsls	r2, r2, #31
 8000f54:	d414      	bmi.n	8000f80 <HAL_ADC_Start+0x4c>
  return HAL_OK;
 8000f56:	2000      	movs	r0, #0
}
 8000f58:	b002      	add	sp, #8
 8000f5a:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 8000f5c:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f5e:	4921      	ldr	r1, [pc, #132]	; (8000fe4 <HAL_ADC_Start+0xb0>)
    __HAL_ADC_ENABLE(hadc);
 8000f60:	f042 0201 	orr.w	r2, r2, #1
 8000f64:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f66:	4a20      	ldr	r2, [pc, #128]	; (8000fe8 <HAL_ADC_Start+0xb4>)
 8000f68:	6812      	ldr	r2, [r2, #0]
 8000f6a:	fbb2 f2f1 	udiv	r2, r2, r1
 8000f6e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 8000f72:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 8000f74:	9a01      	ldr	r2, [sp, #4]
 8000f76:	2a00      	cmp	r2, #0
 8000f78:	d0ea      	beq.n	8000f50 <HAL_ADC_Start+0x1c>
      counter--;
 8000f7a:	9a01      	ldr	r2, [sp, #4]
 8000f7c:	3a01      	subs	r2, #1
 8000f7e:	e7f8      	b.n	8000f72 <HAL_ADC_Start+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 8000f80:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000f82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000f86:	f022 0201 	bic.w	r2, r2, #1
 8000f8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f8e:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f90:	685a      	ldr	r2, [r3, #4]
 8000f92:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f94:	bf41      	itttt	mi
 8000f96:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 8000f98:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000f9c:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000fa0:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fa2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000fa4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fa8:	bf1c      	itt	ne
 8000faa:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8000fac:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000fb0:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000fb8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000fbc:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000fbe:	4a0b      	ldr	r2, [pc, #44]	; (8000fec <HAL_ADC_Start+0xb8>)
 8000fc0:	6852      	ldr	r2, [r2, #4]
 8000fc2:	06d2      	lsls	r2, r2, #27
 8000fc4:	d108      	bne.n	8000fd8 <HAL_ADC_Start+0xa4>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000fc6:	6898      	ldr	r0, [r3, #8]
 8000fc8:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8000fcc:	d1c3      	bne.n	8000f56 <HAL_ADC_Start+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	e7bf      	b.n	8000f58 <HAL_ADC_Start+0x24>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000fd8:	4a05      	ldr	r2, [pc, #20]	; (8000ff0 <HAL_ADC_Start+0xbc>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d1bb      	bne.n	8000f56 <HAL_ADC_Start+0x22>
 8000fde:	e7f2      	b.n	8000fc6 <HAL_ADC_Start+0x92>
  __HAL_LOCK(hadc);
 8000fe0:	2002      	movs	r0, #2
 8000fe2:	e7b9      	b.n	8000f58 <HAL_ADC_Start+0x24>
 8000fe4:	000f4240 	.word	0x000f4240
 8000fe8:	20000004 	.word	0x20000004
 8000fec:	40012300 	.word	0x40012300
 8000ff0:	40012000 	.word	0x40012000

08000ff4 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000ff4:	6803      	ldr	r3, [r0, #0]
 8000ff6:	689a      	ldr	r2, [r3, #8]
{
 8000ff8:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000ffa:	0556      	lsls	r6, r2, #21
{
 8000ffc:	4604      	mov	r4, r0
 8000ffe:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001000:	d50b      	bpl.n	800101a <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001002:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001004:	05d8      	lsls	r0, r3, #23
 8001006:	d508      	bpl.n	800101a <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001008:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800100a:	f043 0320 	orr.w	r3, r3, #32
 800100e:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 8001010:	2300      	movs	r3, #0
 8001012:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8001016:	2001      	movs	r0, #1
 8001018:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 800101a:	f7ff fed1 	bl	8000dc0 <HAL_GetTick>
 800101e:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001020:	6823      	ldr	r3, [r4, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	0792      	lsls	r2, r2, #30
 8001026:	d50c      	bpl.n	8001042 <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001028:	f06f 0212 	mvn.w	r2, #18
 800102c:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800102e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001034:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001036:	689a      	ldr	r2, [r3, #8]
 8001038:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800103c:	d013      	beq.n	8001066 <HAL_ADC_PollForConversion+0x72>
  return HAL_OK;
 800103e:	2000      	movs	r0, #0
 8001040:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001042:	1c69      	adds	r1, r5, #1
 8001044:	d0ed      	beq.n	8001022 <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001046:	b945      	cbnz	r5, 800105a <HAL_ADC_PollForConversion+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001048:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800104a:	f043 0304 	orr.w	r3, r3, #4
 800104e:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 8001050:	2300      	movs	r3, #0
 8001052:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001056:	2003      	movs	r0, #3
 8001058:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800105a:	f7ff feb1 	bl	8000dc0 <HAL_GetTick>
 800105e:	1b80      	subs	r0, r0, r6
 8001060:	4285      	cmp	r5, r0
 8001062:	d2dd      	bcs.n	8001020 <HAL_ADC_PollForConversion+0x2c>
 8001064:	e7f0      	b.n	8001048 <HAL_ADC_PollForConversion+0x54>
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001066:	69a2      	ldr	r2, [r4, #24]
 8001068:	2a00      	cmp	r2, #0
 800106a:	d1e8      	bne.n	800103e <HAL_ADC_PollForConversion+0x4a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800106c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800106e:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8001072:	d002      	beq.n	800107a <HAL_ADC_PollForConversion+0x86>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001074:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001076:	055b      	lsls	r3, r3, #21
 8001078:	d4e1      	bmi.n	800103e <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800107a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800107c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001080:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001082:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001084:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8001088:	d1d9      	bne.n	800103e <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800108a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001092:	bd70      	pop	{r4, r5, r6, pc}

08001094 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001094:	6803      	ldr	r3, [r0, #0]
 8001096:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8001098:	4770      	bx	lr
	...

0800109c <HAL_ADC_ConfigChannel>:
{
 800109c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 800109e:	2300      	movs	r3, #0
 80010a0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80010a2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	f000 8083 	beq.w	80011b2 <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010ac:	680d      	ldr	r5, [r1, #0]
 80010ae:	6804      	ldr	r4, [r0, #0]
 80010b0:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 80010b2:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010b4:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 80010b6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80010ba:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010bc:	d92a      	bls.n	8001114 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010be:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80010c2:	68e7      	ldr	r7, [r4, #12]
 80010c4:	3b1e      	subs	r3, #30
 80010c6:	f04f 0e07 	mov.w	lr, #7
 80010ca:	fa0e fe03 	lsl.w	lr, lr, r3
 80010ce:	ea27 070e 	bic.w	r7, r7, lr
 80010d2:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010d4:	68e7      	ldr	r7, [r4, #12]
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	433b      	orrs	r3, r7
 80010dc:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 80010de:	684a      	ldr	r2, [r1, #4]
 80010e0:	2a06      	cmp	r2, #6
 80010e2:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80010e6:	d825      	bhi.n	8001134 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80010e8:	4413      	add	r3, r2
 80010ea:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80010ec:	1f59      	subs	r1, r3, #5
 80010ee:	231f      	movs	r3, #31
 80010f0:	408b      	lsls	r3, r1
 80010f2:	ea27 0303 	bic.w	r3, r7, r3
 80010f6:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80010f8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80010fa:	fa06 f101 	lsl.w	r1, r6, r1
 80010fe:	4311      	orrs	r1, r2
 8001100:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001102:	4b2d      	ldr	r3, [pc, #180]	; (80011b8 <HAL_ADC_ConfigChannel+0x11c>)
 8001104:	429c      	cmp	r4, r3
 8001106:	d034      	beq.n	8001172 <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 8001108:	2300      	movs	r3, #0
 800110a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800110e:	4618      	mov	r0, r3
}
 8001110:	b003      	add	sp, #12
 8001112:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001114:	6927      	ldr	r7, [r4, #16]
 8001116:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800111a:	f04f 0e07 	mov.w	lr, #7
 800111e:	fa0e fe03 	lsl.w	lr, lr, r3
 8001122:	ea27 070e 	bic.w	r7, r7, lr
 8001126:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001128:	6927      	ldr	r7, [r4, #16]
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	433b      	orrs	r3, r7
 8001130:	6123      	str	r3, [r4, #16]
 8001132:	e7d4      	b.n	80010de <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 8001134:	2a0c      	cmp	r2, #12
 8001136:	d80e      	bhi.n	8001156 <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001138:	4413      	add	r3, r2
 800113a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800113c:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8001140:	231f      	movs	r3, #31
 8001142:	4093      	lsls	r3, r2
 8001144:	ea21 0303 	bic.w	r3, r1, r3
 8001148:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800114a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800114c:	fa06 f202 	lsl.w	r2, r6, r2
 8001150:	431a      	orrs	r2, r3
 8001152:	6322      	str	r2, [r4, #48]	; 0x30
 8001154:	e7d5      	b.n	8001102 <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001156:	4413      	add	r3, r2
 8001158:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800115a:	3b41      	subs	r3, #65	; 0x41
 800115c:	221f      	movs	r2, #31
 800115e:	409a      	lsls	r2, r3
 8001160:	ea21 0202 	bic.w	r2, r1, r2
 8001164:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001166:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001168:	fa06 f103 	lsl.w	r1, r6, r3
 800116c:	4311      	orrs	r1, r2
 800116e:	62e1      	str	r1, [r4, #44]	; 0x2c
 8001170:	e7c7      	b.n	8001102 <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001172:	2d12      	cmp	r5, #18
 8001174:	d104      	bne.n	8001180 <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001176:	4a11      	ldr	r2, [pc, #68]	; (80011bc <HAL_ADC_ConfigChannel+0x120>)
 8001178:	6853      	ldr	r3, [r2, #4]
 800117a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800117e:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001180:	f1a5 0310 	sub.w	r3, r5, #16
 8001184:	2b01      	cmp	r3, #1
 8001186:	d8bf      	bhi.n	8001108 <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001188:	4a0c      	ldr	r2, [pc, #48]	; (80011bc <HAL_ADC_ConfigChannel+0x120>)
 800118a:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800118c:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800118e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001192:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001194:	d1b8      	bne.n	8001108 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001196:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <HAL_ADC_ConfigChannel+0x124>)
 8001198:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <HAL_ADC_ConfigChannel+0x128>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	fbb3 f2f2 	udiv	r2, r3, r2
 80011a0:	230a      	movs	r3, #10
 80011a2:	4353      	muls	r3, r2
        counter--;
 80011a4:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80011a6:	9b01      	ldr	r3, [sp, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d0ad      	beq.n	8001108 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 80011ac:	9b01      	ldr	r3, [sp, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	e7f8      	b.n	80011a4 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 80011b2:	2002      	movs	r0, #2
 80011b4:	e7ac      	b.n	8001110 <HAL_ADC_ConfigChannel+0x74>
 80011b6:	bf00      	nop
 80011b8:	40012000 	.word	0x40012000
 80011bc:	40012300 	.word	0x40012300
 80011c0:	20000004 	.word	0x20000004
 80011c4:	000f4240 	.word	0x000f4240

080011c8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c8:	4a07      	ldr	r2, [pc, #28]	; (80011e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80011ca:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011cc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011d0:	041b      	lsls	r3, r3, #16
 80011d2:	0c1b      	lsrs	r3, r3, #16
 80011d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80011d8:	0200      	lsls	r0, r0, #8
 80011da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011de:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80011e2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80011e4:	60d3      	str	r3, [r2, #12]
 80011e6:	4770      	bx	lr
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ec:	4b17      	ldr	r3, [pc, #92]	; (800124c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ee:	b530      	push	{r4, r5, lr}
 80011f0:	68dc      	ldr	r4, [r3, #12]
 80011f2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011fc:	2b04      	cmp	r3, #4
 80011fe:	bf28      	it	cs
 8001200:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001202:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	f04f 0501 	mov.w	r5, #1
 8001208:	fa05 f303 	lsl.w	r3, r5, r3
 800120c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001210:	bf8c      	ite	hi
 8001212:	3c03      	subhi	r4, #3
 8001214:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001216:	4019      	ands	r1, r3
 8001218:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800121a:	fa05 f404 	lsl.w	r4, r5, r4
 800121e:	3c01      	subs	r4, #1
 8001220:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001222:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001224:	ea42 0201 	orr.w	r2, r2, r1
 8001228:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122c:	bfaf      	iteee	ge
 800122e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001232:	f000 000f 	andlt.w	r0, r0, #15
 8001236:	4b06      	ldrlt	r3, [pc, #24]	; (8001250 <HAL_NVIC_SetPriority+0x64>)
 8001238:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123a:	bfa5      	ittet	ge
 800123c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001240:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001242:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001244:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001248:	bd30      	pop	{r4, r5, pc}
 800124a:	bf00      	nop
 800124c:	e000ed00 	.word	0xe000ed00
 8001250:	e000ed14 	.word	0xe000ed14

08001254 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001254:	3801      	subs	r0, #1
 8001256:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800125a:	d20a      	bcs.n	8001272 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125e:	4a07      	ldr	r2, [pc, #28]	; (800127c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001260:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001262:	21f0      	movs	r1, #240	; 0xf0
 8001264:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001268:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800126c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001272:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000e010 	.word	0xe000e010
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001282:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001284:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001286:	bf0c      	ite	eq
 8001288:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800128c:	f022 0204 	bicne.w	r2, r2, #4
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	4770      	bx	lr
 8001294:	e000e010 	.word	0xe000e010

08001298 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001298:	4770      	bx	lr

0800129a <HAL_SYSTICK_IRQHandler>:
{
 800129a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800129c:	f7ff fffc 	bl	8001298 <HAL_SYSTICK_Callback>
 80012a0:	bd08      	pop	{r3, pc}
	...

080012a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012a8:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012aa:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800145c <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012b0:	4a68      	ldr	r2, [pc, #416]	; (8001454 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012b2:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8001460 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012b6:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012b8:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80012ba:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012be:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80012c0:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012c4:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80012c8:	45b6      	cmp	lr, r6
 80012ca:	f040 80ae 	bne.w	800142a <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ce:	684c      	ldr	r4, [r1, #4]
 80012d0:	f024 0710 	bic.w	r7, r4, #16
 80012d4:	2f02      	cmp	r7, #2
 80012d6:	d116      	bne.n	8001306 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80012d8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80012dc:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012e0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80012e4:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012e8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80012ec:	f04f 0c0f 	mov.w	ip, #15
 80012f0:	fa0c fc0b 	lsl.w	ip, ip, fp
 80012f4:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012f8:	690d      	ldr	r5, [r1, #16]
 80012fa:	fa05 f50b 	lsl.w	r5, r5, fp
 80012fe:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001302:	f8ca 5020 	str.w	r5, [sl, #32]
 8001306:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800130a:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800130c:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001310:	fa05 f50a 	lsl.w	r5, r5, sl
 8001314:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001316:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800131a:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800131e:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001322:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001324:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001328:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800132a:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800132e:	d811      	bhi.n	8001354 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001330:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001332:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001336:	68cf      	ldr	r7, [r1, #12]
 8001338:	fa07 fc0a 	lsl.w	ip, r7, sl
 800133c:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001340:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001342:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001344:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001348:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800134c:	409f      	lsls	r7, r3
 800134e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001352:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001354:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001356:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001358:	688f      	ldr	r7, [r1, #8]
 800135a:	fa07 f70a 	lsl.w	r7, r7, sl
 800135e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001360:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001362:	00e5      	lsls	r5, r4, #3
 8001364:	d561      	bpl.n	800142a <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001366:	f04f 0b00 	mov.w	fp, #0
 800136a:	f8cd b00c 	str.w	fp, [sp, #12]
 800136e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001372:	4d39      	ldr	r5, [pc, #228]	; (8001458 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001374:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001378:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800137c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001380:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001384:	9703      	str	r7, [sp, #12]
 8001386:	9f03      	ldr	r7, [sp, #12]
 8001388:	f023 0703 	bic.w	r7, r3, #3
 800138c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001390:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001394:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001398:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800139c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80013a0:	f04f 0e0f 	mov.w	lr, #15
 80013a4:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013a8:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013aa:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ae:	d043      	beq.n	8001438 <HAL_GPIO_Init+0x194>
 80013b0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013b4:	42a8      	cmp	r0, r5
 80013b6:	d041      	beq.n	800143c <HAL_GPIO_Init+0x198>
 80013b8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013bc:	42a8      	cmp	r0, r5
 80013be:	d03f      	beq.n	8001440 <HAL_GPIO_Init+0x19c>
 80013c0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013c4:	42a8      	cmp	r0, r5
 80013c6:	d03d      	beq.n	8001444 <HAL_GPIO_Init+0x1a0>
 80013c8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013cc:	42a8      	cmp	r0, r5
 80013ce:	d03b      	beq.n	8001448 <HAL_GPIO_Init+0x1a4>
 80013d0:	4548      	cmp	r0, r9
 80013d2:	d03b      	beq.n	800144c <HAL_GPIO_Init+0x1a8>
 80013d4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80013d8:	42a8      	cmp	r0, r5
 80013da:	d039      	beq.n	8001450 <HAL_GPIO_Init+0x1ac>
 80013dc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013e0:	42a8      	cmp	r0, r5
 80013e2:	bf14      	ite	ne
 80013e4:	2508      	movne	r5, #8
 80013e6:	2507      	moveq	r5, #7
 80013e8:	fa05 f50c 	lsl.w	r5, r5, ip
 80013ec:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013f0:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80013f2:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80013f4:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013f6:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80013fa:	bf0c      	ite	eq
 80013fc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80013fe:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001400:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001402:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001404:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001408:	bf0c      	ite	eq
 800140a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800140c:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800140e:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001410:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001412:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001416:	bf0c      	ite	eq
 8001418:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800141a:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800141c:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800141e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001420:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001422:	bf54      	ite	pl
 8001424:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001426:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001428:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800142a:	3301      	adds	r3, #1
 800142c:	2b10      	cmp	r3, #16
 800142e:	f47f af44 	bne.w	80012ba <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001432:	b005      	add	sp, #20
 8001434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001438:	465d      	mov	r5, fp
 800143a:	e7d5      	b.n	80013e8 <HAL_GPIO_Init+0x144>
 800143c:	2501      	movs	r5, #1
 800143e:	e7d3      	b.n	80013e8 <HAL_GPIO_Init+0x144>
 8001440:	2502      	movs	r5, #2
 8001442:	e7d1      	b.n	80013e8 <HAL_GPIO_Init+0x144>
 8001444:	2503      	movs	r5, #3
 8001446:	e7cf      	b.n	80013e8 <HAL_GPIO_Init+0x144>
 8001448:	2504      	movs	r5, #4
 800144a:	e7cd      	b.n	80013e8 <HAL_GPIO_Init+0x144>
 800144c:	2505      	movs	r5, #5
 800144e:	e7cb      	b.n	80013e8 <HAL_GPIO_Init+0x144>
 8001450:	2506      	movs	r5, #6
 8001452:	e7c9      	b.n	80013e8 <HAL_GPIO_Init+0x144>
 8001454:	40013c00 	.word	0x40013c00
 8001458:	40020000 	.word	0x40020000
 800145c:	40023800 	.word	0x40023800
 8001460:	40021400 	.word	0x40021400

08001464 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001464:	b10a      	cbz	r2, 800146a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001466:	6181      	str	r1, [r0, #24]
 8001468:	4770      	bx	lr
 800146a:	0409      	lsls	r1, r1, #16
 800146c:	e7fb      	b.n	8001466 <HAL_GPIO_WritePin+0x2>
	...

08001470 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001472:	4604      	mov	r4, r0
 8001474:	b910      	cbnz	r0, 800147c <HAL_RCC_OscConfig+0xc>
  {
    return HAL_ERROR;
 8001476:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001478:	b003      	add	sp, #12
 800147a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800147c:	6803      	ldr	r3, [r0, #0]
 800147e:	07d8      	lsls	r0, r3, #31
 8001480:	d43b      	bmi.n	80014fa <HAL_RCC_OscConfig+0x8a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001482:	6823      	ldr	r3, [r4, #0]
 8001484:	0799      	lsls	r1, r3, #30
 8001486:	f100 8084 	bmi.w	8001592 <HAL_RCC_OscConfig+0x122>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800148a:	6823      	ldr	r3, [r4, #0]
 800148c:	071e      	lsls	r6, r3, #28
 800148e:	f100 80c6 	bmi.w	800161e <HAL_RCC_OscConfig+0x1ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001492:	6823      	ldr	r3, [r4, #0]
 8001494:	075d      	lsls	r5, r3, #29
 8001496:	d52a      	bpl.n	80014ee <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001498:	2300      	movs	r3, #0
 800149a:	9301      	str	r3, [sp, #4]
 800149c:	4baa      	ldr	r3, [pc, #680]	; (8001748 <HAL_RCC_OscConfig+0x2d8>)
    PWR->CR |= PWR_CR_DBP;
 800149e:	4dab      	ldr	r5, [pc, #684]	; (800174c <HAL_RCC_OscConfig+0x2dc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80014a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014a6:	641a      	str	r2, [r3, #64]	; 0x40
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ae:	9301      	str	r3, [sp, #4]
 80014b0:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80014b2:	682b      	ldr	r3, [r5, #0]
 80014b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b8:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80014ba:	f7ff fc81 	bl	8000dc0 <HAL_GetTick>
 80014be:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80014c0:	682b      	ldr	r3, [r5, #0]
 80014c2:	05da      	lsls	r2, r3, #23
 80014c4:	f140 80cd 	bpl.w	8001662 <HAL_RCC_OscConfig+0x1f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c8:	68a3      	ldr	r3, [r4, #8]
 80014ca:	4d9f      	ldr	r5, [pc, #636]	; (8001748 <HAL_RCC_OscConfig+0x2d8>)
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	f040 80cf 	bne.w	8001670 <HAL_RCC_OscConfig+0x200>
 80014d2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80014da:	f7ff fc71 	bl	8000dc0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014de:	4d9a      	ldr	r5, [pc, #616]	; (8001748 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 80014e0:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014e2:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014e8:	079b      	lsls	r3, r3, #30
 80014ea:	f140 80e2 	bpl.w	80016b2 <HAL_RCC_OscConfig+0x242>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ee:	69a2      	ldr	r2, [r4, #24]
 80014f0:	2a00      	cmp	r2, #0
 80014f2:	f040 80e5 	bne.w	80016c0 <HAL_RCC_OscConfig+0x250>
  return HAL_OK;
 80014f6:	2000      	movs	r0, #0
 80014f8:	e7be      	b.n	8001478 <HAL_RCC_OscConfig+0x8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014fa:	4b93      	ldr	r3, [pc, #588]	; (8001748 <HAL_RCC_OscConfig+0x2d8>)
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	f002 020c 	and.w	r2, r2, #12
 8001502:	2a04      	cmp	r2, #4
 8001504:	d007      	beq.n	8001516 <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800150c:	2a08      	cmp	r2, #8
 800150e:	d10a      	bne.n	8001526 <HAL_RCC_OscConfig+0xb6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	025a      	lsls	r2, r3, #9
 8001514:	d507      	bpl.n	8001526 <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001516:	4b8c      	ldr	r3, [pc, #560]	; (8001748 <HAL_RCC_OscConfig+0x2d8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	039b      	lsls	r3, r3, #14
 800151c:	d5b1      	bpl.n	8001482 <HAL_RCC_OscConfig+0x12>
 800151e:	6863      	ldr	r3, [r4, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1ae      	bne.n	8001482 <HAL_RCC_OscConfig+0x12>
 8001524:	e7a7      	b.n	8001476 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001526:	6863      	ldr	r3, [r4, #4]
 8001528:	4d87      	ldr	r5, [pc, #540]	; (8001748 <HAL_RCC_OscConfig+0x2d8>)
 800152a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800152e:	d111      	bne.n	8001554 <HAL_RCC_OscConfig+0xe4>
 8001530:	682b      	ldr	r3, [r5, #0]
 8001532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001536:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001538:	f7ff fc42 	bl	8000dc0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153c:	4d82      	ldr	r5, [pc, #520]	; (8001748 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 800153e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001540:	682b      	ldr	r3, [r5, #0]
 8001542:	039f      	lsls	r7, r3, #14
 8001544:	d49d      	bmi.n	8001482 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001546:	f7ff fc3b 	bl	8000dc0 <HAL_GetTick>
 800154a:	1b80      	subs	r0, r0, r6
 800154c:	2864      	cmp	r0, #100	; 0x64
 800154e:	d9f7      	bls.n	8001540 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8001550:	2003      	movs	r0, #3
 8001552:	e791      	b.n	8001478 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001554:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001558:	d104      	bne.n	8001564 <HAL_RCC_OscConfig+0xf4>
 800155a:	682b      	ldr	r3, [r5, #0]
 800155c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001560:	602b      	str	r3, [r5, #0]
 8001562:	e7e5      	b.n	8001530 <HAL_RCC_OscConfig+0xc0>
 8001564:	682a      	ldr	r2, [r5, #0]
 8001566:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800156a:	602a      	str	r2, [r5, #0]
 800156c:	682a      	ldr	r2, [r5, #0]
 800156e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001572:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1df      	bne.n	8001538 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 8001578:	f7ff fc22 	bl	8000dc0 <HAL_GetTick>
 800157c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800157e:	682b      	ldr	r3, [r5, #0]
 8001580:	0398      	lsls	r0, r3, #14
 8001582:	f57f af7e 	bpl.w	8001482 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001586:	f7ff fc1b 	bl	8000dc0 <HAL_GetTick>
 800158a:	1b80      	subs	r0, r0, r6
 800158c:	2864      	cmp	r0, #100	; 0x64
 800158e:	d9f6      	bls.n	800157e <HAL_RCC_OscConfig+0x10e>
 8001590:	e7de      	b.n	8001550 <HAL_RCC_OscConfig+0xe0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001592:	4b6d      	ldr	r3, [pc, #436]	; (8001748 <HAL_RCC_OscConfig+0x2d8>)
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	f012 0f0c 	tst.w	r2, #12
 800159a:	d007      	beq.n	80015ac <HAL_RCC_OscConfig+0x13c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015a2:	2a08      	cmp	r2, #8
 80015a4:	d112      	bne.n	80015cc <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	0259      	lsls	r1, r3, #9
 80015aa:	d40f      	bmi.n	80015cc <HAL_RCC_OscConfig+0x15c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ac:	4b66      	ldr	r3, [pc, #408]	; (8001748 <HAL_RCC_OscConfig+0x2d8>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	0792      	lsls	r2, r2, #30
 80015b2:	d503      	bpl.n	80015bc <HAL_RCC_OscConfig+0x14c>
 80015b4:	68e2      	ldr	r2, [r4, #12]
 80015b6:	2a01      	cmp	r2, #1
 80015b8:	f47f af5d 	bne.w	8001476 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	6921      	ldr	r1, [r4, #16]
 80015c0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80015c4:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80015c8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ca:	e75e      	b.n	800148a <HAL_RCC_OscConfig+0x1a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015cc:	68e2      	ldr	r2, [r4, #12]
 80015ce:	4b60      	ldr	r3, [pc, #384]	; (8001750 <HAL_RCC_OscConfig+0x2e0>)
 80015d0:	b1b2      	cbz	r2, 8001600 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015d6:	f7ff fbf3 	bl	8000dc0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015da:	4d5b      	ldr	r5, [pc, #364]	; (8001748 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 80015dc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015de:	682b      	ldr	r3, [r5, #0]
 80015e0:	079b      	lsls	r3, r3, #30
 80015e2:	d507      	bpl.n	80015f4 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e4:	682b      	ldr	r3, [r5, #0]
 80015e6:	6922      	ldr	r2, [r4, #16]
 80015e8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80015ec:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80015f0:	602b      	str	r3, [r5, #0]
 80015f2:	e74a      	b.n	800148a <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015f4:	f7ff fbe4 	bl	8000dc0 <HAL_GetTick>
 80015f8:	1b80      	subs	r0, r0, r6
 80015fa:	2802      	cmp	r0, #2
 80015fc:	d9ef      	bls.n	80015de <HAL_RCC_OscConfig+0x16e>
 80015fe:	e7a7      	b.n	8001550 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8001600:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001602:	f7ff fbdd 	bl	8000dc0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001606:	4d50      	ldr	r5, [pc, #320]	; (8001748 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8001608:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800160a:	682b      	ldr	r3, [r5, #0]
 800160c:	079f      	lsls	r7, r3, #30
 800160e:	f57f af3c 	bpl.w	800148a <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001612:	f7ff fbd5 	bl	8000dc0 <HAL_GetTick>
 8001616:	1b80      	subs	r0, r0, r6
 8001618:	2802      	cmp	r0, #2
 800161a:	d9f6      	bls.n	800160a <HAL_RCC_OscConfig+0x19a>
 800161c:	e798      	b.n	8001550 <HAL_RCC_OscConfig+0xe0>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800161e:	6962      	ldr	r2, [r4, #20]
 8001620:	4b4c      	ldr	r3, [pc, #304]	; (8001754 <HAL_RCC_OscConfig+0x2e4>)
 8001622:	b17a      	cbz	r2, 8001644 <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_LSI_ENABLE();
 8001624:	2201      	movs	r2, #1
 8001626:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001628:	f7ff fbca 	bl	8000dc0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800162c:	4d46      	ldr	r5, [pc, #280]	; (8001748 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 800162e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001630:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001632:	0798      	lsls	r0, r3, #30
 8001634:	f53f af2d 	bmi.w	8001492 <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001638:	f7ff fbc2 	bl	8000dc0 <HAL_GetTick>
 800163c:	1b80      	subs	r0, r0, r6
 800163e:	2802      	cmp	r0, #2
 8001640:	d9f6      	bls.n	8001630 <HAL_RCC_OscConfig+0x1c0>
 8001642:	e785      	b.n	8001550 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_LSI_DISABLE();
 8001644:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001646:	f7ff fbbb 	bl	8000dc0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800164a:	4d3f      	ldr	r5, [pc, #252]	; (8001748 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 800164c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800164e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001650:	0799      	lsls	r1, r3, #30
 8001652:	f57f af1e 	bpl.w	8001492 <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001656:	f7ff fbb3 	bl	8000dc0 <HAL_GetTick>
 800165a:	1b80      	subs	r0, r0, r6
 800165c:	2802      	cmp	r0, #2
 800165e:	d9f6      	bls.n	800164e <HAL_RCC_OscConfig+0x1de>
 8001660:	e776      	b.n	8001550 <HAL_RCC_OscConfig+0xe0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001662:	f7ff fbad 	bl	8000dc0 <HAL_GetTick>
 8001666:	1b80      	subs	r0, r0, r6
 8001668:	2802      	cmp	r0, #2
 800166a:	f67f af29 	bls.w	80014c0 <HAL_RCC_OscConfig+0x50>
 800166e:	e76f      	b.n	8001550 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001670:	2b05      	cmp	r3, #5
 8001672:	d104      	bne.n	800167e <HAL_RCC_OscConfig+0x20e>
 8001674:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001676:	f043 0304 	orr.w	r3, r3, #4
 800167a:	672b      	str	r3, [r5, #112]	; 0x70
 800167c:	e729      	b.n	80014d2 <HAL_RCC_OscConfig+0x62>
 800167e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001680:	f022 0201 	bic.w	r2, r2, #1
 8001684:	672a      	str	r2, [r5, #112]	; 0x70
 8001686:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001688:	f022 0204 	bic.w	r2, r2, #4
 800168c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800168e:	2b00      	cmp	r3, #0
 8001690:	f47f af23 	bne.w	80014da <HAL_RCC_OscConfig+0x6a>
      tickstart = HAL_GetTick();
 8001694:	f7ff fb94 	bl	8000dc0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001698:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800169c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800169e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80016a0:	0798      	lsls	r0, r3, #30
 80016a2:	f57f af24 	bpl.w	80014ee <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016a6:	f7ff fb8b 	bl	8000dc0 <HAL_GetTick>
 80016aa:	1b80      	subs	r0, r0, r6
 80016ac:	42b8      	cmp	r0, r7
 80016ae:	d9f6      	bls.n	800169e <HAL_RCC_OscConfig+0x22e>
 80016b0:	e74e      	b.n	8001550 <HAL_RCC_OscConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b2:	f7ff fb85 	bl	8000dc0 <HAL_GetTick>
 80016b6:	1b80      	subs	r0, r0, r6
 80016b8:	42b8      	cmp	r0, r7
 80016ba:	f67f af14 	bls.w	80014e6 <HAL_RCC_OscConfig+0x76>
 80016be:	e747      	b.n	8001550 <HAL_RCC_OscConfig+0xe0>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016c0:	4d21      	ldr	r5, [pc, #132]	; (8001748 <HAL_RCC_OscConfig+0x2d8>)
 80016c2:	68ab      	ldr	r3, [r5, #8]
 80016c4:	f003 030c 	and.w	r3, r3, #12
 80016c8:	2b08      	cmp	r3, #8
 80016ca:	f43f aed4 	beq.w	8001476 <HAL_RCC_OscConfig+0x6>
 80016ce:	4e22      	ldr	r6, [pc, #136]	; (8001758 <HAL_RCC_OscConfig+0x2e8>)
 80016d0:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016d2:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80016d4:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016d6:	d12a      	bne.n	800172e <HAL_RCC_OscConfig+0x2be>
        tickstart = HAL_GetTick();
 80016d8:	f7ff fb72 	bl	8000dc0 <HAL_GetTick>
 80016dc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016de:	682b      	ldr	r3, [r5, #0]
 80016e0:	0199      	lsls	r1, r3, #6
 80016e2:	d41e      	bmi.n	8001722 <HAL_RCC_OscConfig+0x2b2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016e4:	6a22      	ldr	r2, [r4, #32]
 80016e6:	69e3      	ldr	r3, [r4, #28]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80016ec:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80016f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80016f2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80016f6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f8:	4c13      	ldr	r4, [pc, #76]	; (8001748 <HAL_RCC_OscConfig+0x2d8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016fa:	0852      	lsrs	r2, r2, #1
 80016fc:	3a01      	subs	r2, #1
 80016fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001702:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001704:	2301      	movs	r3, #1
 8001706:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001708:	f7ff fb5a 	bl	8000dc0 <HAL_GetTick>
 800170c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800170e:	6823      	ldr	r3, [r4, #0]
 8001710:	019a      	lsls	r2, r3, #6
 8001712:	f53f aef0 	bmi.w	80014f6 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001716:	f7ff fb53 	bl	8000dc0 <HAL_GetTick>
 800171a:	1b40      	subs	r0, r0, r5
 800171c:	2802      	cmp	r0, #2
 800171e:	d9f6      	bls.n	800170e <HAL_RCC_OscConfig+0x29e>
 8001720:	e716      	b.n	8001550 <HAL_RCC_OscConfig+0xe0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001722:	f7ff fb4d 	bl	8000dc0 <HAL_GetTick>
 8001726:	1bc0      	subs	r0, r0, r7
 8001728:	2802      	cmp	r0, #2
 800172a:	d9d8      	bls.n	80016de <HAL_RCC_OscConfig+0x26e>
 800172c:	e710      	b.n	8001550 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 800172e:	f7ff fb47 	bl	8000dc0 <HAL_GetTick>
 8001732:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001734:	682b      	ldr	r3, [r5, #0]
 8001736:	019b      	lsls	r3, r3, #6
 8001738:	f57f aedd 	bpl.w	80014f6 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800173c:	f7ff fb40 	bl	8000dc0 <HAL_GetTick>
 8001740:	1b00      	subs	r0, r0, r4
 8001742:	2802      	cmp	r0, #2
 8001744:	d9f6      	bls.n	8001734 <HAL_RCC_OscConfig+0x2c4>
 8001746:	e703      	b.n	8001550 <HAL_RCC_OscConfig+0xe0>
 8001748:	40023800 	.word	0x40023800
 800174c:	40007000 	.word	0x40007000
 8001750:	42470000 	.word	0x42470000
 8001754:	42470e80 	.word	0x42470e80
 8001758:	42470060 	.word	0x42470060

0800175c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800175c:	4913      	ldr	r1, [pc, #76]	; (80017ac <HAL_RCC_GetSysClockFreq+0x50>)
{
 800175e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001760:	688b      	ldr	r3, [r1, #8]
 8001762:	f003 030c 	and.w	r3, r3, #12
 8001766:	2b04      	cmp	r3, #4
 8001768:	d003      	beq.n	8001772 <HAL_RCC_GetSysClockFreq+0x16>
 800176a:	2b08      	cmp	r3, #8
 800176c:	d003      	beq.n	8001776 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800176e:	4810      	ldr	r0, [pc, #64]	; (80017b0 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001770:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001772:	4810      	ldr	r0, [pc, #64]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x58>)
 8001774:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001776:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001778:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800177a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800177c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001780:	bf14      	ite	ne
 8001782:	480c      	ldrne	r0, [pc, #48]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001784:	480a      	ldreq	r0, [pc, #40]	; (80017b0 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001786:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800178a:	bf18      	it	ne
 800178c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800178e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001792:	fba1 0100 	umull	r0, r1, r1, r0
 8001796:	f7ff f955 	bl	8000a44 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800179a:	4b04      	ldr	r3, [pc, #16]	; (80017ac <HAL_RCC_GetSysClockFreq+0x50>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80017a2:	3301      	adds	r3, #1
 80017a4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80017a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80017aa:	bd08      	pop	{r3, pc}
 80017ac:	40023800 	.word	0x40023800
 80017b0:	00f42400 	.word	0x00f42400
 80017b4:	017d7840 	.word	0x017d7840

080017b8 <HAL_RCC_ClockConfig>:
{
 80017b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017bc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80017be:	4604      	mov	r4, r0
 80017c0:	b910      	cbnz	r0, 80017c8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80017c2:	2001      	movs	r0, #1
 80017c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017c8:	4b44      	ldr	r3, [pc, #272]	; (80018dc <HAL_RCC_ClockConfig+0x124>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	f002 020f 	and.w	r2, r2, #15
 80017d0:	428a      	cmp	r2, r1
 80017d2:	d328      	bcc.n	8001826 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d4:	6821      	ldr	r1, [r4, #0]
 80017d6:	078f      	lsls	r7, r1, #30
 80017d8:	d42d      	bmi.n	8001836 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017da:	07c8      	lsls	r0, r1, #31
 80017dc:	d440      	bmi.n	8001860 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017de:	4b3f      	ldr	r3, [pc, #252]	; (80018dc <HAL_RCC_ClockConfig+0x124>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	f002 020f 	and.w	r2, r2, #15
 80017e6:	4295      	cmp	r5, r2
 80017e8:	d366      	bcc.n	80018b8 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ea:	6822      	ldr	r2, [r4, #0]
 80017ec:	0751      	lsls	r1, r2, #29
 80017ee:	d46c      	bmi.n	80018ca <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f0:	0713      	lsls	r3, r2, #28
 80017f2:	d507      	bpl.n	8001804 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017f4:	4a3a      	ldr	r2, [pc, #232]	; (80018e0 <HAL_RCC_ClockConfig+0x128>)
 80017f6:	6921      	ldr	r1, [r4, #16]
 80017f8:	6893      	ldr	r3, [r2, #8]
 80017fa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80017fe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001802:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001804:	f7ff ffaa 	bl	800175c <HAL_RCC_GetSysClockFreq>
 8001808:	4b35      	ldr	r3, [pc, #212]	; (80018e0 <HAL_RCC_ClockConfig+0x128>)
 800180a:	4a36      	ldr	r2, [pc, #216]	; (80018e4 <HAL_RCC_ClockConfig+0x12c>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001812:	5cd3      	ldrb	r3, [r2, r3]
 8001814:	40d8      	lsrs	r0, r3
 8001816:	4b34      	ldr	r3, [pc, #208]	; (80018e8 <HAL_RCC_ClockConfig+0x130>)
 8001818:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800181a:	2000      	movs	r0, #0
 800181c:	f7ff fa9a 	bl	8000d54 <HAL_InitTick>
  return HAL_OK;
 8001820:	2000      	movs	r0, #0
 8001822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001826:	b2ca      	uxtb	r2, r1
 8001828:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 030f 	and.w	r3, r3, #15
 8001830:	4299      	cmp	r1, r3
 8001832:	d1c6      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xa>
 8001834:	e7ce      	b.n	80017d4 <HAL_RCC_ClockConfig+0x1c>
 8001836:	4b2a      	ldr	r3, [pc, #168]	; (80018e0 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001838:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800183c:	bf1e      	ittt	ne
 800183e:	689a      	ldrne	r2, [r3, #8]
 8001840:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001844:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001846:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001848:	bf42      	ittt	mi
 800184a:	689a      	ldrmi	r2, [r3, #8]
 800184c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001850:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	68a0      	ldr	r0, [r4, #8]
 8001856:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800185a:	4302      	orrs	r2, r0
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	e7bc      	b.n	80017da <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001860:	6862      	ldr	r2, [r4, #4]
 8001862:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <HAL_RCC_ClockConfig+0x128>)
 8001864:	2a01      	cmp	r2, #1
 8001866:	d11d      	bne.n	80018a4 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186e:	d0a8      	beq.n	80017c2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001870:	4e1b      	ldr	r6, [pc, #108]	; (80018e0 <HAL_RCC_ClockConfig+0x128>)
 8001872:	68b3      	ldr	r3, [r6, #8]
 8001874:	f023 0303 	bic.w	r3, r3, #3
 8001878:	4313      	orrs	r3, r2
 800187a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800187c:	f7ff faa0 	bl	8000dc0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001880:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001884:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001886:	68b3      	ldr	r3, [r6, #8]
 8001888:	6862      	ldr	r2, [r4, #4]
 800188a:	f003 030c 	and.w	r3, r3, #12
 800188e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001892:	d0a4      	beq.n	80017de <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001894:	f7ff fa94 	bl	8000dc0 <HAL_GetTick>
 8001898:	1bc0      	subs	r0, r0, r7
 800189a:	4540      	cmp	r0, r8
 800189c:	d9f3      	bls.n	8001886 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800189e:	2003      	movs	r0, #3
}
 80018a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018a4:	1e91      	subs	r1, r2, #2
 80018a6:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018aa:	d802      	bhi.n	80018b2 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ac:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80018b0:	e7dd      	b.n	800186e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b2:	f013 0f02 	tst.w	r3, #2
 80018b6:	e7da      	b.n	800186e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b8:	b2ea      	uxtb	r2, r5
 80018ba:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	429d      	cmp	r5, r3
 80018c4:	f47f af7d 	bne.w	80017c2 <HAL_RCC_ClockConfig+0xa>
 80018c8:	e78f      	b.n	80017ea <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018ca:	4905      	ldr	r1, [pc, #20]	; (80018e0 <HAL_RCC_ClockConfig+0x128>)
 80018cc:	68e0      	ldr	r0, [r4, #12]
 80018ce:	688b      	ldr	r3, [r1, #8]
 80018d0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80018d4:	4303      	orrs	r3, r0
 80018d6:	608b      	str	r3, [r1, #8]
 80018d8:	e78a      	b.n	80017f0 <HAL_RCC_ClockConfig+0x38>
 80018da:	bf00      	nop
 80018dc:	40023c00 	.word	0x40023c00
 80018e0:	40023800 	.word	0x40023800
 80018e4:	080029a3 	.word	0x080029a3
 80018e8:	20000004 	.word	0x20000004

080018ec <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80018ec:	4b01      	ldr	r3, [pc, #4]	; (80018f4 <HAL_RCC_GetHCLKFreq+0x8>)
 80018ee:	6818      	ldr	r0, [r3, #0]
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	20000004 	.word	0x20000004

080018f8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018f8:	4b04      	ldr	r3, [pc, #16]	; (800190c <HAL_RCC_GetPCLK1Freq+0x14>)
 80018fa:	4a05      	ldr	r2, [pc, #20]	; (8001910 <HAL_RCC_GetPCLK1Freq+0x18>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001902:	5cd3      	ldrb	r3, [r2, r3]
 8001904:	4a03      	ldr	r2, [pc, #12]	; (8001914 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001906:	6810      	ldr	r0, [r2, #0]
}
 8001908:	40d8      	lsrs	r0, r3
 800190a:	4770      	bx	lr
 800190c:	40023800 	.word	0x40023800
 8001910:	080029b3 	.word	0x080029b3
 8001914:	20000004 	.word	0x20000004

08001918 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001918:	230f      	movs	r3, #15
 800191a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800191c:	4b0b      	ldr	r3, [pc, #44]	; (800194c <HAL_RCC_GetClockConfig+0x34>)
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	f002 0203 	and.w	r2, r2, #3
 8001924:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800192c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001934:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	08db      	lsrs	r3, r3, #3
 800193a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800193e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001940:	4b03      	ldr	r3, [pc, #12]	; (8001950 <HAL_RCC_GetClockConfig+0x38>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 030f 	and.w	r3, r3, #15
 8001948:	600b      	str	r3, [r1, #0]
 800194a:	4770      	bx	lr
 800194c:	40023800 	.word	0x40023800
 8001950:	40023c00 	.word	0x40023c00

08001954 <LCD1602_TIM_MicorSecDelay>:
	TIM3->EGR = 1; 					//Update generate auto
	TIM3->SR &= ~(0x0001);	//Clear Update interrupt flag
}
static void LCD1602_TIM_MicorSecDelay(uint32_t uSecDelay)
{
	TIM3->ARR = uSecDelay-1;
 8001954:	4b07      	ldr	r3, [pc, #28]	; (8001974 <LCD1602_TIM_MicorSecDelay+0x20>)
 8001956:	3801      	subs	r0, #1
 8001958:	62d8      	str	r0, [r3, #44]	; 0x2c
	TIM3->SR &= ~(0x0001);  // Clear UEV flag
 800195a:	691a      	ldr	r2, [r3, #16]
 800195c:	f022 0201 	bic.w	r2, r2, #1
 8001960:	611a      	str	r2, [r3, #16]
	TIM3->CR1 |= 1UL;
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	f042 0201 	orr.w	r2, r2, #1
 8001968:	601a      	str	r2, [r3, #0]
	while((TIM3->SR&0x0001) != 1);
 800196a:	691a      	ldr	r2, [r3, #16]
 800196c:	07d2      	lsls	r2, r2, #31
 800196e:	d5fc      	bpl.n	800196a <LCD1602_TIM_MicorSecDelay+0x16>
}
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	40000400 	.word	0x40000400

08001978 <LCD1602_TIM_Config>:
{
 8001978:	b510      	push	{r4, lr}
 800197a:	b086      	sub	sp, #24
	HAL_RCC_GetClockConfig(&myCLKtypeDef, &flashLatencyVar);
 800197c:	4669      	mov	r1, sp
 800197e:	a801      	add	r0, sp, #4
 8001980:	f7ff ffca 	bl	8001918 <HAL_RCC_GetClockConfig>
	if(myCLKtypeDef.APB1CLKDivider == RCC_HCLK_DIV1)
 8001984:	9b04      	ldr	r3, [sp, #16]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d12c      	bne.n	80019e4 <LCD1602_TIM_Config+0x6c>
		clockSpeed = HAL_RCC_GetPCLK1Freq();
 800198a:	f7ff ffb5 	bl	80018f8 <HAL_RCC_GetPCLK1Freq>
	clockSpeed *= 0.000001;
 800198e:	f7fe fdb1 	bl	80004f4 <__aeabi_ui2d>
 8001992:	a319      	add	r3, pc, #100	; (adr r3, 80019f8 <LCD1602_TIM_Config+0x80>)
 8001994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001998:	f7fe fe22 	bl	80005e0 <__aeabi_dmul>
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;  // 0x1
 800199c:	4a14      	ldr	r2, [pc, #80]	; (80019f0 <LCD1602_TIM_Config+0x78>)
	TIM3->CR1 &= ~(0x0010);
 800199e:	4c15      	ldr	r4, [pc, #84]	; (80019f4 <LCD1602_TIM_Config+0x7c>)
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;  // 0x1
 80019a0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80019a2:	f043 0302 	orr.w	r3, r3, #2
 80019a6:	6413      	str	r3, [r2, #64]	; 0x40
	TIM3->CR1 &= ~(0x0010);
 80019a8:	6823      	ldr	r3, [r4, #0]
 80019aa:	f023 0310 	bic.w	r3, r3, #16
 80019ae:	6023      	str	r3, [r4, #0]
	TIM3->CR1 &= ~(0x0001);
 80019b0:	6823      	ldr	r3, [r4, #0]
 80019b2:	f023 0301 	bic.w	r3, r3, #1
 80019b6:	6023      	str	r3, [r4, #0]
	TIM3->CR1 &= ~(1UL << 2);
 80019b8:	6823      	ldr	r3, [r4, #0]
 80019ba:	f023 0304 	bic.w	r3, r3, #4
 80019be:	6023      	str	r3, [r4, #0]
	TIM3->CR1 |= (1UL << 3);				  
 80019c0:	6823      	ldr	r3, [r4, #0]
 80019c2:	f043 0308 	orr.w	r3, r3, #8
 80019c6:	6023      	str	r3, [r4, #0]
	clockSpeed *= 0.000001;
 80019c8:	f7ff f81c 	bl	8000a04 <__aeabi_d2uiz>
	TIM3->ARR = 10-1; 								// The Flag sets when overflows
 80019cc:	2309      	movs	r3, #9
	TIM3->PSC = clockSpeed-1;
 80019ce:	3801      	subs	r0, #1
 80019d0:	62a0      	str	r0, [r4, #40]	; 0x28
	TIM3->ARR = 10-1; 								// The Flag sets when overflows
 80019d2:	62e3      	str	r3, [r4, #44]	; 0x2c
	TIM3->EGR = 1; 					//Update generate auto
 80019d4:	2301      	movs	r3, #1
 80019d6:	6163      	str	r3, [r4, #20]
	TIM3->SR &= ~(0x0001);	//Clear Update interrupt flag
 80019d8:	6923      	ldr	r3, [r4, #16]
 80019da:	f023 0301 	bic.w	r3, r3, #1
 80019de:	6123      	str	r3, [r4, #16]
}
 80019e0:	b006      	add	sp, #24
 80019e2:	bd10      	pop	{r4, pc}
		clockSpeed = HAL_RCC_GetPCLK1Freq()*2;
 80019e4:	f7ff ff88 	bl	80018f8 <HAL_RCC_GetPCLK1Freq>
 80019e8:	0040      	lsls	r0, r0, #1
 80019ea:	e7d0      	b.n	800198e <LCD1602_TIM_Config+0x16>
 80019ec:	f3af 8000 	nop.w
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40000400 	.word	0x40000400
 80019f8:	a0b5ed8d 	.word	0xa0b5ed8d
 80019fc:	3eb0c6f7 	.word	0x3eb0c6f7

08001a00 <LCD1602_EnablePulse>:
{
 8001a00:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8001a02:	4d0a      	ldr	r5, [pc, #40]	; (8001a2c <LCD1602_EnablePulse+0x2c>)
 8001a04:	4c0a      	ldr	r4, [pc, #40]	; (8001a30 <LCD1602_EnablePulse+0x30>)
 8001a06:	8829      	ldrh	r1, [r5, #0]
 8001a08:	6820      	ldr	r0, [r4, #0]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f7ff fd2a 	bl	8001464 <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(writeTimeConstant);
 8001a10:	200a      	movs	r0, #10
 8001a12:	f7ff ff9f 	bl	8001954 <LCD1602_TIM_MicorSecDelay>
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 8001a16:	6820      	ldr	r0, [r4, #0]
 8001a18:	8829      	ldrh	r1, [r5, #0]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f7ff fd22 	bl	8001464 <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(60);
 8001a20:	203c      	movs	r0, #60	; 0x3c
}
 8001a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	LCD1602_TIM_MicorSecDelay(60);
 8001a26:	f7ff bf95 	b.w	8001954 <LCD1602_TIM_MicorSecDelay>
 8001a2a:	bf00      	nop
 8001a2c:	20000098 	.word	0x20000098
 8001a30:	200000a4 	.word	0x200000a4

08001a34 <LCD1602_write>:
{
 8001a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(mode_8_4_I2C == 1)		//8bits mode
 8001a38:	4b43      	ldr	r3, [pc, #268]	; (8001b48 <LCD1602_write+0x114>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b01      	cmp	r3, #1
{
 8001a3e:	4604      	mov	r4, r0
	uint8_t LSB_nibble = byte&0xF, MSB_nibble = (byte>>4)&0xF;
 8001a40:	ea4f 1610 	mov.w	r6, r0, lsr #4
	if(mode_8_4_I2C == 1)		//8bits mode
 8001a44:	d13d      	bne.n	8001ac2 <LCD1602_write+0x8e>
		HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8001a46:	4d41      	ldr	r5, [pc, #260]	; (8001b4c <LCD1602_write+0x118>)
 8001a48:	4b41      	ldr	r3, [pc, #260]	; (8001b50 <LCD1602_write+0x11c>)
 8001a4a:	f000 0201 	and.w	r2, r0, #1
 8001a4e:	8819      	ldrh	r1, [r3, #0]
 8001a50:	6828      	ldr	r0, [r5, #0]
 8001a52:	f7ff fd07 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8001a56:	4b3f      	ldr	r3, [pc, #252]	; (8001b54 <LCD1602_write+0x120>)
 8001a58:	6828      	ldr	r0, [r5, #0]
 8001a5a:	8819      	ldrh	r1, [r3, #0]
 8001a5c:	f004 0202 	and.w	r2, r4, #2
 8001a60:	f7ff fd00 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8001a64:	4b3c      	ldr	r3, [pc, #240]	; (8001b58 <LCD1602_write+0x124>)
 8001a66:	6828      	ldr	r0, [r5, #0]
 8001a68:	8819      	ldrh	r1, [r3, #0]
 8001a6a:	f004 0204 	and.w	r2, r4, #4
 8001a6e:	f7ff fcf9 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8001a72:	4b3a      	ldr	r3, [pc, #232]	; (8001b5c <LCD1602_write+0x128>)
 8001a74:	6828      	ldr	r0, [r5, #0]
 8001a76:	8819      	ldrh	r1, [r3, #0]
 8001a78:	f004 0208 	and.w	r2, r4, #8
 8001a7c:	f7ff fcf2 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8001a80:	4c37      	ldr	r4, [pc, #220]	; (8001b60 <LCD1602_write+0x12c>)
 8001a82:	4b38      	ldr	r3, [pc, #224]	; (8001b64 <LCD1602_write+0x130>)
 8001a84:	6820      	ldr	r0, [r4, #0]
 8001a86:	8819      	ldrh	r1, [r3, #0]
 8001a88:	f006 0201 	and.w	r2, r6, #1
 8001a8c:	f7ff fcea 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8001a90:	4b35      	ldr	r3, [pc, #212]	; (8001b68 <LCD1602_write+0x134>)
 8001a92:	6820      	ldr	r0, [r4, #0]
 8001a94:	8819      	ldrh	r1, [r3, #0]
 8001a96:	f006 0202 	and.w	r2, r6, #2
 8001a9a:	f7ff fce3 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8001a9e:	4b33      	ldr	r3, [pc, #204]	; (8001b6c <LCD1602_write+0x138>)
 8001aa0:	6820      	ldr	r0, [r4, #0]
 8001aa2:	8819      	ldrh	r1, [r3, #0]
 8001aa4:	f006 0204 	and.w	r2, r6, #4
 8001aa8:	f7ff fcdc 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8001aac:	4b30      	ldr	r3, [pc, #192]	; (8001b70 <LCD1602_write+0x13c>)
 8001aae:	6820      	ldr	r0, [r4, #0]
 8001ab0:	8819      	ldrh	r1, [r3, #0]
 8001ab2:	f006 0208 	and.w	r2, r6, #8
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8001ab6:	f7ff fcd5 	bl	8001464 <HAL_GPIO_WritePin>
}
 8001aba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		LCD1602_EnablePulse();
 8001abe:	f7ff bf9f 	b.w	8001a00 <LCD1602_EnablePulse>
	else if(mode_8_4_I2C == 2)	//4 bits mode
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d13e      	bne.n	8001b44 <LCD1602_write+0x110>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8001ac6:	4d26      	ldr	r5, [pc, #152]	; (8001b60 <LCD1602_write+0x12c>)
 8001ac8:	f8df a098 	ldr.w	sl, [pc, #152]	; 8001b64 <LCD1602_write+0x130>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8001acc:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8001b68 <LCD1602_write+0x134>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8001ad0:	f8ba 1000 	ldrh.w	r1, [sl]
 8001ad4:	6828      	ldr	r0, [r5, #0]
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8001ad6:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8001b6c <LCD1602_write+0x138>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8001ada:	4f25      	ldr	r7, [pc, #148]	; (8001b70 <LCD1602_write+0x13c>)
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8001adc:	f006 0201 	and.w	r2, r6, #1
 8001ae0:	f7ff fcc0 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8001ae4:	f006 0202 	and.w	r2, r6, #2
 8001ae8:	f8b9 1000 	ldrh.w	r1, [r9]
 8001aec:	6828      	ldr	r0, [r5, #0]
 8001aee:	f7ff fcb9 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8001af2:	f006 0204 	and.w	r2, r6, #4
 8001af6:	f8b8 1000 	ldrh.w	r1, [r8]
 8001afa:	6828      	ldr	r0, [r5, #0]
 8001afc:	f7ff fcb2 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8001b00:	f006 0208 	and.w	r2, r6, #8
 8001b04:	8839      	ldrh	r1, [r7, #0]
 8001b06:	6828      	ldr	r0, [r5, #0]
 8001b08:	f7ff fcac 	bl	8001464 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 8001b0c:	f7ff ff78 	bl	8001a00 <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8001b10:	f004 0201 	and.w	r2, r4, #1
 8001b14:	f8ba 1000 	ldrh.w	r1, [sl]
 8001b18:	6828      	ldr	r0, [r5, #0]
 8001b1a:	f7ff fca3 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8001b1e:	f004 0202 	and.w	r2, r4, #2
 8001b22:	f8b9 1000 	ldrh.w	r1, [r9]
 8001b26:	6828      	ldr	r0, [r5, #0]
 8001b28:	f7ff fc9c 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8001b2c:	f004 0204 	and.w	r2, r4, #4
 8001b30:	f8b8 1000 	ldrh.w	r1, [r8]
 8001b34:	6828      	ldr	r0, [r5, #0]
 8001b36:	f7ff fc95 	bl	8001464 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8001b3a:	f004 0208 	and.w	r2, r4, #8
 8001b3e:	8839      	ldrh	r1, [r7, #0]
 8001b40:	6828      	ldr	r0, [r5, #0]
 8001b42:	e7b8      	b.n	8001ab6 <LCD1602_write+0x82>
 8001b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b48:	20000002 	.word	0x20000002
 8001b4c:	2000009c 	.word	0x2000009c
 8001b50:	20000088 	.word	0x20000088
 8001b54:	2000008a 	.word	0x2000008a
 8001b58:	2000008c 	.word	0x2000008c
 8001b5c:	2000008e 	.word	0x2000008e
 8001b60:	200000a0 	.word	0x200000a0
 8001b64:	20000090 	.word	0x20000090
 8001b68:	20000092 	.word	0x20000092
 8001b6c:	20000094 	.word	0x20000094
 8001b70:	20000096 	.word	0x20000096

08001b74 <LCD1602_write4bitCommand>:
	//Call low level write parallel function
	LCD1602_write(data);
}
//7) Write 4 bits command, *FOR 4 BITS MODE ONLY*
static void LCD1602_write4bitCommand(uint8_t nibble)
{
 8001b74:	b538      	push	{r3, r4, r5, lr}
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 8001b76:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <LCD1602_write4bitCommand+0x54>)
	uint8_t LSB_nibble = nibble&0xF;
	//Set RS to 0
	LCD1602_RS(false);
	//LSB data
	HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8001b78:	4c14      	ldr	r4, [pc, #80]	; (8001bcc <LCD1602_write4bitCommand+0x58>)
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 8001b7a:	8819      	ldrh	r1, [r3, #0]
 8001b7c:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <LCD1602_write4bitCommand+0x5c>)
{
 8001b7e:	4605      	mov	r5, r0
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 8001b80:	2200      	movs	r2, #0
 8001b82:	6818      	ldr	r0, [r3, #0]
 8001b84:	f7ff fc6e 	bl	8001464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8001b88:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <LCD1602_write4bitCommand+0x60>)
 8001b8a:	6820      	ldr	r0, [r4, #0]
 8001b8c:	8819      	ldrh	r1, [r3, #0]
 8001b8e:	f005 0201 	and.w	r2, r5, #1
 8001b92:	f7ff fc67 	bl	8001464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <LCD1602_write4bitCommand+0x64>)
 8001b98:	6820      	ldr	r0, [r4, #0]
 8001b9a:	8819      	ldrh	r1, [r3, #0]
 8001b9c:	f005 0202 	and.w	r2, r5, #2
 8001ba0:	f7ff fc60 	bl	8001464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8001ba4:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <LCD1602_write4bitCommand+0x68>)
 8001ba6:	6820      	ldr	r0, [r4, #0]
 8001ba8:	8819      	ldrh	r1, [r3, #0]
 8001baa:	f005 0204 	and.w	r2, r5, #4
 8001bae:	f7ff fc59 	bl	8001464 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8001bb2:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <LCD1602_write4bitCommand+0x6c>)
 8001bb4:	6820      	ldr	r0, [r4, #0]
 8001bb6:	8819      	ldrh	r1, [r3, #0]
 8001bb8:	f005 0208 	and.w	r2, r5, #8
 8001bbc:	f7ff fc52 	bl	8001464 <HAL_GPIO_WritePin>
	//Write the Enable pulse
	LCD1602_EnablePulse();
}
 8001bc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	LCD1602_EnablePulse();
 8001bc4:	f7ff bf1c 	b.w	8001a00 <LCD1602_EnablePulse>
 8001bc8:	2000009a 	.word	0x2000009a
 8001bcc:	200000a0 	.word	0x200000a0
 8001bd0:	200000a4 	.word	0x200000a4
 8001bd4:	20000090 	.word	0x20000090
 8001bd8:	20000092 	.word	0x20000092
 8001bdc:	20000094 	.word	0x20000094
 8001be0:	20000096 	.word	0x20000096

08001be4 <LCD1602_writeCommand>:
{
 8001be4:	b510      	push	{r4, lr}
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 8001be6:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <LCD1602_writeCommand+0x1c>)
 8001be8:	8819      	ldrh	r1, [r3, #0]
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <LCD1602_writeCommand+0x20>)
{
 8001bec:	4604      	mov	r4, r0
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	6818      	ldr	r0, [r3, #0]
 8001bf2:	f7ff fc37 	bl	8001464 <HAL_GPIO_WritePin>
	LCD1602_write(command);
 8001bf6:	4620      	mov	r0, r4
}
 8001bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LCD1602_write(command);
 8001bfc:	f7ff bf1a 	b.w	8001a34 <LCD1602_write>
 8001c00:	2000009a 	.word	0x2000009a
 8001c04:	200000a4 	.word	0x200000a4

08001c08 <LCD1602_Begin4BIT>:
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
	HAL_Delay(2);
}
//2) LCD begin 4 bits function
void LCD1602_Begin4BIT(GPIO_TypeDef* PORT_RS_E, uint16_t RS, uint16_t E, GPIO_TypeDef* PORT_MSBs4to7, uint16_t D4, uint16_t D5, uint16_t D6, uint16_t D7)
{
 8001c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Set GPIO Ports and Pins data
	PORT_RS_and_E = PORT_RS_E;
 8001c0a:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 8001ccc <LCD1602_Begin4BIT+0xc4>
{
 8001c0e:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	PORT_RS_and_E = PORT_RS_E;
 8001c12:	f8ce 0000 	str.w	r0, [lr]
	PIN_RS = RS;
 8001c16:	4824      	ldr	r0, [pc, #144]	; (8001ca8 <LCD1602_Begin4BIT+0xa0>)
{
 8001c18:	f8bd 601c 	ldrh.w	r6, [sp, #28]
	PIN_RS = RS;
 8001c1c:	8001      	strh	r1, [r0, #0]
	PIN_E = E;
 8001c1e:	4923      	ldr	r1, [pc, #140]	; (8001cac <LCD1602_Begin4BIT+0xa4>)
{
 8001c20:	f8bd 5020 	ldrh.w	r5, [sp, #32]
	PIN_E = E;
 8001c24:	800a      	strh	r2, [r1, #0]
	PORT_MSB = PORT_MSBs4to7;
 8001c26:	4a22      	ldr	r2, [pc, #136]	; (8001cb0 <LCD1602_Begin4BIT+0xa8>)
{
 8001c28:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	PORT_MSB = PORT_MSBs4to7;
 8001c2c:	6013      	str	r3, [r2, #0]
	D4_PIN = D4;
 8001c2e:	4b21      	ldr	r3, [pc, #132]	; (8001cb4 <LCD1602_Begin4BIT+0xac>)
 8001c30:	801f      	strh	r7, [r3, #0]
	D5_PIN = D5;
 8001c32:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <LCD1602_Begin4BIT+0xb0>)
 8001c34:	801e      	strh	r6, [r3, #0]
	D6_PIN = D6;
 8001c36:	4b21      	ldr	r3, [pc, #132]	; (8001cbc <LCD1602_Begin4BIT+0xb4>)
 8001c38:	801d      	strh	r5, [r3, #0]
	D7_PIN = D7;
 8001c3a:	4b21      	ldr	r3, [pc, #132]	; (8001cc0 <LCD1602_Begin4BIT+0xb8>)
 8001c3c:	801c      	strh	r4, [r3, #0]
	//Initialise microsecond timer
	LCD1602_TIM_Config();
 8001c3e:	f7ff fe9b 	bl	8001978 <LCD1602_TIM_Config>
	//Set the mode to 4 bits
	mode_8_4_I2C = 2;
 8001c42:	4b20      	ldr	r3, [pc, #128]	; (8001cc4 <LCD1602_Begin4BIT+0xbc>)
 8001c44:	2502      	movs	r5, #2
 8001c46:	701d      	strb	r5, [r3, #0]
	//Function set variable to 4 bits mode
	FunctionSet = 0x28;
 8001c48:	4b1f      	ldr	r3, [pc, #124]	; (8001cc8 <LCD1602_Begin4BIT+0xc0>)
 8001c4a:	2428      	movs	r4, #40	; 0x28
	
	//Initialise LCD
	//1. Wait at least 15ms
	HAL_Delay(20);
 8001c4c:	2014      	movs	r0, #20
	FunctionSet = 0x28;
 8001c4e:	701c      	strb	r4, [r3, #0]
	HAL_Delay(20);
 8001c50:	f7ff f8bc 	bl	8000dcc <HAL_Delay>
	//2. Attentions sequence
	LCD1602_write4bitCommand(0x3);
 8001c54:	2003      	movs	r0, #3
 8001c56:	f7ff ff8d 	bl	8001b74 <LCD1602_write4bitCommand>
	HAL_Delay(5);
 8001c5a:	2005      	movs	r0, #5
 8001c5c:	f7ff f8b6 	bl	8000dcc <HAL_Delay>
	LCD1602_write4bitCommand(0x3);
 8001c60:	2003      	movs	r0, #3
 8001c62:	f7ff ff87 	bl	8001b74 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 8001c66:	2001      	movs	r0, #1
 8001c68:	f7ff f8b0 	bl	8000dcc <HAL_Delay>
	LCD1602_write4bitCommand(0x3);
 8001c6c:	2003      	movs	r0, #3
 8001c6e:	f7ff ff81 	bl	8001b74 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 8001c72:	2001      	movs	r0, #1
 8001c74:	f7ff f8aa 	bl	8000dcc <HAL_Delay>
	LCD1602_write4bitCommand(0x2);  //4 bit mode
 8001c78:	4628      	mov	r0, r5
 8001c7a:	f7ff ff7b 	bl	8001b74 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 8001c7e:	2001      	movs	r0, #1
 8001c80:	f7ff f8a4 	bl	8000dcc <HAL_Delay>
	//3. Display control (Display ON, Cursor ON, blink cursor)
	LCD1602_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 8001c84:	200f      	movs	r0, #15
 8001c86:	f7ff ffad 	bl	8001be4 <LCD1602_writeCommand>
	//4. Clear LCD and return home
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	f7ff ffaa 	bl	8001be4 <LCD1602_writeCommand>
	HAL_Delay(3);
 8001c90:	2003      	movs	r0, #3
 8001c92:	f7ff f89b 	bl	8000dcc <HAL_Delay>
	//4. Function set; Enable 2 lines, Data length to 8 bits
	LCD1602_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8001c96:	4620      	mov	r0, r4
 8001c98:	f7ff ffa4 	bl	8001be4 <LCD1602_writeCommand>
	HAL_Delay(3);
 8001c9c:	2003      	movs	r0, #3
}
 8001c9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_Delay(3);
 8001ca2:	f7ff b893 	b.w	8000dcc <HAL_Delay>
 8001ca6:	bf00      	nop
 8001ca8:	2000009a 	.word	0x2000009a
 8001cac:	20000098 	.word	0x20000098
 8001cb0:	200000a0 	.word	0x200000a0
 8001cb4:	20000090 	.word	0x20000090
 8001cb8:	20000092 	.word	0x20000092
 8001cbc:	20000094 	.word	0x20000094
 8001cc0:	20000096 	.word	0x20000096
 8001cc4:	20000002 	.word	0x20000002
 8001cc8:	20000001 	.word	0x20000001
 8001ccc:	200000a4 	.word	0x200000a4

08001cd0 <LCD1602_print>:
//3) LCD print string
void LCD1602_print(char string[])
{
 8001cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if(state) HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_SET);
 8001cd4:	4f0a      	ldr	r7, [pc, #40]	; (8001d00 <LCD1602_print+0x30>)
 8001cd6:	f8df 802c 	ldr.w	r8, [pc, #44]	; 8001d04 <LCD1602_print+0x34>
 8001cda:	1e45      	subs	r5, r0, #1
 8001cdc:	f100 040f 	add.w	r4, r0, #15
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 8001ce0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8001ce4:	b156      	cbz	r6, 8001cfc <LCD1602_print+0x2c>
	if(state) HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_SET);
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	8839      	ldrh	r1, [r7, #0]
 8001cea:	f8d8 0000 	ldr.w	r0, [r8]
 8001cee:	f7ff fbb9 	bl	8001464 <HAL_GPIO_WritePin>
	LCD1602_write(data);
 8001cf2:	4630      	mov	r0, r6
 8001cf4:	f7ff fe9e 	bl	8001a34 <LCD1602_write>
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 8001cf8:	42a5      	cmp	r5, r4
 8001cfa:	d1f1      	bne.n	8001ce0 <LCD1602_print+0x10>
 8001cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d00:	2000009a 	.word	0x2000009a
 8001d04:	200000a4 	.word	0x200000a4

08001d08 <LCD1602_setCursor>:
}
//4) set cursor position
void LCD1602_setCursor(uint8_t row, uint8_t col)
{
	uint8_t maskData;
	maskData = (col-1)&0x0F;
 8001d08:	3901      	subs	r1, #1
 8001d0a:	f001 010f 	and.w	r1, r1, #15
	if(row==1)
 8001d0e:	2801      	cmp	r0, #1
	{
		maskData |= (0x80);
		LCD1602_writeCommand(maskData);
 8001d10:	bf0c      	ite	eq
 8001d12:	f041 0080 	orreq.w	r0, r1, #128	; 0x80
	}
	else
	{
		maskData |= (0xc0);
		LCD1602_writeCommand(maskData);
 8001d16:	f041 00c0 	orrne.w	r0, r1, #192	; 0xc0
 8001d1a:	f7ff bf63 	b.w	8001be4 <LCD1602_writeCommand>
	...

08001d20 <LCD1602_noCursor>:
	LCD1602_writeCommand(FunctionSet);
}
//6) Cursor ON/OFF
void LCD1602_noCursor(void)
{
	DisplayControl &= ~(0x02);
 8001d20:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <LCD1602_noCursor+0x10>)
 8001d22:	7818      	ldrb	r0, [r3, #0]
 8001d24:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 8001d28:	7018      	strb	r0, [r3, #0]
	LCD1602_writeCommand(DisplayControl);
 8001d2a:	f7ff bf5b 	b.w	8001be4 <LCD1602_writeCommand>
 8001d2e:	bf00      	nop
 8001d30:	20000000 	.word	0x20000000

08001d34 <LCD1602_clear>:
	DisplayControl |= (0x02);
	LCD1602_writeCommand(DisplayControl);
}
//7) Clear display
void LCD1602_clear(void)
{
 8001d34:	b508      	push	{r3, lr}
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 8001d36:	2001      	movs	r0, #1
 8001d38:	f7ff ff54 	bl	8001be4 <LCD1602_writeCommand>
	HAL_Delay(3);
 8001d3c:	2003      	movs	r0, #3
}
 8001d3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(3);
 8001d42:	f7ff b843 	b.w	8000dcc <HAL_Delay>
	...

08001d48 <LCD1602_noBlink>:
//8) Blinking cursor
void LCD1602_noBlink(void)
{
	DisplayControl &= ~(0x01);
 8001d48:	4b03      	ldr	r3, [pc, #12]	; (8001d58 <LCD1602_noBlink+0x10>)
 8001d4a:	7818      	ldrb	r0, [r3, #0]
 8001d4c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 8001d50:	7018      	strb	r0, [r3, #0]
	LCD1602_writeCommand(DisplayControl);
 8001d52:	f7ff bf47 	b.w	8001be4 <LCD1602_writeCommand>
 8001d56:	bf00      	nop
 8001d58:	20000000 	.word	0x20000000

08001d5c <LCD1602_PrintInt>:
}

//********** Print numbers to LCD **********//
//1. Integer
void LCD1602_PrintInt(int number)
{
 8001d5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char numStr[16];
	sprintf(numStr,"%d", number);
 8001d5e:	4602      	mov	r2, r0
 8001d60:	4904      	ldr	r1, [pc, #16]	; (8001d74 <LCD1602_PrintInt+0x18>)
 8001d62:	4668      	mov	r0, sp
 8001d64:	f000 f9e4 	bl	8002130 <siprintf>
	LCD1602_print(numStr);
 8001d68:	4668      	mov	r0, sp
 8001d6a:	f7ff ffb1 	bl	8001cd0 <LCD1602_print>
}
 8001d6e:	b005      	add	sp, #20
 8001d70:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d74:	080029a0 	.word	0x080029a0

08001d78 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8001d78:	b530      	push	{r4, r5, lr}
 8001d7a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	4a27      	ldr	r2, [pc, #156]	; (8001e1c <SystemClock_Config+0xa4>)
 8001d80:	9301      	str	r3, [sp, #4]
 8001d82:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001d84:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001d88:	6411      	str	r1, [r2, #64]	; 0x40
 8001d8a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d8c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001d90:	9201      	str	r2, [sp, #4]
 8001d92:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d94:	4a22      	ldr	r2, [pc, #136]	; (8001e20 <SystemClock_Config+0xa8>)
 8001d96:	9302      	str	r3, [sp, #8]
 8001d98:	6811      	ldr	r1, [r2, #0]
 8001d9a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001d9e:	6011      	str	r1, [r2, #0]
 8001da0:	6812      	ldr	r2, [r2, #0]
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001da2:	930f      	str	r3, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001da4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001da8:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001daa:	2308      	movs	r3, #8
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dac:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001dae:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001db0:	2201      	movs	r2, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001db2:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001db4:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001db6:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001db8:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001dba:	2504      	movs	r5, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dbc:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dbe:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001dc0:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dc2:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001dc4:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dc6:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001dc8:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dca:	f7ff fb51 	bl	8001470 <HAL_RCC_OscConfig>
 8001dce:	b100      	cbz	r0, 8001dd2 <SystemClock_Config+0x5a>
 8001dd0:	e7fe      	b.n	8001dd0 <SystemClock_Config+0x58>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dd2:	230f      	movs	r3, #15
 8001dd4:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001dd6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dda:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ddc:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001dde:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001de0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001de4:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001de6:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001de8:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001dea:	f7ff fce5 	bl	80017b8 <HAL_RCC_ClockConfig>
 8001dee:	4604      	mov	r4, r0
 8001df0:	b100      	cbz	r0, 8001df4 <SystemClock_Config+0x7c>
 8001df2:	e7fe      	b.n	8001df2 <SystemClock_Config+0x7a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001df4:	f7ff fd7a 	bl	80018ec <HAL_RCC_GetHCLKFreq>
 8001df8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dfc:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e00:	f7ff fa28 	bl	8001254 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001e04:	4628      	mov	r0, r5
 8001e06:	f7ff fa3b 	bl	8001280 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001e0a:	4622      	mov	r2, r4
 8001e0c:	4621      	mov	r1, r4
 8001e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8001e12:	f7ff f9eb 	bl	80011ec <HAL_NVIC_SetPriority>
}
 8001e16:	b015      	add	sp, #84	; 0x54
 8001e18:	bd30      	pop	{r4, r5, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40007000 	.word	0x40007000

08001e24 <main>:
{
 8001e24:	b500      	push	{lr}
 8001e26:	b08f      	sub	sp, #60	; 0x3c
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e28:	2500      	movs	r5, #0
  HAL_Init();
 8001e2a:	f7fe ffa7 	bl	8000d7c <HAL_Init>
  SystemClock_Config();
 8001e2e:	f7ff ffa3 	bl	8001d78 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e32:	4b4d      	ldr	r3, [pc, #308]	; (8001f68 <main+0x144>)
 8001e34:	9505      	str	r5, [sp, #20]
 8001e36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8001e38:	484c      	ldr	r0, [pc, #304]	; (8001f6c <main+0x148>)
  hadc1.Instance = ADC1;
 8001e3a:	4c4d      	ldr	r4, [pc, #308]	; (8001f70 <main+0x14c>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e40:	631a      	str	r2, [r3, #48]	; 0x30
 8001e42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e44:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001e48:	9205      	str	r2, [sp, #20]
 8001e4a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4c:	9506      	str	r5, [sp, #24]
 8001e4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e50:	f042 0201 	orr.w	r2, r2, #1
 8001e54:	631a      	str	r2, [r3, #48]	; 0x30
 8001e56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e58:	f002 0201 	and.w	r2, r2, #1
 8001e5c:	9206      	str	r2, [sp, #24]
 8001e5e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e60:	9507      	str	r5, [sp, #28]
 8001e62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e64:	f042 0202 	orr.w	r2, r2, #2
 8001e68:	631a      	str	r2, [r3, #48]	; 0x30
 8001e6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e6c:	f002 0202 	and.w	r2, r2, #2
 8001e70:	9207      	str	r2, [sp, #28]
 8001e72:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e74:	9508      	str	r5, [sp, #32]
 8001e76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e78:	f042 0208 	orr.w	r2, r2, #8
 8001e7c:	631a      	str	r2, [r3, #48]	; 0x30
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e80:	f003 0308 	and.w	r3, r3, #8
 8001e84:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8001e86:	462a      	mov	r2, r5
 8001e88:	f44f 4120 	mov.w	r1, #40960	; 0xa000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e8c:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8001e8e:	f7ff fae9 	bl	8001464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8001e92:	462a      	mov	r2, r5
 8001e94:	f44f 412a 	mov.w	r1, #43520	; 0xaa00
 8001e98:	4836      	ldr	r0, [pc, #216]	; (8001f74 <main+0x150>)
 8001e9a:	f7ff fae3 	bl	8001464 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e9e:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001ea0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea4:	a909      	add	r1, sp, #36	; 0x24
 8001ea6:	4831      	ldr	r0, [pc, #196]	; (8001f6c <main+0x148>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001ea8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eaa:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eae:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb0:	f7ff f9f8 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD11 PD13 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15;
 8001eb4:	f44f 432a 	mov.w	r3, #43520	; 0xaa00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eb8:	482e      	ldr	r0, [pc, #184]	; (8001f74 <main+0x150>)
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15;
 8001eba:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ebc:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ebe:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec2:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ec4:	f7ff f9ee 	bl	80012a4 <HAL_GPIO_Init>
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001ec8:	4b2b      	ldr	r3, [pc, #172]	; (8001f78 <main+0x154>)
  hadc1.Init.ScanConvMode = DISABLE;
 8001eca:	6125      	str	r5, [r4, #16]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001ecc:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
 8001ed0:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
 8001ed4:	e884 5008 	stmia.w	r4, {r3, ip, lr}
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ed8:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001eda:	4b28      	ldr	r3, [pc, #160]	; (8001f7c <main+0x158>)
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001edc:	61a6      	str	r6, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ede:	6225      	str	r5, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ee0:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ee2:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ee4:	60e5      	str	r5, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001ee6:	61e6      	str	r6, [r4, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ee8:	6325      	str	r5, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001eea:	6166      	str	r6, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001eec:	f7fe ff7e 	bl	8000dec <HAL_ADC_Init>
 8001ef0:	b100      	cbz	r0, 8001ef4 <main+0xd0>
 8001ef2:	e7fe      	b.n	8001ef2 <main+0xce>
  sConfig.Channel = ADC_CHANNEL_4;
 8001ef4:	2304      	movs	r3, #4
 8001ef6:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ef8:	a909      	add	r1, sp, #36	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001efa:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001efc:	4620      	mov	r0, r4
  sConfig.Rank = 1;
 8001efe:	960a      	str	r6, [sp, #40]	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001f00:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f02:	f7ff f8cb 	bl	800109c <HAL_ADC_ConfigChannel>
 8001f06:	b100      	cbz	r0, 8001f0a <main+0xe6>
 8001f08:	e7fe      	b.n	8001f08 <main+0xe4>
  LCD1602_Begin4BIT(GPIOB, GPIO_PIN_13, GPIO_PIN_15, GPIOD, GPIO_PIN_9, GPIO_PIN_11, GPIO_PIN_13, GPIO_PIN_15);
 8001f0a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f16:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8001f1a:	9203      	str	r2, [sp, #12]
 8001f1c:	9102      	str	r1, [sp, #8]
 8001f1e:	4813      	ldr	r0, [pc, #76]	; (8001f6c <main+0x148>)
 8001f20:	4d17      	ldr	r5, [pc, #92]	; (8001f80 <main+0x15c>)
 8001f22:	e88d 0048 	stmia.w	sp, {r3, r6}
 8001f26:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <main+0x150>)
 8001f28:	f7ff fe6e 	bl	8001c08 <LCD1602_Begin4BIT>
  LCD1602_noCursor();
 8001f2c:	f7ff fef8 	bl	8001d20 <LCD1602_noCursor>
  LCD1602_noBlink();
 8001f30:	f7ff ff0a 	bl	8001d48 <LCD1602_noBlink>
	  HAL_ADC_Start(&hadc1);
 8001f34:	4620      	mov	r0, r4
 8001f36:	f7fe fffd 	bl	8000f34 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK)
 8001f3a:	2105      	movs	r1, #5
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	f7ff f859 	bl	8000ff4 <HAL_ADC_PollForConversion>
 8001f42:	b918      	cbnz	r0, 8001f4c <main+0x128>
	 	 adc = HAL_ADC_GetValue(&hadc1);
 8001f44:	4620      	mov	r0, r4
 8001f46:	f7ff f8a5 	bl	8001094 <HAL_ADC_GetValue>
 8001f4a:	6028      	str	r0, [r5, #0]
	  LCD1602_clear();
 8001f4c:	f7ff fef2 	bl	8001d34 <LCD1602_clear>
	  LCD1602_setCursor(2,2);
 8001f50:	2102      	movs	r1, #2
 8001f52:	4608      	mov	r0, r1
 8001f54:	f7ff fed8 	bl	8001d08 <LCD1602_setCursor>
	  LCD1602_PrintInt(adc);
 8001f58:	6828      	ldr	r0, [r5, #0]
 8001f5a:	f7ff feff 	bl	8001d5c <LCD1602_PrintInt>
	  HAL_Delay(300);
 8001f5e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001f62:	f7fe ff33 	bl	8000dcc <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8001f66:	e7e5      	b.n	8001f34 <main+0x110>
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40020400 	.word	0x40020400
 8001f70:	200000b8 	.word	0x200000b8
 8001f74:	40020c00 	.word	0x40020c00
 8001f78:	40012000 	.word	0x40012000
 8001f7c:	0f000001 	.word	0x0f000001
 8001f80:	20000100 	.word	0x20000100

08001f84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f86:	2003      	movs	r0, #3
 8001f88:	f7ff f91e 	bl	80011c8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	4611      	mov	r1, r2
 8001f90:	f06f 000b 	mvn.w	r0, #11
 8001f94:	f7ff f92a 	bl	80011ec <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	f06f 000a 	mvn.w	r0, #10
 8001fa0:	f7ff f924 	bl	80011ec <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	f06f 0009 	mvn.w	r0, #9
 8001fac:	f7ff f91e 	bl	80011ec <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	f06f 0004 	mvn.w	r0, #4
 8001fb8:	f7ff f918 	bl	80011ec <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	f06f 0003 	mvn.w	r0, #3
 8001fc4:	f7ff f912 	bl	80011ec <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	4611      	mov	r1, r2
 8001fcc:	f06f 0001 	mvn.w	r0, #1
 8001fd0:	f7ff f90c 	bl	80011ec <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001fe0:	f7ff b904 	b.w	80011ec <HAL_NVIC_SetPriority>

08001fe4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fe4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8001fe6:	6802      	ldr	r2, [r0, #0]
 8001fe8:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <HAL_ADC_MspInit+0x3c>)
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d115      	bne.n	800201a <HAL_ADC_MspInit+0x36>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fee:	2100      	movs	r1, #0
 8001ff0:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001ff4:	9100      	str	r1, [sp, #0]
 8001ff6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff8:	480a      	ldr	r0, [pc, #40]	; (8002024 <HAL_ADC_MspInit+0x40>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ffa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ffe:	645a      	str	r2, [r3, #68]	; 0x44
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	9103      	str	r1, [sp, #12]
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800200c:	2310      	movs	r3, #16
 800200e:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002010:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002012:	2303      	movs	r3, #3
 8002014:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002016:	f7ff f945 	bl	80012a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800201a:	b007      	add	sp, #28
 800201c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002020:	40012000 	.word	0x40012000
 8002024:	40020000 	.word	0x40020000

08002028 <NMI_Handler>:
 8002028:	4770      	bx	lr

0800202a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800202a:	e7fe      	b.n	800202a <HardFault_Handler>

0800202c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800202c:	e7fe      	b.n	800202c <MemManage_Handler>

0800202e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800202e:	e7fe      	b.n	800202e <BusFault_Handler>

08002030 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002030:	e7fe      	b.n	8002030 <UsageFault_Handler>

08002032 <SVC_Handler>:
 8002032:	4770      	bx	lr

08002034 <DebugMon_Handler>:
 8002034:	4770      	bx	lr

08002036 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002036:	4770      	bx	lr

08002038 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002038:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800203a:	f7fe feb9 	bl	8000db0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800203e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002042:	f7ff b92a 	b.w	800129a <HAL_SYSTICK_IRQHandler>
	...

08002048 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002048:	490f      	ldr	r1, [pc, #60]	; (8002088 <SystemInit+0x40>)
 800204a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800204e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002056:	4b0d      	ldr	r3, [pc, #52]	; (800208c <SystemInit+0x44>)
 8002058:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800205a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800205c:	f042 0201 	orr.w	r2, r2, #1
 8002060:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002062:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800206a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800206e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002070:	4a07      	ldr	r2, [pc, #28]	; (8002090 <SystemInit+0x48>)
 8002072:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800207a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800207c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800207e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002082:	608b      	str	r3, [r1, #8]
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	e000ed00 	.word	0xe000ed00
 800208c:	40023800 	.word	0x40023800
 8002090:	24003010 	.word	0x24003010

08002094 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002094:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002098:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800209a:	e003      	b.n	80020a4 <LoopCopyDataInit>

0800209c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800209c:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800209e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80020a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80020a2:	3104      	adds	r1, #4

080020a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80020a4:	480b      	ldr	r0, [pc, #44]	; (80020d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80020a6:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80020a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80020aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80020ac:	d3f6      	bcc.n	800209c <CopyDataInit>
  ldr  r2, =_sbss
 80020ae:	4a0b      	ldr	r2, [pc, #44]	; (80020dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80020b0:	e002      	b.n	80020b8 <LoopFillZerobss>

080020b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80020b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80020b4:	f842 3b04 	str.w	r3, [r2], #4

080020b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80020b8:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80020ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80020bc:	d3f9      	bcc.n	80020b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020be:	f7ff ffc3 	bl	8002048 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020c2:	f000 f811 	bl	80020e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020c6:	f7ff fead 	bl	8001e24 <main>
  bx  lr    
 80020ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020cc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80020d0:	08002a00 	.word	0x08002a00
  ldr  r0, =_sdata
 80020d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80020d8:	2000006c 	.word	0x2000006c
  ldr  r2, =_sbss
 80020dc:	2000006c 	.word	0x2000006c
  ldr  r3, = _ebss
 80020e0:	20000108 	.word	0x20000108

080020e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020e4:	e7fe      	b.n	80020e4 <ADC_IRQHandler>
	...

080020e8 <__libc_init_array>:
 80020e8:	b570      	push	{r4, r5, r6, lr}
 80020ea:	4e0d      	ldr	r6, [pc, #52]	; (8002120 <__libc_init_array+0x38>)
 80020ec:	4c0d      	ldr	r4, [pc, #52]	; (8002124 <__libc_init_array+0x3c>)
 80020ee:	1ba4      	subs	r4, r4, r6
 80020f0:	10a4      	asrs	r4, r4, #2
 80020f2:	2500      	movs	r5, #0
 80020f4:	42a5      	cmp	r5, r4
 80020f6:	d109      	bne.n	800210c <__libc_init_array+0x24>
 80020f8:	4e0b      	ldr	r6, [pc, #44]	; (8002128 <__libc_init_array+0x40>)
 80020fa:	4c0c      	ldr	r4, [pc, #48]	; (800212c <__libc_init_array+0x44>)
 80020fc:	f000 fc44 	bl	8002988 <_init>
 8002100:	1ba4      	subs	r4, r4, r6
 8002102:	10a4      	asrs	r4, r4, #2
 8002104:	2500      	movs	r5, #0
 8002106:	42a5      	cmp	r5, r4
 8002108:	d105      	bne.n	8002116 <__libc_init_array+0x2e>
 800210a:	bd70      	pop	{r4, r5, r6, pc}
 800210c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002110:	4798      	blx	r3
 8002112:	3501      	adds	r5, #1
 8002114:	e7ee      	b.n	80020f4 <__libc_init_array+0xc>
 8002116:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800211a:	4798      	blx	r3
 800211c:	3501      	adds	r5, #1
 800211e:	e7f2      	b.n	8002106 <__libc_init_array+0x1e>
 8002120:	080029f8 	.word	0x080029f8
 8002124:	080029f8 	.word	0x080029f8
 8002128:	080029f8 	.word	0x080029f8
 800212c:	080029fc 	.word	0x080029fc

08002130 <siprintf>:
 8002130:	b40e      	push	{r1, r2, r3}
 8002132:	b500      	push	{lr}
 8002134:	b09c      	sub	sp, #112	; 0x70
 8002136:	f44f 7102 	mov.w	r1, #520	; 0x208
 800213a:	ab1d      	add	r3, sp, #116	; 0x74
 800213c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002140:	9002      	str	r0, [sp, #8]
 8002142:	9006      	str	r0, [sp, #24]
 8002144:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002148:	480a      	ldr	r0, [pc, #40]	; (8002174 <siprintf+0x44>)
 800214a:	9104      	str	r1, [sp, #16]
 800214c:	9107      	str	r1, [sp, #28]
 800214e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002152:	f853 2b04 	ldr.w	r2, [r3], #4
 8002156:	f8ad 1016 	strh.w	r1, [sp, #22]
 800215a:	6800      	ldr	r0, [r0, #0]
 800215c:	9301      	str	r3, [sp, #4]
 800215e:	a902      	add	r1, sp, #8
 8002160:	f000 f866 	bl	8002230 <_svfiprintf_r>
 8002164:	9b02      	ldr	r3, [sp, #8]
 8002166:	2200      	movs	r2, #0
 8002168:	701a      	strb	r2, [r3, #0]
 800216a:	b01c      	add	sp, #112	; 0x70
 800216c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002170:	b003      	add	sp, #12
 8002172:	4770      	bx	lr
 8002174:	20000008 	.word	0x20000008

08002178 <__ssputs_r>:
 8002178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800217c:	688e      	ldr	r6, [r1, #8]
 800217e:	429e      	cmp	r6, r3
 8002180:	4682      	mov	sl, r0
 8002182:	460c      	mov	r4, r1
 8002184:	4691      	mov	r9, r2
 8002186:	4698      	mov	r8, r3
 8002188:	d835      	bhi.n	80021f6 <__ssputs_r+0x7e>
 800218a:	898a      	ldrh	r2, [r1, #12]
 800218c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002190:	d031      	beq.n	80021f6 <__ssputs_r+0x7e>
 8002192:	6825      	ldr	r5, [r4, #0]
 8002194:	6909      	ldr	r1, [r1, #16]
 8002196:	1a6f      	subs	r7, r5, r1
 8002198:	6965      	ldr	r5, [r4, #20]
 800219a:	2302      	movs	r3, #2
 800219c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80021a0:	fb95 f5f3 	sdiv	r5, r5, r3
 80021a4:	f108 0301 	add.w	r3, r8, #1
 80021a8:	443b      	add	r3, r7
 80021aa:	429d      	cmp	r5, r3
 80021ac:	bf38      	it	cc
 80021ae:	461d      	movcc	r5, r3
 80021b0:	0553      	lsls	r3, r2, #21
 80021b2:	d531      	bpl.n	8002218 <__ssputs_r+0xa0>
 80021b4:	4629      	mov	r1, r5
 80021b6:	f000 fb39 	bl	800282c <_malloc_r>
 80021ba:	4606      	mov	r6, r0
 80021bc:	b950      	cbnz	r0, 80021d4 <__ssputs_r+0x5c>
 80021be:	230c      	movs	r3, #12
 80021c0:	f8ca 3000 	str.w	r3, [sl]
 80021c4:	89a3      	ldrh	r3, [r4, #12]
 80021c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021ca:	81a3      	strh	r3, [r4, #12]
 80021cc:	f04f 30ff 	mov.w	r0, #4294967295
 80021d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021d4:	463a      	mov	r2, r7
 80021d6:	6921      	ldr	r1, [r4, #16]
 80021d8:	f000 fab4 	bl	8002744 <memcpy>
 80021dc:	89a3      	ldrh	r3, [r4, #12]
 80021de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80021e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021e6:	81a3      	strh	r3, [r4, #12]
 80021e8:	6126      	str	r6, [r4, #16]
 80021ea:	6165      	str	r5, [r4, #20]
 80021ec:	443e      	add	r6, r7
 80021ee:	1bed      	subs	r5, r5, r7
 80021f0:	6026      	str	r6, [r4, #0]
 80021f2:	60a5      	str	r5, [r4, #8]
 80021f4:	4646      	mov	r6, r8
 80021f6:	4546      	cmp	r6, r8
 80021f8:	bf28      	it	cs
 80021fa:	4646      	movcs	r6, r8
 80021fc:	4632      	mov	r2, r6
 80021fe:	4649      	mov	r1, r9
 8002200:	6820      	ldr	r0, [r4, #0]
 8002202:	f000 faaa 	bl	800275a <memmove>
 8002206:	68a3      	ldr	r3, [r4, #8]
 8002208:	1b9b      	subs	r3, r3, r6
 800220a:	60a3      	str	r3, [r4, #8]
 800220c:	6823      	ldr	r3, [r4, #0]
 800220e:	441e      	add	r6, r3
 8002210:	6026      	str	r6, [r4, #0]
 8002212:	2000      	movs	r0, #0
 8002214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002218:	462a      	mov	r2, r5
 800221a:	f000 fb65 	bl	80028e8 <_realloc_r>
 800221e:	4606      	mov	r6, r0
 8002220:	2800      	cmp	r0, #0
 8002222:	d1e1      	bne.n	80021e8 <__ssputs_r+0x70>
 8002224:	6921      	ldr	r1, [r4, #16]
 8002226:	4650      	mov	r0, sl
 8002228:	f000 fab2 	bl	8002790 <_free_r>
 800222c:	e7c7      	b.n	80021be <__ssputs_r+0x46>
	...

08002230 <_svfiprintf_r>:
 8002230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002234:	b09d      	sub	sp, #116	; 0x74
 8002236:	4680      	mov	r8, r0
 8002238:	9303      	str	r3, [sp, #12]
 800223a:	898b      	ldrh	r3, [r1, #12]
 800223c:	061c      	lsls	r4, r3, #24
 800223e:	460d      	mov	r5, r1
 8002240:	4616      	mov	r6, r2
 8002242:	d50f      	bpl.n	8002264 <_svfiprintf_r+0x34>
 8002244:	690b      	ldr	r3, [r1, #16]
 8002246:	b96b      	cbnz	r3, 8002264 <_svfiprintf_r+0x34>
 8002248:	2140      	movs	r1, #64	; 0x40
 800224a:	f000 faef 	bl	800282c <_malloc_r>
 800224e:	6028      	str	r0, [r5, #0]
 8002250:	6128      	str	r0, [r5, #16]
 8002252:	b928      	cbnz	r0, 8002260 <_svfiprintf_r+0x30>
 8002254:	230c      	movs	r3, #12
 8002256:	f8c8 3000 	str.w	r3, [r8]
 800225a:	f04f 30ff 	mov.w	r0, #4294967295
 800225e:	e0c5      	b.n	80023ec <_svfiprintf_r+0x1bc>
 8002260:	2340      	movs	r3, #64	; 0x40
 8002262:	616b      	str	r3, [r5, #20]
 8002264:	2300      	movs	r3, #0
 8002266:	9309      	str	r3, [sp, #36]	; 0x24
 8002268:	2320      	movs	r3, #32
 800226a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800226e:	2330      	movs	r3, #48	; 0x30
 8002270:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002274:	f04f 0b01 	mov.w	fp, #1
 8002278:	4637      	mov	r7, r6
 800227a:	463c      	mov	r4, r7
 800227c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002280:	2b00      	cmp	r3, #0
 8002282:	d13c      	bne.n	80022fe <_svfiprintf_r+0xce>
 8002284:	ebb7 0a06 	subs.w	sl, r7, r6
 8002288:	d00b      	beq.n	80022a2 <_svfiprintf_r+0x72>
 800228a:	4653      	mov	r3, sl
 800228c:	4632      	mov	r2, r6
 800228e:	4629      	mov	r1, r5
 8002290:	4640      	mov	r0, r8
 8002292:	f7ff ff71 	bl	8002178 <__ssputs_r>
 8002296:	3001      	adds	r0, #1
 8002298:	f000 80a3 	beq.w	80023e2 <_svfiprintf_r+0x1b2>
 800229c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800229e:	4453      	add	r3, sl
 80022a0:	9309      	str	r3, [sp, #36]	; 0x24
 80022a2:	783b      	ldrb	r3, [r7, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 809c 	beq.w	80023e2 <_svfiprintf_r+0x1b2>
 80022aa:	2300      	movs	r3, #0
 80022ac:	f04f 32ff 	mov.w	r2, #4294967295
 80022b0:	9304      	str	r3, [sp, #16]
 80022b2:	9307      	str	r3, [sp, #28]
 80022b4:	9205      	str	r2, [sp, #20]
 80022b6:	9306      	str	r3, [sp, #24]
 80022b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80022bc:	931a      	str	r3, [sp, #104]	; 0x68
 80022be:	2205      	movs	r2, #5
 80022c0:	7821      	ldrb	r1, [r4, #0]
 80022c2:	4850      	ldr	r0, [pc, #320]	; (8002404 <_svfiprintf_r+0x1d4>)
 80022c4:	f7fd ff84 	bl	80001d0 <memchr>
 80022c8:	1c67      	adds	r7, r4, #1
 80022ca:	9b04      	ldr	r3, [sp, #16]
 80022cc:	b9d8      	cbnz	r0, 8002306 <_svfiprintf_r+0xd6>
 80022ce:	06d9      	lsls	r1, r3, #27
 80022d0:	bf44      	itt	mi
 80022d2:	2220      	movmi	r2, #32
 80022d4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80022d8:	071a      	lsls	r2, r3, #28
 80022da:	bf44      	itt	mi
 80022dc:	222b      	movmi	r2, #43	; 0x2b
 80022de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80022e2:	7822      	ldrb	r2, [r4, #0]
 80022e4:	2a2a      	cmp	r2, #42	; 0x2a
 80022e6:	d016      	beq.n	8002316 <_svfiprintf_r+0xe6>
 80022e8:	9a07      	ldr	r2, [sp, #28]
 80022ea:	2100      	movs	r1, #0
 80022ec:	200a      	movs	r0, #10
 80022ee:	4627      	mov	r7, r4
 80022f0:	3401      	adds	r4, #1
 80022f2:	783b      	ldrb	r3, [r7, #0]
 80022f4:	3b30      	subs	r3, #48	; 0x30
 80022f6:	2b09      	cmp	r3, #9
 80022f8:	d951      	bls.n	800239e <_svfiprintf_r+0x16e>
 80022fa:	b1c9      	cbz	r1, 8002330 <_svfiprintf_r+0x100>
 80022fc:	e011      	b.n	8002322 <_svfiprintf_r+0xf2>
 80022fe:	2b25      	cmp	r3, #37	; 0x25
 8002300:	d0c0      	beq.n	8002284 <_svfiprintf_r+0x54>
 8002302:	4627      	mov	r7, r4
 8002304:	e7b9      	b.n	800227a <_svfiprintf_r+0x4a>
 8002306:	4a3f      	ldr	r2, [pc, #252]	; (8002404 <_svfiprintf_r+0x1d4>)
 8002308:	1a80      	subs	r0, r0, r2
 800230a:	fa0b f000 	lsl.w	r0, fp, r0
 800230e:	4318      	orrs	r0, r3
 8002310:	9004      	str	r0, [sp, #16]
 8002312:	463c      	mov	r4, r7
 8002314:	e7d3      	b.n	80022be <_svfiprintf_r+0x8e>
 8002316:	9a03      	ldr	r2, [sp, #12]
 8002318:	1d11      	adds	r1, r2, #4
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	9103      	str	r1, [sp, #12]
 800231e:	2a00      	cmp	r2, #0
 8002320:	db01      	blt.n	8002326 <_svfiprintf_r+0xf6>
 8002322:	9207      	str	r2, [sp, #28]
 8002324:	e004      	b.n	8002330 <_svfiprintf_r+0x100>
 8002326:	4252      	negs	r2, r2
 8002328:	f043 0302 	orr.w	r3, r3, #2
 800232c:	9207      	str	r2, [sp, #28]
 800232e:	9304      	str	r3, [sp, #16]
 8002330:	783b      	ldrb	r3, [r7, #0]
 8002332:	2b2e      	cmp	r3, #46	; 0x2e
 8002334:	d10e      	bne.n	8002354 <_svfiprintf_r+0x124>
 8002336:	787b      	ldrb	r3, [r7, #1]
 8002338:	2b2a      	cmp	r3, #42	; 0x2a
 800233a:	f107 0101 	add.w	r1, r7, #1
 800233e:	d132      	bne.n	80023a6 <_svfiprintf_r+0x176>
 8002340:	9b03      	ldr	r3, [sp, #12]
 8002342:	1d1a      	adds	r2, r3, #4
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	9203      	str	r2, [sp, #12]
 8002348:	2b00      	cmp	r3, #0
 800234a:	bfb8      	it	lt
 800234c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002350:	3702      	adds	r7, #2
 8002352:	9305      	str	r3, [sp, #20]
 8002354:	4c2c      	ldr	r4, [pc, #176]	; (8002408 <_svfiprintf_r+0x1d8>)
 8002356:	7839      	ldrb	r1, [r7, #0]
 8002358:	2203      	movs	r2, #3
 800235a:	4620      	mov	r0, r4
 800235c:	f7fd ff38 	bl	80001d0 <memchr>
 8002360:	b138      	cbz	r0, 8002372 <_svfiprintf_r+0x142>
 8002362:	2340      	movs	r3, #64	; 0x40
 8002364:	1b00      	subs	r0, r0, r4
 8002366:	fa03 f000 	lsl.w	r0, r3, r0
 800236a:	9b04      	ldr	r3, [sp, #16]
 800236c:	4303      	orrs	r3, r0
 800236e:	9304      	str	r3, [sp, #16]
 8002370:	3701      	adds	r7, #1
 8002372:	7839      	ldrb	r1, [r7, #0]
 8002374:	4825      	ldr	r0, [pc, #148]	; (800240c <_svfiprintf_r+0x1dc>)
 8002376:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800237a:	2206      	movs	r2, #6
 800237c:	1c7e      	adds	r6, r7, #1
 800237e:	f7fd ff27 	bl	80001d0 <memchr>
 8002382:	2800      	cmp	r0, #0
 8002384:	d035      	beq.n	80023f2 <_svfiprintf_r+0x1c2>
 8002386:	4b22      	ldr	r3, [pc, #136]	; (8002410 <_svfiprintf_r+0x1e0>)
 8002388:	b9fb      	cbnz	r3, 80023ca <_svfiprintf_r+0x19a>
 800238a:	9b03      	ldr	r3, [sp, #12]
 800238c:	3307      	adds	r3, #7
 800238e:	f023 0307 	bic.w	r3, r3, #7
 8002392:	3308      	adds	r3, #8
 8002394:	9303      	str	r3, [sp, #12]
 8002396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002398:	444b      	add	r3, r9
 800239a:	9309      	str	r3, [sp, #36]	; 0x24
 800239c:	e76c      	b.n	8002278 <_svfiprintf_r+0x48>
 800239e:	fb00 3202 	mla	r2, r0, r2, r3
 80023a2:	2101      	movs	r1, #1
 80023a4:	e7a3      	b.n	80022ee <_svfiprintf_r+0xbe>
 80023a6:	2300      	movs	r3, #0
 80023a8:	9305      	str	r3, [sp, #20]
 80023aa:	4618      	mov	r0, r3
 80023ac:	240a      	movs	r4, #10
 80023ae:	460f      	mov	r7, r1
 80023b0:	3101      	adds	r1, #1
 80023b2:	783a      	ldrb	r2, [r7, #0]
 80023b4:	3a30      	subs	r2, #48	; 0x30
 80023b6:	2a09      	cmp	r2, #9
 80023b8:	d903      	bls.n	80023c2 <_svfiprintf_r+0x192>
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0ca      	beq.n	8002354 <_svfiprintf_r+0x124>
 80023be:	9005      	str	r0, [sp, #20]
 80023c0:	e7c8      	b.n	8002354 <_svfiprintf_r+0x124>
 80023c2:	fb04 2000 	mla	r0, r4, r0, r2
 80023c6:	2301      	movs	r3, #1
 80023c8:	e7f1      	b.n	80023ae <_svfiprintf_r+0x17e>
 80023ca:	ab03      	add	r3, sp, #12
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	462a      	mov	r2, r5
 80023d0:	4b10      	ldr	r3, [pc, #64]	; (8002414 <_svfiprintf_r+0x1e4>)
 80023d2:	a904      	add	r1, sp, #16
 80023d4:	4640      	mov	r0, r8
 80023d6:	f3af 8000 	nop.w
 80023da:	f1b0 3fff 	cmp.w	r0, #4294967295
 80023de:	4681      	mov	r9, r0
 80023e0:	d1d9      	bne.n	8002396 <_svfiprintf_r+0x166>
 80023e2:	89ab      	ldrh	r3, [r5, #12]
 80023e4:	065b      	lsls	r3, r3, #25
 80023e6:	f53f af38 	bmi.w	800225a <_svfiprintf_r+0x2a>
 80023ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80023ec:	b01d      	add	sp, #116	; 0x74
 80023ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023f2:	ab03      	add	r3, sp, #12
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	462a      	mov	r2, r5
 80023f8:	4b06      	ldr	r3, [pc, #24]	; (8002414 <_svfiprintf_r+0x1e4>)
 80023fa:	a904      	add	r1, sp, #16
 80023fc:	4640      	mov	r0, r8
 80023fe:	f000 f881 	bl	8002504 <_printf_i>
 8002402:	e7ea      	b.n	80023da <_svfiprintf_r+0x1aa>
 8002404:	080029bb 	.word	0x080029bb
 8002408:	080029c1 	.word	0x080029c1
 800240c:	080029c5 	.word	0x080029c5
 8002410:	00000000 	.word	0x00000000
 8002414:	08002179 	.word	0x08002179

08002418 <_printf_common>:
 8002418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800241c:	4691      	mov	r9, r2
 800241e:	461f      	mov	r7, r3
 8002420:	688a      	ldr	r2, [r1, #8]
 8002422:	690b      	ldr	r3, [r1, #16]
 8002424:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002428:	4293      	cmp	r3, r2
 800242a:	bfb8      	it	lt
 800242c:	4613      	movlt	r3, r2
 800242e:	f8c9 3000 	str.w	r3, [r9]
 8002432:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002436:	4606      	mov	r6, r0
 8002438:	460c      	mov	r4, r1
 800243a:	b112      	cbz	r2, 8002442 <_printf_common+0x2a>
 800243c:	3301      	adds	r3, #1
 800243e:	f8c9 3000 	str.w	r3, [r9]
 8002442:	6823      	ldr	r3, [r4, #0]
 8002444:	0699      	lsls	r1, r3, #26
 8002446:	bf42      	ittt	mi
 8002448:	f8d9 3000 	ldrmi.w	r3, [r9]
 800244c:	3302      	addmi	r3, #2
 800244e:	f8c9 3000 	strmi.w	r3, [r9]
 8002452:	6825      	ldr	r5, [r4, #0]
 8002454:	f015 0506 	ands.w	r5, r5, #6
 8002458:	d107      	bne.n	800246a <_printf_common+0x52>
 800245a:	f104 0a19 	add.w	sl, r4, #25
 800245e:	68e3      	ldr	r3, [r4, #12]
 8002460:	f8d9 2000 	ldr.w	r2, [r9]
 8002464:	1a9b      	subs	r3, r3, r2
 8002466:	429d      	cmp	r5, r3
 8002468:	db29      	blt.n	80024be <_printf_common+0xa6>
 800246a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800246e:	6822      	ldr	r2, [r4, #0]
 8002470:	3300      	adds	r3, #0
 8002472:	bf18      	it	ne
 8002474:	2301      	movne	r3, #1
 8002476:	0692      	lsls	r2, r2, #26
 8002478:	d42e      	bmi.n	80024d8 <_printf_common+0xc0>
 800247a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800247e:	4639      	mov	r1, r7
 8002480:	4630      	mov	r0, r6
 8002482:	47c0      	blx	r8
 8002484:	3001      	adds	r0, #1
 8002486:	d021      	beq.n	80024cc <_printf_common+0xb4>
 8002488:	6823      	ldr	r3, [r4, #0]
 800248a:	68e5      	ldr	r5, [r4, #12]
 800248c:	f8d9 2000 	ldr.w	r2, [r9]
 8002490:	f003 0306 	and.w	r3, r3, #6
 8002494:	2b04      	cmp	r3, #4
 8002496:	bf08      	it	eq
 8002498:	1aad      	subeq	r5, r5, r2
 800249a:	68a3      	ldr	r3, [r4, #8]
 800249c:	6922      	ldr	r2, [r4, #16]
 800249e:	bf0c      	ite	eq
 80024a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80024a4:	2500      	movne	r5, #0
 80024a6:	4293      	cmp	r3, r2
 80024a8:	bfc4      	itt	gt
 80024aa:	1a9b      	subgt	r3, r3, r2
 80024ac:	18ed      	addgt	r5, r5, r3
 80024ae:	f04f 0900 	mov.w	r9, #0
 80024b2:	341a      	adds	r4, #26
 80024b4:	454d      	cmp	r5, r9
 80024b6:	d11b      	bne.n	80024f0 <_printf_common+0xd8>
 80024b8:	2000      	movs	r0, #0
 80024ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024be:	2301      	movs	r3, #1
 80024c0:	4652      	mov	r2, sl
 80024c2:	4639      	mov	r1, r7
 80024c4:	4630      	mov	r0, r6
 80024c6:	47c0      	blx	r8
 80024c8:	3001      	adds	r0, #1
 80024ca:	d103      	bne.n	80024d4 <_printf_common+0xbc>
 80024cc:	f04f 30ff 	mov.w	r0, #4294967295
 80024d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024d4:	3501      	adds	r5, #1
 80024d6:	e7c2      	b.n	800245e <_printf_common+0x46>
 80024d8:	18e1      	adds	r1, r4, r3
 80024da:	1c5a      	adds	r2, r3, #1
 80024dc:	2030      	movs	r0, #48	; 0x30
 80024de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80024e2:	4422      	add	r2, r4
 80024e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80024e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80024ec:	3302      	adds	r3, #2
 80024ee:	e7c4      	b.n	800247a <_printf_common+0x62>
 80024f0:	2301      	movs	r3, #1
 80024f2:	4622      	mov	r2, r4
 80024f4:	4639      	mov	r1, r7
 80024f6:	4630      	mov	r0, r6
 80024f8:	47c0      	blx	r8
 80024fa:	3001      	adds	r0, #1
 80024fc:	d0e6      	beq.n	80024cc <_printf_common+0xb4>
 80024fe:	f109 0901 	add.w	r9, r9, #1
 8002502:	e7d7      	b.n	80024b4 <_printf_common+0x9c>

08002504 <_printf_i>:
 8002504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002508:	4617      	mov	r7, r2
 800250a:	7e0a      	ldrb	r2, [r1, #24]
 800250c:	b085      	sub	sp, #20
 800250e:	2a6e      	cmp	r2, #110	; 0x6e
 8002510:	4698      	mov	r8, r3
 8002512:	4606      	mov	r6, r0
 8002514:	460c      	mov	r4, r1
 8002516:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002518:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800251c:	f000 80bc 	beq.w	8002698 <_printf_i+0x194>
 8002520:	d81a      	bhi.n	8002558 <_printf_i+0x54>
 8002522:	2a63      	cmp	r2, #99	; 0x63
 8002524:	d02e      	beq.n	8002584 <_printf_i+0x80>
 8002526:	d80a      	bhi.n	800253e <_printf_i+0x3a>
 8002528:	2a00      	cmp	r2, #0
 800252a:	f000 80c8 	beq.w	80026be <_printf_i+0x1ba>
 800252e:	2a58      	cmp	r2, #88	; 0x58
 8002530:	f000 808a 	beq.w	8002648 <_printf_i+0x144>
 8002534:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002538:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800253c:	e02a      	b.n	8002594 <_printf_i+0x90>
 800253e:	2a64      	cmp	r2, #100	; 0x64
 8002540:	d001      	beq.n	8002546 <_printf_i+0x42>
 8002542:	2a69      	cmp	r2, #105	; 0x69
 8002544:	d1f6      	bne.n	8002534 <_printf_i+0x30>
 8002546:	6821      	ldr	r1, [r4, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800254e:	d023      	beq.n	8002598 <_printf_i+0x94>
 8002550:	1d11      	adds	r1, r2, #4
 8002552:	6019      	str	r1, [r3, #0]
 8002554:	6813      	ldr	r3, [r2, #0]
 8002556:	e027      	b.n	80025a8 <_printf_i+0xa4>
 8002558:	2a73      	cmp	r2, #115	; 0x73
 800255a:	f000 80b4 	beq.w	80026c6 <_printf_i+0x1c2>
 800255e:	d808      	bhi.n	8002572 <_printf_i+0x6e>
 8002560:	2a6f      	cmp	r2, #111	; 0x6f
 8002562:	d02a      	beq.n	80025ba <_printf_i+0xb6>
 8002564:	2a70      	cmp	r2, #112	; 0x70
 8002566:	d1e5      	bne.n	8002534 <_printf_i+0x30>
 8002568:	680a      	ldr	r2, [r1, #0]
 800256a:	f042 0220 	orr.w	r2, r2, #32
 800256e:	600a      	str	r2, [r1, #0]
 8002570:	e003      	b.n	800257a <_printf_i+0x76>
 8002572:	2a75      	cmp	r2, #117	; 0x75
 8002574:	d021      	beq.n	80025ba <_printf_i+0xb6>
 8002576:	2a78      	cmp	r2, #120	; 0x78
 8002578:	d1dc      	bne.n	8002534 <_printf_i+0x30>
 800257a:	2278      	movs	r2, #120	; 0x78
 800257c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002580:	496e      	ldr	r1, [pc, #440]	; (800273c <_printf_i+0x238>)
 8002582:	e064      	b.n	800264e <_printf_i+0x14a>
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800258a:	1d11      	adds	r1, r2, #4
 800258c:	6019      	str	r1, [r3, #0]
 800258e:	6813      	ldr	r3, [r2, #0]
 8002590:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002594:	2301      	movs	r3, #1
 8002596:	e0a3      	b.n	80026e0 <_printf_i+0x1dc>
 8002598:	f011 0f40 	tst.w	r1, #64	; 0x40
 800259c:	f102 0104 	add.w	r1, r2, #4
 80025a0:	6019      	str	r1, [r3, #0]
 80025a2:	d0d7      	beq.n	8002554 <_printf_i+0x50>
 80025a4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	da03      	bge.n	80025b4 <_printf_i+0xb0>
 80025ac:	222d      	movs	r2, #45	; 0x2d
 80025ae:	425b      	negs	r3, r3
 80025b0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80025b4:	4962      	ldr	r1, [pc, #392]	; (8002740 <_printf_i+0x23c>)
 80025b6:	220a      	movs	r2, #10
 80025b8:	e017      	b.n	80025ea <_printf_i+0xe6>
 80025ba:	6820      	ldr	r0, [r4, #0]
 80025bc:	6819      	ldr	r1, [r3, #0]
 80025be:	f010 0f80 	tst.w	r0, #128	; 0x80
 80025c2:	d003      	beq.n	80025cc <_printf_i+0xc8>
 80025c4:	1d08      	adds	r0, r1, #4
 80025c6:	6018      	str	r0, [r3, #0]
 80025c8:	680b      	ldr	r3, [r1, #0]
 80025ca:	e006      	b.n	80025da <_printf_i+0xd6>
 80025cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80025d0:	f101 0004 	add.w	r0, r1, #4
 80025d4:	6018      	str	r0, [r3, #0]
 80025d6:	d0f7      	beq.n	80025c8 <_printf_i+0xc4>
 80025d8:	880b      	ldrh	r3, [r1, #0]
 80025da:	4959      	ldr	r1, [pc, #356]	; (8002740 <_printf_i+0x23c>)
 80025dc:	2a6f      	cmp	r2, #111	; 0x6f
 80025de:	bf14      	ite	ne
 80025e0:	220a      	movne	r2, #10
 80025e2:	2208      	moveq	r2, #8
 80025e4:	2000      	movs	r0, #0
 80025e6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80025ea:	6865      	ldr	r5, [r4, #4]
 80025ec:	60a5      	str	r5, [r4, #8]
 80025ee:	2d00      	cmp	r5, #0
 80025f0:	f2c0 809c 	blt.w	800272c <_printf_i+0x228>
 80025f4:	6820      	ldr	r0, [r4, #0]
 80025f6:	f020 0004 	bic.w	r0, r0, #4
 80025fa:	6020      	str	r0, [r4, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d13f      	bne.n	8002680 <_printf_i+0x17c>
 8002600:	2d00      	cmp	r5, #0
 8002602:	f040 8095 	bne.w	8002730 <_printf_i+0x22c>
 8002606:	4675      	mov	r5, lr
 8002608:	2a08      	cmp	r2, #8
 800260a:	d10b      	bne.n	8002624 <_printf_i+0x120>
 800260c:	6823      	ldr	r3, [r4, #0]
 800260e:	07da      	lsls	r2, r3, #31
 8002610:	d508      	bpl.n	8002624 <_printf_i+0x120>
 8002612:	6923      	ldr	r3, [r4, #16]
 8002614:	6862      	ldr	r2, [r4, #4]
 8002616:	429a      	cmp	r2, r3
 8002618:	bfde      	ittt	le
 800261a:	2330      	movle	r3, #48	; 0x30
 800261c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002620:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002624:	ebae 0305 	sub.w	r3, lr, r5
 8002628:	6123      	str	r3, [r4, #16]
 800262a:	f8cd 8000 	str.w	r8, [sp]
 800262e:	463b      	mov	r3, r7
 8002630:	aa03      	add	r2, sp, #12
 8002632:	4621      	mov	r1, r4
 8002634:	4630      	mov	r0, r6
 8002636:	f7ff feef 	bl	8002418 <_printf_common>
 800263a:	3001      	adds	r0, #1
 800263c:	d155      	bne.n	80026ea <_printf_i+0x1e6>
 800263e:	f04f 30ff 	mov.w	r0, #4294967295
 8002642:	b005      	add	sp, #20
 8002644:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002648:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800264c:	493c      	ldr	r1, [pc, #240]	; (8002740 <_printf_i+0x23c>)
 800264e:	6822      	ldr	r2, [r4, #0]
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002656:	f100 0504 	add.w	r5, r0, #4
 800265a:	601d      	str	r5, [r3, #0]
 800265c:	d001      	beq.n	8002662 <_printf_i+0x15e>
 800265e:	6803      	ldr	r3, [r0, #0]
 8002660:	e002      	b.n	8002668 <_printf_i+0x164>
 8002662:	0655      	lsls	r5, r2, #25
 8002664:	d5fb      	bpl.n	800265e <_printf_i+0x15a>
 8002666:	8803      	ldrh	r3, [r0, #0]
 8002668:	07d0      	lsls	r0, r2, #31
 800266a:	bf44      	itt	mi
 800266c:	f042 0220 	orrmi.w	r2, r2, #32
 8002670:	6022      	strmi	r2, [r4, #0]
 8002672:	b91b      	cbnz	r3, 800267c <_printf_i+0x178>
 8002674:	6822      	ldr	r2, [r4, #0]
 8002676:	f022 0220 	bic.w	r2, r2, #32
 800267a:	6022      	str	r2, [r4, #0]
 800267c:	2210      	movs	r2, #16
 800267e:	e7b1      	b.n	80025e4 <_printf_i+0xe0>
 8002680:	4675      	mov	r5, lr
 8002682:	fbb3 f0f2 	udiv	r0, r3, r2
 8002686:	fb02 3310 	mls	r3, r2, r0, r3
 800268a:	5ccb      	ldrb	r3, [r1, r3]
 800268c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002690:	4603      	mov	r3, r0
 8002692:	2800      	cmp	r0, #0
 8002694:	d1f5      	bne.n	8002682 <_printf_i+0x17e>
 8002696:	e7b7      	b.n	8002608 <_printf_i+0x104>
 8002698:	6808      	ldr	r0, [r1, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	6949      	ldr	r1, [r1, #20]
 800269e:	f010 0f80 	tst.w	r0, #128	; 0x80
 80026a2:	d004      	beq.n	80026ae <_printf_i+0x1aa>
 80026a4:	1d10      	adds	r0, r2, #4
 80026a6:	6018      	str	r0, [r3, #0]
 80026a8:	6813      	ldr	r3, [r2, #0]
 80026aa:	6019      	str	r1, [r3, #0]
 80026ac:	e007      	b.n	80026be <_printf_i+0x1ba>
 80026ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80026b2:	f102 0004 	add.w	r0, r2, #4
 80026b6:	6018      	str	r0, [r3, #0]
 80026b8:	6813      	ldr	r3, [r2, #0]
 80026ba:	d0f6      	beq.n	80026aa <_printf_i+0x1a6>
 80026bc:	8019      	strh	r1, [r3, #0]
 80026be:	2300      	movs	r3, #0
 80026c0:	6123      	str	r3, [r4, #16]
 80026c2:	4675      	mov	r5, lr
 80026c4:	e7b1      	b.n	800262a <_printf_i+0x126>
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	1d11      	adds	r1, r2, #4
 80026ca:	6019      	str	r1, [r3, #0]
 80026cc:	6815      	ldr	r5, [r2, #0]
 80026ce:	6862      	ldr	r2, [r4, #4]
 80026d0:	2100      	movs	r1, #0
 80026d2:	4628      	mov	r0, r5
 80026d4:	f7fd fd7c 	bl	80001d0 <memchr>
 80026d8:	b108      	cbz	r0, 80026de <_printf_i+0x1da>
 80026da:	1b40      	subs	r0, r0, r5
 80026dc:	6060      	str	r0, [r4, #4]
 80026de:	6863      	ldr	r3, [r4, #4]
 80026e0:	6123      	str	r3, [r4, #16]
 80026e2:	2300      	movs	r3, #0
 80026e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026e8:	e79f      	b.n	800262a <_printf_i+0x126>
 80026ea:	6923      	ldr	r3, [r4, #16]
 80026ec:	462a      	mov	r2, r5
 80026ee:	4639      	mov	r1, r7
 80026f0:	4630      	mov	r0, r6
 80026f2:	47c0      	blx	r8
 80026f4:	3001      	adds	r0, #1
 80026f6:	d0a2      	beq.n	800263e <_printf_i+0x13a>
 80026f8:	6823      	ldr	r3, [r4, #0]
 80026fa:	079b      	lsls	r3, r3, #30
 80026fc:	d507      	bpl.n	800270e <_printf_i+0x20a>
 80026fe:	2500      	movs	r5, #0
 8002700:	f104 0919 	add.w	r9, r4, #25
 8002704:	68e3      	ldr	r3, [r4, #12]
 8002706:	9a03      	ldr	r2, [sp, #12]
 8002708:	1a9b      	subs	r3, r3, r2
 800270a:	429d      	cmp	r5, r3
 800270c:	db05      	blt.n	800271a <_printf_i+0x216>
 800270e:	68e0      	ldr	r0, [r4, #12]
 8002710:	9b03      	ldr	r3, [sp, #12]
 8002712:	4298      	cmp	r0, r3
 8002714:	bfb8      	it	lt
 8002716:	4618      	movlt	r0, r3
 8002718:	e793      	b.n	8002642 <_printf_i+0x13e>
 800271a:	2301      	movs	r3, #1
 800271c:	464a      	mov	r2, r9
 800271e:	4639      	mov	r1, r7
 8002720:	4630      	mov	r0, r6
 8002722:	47c0      	blx	r8
 8002724:	3001      	adds	r0, #1
 8002726:	d08a      	beq.n	800263e <_printf_i+0x13a>
 8002728:	3501      	adds	r5, #1
 800272a:	e7eb      	b.n	8002704 <_printf_i+0x200>
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1a7      	bne.n	8002680 <_printf_i+0x17c>
 8002730:	780b      	ldrb	r3, [r1, #0]
 8002732:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002736:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800273a:	e765      	b.n	8002608 <_printf_i+0x104>
 800273c:	080029dd 	.word	0x080029dd
 8002740:	080029cc 	.word	0x080029cc

08002744 <memcpy>:
 8002744:	b510      	push	{r4, lr}
 8002746:	1e43      	subs	r3, r0, #1
 8002748:	440a      	add	r2, r1
 800274a:	4291      	cmp	r1, r2
 800274c:	d100      	bne.n	8002750 <memcpy+0xc>
 800274e:	bd10      	pop	{r4, pc}
 8002750:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002754:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002758:	e7f7      	b.n	800274a <memcpy+0x6>

0800275a <memmove>:
 800275a:	4288      	cmp	r0, r1
 800275c:	b510      	push	{r4, lr}
 800275e:	eb01 0302 	add.w	r3, r1, r2
 8002762:	d803      	bhi.n	800276c <memmove+0x12>
 8002764:	1e42      	subs	r2, r0, #1
 8002766:	4299      	cmp	r1, r3
 8002768:	d10c      	bne.n	8002784 <memmove+0x2a>
 800276a:	bd10      	pop	{r4, pc}
 800276c:	4298      	cmp	r0, r3
 800276e:	d2f9      	bcs.n	8002764 <memmove+0xa>
 8002770:	1881      	adds	r1, r0, r2
 8002772:	1ad2      	subs	r2, r2, r3
 8002774:	42d3      	cmn	r3, r2
 8002776:	d100      	bne.n	800277a <memmove+0x20>
 8002778:	bd10      	pop	{r4, pc}
 800277a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800277e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002782:	e7f7      	b.n	8002774 <memmove+0x1a>
 8002784:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002788:	f802 4f01 	strb.w	r4, [r2, #1]!
 800278c:	e7eb      	b.n	8002766 <memmove+0xc>
	...

08002790 <_free_r>:
 8002790:	b538      	push	{r3, r4, r5, lr}
 8002792:	4605      	mov	r5, r0
 8002794:	2900      	cmp	r1, #0
 8002796:	d045      	beq.n	8002824 <_free_r+0x94>
 8002798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800279c:	1f0c      	subs	r4, r1, #4
 800279e:	2b00      	cmp	r3, #0
 80027a0:	bfb8      	it	lt
 80027a2:	18e4      	addlt	r4, r4, r3
 80027a4:	f000 f8d6 	bl	8002954 <__malloc_lock>
 80027a8:	4a1f      	ldr	r2, [pc, #124]	; (8002828 <_free_r+0x98>)
 80027aa:	6813      	ldr	r3, [r2, #0]
 80027ac:	4610      	mov	r0, r2
 80027ae:	b933      	cbnz	r3, 80027be <_free_r+0x2e>
 80027b0:	6063      	str	r3, [r4, #4]
 80027b2:	6014      	str	r4, [r2, #0]
 80027b4:	4628      	mov	r0, r5
 80027b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027ba:	f000 b8cc 	b.w	8002956 <__malloc_unlock>
 80027be:	42a3      	cmp	r3, r4
 80027c0:	d90c      	bls.n	80027dc <_free_r+0x4c>
 80027c2:	6821      	ldr	r1, [r4, #0]
 80027c4:	1862      	adds	r2, r4, r1
 80027c6:	4293      	cmp	r3, r2
 80027c8:	bf04      	itt	eq
 80027ca:	681a      	ldreq	r2, [r3, #0]
 80027cc:	685b      	ldreq	r3, [r3, #4]
 80027ce:	6063      	str	r3, [r4, #4]
 80027d0:	bf04      	itt	eq
 80027d2:	1852      	addeq	r2, r2, r1
 80027d4:	6022      	streq	r2, [r4, #0]
 80027d6:	6004      	str	r4, [r0, #0]
 80027d8:	e7ec      	b.n	80027b4 <_free_r+0x24>
 80027da:	4613      	mov	r3, r2
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	b10a      	cbz	r2, 80027e4 <_free_r+0x54>
 80027e0:	42a2      	cmp	r2, r4
 80027e2:	d9fa      	bls.n	80027da <_free_r+0x4a>
 80027e4:	6819      	ldr	r1, [r3, #0]
 80027e6:	1858      	adds	r0, r3, r1
 80027e8:	42a0      	cmp	r0, r4
 80027ea:	d10b      	bne.n	8002804 <_free_r+0x74>
 80027ec:	6820      	ldr	r0, [r4, #0]
 80027ee:	4401      	add	r1, r0
 80027f0:	1858      	adds	r0, r3, r1
 80027f2:	4282      	cmp	r2, r0
 80027f4:	6019      	str	r1, [r3, #0]
 80027f6:	d1dd      	bne.n	80027b4 <_free_r+0x24>
 80027f8:	6810      	ldr	r0, [r2, #0]
 80027fa:	6852      	ldr	r2, [r2, #4]
 80027fc:	605a      	str	r2, [r3, #4]
 80027fe:	4401      	add	r1, r0
 8002800:	6019      	str	r1, [r3, #0]
 8002802:	e7d7      	b.n	80027b4 <_free_r+0x24>
 8002804:	d902      	bls.n	800280c <_free_r+0x7c>
 8002806:	230c      	movs	r3, #12
 8002808:	602b      	str	r3, [r5, #0]
 800280a:	e7d3      	b.n	80027b4 <_free_r+0x24>
 800280c:	6820      	ldr	r0, [r4, #0]
 800280e:	1821      	adds	r1, r4, r0
 8002810:	428a      	cmp	r2, r1
 8002812:	bf04      	itt	eq
 8002814:	6811      	ldreq	r1, [r2, #0]
 8002816:	6852      	ldreq	r2, [r2, #4]
 8002818:	6062      	str	r2, [r4, #4]
 800281a:	bf04      	itt	eq
 800281c:	1809      	addeq	r1, r1, r0
 800281e:	6021      	streq	r1, [r4, #0]
 8002820:	605c      	str	r4, [r3, #4]
 8002822:	e7c7      	b.n	80027b4 <_free_r+0x24>
 8002824:	bd38      	pop	{r3, r4, r5, pc}
 8002826:	bf00      	nop
 8002828:	200000a8 	.word	0x200000a8

0800282c <_malloc_r>:
 800282c:	b570      	push	{r4, r5, r6, lr}
 800282e:	1ccd      	adds	r5, r1, #3
 8002830:	f025 0503 	bic.w	r5, r5, #3
 8002834:	3508      	adds	r5, #8
 8002836:	2d0c      	cmp	r5, #12
 8002838:	bf38      	it	cc
 800283a:	250c      	movcc	r5, #12
 800283c:	2d00      	cmp	r5, #0
 800283e:	4606      	mov	r6, r0
 8002840:	db01      	blt.n	8002846 <_malloc_r+0x1a>
 8002842:	42a9      	cmp	r1, r5
 8002844:	d903      	bls.n	800284e <_malloc_r+0x22>
 8002846:	230c      	movs	r3, #12
 8002848:	6033      	str	r3, [r6, #0]
 800284a:	2000      	movs	r0, #0
 800284c:	bd70      	pop	{r4, r5, r6, pc}
 800284e:	f000 f881 	bl	8002954 <__malloc_lock>
 8002852:	4a23      	ldr	r2, [pc, #140]	; (80028e0 <_malloc_r+0xb4>)
 8002854:	6814      	ldr	r4, [r2, #0]
 8002856:	4621      	mov	r1, r4
 8002858:	b991      	cbnz	r1, 8002880 <_malloc_r+0x54>
 800285a:	4c22      	ldr	r4, [pc, #136]	; (80028e4 <_malloc_r+0xb8>)
 800285c:	6823      	ldr	r3, [r4, #0]
 800285e:	b91b      	cbnz	r3, 8002868 <_malloc_r+0x3c>
 8002860:	4630      	mov	r0, r6
 8002862:	f000 f867 	bl	8002934 <_sbrk_r>
 8002866:	6020      	str	r0, [r4, #0]
 8002868:	4629      	mov	r1, r5
 800286a:	4630      	mov	r0, r6
 800286c:	f000 f862 	bl	8002934 <_sbrk_r>
 8002870:	1c43      	adds	r3, r0, #1
 8002872:	d126      	bne.n	80028c2 <_malloc_r+0x96>
 8002874:	230c      	movs	r3, #12
 8002876:	6033      	str	r3, [r6, #0]
 8002878:	4630      	mov	r0, r6
 800287a:	f000 f86c 	bl	8002956 <__malloc_unlock>
 800287e:	e7e4      	b.n	800284a <_malloc_r+0x1e>
 8002880:	680b      	ldr	r3, [r1, #0]
 8002882:	1b5b      	subs	r3, r3, r5
 8002884:	d41a      	bmi.n	80028bc <_malloc_r+0x90>
 8002886:	2b0b      	cmp	r3, #11
 8002888:	d90f      	bls.n	80028aa <_malloc_r+0x7e>
 800288a:	600b      	str	r3, [r1, #0]
 800288c:	50cd      	str	r5, [r1, r3]
 800288e:	18cc      	adds	r4, r1, r3
 8002890:	4630      	mov	r0, r6
 8002892:	f000 f860 	bl	8002956 <__malloc_unlock>
 8002896:	f104 000b 	add.w	r0, r4, #11
 800289a:	1d23      	adds	r3, r4, #4
 800289c:	f020 0007 	bic.w	r0, r0, #7
 80028a0:	1ac3      	subs	r3, r0, r3
 80028a2:	d01b      	beq.n	80028dc <_malloc_r+0xb0>
 80028a4:	425a      	negs	r2, r3
 80028a6:	50e2      	str	r2, [r4, r3]
 80028a8:	bd70      	pop	{r4, r5, r6, pc}
 80028aa:	428c      	cmp	r4, r1
 80028ac:	bf0d      	iteet	eq
 80028ae:	6863      	ldreq	r3, [r4, #4]
 80028b0:	684b      	ldrne	r3, [r1, #4]
 80028b2:	6063      	strne	r3, [r4, #4]
 80028b4:	6013      	streq	r3, [r2, #0]
 80028b6:	bf18      	it	ne
 80028b8:	460c      	movne	r4, r1
 80028ba:	e7e9      	b.n	8002890 <_malloc_r+0x64>
 80028bc:	460c      	mov	r4, r1
 80028be:	6849      	ldr	r1, [r1, #4]
 80028c0:	e7ca      	b.n	8002858 <_malloc_r+0x2c>
 80028c2:	1cc4      	adds	r4, r0, #3
 80028c4:	f024 0403 	bic.w	r4, r4, #3
 80028c8:	42a0      	cmp	r0, r4
 80028ca:	d005      	beq.n	80028d8 <_malloc_r+0xac>
 80028cc:	1a21      	subs	r1, r4, r0
 80028ce:	4630      	mov	r0, r6
 80028d0:	f000 f830 	bl	8002934 <_sbrk_r>
 80028d4:	3001      	adds	r0, #1
 80028d6:	d0cd      	beq.n	8002874 <_malloc_r+0x48>
 80028d8:	6025      	str	r5, [r4, #0]
 80028da:	e7d9      	b.n	8002890 <_malloc_r+0x64>
 80028dc:	bd70      	pop	{r4, r5, r6, pc}
 80028de:	bf00      	nop
 80028e0:	200000a8 	.word	0x200000a8
 80028e4:	200000ac 	.word	0x200000ac

080028e8 <_realloc_r>:
 80028e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ea:	4607      	mov	r7, r0
 80028ec:	4614      	mov	r4, r2
 80028ee:	460e      	mov	r6, r1
 80028f0:	b921      	cbnz	r1, 80028fc <_realloc_r+0x14>
 80028f2:	4611      	mov	r1, r2
 80028f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80028f8:	f7ff bf98 	b.w	800282c <_malloc_r>
 80028fc:	b922      	cbnz	r2, 8002908 <_realloc_r+0x20>
 80028fe:	f7ff ff47 	bl	8002790 <_free_r>
 8002902:	4625      	mov	r5, r4
 8002904:	4628      	mov	r0, r5
 8002906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002908:	f000 f826 	bl	8002958 <_malloc_usable_size_r>
 800290c:	4284      	cmp	r4, r0
 800290e:	d90f      	bls.n	8002930 <_realloc_r+0x48>
 8002910:	4621      	mov	r1, r4
 8002912:	4638      	mov	r0, r7
 8002914:	f7ff ff8a 	bl	800282c <_malloc_r>
 8002918:	4605      	mov	r5, r0
 800291a:	2800      	cmp	r0, #0
 800291c:	d0f2      	beq.n	8002904 <_realloc_r+0x1c>
 800291e:	4631      	mov	r1, r6
 8002920:	4622      	mov	r2, r4
 8002922:	f7ff ff0f 	bl	8002744 <memcpy>
 8002926:	4631      	mov	r1, r6
 8002928:	4638      	mov	r0, r7
 800292a:	f7ff ff31 	bl	8002790 <_free_r>
 800292e:	e7e9      	b.n	8002904 <_realloc_r+0x1c>
 8002930:	4635      	mov	r5, r6
 8002932:	e7e7      	b.n	8002904 <_realloc_r+0x1c>

08002934 <_sbrk_r>:
 8002934:	b538      	push	{r3, r4, r5, lr}
 8002936:	4c06      	ldr	r4, [pc, #24]	; (8002950 <_sbrk_r+0x1c>)
 8002938:	2300      	movs	r3, #0
 800293a:	4605      	mov	r5, r0
 800293c:	4608      	mov	r0, r1
 800293e:	6023      	str	r3, [r4, #0]
 8002940:	f000 f814 	bl	800296c <_sbrk>
 8002944:	1c43      	adds	r3, r0, #1
 8002946:	d102      	bne.n	800294e <_sbrk_r+0x1a>
 8002948:	6823      	ldr	r3, [r4, #0]
 800294a:	b103      	cbz	r3, 800294e <_sbrk_r+0x1a>
 800294c:	602b      	str	r3, [r5, #0]
 800294e:	bd38      	pop	{r3, r4, r5, pc}
 8002950:	20000104 	.word	0x20000104

08002954 <__malloc_lock>:
 8002954:	4770      	bx	lr

08002956 <__malloc_unlock>:
 8002956:	4770      	bx	lr

08002958 <_malloc_usable_size_r>:
 8002958:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800295c:	2800      	cmp	r0, #0
 800295e:	f1a0 0004 	sub.w	r0, r0, #4
 8002962:	bfbc      	itt	lt
 8002964:	580b      	ldrlt	r3, [r1, r0]
 8002966:	18c0      	addlt	r0, r0, r3
 8002968:	4770      	bx	lr
	...

0800296c <_sbrk>:
 800296c:	4b04      	ldr	r3, [pc, #16]	; (8002980 <_sbrk+0x14>)
 800296e:	6819      	ldr	r1, [r3, #0]
 8002970:	4602      	mov	r2, r0
 8002972:	b909      	cbnz	r1, 8002978 <_sbrk+0xc>
 8002974:	4903      	ldr	r1, [pc, #12]	; (8002984 <_sbrk+0x18>)
 8002976:	6019      	str	r1, [r3, #0]
 8002978:	6818      	ldr	r0, [r3, #0]
 800297a:	4402      	add	r2, r0
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	4770      	bx	lr
 8002980:	200000b0 	.word	0x200000b0
 8002984:	20000108 	.word	0x20000108

08002988 <_init>:
 8002988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800298a:	bf00      	nop
 800298c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800298e:	bc08      	pop	{r3}
 8002990:	469e      	mov	lr, r3
 8002992:	4770      	bx	lr

08002994 <_fini>:
 8002994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002996:	bf00      	nop
 8002998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800299a:	bc08      	pop	{r3}
 800299c:	469e      	mov	lr, r3
 800299e:	4770      	bx	lr
