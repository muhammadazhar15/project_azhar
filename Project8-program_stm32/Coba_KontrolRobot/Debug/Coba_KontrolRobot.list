
Coba_KontrolRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800543c  0800543c  0001543c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800588c  0800588c  0001588c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005894  08005894  00015894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005898  08005898  00015898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  0800589c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
  8 .bss          00000444  20000074  20000074  00020074  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200004b8  200004b8  00020074  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 11 .debug_info   00016681  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002687  00000000  00000000  00036725  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00006fbe  00000000  00000000  00038dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009a0  00000000  00000000  0003fd70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d40  00000000  00000000  00040710  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00005688  00000000  00000000  00041450  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00003d53  00000000  00000000  00046ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0004a82b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002454  00000000  00000000  0004a8a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005424 	.word	0x08005424

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005424 	.word	0x08005424

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f092 0f00 	teq	r2, #0
 800055a:	bf14      	ite	ne
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800056c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000570:	e720      	b.n	80003b4 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_ul2d>:
 8000574:	ea50 0201 	orrs.w	r2, r0, r1
 8000578:	bf08      	it	eq
 800057a:	4770      	bxeq	lr
 800057c:	b530      	push	{r4, r5, lr}
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	e00a      	b.n	800059a <__aeabi_l2d+0x16>

08000584 <__aeabi_l2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000592:	d502      	bpl.n	800059a <__aeabi_l2d+0x16>
 8000594:	4240      	negs	r0, r0
 8000596:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800059a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a6:	f43f aedc 	beq.w	8000362 <__adddf3+0xe6>
 80005aa:	f04f 0203 	mov.w	r2, #3
 80005ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b2:	bf18      	it	ne
 80005b4:	3203      	addne	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005c2:	f1c2 0320 	rsb	r3, r2, #32
 80005c6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ca:	fa20 f002 	lsr.w	r0, r0, r2
 80005ce:	fa01 fe03 	lsl.w	lr, r1, r3
 80005d2:	ea40 000e 	orr.w	r0, r0, lr
 80005d6:	fa21 f102 	lsr.w	r1, r1, r2
 80005da:	4414      	add	r4, r2
 80005dc:	e6c1      	b.n	8000362 <__adddf3+0xe6>
 80005de:	bf00      	nop

080005e0 <__aeabi_dmul>:
 80005e0:	b570      	push	{r4, r5, r6, lr}
 80005e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ee:	bf1d      	ittte	ne
 80005f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f4:	ea94 0f0c 	teqne	r4, ip
 80005f8:	ea95 0f0c 	teqne	r5, ip
 80005fc:	f000 f8de 	bleq	80007bc <__aeabi_dmul+0x1dc>
 8000600:	442c      	add	r4, r5
 8000602:	ea81 0603 	eor.w	r6, r1, r3
 8000606:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800060a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000612:	bf18      	it	ne
 8000614:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000620:	d038      	beq.n	8000694 <__aeabi_dmul+0xb4>
 8000622:	fba0 ce02 	umull	ip, lr, r0, r2
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000632:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000636:	f04f 0600 	mov.w	r6, #0
 800063a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063e:	f09c 0f00 	teq	ip, #0
 8000642:	bf18      	it	ne
 8000644:	f04e 0e01 	orrne.w	lr, lr, #1
 8000648:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800064c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000650:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000654:	d204      	bcs.n	8000660 <__aeabi_dmul+0x80>
 8000656:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800065a:	416d      	adcs	r5, r5
 800065c:	eb46 0606 	adc.w	r6, r6, r6
 8000660:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000664:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000668:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800066c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000670:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000674:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000678:	bf88      	it	hi
 800067a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067e:	d81e      	bhi.n	80006be <__aeabi_dmul+0xde>
 8000680:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000684:	bf08      	it	eq
 8000686:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800068a:	f150 0000 	adcs.w	r0, r0, #0
 800068e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000698:	ea46 0101 	orr.w	r1, r6, r1
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	ea81 0103 	eor.w	r1, r1, r3
 80006a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a8:	bfc2      	ittt	gt
 80006aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	popgt	{r4, r5, r6, pc}
 80006b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b8:	f04f 0e00 	mov.w	lr, #0
 80006bc:	3c01      	subs	r4, #1
 80006be:	f300 80ab 	bgt.w	8000818 <__aeabi_dmul+0x238>
 80006c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c6:	bfde      	ittt	le
 80006c8:	2000      	movle	r0, #0
 80006ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ce:	bd70      	pople	{r4, r5, r6, pc}
 80006d0:	f1c4 0400 	rsb	r4, r4, #0
 80006d4:	3c20      	subs	r4, #32
 80006d6:	da35      	bge.n	8000744 <__aeabi_dmul+0x164>
 80006d8:	340c      	adds	r4, #12
 80006da:	dc1b      	bgt.n	8000714 <__aeabi_dmul+0x134>
 80006dc:	f104 0414 	add.w	r4, r4, #20
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f305 	lsl.w	r3, r0, r5
 80006e8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000700:	fa21 f604 	lsr.w	r6, r1, r4
 8000704:	eb42 0106 	adc.w	r1, r2, r6
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 040c 	rsb	r4, r4, #12
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f304 	lsl.w	r3, r0, r4
 8000720:	fa20 f005 	lsr.w	r0, r0, r5
 8000724:	fa01 f204 	lsl.w	r2, r1, r4
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000730:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000734:	f141 0100 	adc.w	r1, r1, #0
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f205 	lsl.w	r2, r0, r5
 800074c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000750:	fa20 f304 	lsr.w	r3, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea43 0302 	orr.w	r3, r3, r2
 800075c:	fa21 f004 	lsr.w	r0, r1, r4
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	fa21 f204 	lsr.w	r2, r1, r4
 8000768:	ea20 0002 	bic.w	r0, r0, r2
 800076c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f094 0f00 	teq	r4, #0
 8000780:	d10f      	bne.n	80007a2 <__aeabi_dmul+0x1c2>
 8000782:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000786:	0040      	lsls	r0, r0, #1
 8000788:	eb41 0101 	adc.w	r1, r1, r1
 800078c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000790:	bf08      	it	eq
 8000792:	3c01      	subeq	r4, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1a6>
 8000796:	ea41 0106 	orr.w	r1, r1, r6
 800079a:	f095 0f00 	teq	r5, #0
 800079e:	bf18      	it	ne
 80007a0:	4770      	bxne	lr
 80007a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a6:	0052      	lsls	r2, r2, #1
 80007a8:	eb43 0303 	adc.w	r3, r3, r3
 80007ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3d01      	subeq	r5, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1c6>
 80007b6:	ea43 0306 	orr.w	r3, r3, r6
 80007ba:	4770      	bx	lr
 80007bc:	ea94 0f0c 	teq	r4, ip
 80007c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c4:	bf18      	it	ne
 80007c6:	ea95 0f0c 	teqne	r5, ip
 80007ca:	d00c      	beq.n	80007e6 <__aeabi_dmul+0x206>
 80007cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d0:	bf18      	it	ne
 80007d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d6:	d1d1      	bne.n	800077c <__aeabi_dmul+0x19c>
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	f04f 0000 	mov.w	r0, #0
 80007e4:	bd70      	pop	{r4, r5, r6, pc}
 80007e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ea:	bf06      	itte	eq
 80007ec:	4610      	moveq	r0, r2
 80007ee:	4619      	moveq	r1, r3
 80007f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f4:	d019      	beq.n	800082a <__aeabi_dmul+0x24a>
 80007f6:	ea94 0f0c 	teq	r4, ip
 80007fa:	d102      	bne.n	8000802 <__aeabi_dmul+0x222>
 80007fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000800:	d113      	bne.n	800082a <__aeabi_dmul+0x24a>
 8000802:	ea95 0f0c 	teq	r5, ip
 8000806:	d105      	bne.n	8000814 <__aeabi_dmul+0x234>
 8000808:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800080c:	bf1c      	itt	ne
 800080e:	4610      	movne	r0, r2
 8000810:	4619      	movne	r1, r3
 8000812:	d10a      	bne.n	800082a <__aeabi_dmul+0x24a>
 8000814:	ea81 0103 	eor.w	r1, r1, r3
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800081c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000820:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000824:	f04f 0000 	mov.w	r0, #0
 8000828:	bd70      	pop	{r4, r5, r6, pc}
 800082a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000832:	bd70      	pop	{r4, r5, r6, pc}

08000834 <__aeabi_ddiv>:
 8000834:	b570      	push	{r4, r5, r6, lr}
 8000836:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800083a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000842:	bf1d      	ittte	ne
 8000844:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000848:	ea94 0f0c 	teqne	r4, ip
 800084c:	ea95 0f0c 	teqne	r5, ip
 8000850:	f000 f8a7 	bleq	80009a2 <__aeabi_ddiv+0x16e>
 8000854:	eba4 0405 	sub.w	r4, r4, r5
 8000858:	ea81 0e03 	eor.w	lr, r1, r3
 800085c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000860:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000864:	f000 8088 	beq.w	8000978 <__aeabi_ddiv+0x144>
 8000868:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800086c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000870:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000874:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000878:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800087c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000880:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000884:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000888:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800088c:	429d      	cmp	r5, r3
 800088e:	bf08      	it	eq
 8000890:	4296      	cmpeq	r6, r2
 8000892:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000896:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800089a:	d202      	bcs.n	80008a2 <__aeabi_ddiv+0x6e>
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a2:	1ab6      	subs	r6, r6, r2
 80008a4:	eb65 0503 	sbc.w	r5, r5, r3
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000910:	ea55 0e06 	orrs.w	lr, r5, r6
 8000914:	d018      	beq.n	8000948 <__aeabi_ddiv+0x114>
 8000916:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800091a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000922:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000926:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800092a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000932:	d1c0      	bne.n	80008b6 <__aeabi_ddiv+0x82>
 8000934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000938:	d10b      	bne.n	8000952 <__aeabi_ddiv+0x11e>
 800093a:	ea41 0100 	orr.w	r1, r1, r0
 800093e:	f04f 0000 	mov.w	r0, #0
 8000942:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000946:	e7b6      	b.n	80008b6 <__aeabi_ddiv+0x82>
 8000948:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800094c:	bf04      	itt	eq
 800094e:	4301      	orreq	r1, r0
 8000950:	2000      	moveq	r0, #0
 8000952:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000956:	bf88      	it	hi
 8000958:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800095c:	f63f aeaf 	bhi.w	80006be <__aeabi_dmul+0xde>
 8000960:	ebb5 0c03 	subs.w	ip, r5, r3
 8000964:	bf04      	itt	eq
 8000966:	ebb6 0c02 	subseq.w	ip, r6, r2
 800096a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096e:	f150 0000 	adcs.w	r0, r0, #0
 8000972:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000976:	bd70      	pop	{r4, r5, r6, pc}
 8000978:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800097c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000980:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000984:	bfc2      	ittt	gt
 8000986:	ebd4 050c 	rsbsgt	r5, r4, ip
 800098a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098e:	bd70      	popgt	{r4, r5, r6, pc}
 8000990:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000994:	f04f 0e00 	mov.w	lr, #0
 8000998:	3c01      	subs	r4, #1
 800099a:	e690      	b.n	80006be <__aeabi_dmul+0xde>
 800099c:	ea45 0e06 	orr.w	lr, r5, r6
 80009a0:	e68d      	b.n	80006be <__aeabi_dmul+0xde>
 80009a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a6:	ea94 0f0c 	teq	r4, ip
 80009aa:	bf08      	it	eq
 80009ac:	ea95 0f0c 	teqeq	r5, ip
 80009b0:	f43f af3b 	beq.w	800082a <__aeabi_dmul+0x24a>
 80009b4:	ea94 0f0c 	teq	r4, ip
 80009b8:	d10a      	bne.n	80009d0 <__aeabi_ddiv+0x19c>
 80009ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009be:	f47f af34 	bne.w	800082a <__aeabi_dmul+0x24a>
 80009c2:	ea95 0f0c 	teq	r5, ip
 80009c6:	f47f af25 	bne.w	8000814 <__aeabi_dmul+0x234>
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	e72c      	b.n	800082a <__aeabi_dmul+0x24a>
 80009d0:	ea95 0f0c 	teq	r5, ip
 80009d4:	d106      	bne.n	80009e4 <__aeabi_ddiv+0x1b0>
 80009d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009da:	f43f aefd 	beq.w	80007d8 <__aeabi_dmul+0x1f8>
 80009de:	4610      	mov	r0, r2
 80009e0:	4619      	mov	r1, r3
 80009e2:	e722      	b.n	800082a <__aeabi_dmul+0x24a>
 80009e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ee:	f47f aec5 	bne.w	800077c <__aeabi_dmul+0x19c>
 80009f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f6:	f47f af0d 	bne.w	8000814 <__aeabi_dmul+0x234>
 80009fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fe:	f47f aeeb 	bne.w	80007d8 <__aeabi_dmul+0x1f8>
 8000a02:	e712      	b.n	800082a <__aeabi_dmul+0x24a>

08000a04 <__gedf2>:
 8000a04:	f04f 3cff 	mov.w	ip, #4294967295
 8000a08:	e006      	b.n	8000a18 <__cmpdf2+0x4>
 8000a0a:	bf00      	nop

08000a0c <__ledf2>:
 8000a0c:	f04f 0c01 	mov.w	ip, #1
 8000a10:	e002      	b.n	8000a18 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__cmpdf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a2e:	d01b      	beq.n	8000a68 <__cmpdf2+0x54>
 8000a30:	b001      	add	sp, #4
 8000a32:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a36:	bf0c      	ite	eq
 8000a38:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a3c:	ea91 0f03 	teqne	r1, r3
 8000a40:	bf02      	ittt	eq
 8000a42:	ea90 0f02 	teqeq	r0, r2
 8000a46:	2000      	moveq	r0, #0
 8000a48:	4770      	bxeq	lr
 8000a4a:	f110 0f00 	cmn.w	r0, #0
 8000a4e:	ea91 0f03 	teq	r1, r3
 8000a52:	bf58      	it	pl
 8000a54:	4299      	cmppl	r1, r3
 8000a56:	bf08      	it	eq
 8000a58:	4290      	cmpeq	r0, r2
 8000a5a:	bf2c      	ite	cs
 8000a5c:	17d8      	asrcs	r0, r3, #31
 8000a5e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a62:	f040 0001 	orr.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a70:	d102      	bne.n	8000a78 <__cmpdf2+0x64>
 8000a72:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a76:	d107      	bne.n	8000a88 <__cmpdf2+0x74>
 8000a78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d1d6      	bne.n	8000a30 <__cmpdf2+0x1c>
 8000a82:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a86:	d0d3      	beq.n	8000a30 <__cmpdf2+0x1c>
 8000a88:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop

08000a90 <__aeabi_cdrcmple>:
 8000a90:	4684      	mov	ip, r0
 8000a92:	4610      	mov	r0, r2
 8000a94:	4662      	mov	r2, ip
 8000a96:	468c      	mov	ip, r1
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4663      	mov	r3, ip
 8000a9c:	e000      	b.n	8000aa0 <__aeabi_cdcmpeq>
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdcmpeq>:
 8000aa0:	b501      	push	{r0, lr}
 8000aa2:	f7ff ffb7 	bl	8000a14 <__cmpdf2>
 8000aa6:	2800      	cmp	r0, #0
 8000aa8:	bf48      	it	mi
 8000aaa:	f110 0f00 	cmnmi.w	r0, #0
 8000aae:	bd01      	pop	{r0, pc}

08000ab0 <__aeabi_dcmpeq>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff fff4 	bl	8000aa0 <__aeabi_cdcmpeq>
 8000ab8:	bf0c      	ite	eq
 8000aba:	2001      	moveq	r0, #1
 8000abc:	2000      	movne	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmplt>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffea 	bl	8000aa0 <__aeabi_cdcmpeq>
 8000acc:	bf34      	ite	cc
 8000ace:	2001      	movcc	r0, #1
 8000ad0:	2000      	movcs	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmple>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffe0 	bl	8000aa0 <__aeabi_cdcmpeq>
 8000ae0:	bf94      	ite	ls
 8000ae2:	2001      	movls	r0, #1
 8000ae4:	2000      	movhi	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpge>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffce 	bl	8000a90 <__aeabi_cdrcmple>
 8000af4:	bf94      	ite	ls
 8000af6:	2001      	movls	r0, #1
 8000af8:	2000      	movhi	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmpgt>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffc4 	bl	8000a90 <__aeabi_cdrcmple>
 8000b08:	bf34      	ite	cc
 8000b0a:	2001      	movcc	r0, #1
 8000b0c:	2000      	movcs	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc8:	f000 b97a 	b.w	8000ec0 <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be8:	468c      	mov	ip, r1
 8000bea:	460d      	mov	r5, r1
 8000bec:	4604      	mov	r4, r0
 8000bee:	9e08      	ldr	r6, [sp, #32]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d151      	bne.n	8000c98 <__udivmoddi4+0xb4>
 8000bf4:	428a      	cmp	r2, r1
 8000bf6:	4617      	mov	r7, r2
 8000bf8:	d96d      	bls.n	8000cd6 <__udivmoddi4+0xf2>
 8000bfa:	fab2 fe82 	clz	lr, r2
 8000bfe:	f1be 0f00 	cmp.w	lr, #0
 8000c02:	d00b      	beq.n	8000c1c <__udivmoddi4+0x38>
 8000c04:	f1ce 0c20 	rsb	ip, lr, #32
 8000c08:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c0c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c10:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c14:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c18:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c1c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c20:	0c25      	lsrs	r5, r4, #16
 8000c22:	fbbc f8fa 	udiv	r8, ip, sl
 8000c26:	fa1f f987 	uxth.w	r9, r7
 8000c2a:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c2e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c32:	fb08 f309 	mul.w	r3, r8, r9
 8000c36:	42ab      	cmp	r3, r5
 8000c38:	d90a      	bls.n	8000c50 <__udivmoddi4+0x6c>
 8000c3a:	19ed      	adds	r5, r5, r7
 8000c3c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c40:	f080 8123 	bcs.w	8000e8a <__udivmoddi4+0x2a6>
 8000c44:	42ab      	cmp	r3, r5
 8000c46:	f240 8120 	bls.w	8000e8a <__udivmoddi4+0x2a6>
 8000c4a:	f1a8 0802 	sub.w	r8, r8, #2
 8000c4e:	443d      	add	r5, r7
 8000c50:	1aed      	subs	r5, r5, r3
 8000c52:	b2a4      	uxth	r4, r4
 8000c54:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c58:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c60:	fb00 f909 	mul.w	r9, r0, r9
 8000c64:	45a1      	cmp	r9, r4
 8000c66:	d909      	bls.n	8000c7c <__udivmoddi4+0x98>
 8000c68:	19e4      	adds	r4, r4, r7
 8000c6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6e:	f080 810a 	bcs.w	8000e86 <__udivmoddi4+0x2a2>
 8000c72:	45a1      	cmp	r9, r4
 8000c74:	f240 8107 	bls.w	8000e86 <__udivmoddi4+0x2a2>
 8000c78:	3802      	subs	r0, #2
 8000c7a:	443c      	add	r4, r7
 8000c7c:	eba4 0409 	sub.w	r4, r4, r9
 8000c80:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c84:	2100      	movs	r1, #0
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d061      	beq.n	8000d4e <__udivmoddi4+0x16a>
 8000c8a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c8e:	2300      	movs	r3, #0
 8000c90:	6034      	str	r4, [r6, #0]
 8000c92:	6073      	str	r3, [r6, #4]
 8000c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d907      	bls.n	8000cac <__udivmoddi4+0xc8>
 8000c9c:	2e00      	cmp	r6, #0
 8000c9e:	d054      	beq.n	8000d4a <__udivmoddi4+0x166>
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	e886 0021 	stmia.w	r6, {r0, r5}
 8000ca6:	4608      	mov	r0, r1
 8000ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cac:	fab3 f183 	clz	r1, r3
 8000cb0:	2900      	cmp	r1, #0
 8000cb2:	f040 808e 	bne.w	8000dd2 <__udivmoddi4+0x1ee>
 8000cb6:	42ab      	cmp	r3, r5
 8000cb8:	d302      	bcc.n	8000cc0 <__udivmoddi4+0xdc>
 8000cba:	4282      	cmp	r2, r0
 8000cbc:	f200 80fa 	bhi.w	8000eb4 <__udivmoddi4+0x2d0>
 8000cc0:	1a84      	subs	r4, r0, r2
 8000cc2:	eb65 0503 	sbc.w	r5, r5, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	46ac      	mov	ip, r5
 8000cca:	2e00      	cmp	r6, #0
 8000ccc:	d03f      	beq.n	8000d4e <__udivmoddi4+0x16a>
 8000cce:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	b912      	cbnz	r2, 8000cde <__udivmoddi4+0xfa>
 8000cd8:	2701      	movs	r7, #1
 8000cda:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cde:	fab7 fe87 	clz	lr, r7
 8000ce2:	f1be 0f00 	cmp.w	lr, #0
 8000ce6:	d134      	bne.n	8000d52 <__udivmoddi4+0x16e>
 8000ce8:	1beb      	subs	r3, r5, r7
 8000cea:	0c3a      	lsrs	r2, r7, #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	fbb3 f8f2 	udiv	r8, r3, r2
 8000cf6:	0c25      	lsrs	r5, r4, #16
 8000cf8:	fb02 3318 	mls	r3, r2, r8, r3
 8000cfc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d00:	fb0c f308 	mul.w	r3, ip, r8
 8000d04:	42ab      	cmp	r3, r5
 8000d06:	d907      	bls.n	8000d18 <__udivmoddi4+0x134>
 8000d08:	19ed      	adds	r5, r5, r7
 8000d0a:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d0e:	d202      	bcs.n	8000d16 <__udivmoddi4+0x132>
 8000d10:	42ab      	cmp	r3, r5
 8000d12:	f200 80d1 	bhi.w	8000eb8 <__udivmoddi4+0x2d4>
 8000d16:	4680      	mov	r8, r0
 8000d18:	1aed      	subs	r5, r5, r3
 8000d1a:	b2a3      	uxth	r3, r4
 8000d1c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d20:	fb02 5510 	mls	r5, r2, r0, r5
 8000d24:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d28:	fb0c fc00 	mul.w	ip, ip, r0
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d907      	bls.n	8000d40 <__udivmoddi4+0x15c>
 8000d30:	19e4      	adds	r4, r4, r7
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x15a>
 8000d38:	45a4      	cmp	ip, r4
 8000d3a:	f200 80b8 	bhi.w	8000eae <__udivmoddi4+0x2ca>
 8000d3e:	4618      	mov	r0, r3
 8000d40:	eba4 040c 	sub.w	r4, r4, ip
 8000d44:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d48:	e79d      	b.n	8000c86 <__udivmoddi4+0xa2>
 8000d4a:	4631      	mov	r1, r6
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	f1ce 0420 	rsb	r4, lr, #32
 8000d56:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d5a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d5e:	fa20 f804 	lsr.w	r8, r0, r4
 8000d62:	0c3a      	lsrs	r2, r7, #16
 8000d64:	fa25 f404 	lsr.w	r4, r5, r4
 8000d68:	ea48 0803 	orr.w	r8, r8, r3
 8000d6c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d70:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d74:	fb02 4411 	mls	r4, r2, r1, r4
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d80:	fb01 f30c 	mul.w	r3, r1, ip
 8000d84:	42ab      	cmp	r3, r5
 8000d86:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d8a:	d909      	bls.n	8000da0 <__udivmoddi4+0x1bc>
 8000d8c:	19ed      	adds	r5, r5, r7
 8000d8e:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d92:	f080 808a 	bcs.w	8000eaa <__udivmoddi4+0x2c6>
 8000d96:	42ab      	cmp	r3, r5
 8000d98:	f240 8087 	bls.w	8000eaa <__udivmoddi4+0x2c6>
 8000d9c:	3902      	subs	r1, #2
 8000d9e:	443d      	add	r5, r7
 8000da0:	1aeb      	subs	r3, r5, r3
 8000da2:	fa1f f588 	uxth.w	r5, r8
 8000da6:	fbb3 f0f2 	udiv	r0, r3, r2
 8000daa:	fb02 3310 	mls	r3, r2, r0, r3
 8000dae:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000db2:	fb00 f30c 	mul.w	r3, r0, ip
 8000db6:	42ab      	cmp	r3, r5
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x1e6>
 8000dba:	19ed      	adds	r5, r5, r7
 8000dbc:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dc0:	d26f      	bcs.n	8000ea2 <__udivmoddi4+0x2be>
 8000dc2:	42ab      	cmp	r3, r5
 8000dc4:	d96d      	bls.n	8000ea2 <__udivmoddi4+0x2be>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	443d      	add	r5, r7
 8000dca:	1aeb      	subs	r3, r5, r3
 8000dcc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dd0:	e78f      	b.n	8000cf2 <__udivmoddi4+0x10e>
 8000dd2:	f1c1 0720 	rsb	r7, r1, #32
 8000dd6:	fa22 f807 	lsr.w	r8, r2, r7
 8000dda:	408b      	lsls	r3, r1
 8000ddc:	fa05 f401 	lsl.w	r4, r5, r1
 8000de0:	ea48 0303 	orr.w	r3, r8, r3
 8000de4:	fa20 fe07 	lsr.w	lr, r0, r7
 8000de8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dec:	40fd      	lsrs	r5, r7
 8000dee:	ea4e 0e04 	orr.w	lr, lr, r4
 8000df2:	fbb5 f9fc 	udiv	r9, r5, ip
 8000df6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000dfa:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dfe:	fa1f f883 	uxth.w	r8, r3
 8000e02:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e06:	fb09 f408 	mul.w	r4, r9, r8
 8000e0a:	42ac      	cmp	r4, r5
 8000e0c:	fa02 f201 	lsl.w	r2, r2, r1
 8000e10:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x244>
 8000e16:	18ed      	adds	r5, r5, r3
 8000e18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e1c:	d243      	bcs.n	8000ea6 <__udivmoddi4+0x2c2>
 8000e1e:	42ac      	cmp	r4, r5
 8000e20:	d941      	bls.n	8000ea6 <__udivmoddi4+0x2c2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	441d      	add	r5, r3
 8000e28:	1b2d      	subs	r5, r5, r4
 8000e2a:	fa1f fe8e 	uxth.w	lr, lr
 8000e2e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e32:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e36:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e3a:	fb00 f808 	mul.w	r8, r0, r8
 8000e3e:	45a0      	cmp	r8, r4
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x26e>
 8000e42:	18e4      	adds	r4, r4, r3
 8000e44:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e48:	d229      	bcs.n	8000e9e <__udivmoddi4+0x2ba>
 8000e4a:	45a0      	cmp	r8, r4
 8000e4c:	d927      	bls.n	8000e9e <__udivmoddi4+0x2ba>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	441c      	add	r4, r3
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	eba4 0408 	sub.w	r4, r4, r8
 8000e5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c6      	mov	lr, r8
 8000e62:	464d      	mov	r5, r9
 8000e64:	d315      	bcc.n	8000e92 <__udivmoddi4+0x2ae>
 8000e66:	d012      	beq.n	8000e8e <__udivmoddi4+0x2aa>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x29c>
 8000e6a:	ebba 030e 	subs.w	r3, sl, lr
 8000e6e:	eb64 0405 	sbc.w	r4, r4, r5
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40cb      	lsrs	r3, r1
 8000e78:	431f      	orrs	r7, r3
 8000e7a:	40cc      	lsrs	r4, r1
 8000e7c:	6037      	str	r7, [r6, #0]
 8000e7e:	6074      	str	r4, [r6, #4]
 8000e80:	2100      	movs	r1, #0
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	4618      	mov	r0, r3
 8000e88:	e6f8      	b.n	8000c7c <__udivmoddi4+0x98>
 8000e8a:	4690      	mov	r8, r2
 8000e8c:	e6e0      	b.n	8000c50 <__udivmoddi4+0x6c>
 8000e8e:	45c2      	cmp	sl, r8
 8000e90:	d2ea      	bcs.n	8000e68 <__udivmoddi4+0x284>
 8000e92:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e96:	eb69 0503 	sbc.w	r5, r9, r3
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7e4      	b.n	8000e68 <__udivmoddi4+0x284>
 8000e9e:	4628      	mov	r0, r5
 8000ea0:	e7d7      	b.n	8000e52 <__udivmoddi4+0x26e>
 8000ea2:	4640      	mov	r0, r8
 8000ea4:	e791      	b.n	8000dca <__udivmoddi4+0x1e6>
 8000ea6:	4681      	mov	r9, r0
 8000ea8:	e7be      	b.n	8000e28 <__udivmoddi4+0x244>
 8000eaa:	4601      	mov	r1, r0
 8000eac:	e778      	b.n	8000da0 <__udivmoddi4+0x1bc>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	443c      	add	r4, r7
 8000eb2:	e745      	b.n	8000d40 <__udivmoddi4+0x15c>
 8000eb4:	4608      	mov	r0, r1
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xe6>
 8000eb8:	f1a8 0802 	sub.w	r8, r8, #2
 8000ebc:	443d      	add	r5, r7
 8000ebe:	e72b      	b.n	8000d18 <__udivmoddi4+0x134>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000ec6:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <HAL_InitTick+0x24>)
{
 8000ec8:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000eca:	6818      	ldr	r0, [r3, #0]
 8000ecc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ed4:	f000 f894 	bl	8001000 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	4621      	mov	r1, r4
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee0:	f000 f84e 	bl	8000f80 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	bd10      	pop	{r4, pc}
 8000ee8:	2000000c 	.word	0x2000000c

08000eec <HAL_Init>:
{
 8000eec:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <HAL_Init+0x30>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ef6:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000efe:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f06:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f000 f827 	bl	8000f5c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f7ff ffd8 	bl	8000ec4 <HAL_InitTick>
  HAL_MspInit();
 8000f14:	f002 fe6d 	bl	8003bf2 <HAL_MspInit>
}
 8000f18:	2000      	movs	r0, #0
 8000f1a:	bd08      	pop	{r3, pc}
 8000f1c:	40023c00 	.word	0x40023c00

08000f20 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000f20:	4a02      	ldr	r2, [pc, #8]	; (8000f2c <HAL_IncTick+0xc>)
 8000f22:	6813      	ldr	r3, [r2, #0]
 8000f24:	3301      	adds	r3, #1
 8000f26:	6013      	str	r3, [r2, #0]
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	200000a8 	.word	0x200000a8

08000f30 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f30:	4b01      	ldr	r3, [pc, #4]	; (8000f38 <HAL_GetTick+0x8>)
 8000f32:	6818      	ldr	r0, [r3, #0]
}
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	200000a8 	.word	0x200000a8

08000f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000f3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000f3e:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f40:	f7ff fff6 	bl	8000f30 <HAL_GetTick>
  uint32_t wait = Delay;
 8000f44:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f46:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000f48:	4605      	mov	r5, r0
  {
     wait++;
 8000f4a:	bf18      	it	ne
 8000f4c:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f4e:	f7ff ffef 	bl	8000f30 <HAL_GetTick>
 8000f52:	1b40      	subs	r0, r0, r5
 8000f54:	42a0      	cmp	r0, r4
 8000f56:	d3fa      	bcc.n	8000f4e <HAL_Delay+0x12>
  {
  }
}
 8000f58:	b003      	add	sp, #12
 8000f5a:	bd30      	pop	{r4, r5, pc}

08000f5c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f5c:	4a07      	ldr	r2, [pc, #28]	; (8000f7c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f5e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f60:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f64:	041b      	lsls	r3, r3, #16
 8000f66:	0c1b      	lsrs	r3, r3, #16
 8000f68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000f6c:	0200      	lsls	r0, r0, #8
 8000f6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f72:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000f76:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000f78:	60d3      	str	r3, [r2, #12]
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f80:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f82:	b530      	push	{r4, r5, lr}
 8000f84:	68dc      	ldr	r4, [r3, #12]
 8000f86:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f8a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f90:	2b04      	cmp	r3, #4
 8000f92:	bf28      	it	cs
 8000f94:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f96:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	f04f 0501 	mov.w	r5, #1
 8000f9c:	fa05 f303 	lsl.w	r3, r5, r3
 8000fa0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa4:	bf8c      	ite	hi
 8000fa6:	3c03      	subhi	r4, #3
 8000fa8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000faa:	4019      	ands	r1, r3
 8000fac:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fae:	fa05 f404 	lsl.w	r4, r5, r4
 8000fb2:	3c01      	subs	r4, #1
 8000fb4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000fb6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	ea42 0201 	orr.w	r2, r2, r1
 8000fbc:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc0:	bfaf      	iteee	ge
 8000fc2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc6:	f000 000f 	andlt.w	r0, r0, #15
 8000fca:	4b06      	ldrlt	r3, [pc, #24]	; (8000fe4 <HAL_NVIC_SetPriority+0x64>)
 8000fcc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fce:	bfa5      	ittet	ge
 8000fd0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000fd4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000fdc:	bd30      	pop	{r4, r5, pc}
 8000fde:	bf00      	nop
 8000fe0:	e000ed00 	.word	0xe000ed00
 8000fe4:	e000ed14 	.word	0xe000ed14

08000fe8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000fe8:	0942      	lsrs	r2, r0, #5
 8000fea:	2301      	movs	r3, #1
 8000fec:	f000 001f 	and.w	r0, r0, #31
 8000ff0:	fa03 f000 	lsl.w	r0, r3, r0
 8000ff4:	4b01      	ldr	r3, [pc, #4]	; (8000ffc <HAL_NVIC_EnableIRQ+0x14>)
 8000ff6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000ffa:	4770      	bx	lr
 8000ffc:	e000e100 	.word	0xe000e100

08001000 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001000:	3801      	subs	r0, #1
 8001002:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001006:	d20a      	bcs.n	800101e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100a:	4a07      	ldr	r2, [pc, #28]	; (8001028 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800100c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100e:	21f0      	movs	r1, #240	; 0xf0
 8001010:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001014:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001016:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001018:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800101e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000e010 	.word	0xe000e010
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800102e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001030:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001032:	bf0c      	ite	eq
 8001034:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001038:	f022 0204 	bicne.w	r2, r2, #4
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	4770      	bx	lr
 8001040:	e000e010 	.word	0xe000e010

08001044 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001044:	4770      	bx	lr

08001046 <HAL_SYSTICK_IRQHandler>:
{
 8001046:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001048:	f7ff fffc 	bl	8001044 <HAL_SYSTICK_Callback>
 800104c:	bd08      	pop	{r3, pc}
	...

08001050 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001050:	6803      	ldr	r3, [r0, #0]
 8001052:	b2da      	uxtb	r2, r3
 8001054:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001058:	f023 0303 	bic.w	r3, r3, #3
 800105c:	2118      	movs	r1, #24
 800105e:	3a10      	subs	r2, #16
 8001060:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001064:	4904      	ldr	r1, [pc, #16]	; (8001078 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8001066:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001068:	bf88      	it	hi
 800106a:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800106c:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800106e:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001070:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8001072:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	0800543c 	.word	0x0800543c

0800107c <HAL_DMA_Init>:
{
 800107c:	b570      	push	{r4, r5, r6, lr}
 800107e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001080:	f7ff ff56 	bl	8000f30 <HAL_GetTick>
 8001084:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001086:	2c00      	cmp	r4, #0
 8001088:	d071      	beq.n	800116e <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 800108a:	2300      	movs	r3, #0
 800108c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001090:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8001092:	2302      	movs	r3, #2
 8001094:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001098:	6813      	ldr	r3, [r2, #0]
 800109a:	f023 0301 	bic.w	r3, r3, #1
 800109e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010a0:	6821      	ldr	r1, [r4, #0]
 80010a2:	680b      	ldr	r3, [r1, #0]
 80010a4:	07d8      	lsls	r0, r3, #31
 80010a6:	d43c      	bmi.n	8001122 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 80010a8:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010aa:	4d32      	ldr	r5, [pc, #200]	; (8001174 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010ac:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ae:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010b0:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010b2:	68a3      	ldr	r3, [r4, #8]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	68e2      	ldr	r2, [r4, #12]
 80010b8:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ba:	6922      	ldr	r2, [r4, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	6962      	ldr	r2, [r4, #20]
 80010c0:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010c2:	69e2      	ldr	r2, [r4, #28]
 80010c4:	4303      	orrs	r3, r0
 80010c6:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80010c8:	6a22      	ldr	r2, [r4, #32]
 80010ca:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80010ce:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010d0:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010d4:	bf01      	itttt	eq
 80010d6:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 80010d8:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 80010da:	4335      	orreq	r5, r6
 80010dc:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 80010de:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80010e0:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010e2:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010e4:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80010e8:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010ec:	d10b      	bne.n	8001106 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 80010ee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80010f0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80010f2:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80010f4:	b13d      	cbz	r5, 8001106 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80010f6:	b9f8      	cbnz	r0, 8001138 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 80010f8:	2a01      	cmp	r2, #1
 80010fa:	d02d      	beq.n	8001158 <HAL_DMA_Init+0xdc>
 80010fc:	d301      	bcc.n	8001102 <HAL_DMA_Init+0x86>
 80010fe:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001100:	d101      	bne.n	8001106 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001102:	01ea      	lsls	r2, r5, #7
 8001104:	d42b      	bmi.n	800115e <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8001106:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001108:	4620      	mov	r0, r4
 800110a:	f7ff ffa1 	bl	8001050 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800110e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001110:	233f      	movs	r3, #63	; 0x3f
 8001112:	4093      	lsls	r3, r2
 8001114:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001116:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001118:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800111a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800111c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001120:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001122:	f7ff ff05 	bl	8000f30 <HAL_GetTick>
 8001126:	1b40      	subs	r0, r0, r5
 8001128:	2805      	cmp	r0, #5
 800112a:	d9b9      	bls.n	80010a0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800112c:	2320      	movs	r3, #32
 800112e:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001130:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8001132:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001136:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001138:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800113c:	d113      	bne.n	8001166 <HAL_DMA_Init+0xea>
    switch (tmp)
 800113e:	2a03      	cmp	r2, #3
 8001140:	d8e1      	bhi.n	8001106 <HAL_DMA_Init+0x8a>
 8001142:	a001      	add	r0, pc, #4	; (adr r0, 8001148 <HAL_DMA_Init+0xcc>)
 8001144:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001148:	0800115f 	.word	0x0800115f
 800114c:	08001103 	.word	0x08001103
 8001150:	0800115f 	.word	0x0800115f
 8001154:	08001159 	.word	0x08001159
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001158:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800115c:	d1d3      	bne.n	8001106 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800115e:	2340      	movs	r3, #64	; 0x40
 8001160:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001162:	2001      	movs	r0, #1
 8001164:	e7e5      	b.n	8001132 <HAL_DMA_Init+0xb6>
    switch (tmp)
 8001166:	2a02      	cmp	r2, #2
 8001168:	d9f9      	bls.n	800115e <HAL_DMA_Init+0xe2>
 800116a:	2a03      	cmp	r2, #3
 800116c:	e7c8      	b.n	8001100 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 800116e:	2001      	movs	r0, #1
 8001170:	bd70      	pop	{r4, r5, r6, pc}
 8001172:	bf00      	nop
 8001174:	f010803f 	.word	0xf010803f

08001178 <HAL_DMA_Start_IT>:
{
 8001178:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 800117a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800117e:	2c01      	cmp	r4, #1
 8001180:	d036      	beq.n	80011f0 <HAL_DMA_Start_IT+0x78>
 8001182:	2401      	movs	r4, #1
 8001184:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001188:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800118c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 800118e:	2c01      	cmp	r4, #1
 8001190:	f04f 0500 	mov.w	r5, #0
 8001194:	f04f 0402 	mov.w	r4, #2
 8001198:	d128      	bne.n	80011ec <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 800119a:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800119e:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011a0:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80011a2:	6825      	ldr	r5, [r4, #0]
 80011a4:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80011a8:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80011aa:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011ac:	6883      	ldr	r3, [r0, #8]
 80011ae:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 80011b0:	bf0e      	itee	eq
 80011b2:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80011b4:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80011b6:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011b8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 80011ba:	bf08      	it	eq
 80011bc:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011be:	233f      	movs	r3, #63	; 0x3f
 80011c0:	4093      	lsls	r3, r2
 80011c2:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80011c4:	6823      	ldr	r3, [r4, #0]
 80011c6:	f043 0316 	orr.w	r3, r3, #22
 80011ca:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80011cc:	6963      	ldr	r3, [r4, #20]
 80011ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d2:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80011d4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80011d6:	b11b      	cbz	r3, 80011e0 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 80011d8:	6823      	ldr	r3, [r4, #0]
 80011da:	f043 0308 	orr.w	r3, r3, #8
 80011de:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80011e0:	6823      	ldr	r3, [r4, #0]
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011e8:	2000      	movs	r0, #0
 80011ea:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 80011ec:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 80011f0:	2002      	movs	r0, #2
}
 80011f2:	bd70      	pop	{r4, r5, r6, pc}

080011f4 <HAL_DMA_Abort>:
{
 80011f4:	b570      	push	{r4, r5, r6, lr}
 80011f6:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011f8:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80011fa:	f7ff fe99 	bl	8000f30 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011fe:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001202:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 8001204:	4606      	mov	r6, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001206:	d006      	beq.n	8001216 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800120c:	2300      	movs	r3, #0
 800120e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8001212:	2001      	movs	r0, #1
 8001214:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001216:	6823      	ldr	r3, [r4, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	f022 0216 	bic.w	r2, r2, #22
 800121e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001220:	695a      	ldr	r2, [r3, #20]
 8001222:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001226:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001228:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800122a:	b90a      	cbnz	r2, 8001230 <HAL_DMA_Abort+0x3c>
 800122c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800122e:	b11a      	cbz	r2, 8001238 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	f022 0208 	bic.w	r2, r2, #8
 8001236:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	f022 0201 	bic.w	r2, r2, #1
 800123e:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001240:	6823      	ldr	r3, [r4, #0]
 8001242:	6818      	ldr	r0, [r3, #0]
 8001244:	f010 0001 	ands.w	r0, r0, #1
 8001248:	d109      	bne.n	800125e <HAL_DMA_Abort+0x6a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800124a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800124c:	233f      	movs	r3, #63	; 0x3f
 800124e:	4093      	lsls	r3, r2
 8001250:	60ab      	str	r3, [r5, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8001252:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8001254:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8001258:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800125c:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800125e:	f7ff fe67 	bl	8000f30 <HAL_GetTick>
 8001262:	1b80      	subs	r0, r0, r6
 8001264:	2805      	cmp	r0, #5
 8001266:	d9eb      	bls.n	8001240 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001268:	2320      	movs	r3, #32
 800126a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800126c:	2003      	movs	r0, #3
        __HAL_UNLOCK(hdma);
 800126e:	2300      	movs	r3, #0
 8001270:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001274:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8001278:	bd70      	pop	{r4, r5, r6, pc}

0800127a <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800127a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800127e:	2b02      	cmp	r3, #2
 8001280:	d003      	beq.n	800128a <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001282:	2380      	movs	r3, #128	; 0x80
 8001284:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001286:	2001      	movs	r0, #1
 8001288:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 800128a:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800128c:	2305      	movs	r3, #5
 800128e:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001292:	6813      	ldr	r3, [r2, #0]
 8001294:	f023 0301 	bic.w	r3, r3, #1
 8001298:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800129a:	2000      	movs	r0, #0
}
 800129c:	4770      	bx	lr
	...

080012a0 <HAL_DMA_IRQHandler>:
{
 80012a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80012a6:	4b5a      	ldr	r3, [pc, #360]	; (8001410 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012a8:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80012aa:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012ac:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80012ae:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012b0:	2208      	movs	r2, #8
 80012b2:	409a      	lsls	r2, r3
 80012b4:	4216      	tst	r6, r2
{
 80012b6:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012b8:	d00c      	beq.n	80012d4 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80012ba:	6801      	ldr	r1, [r0, #0]
 80012bc:	6808      	ldr	r0, [r1, #0]
 80012be:	0740      	lsls	r0, r0, #29
 80012c0:	d508      	bpl.n	80012d4 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80012c2:	6808      	ldr	r0, [r1, #0]
 80012c4:	f020 0004 	bic.w	r0, r0, #4
 80012c8:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80012ca:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80012cc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80012ce:	f042 0201 	orr.w	r2, r2, #1
 80012d2:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012d4:	2201      	movs	r2, #1
 80012d6:	409a      	lsls	r2, r3
 80012d8:	4216      	tst	r6, r2
 80012da:	d008      	beq.n	80012ee <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012dc:	6821      	ldr	r1, [r4, #0]
 80012de:	6949      	ldr	r1, [r1, #20]
 80012e0:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80012e2:	bf41      	itttt	mi
 80012e4:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80012e6:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80012e8:	f042 0202 	orrmi.w	r2, r2, #2
 80012ec:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012ee:	2204      	movs	r2, #4
 80012f0:	409a      	lsls	r2, r3
 80012f2:	4216      	tst	r6, r2
 80012f4:	d008      	beq.n	8001308 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012f6:	6821      	ldr	r1, [r4, #0]
 80012f8:	6809      	ldr	r1, [r1, #0]
 80012fa:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80012fc:	bf41      	itttt	mi
 80012fe:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001300:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8001302:	f042 0204 	orrmi.w	r2, r2, #4
 8001306:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001308:	2210      	movs	r2, #16
 800130a:	409a      	lsls	r2, r3
 800130c:	4216      	tst	r6, r2
 800130e:	d010      	beq.n	8001332 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001310:	6823      	ldr	r3, [r4, #0]
 8001312:	6819      	ldr	r1, [r3, #0]
 8001314:	0709      	lsls	r1, r1, #28
 8001316:	d50c      	bpl.n	8001332 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001318:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	0350      	lsls	r0, r2, #13
 800131e:	d535      	bpl.n	800138c <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	0319      	lsls	r1, r3, #12
 8001324:	d401      	bmi.n	800132a <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8001326:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001328:	e000      	b.n	800132c <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800132a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 800132c:	b10b      	cbz	r3, 8001332 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 800132e:	4620      	mov	r0, r4
 8001330:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001332:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001334:	2220      	movs	r2, #32
 8001336:	408a      	lsls	r2, r1
 8001338:	4216      	tst	r6, r2
 800133a:	d038      	beq.n	80013ae <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800133c:	6823      	ldr	r3, [r4, #0]
 800133e:	6818      	ldr	r0, [r3, #0]
 8001340:	06c6      	lsls	r6, r0, #27
 8001342:	d534      	bpl.n	80013ae <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001344:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001346:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800134a:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800134c:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800134e:	d125      	bne.n	800139c <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001350:	f022 0216 	bic.w	r2, r2, #22
 8001354:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001356:	695a      	ldr	r2, [r3, #20]
 8001358:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800135c:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800135e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001360:	b90a      	cbnz	r2, 8001366 <HAL_DMA_IRQHandler+0xc6>
 8001362:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001364:	b11a      	cbz	r2, 800136e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	f022 0208 	bic.w	r2, r2, #8
 800136c:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800136e:	233f      	movs	r3, #63	; 0x3f
 8001370:	408b      	lsls	r3, r1
 8001372:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8001374:	2300      	movs	r3, #0
 8001376:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800137a:	2301      	movs	r3, #1
 800137c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001380:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8001382:	b10b      	cbz	r3, 8001388 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8001384:	4620      	mov	r0, r4
 8001386:	4798      	blx	r3
}
 8001388:	b003      	add	sp, #12
 800138a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001390:	bf5e      	ittt	pl
 8001392:	681a      	ldrpl	r2, [r3, #0]
 8001394:	f022 0208 	bicpl.w	r2, r2, #8
 8001398:	601a      	strpl	r2, [r3, #0]
 800139a:	e7c4      	b.n	8001326 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800139c:	0350      	lsls	r0, r2, #13
 800139e:	d528      	bpl.n	80013f2 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	0319      	lsls	r1, r3, #12
 80013a4:	d432      	bmi.n	800140c <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 80013a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80013a8:	b10b      	cbz	r3, 80013ae <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 80013aa:	4620      	mov	r0, r4
 80013ac:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0e9      	beq.n	8001388 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80013b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80013b6:	07da      	lsls	r2, r3, #31
 80013b8:	d519      	bpl.n	80013ee <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 80013ba:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 80013bc:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80013be:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80013c2:	6813      	ldr	r3, [r2, #0]
 80013c4:	f023 0301 	bic.w	r3, r3, #1
 80013c8:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013ca:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80013ce:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 80013d2:	9b01      	ldr	r3, [sp, #4]
 80013d4:	3301      	adds	r3, #1
 80013d6:	429f      	cmp	r7, r3
 80013d8:	9301      	str	r3, [sp, #4]
 80013da:	d302      	bcc.n	80013e2 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013dc:	6813      	ldr	r3, [r2, #0]
 80013de:	07db      	lsls	r3, r3, #31
 80013e0:	d4f7      	bmi.n	80013d2 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 80013e2:	2300      	movs	r3, #0
 80013e4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80013e8:	2301      	movs	r3, #1
 80013ea:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80013ee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80013f0:	e7c7      	b.n	8001382 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80013f8:	d108      	bne.n	800140c <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80013fa:	6819      	ldr	r1, [r3, #0]
 80013fc:	f021 0110 	bic.w	r1, r1, #16
 8001400:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001402:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8001404:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001408:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800140c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800140e:	e7cb      	b.n	80013a8 <HAL_DMA_IRQHandler+0x108>
 8001410:	2000000c 	.word	0x2000000c

08001414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001418:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800141a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80015cc <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001420:	4a68      	ldr	r2, [pc, #416]	; (80015c4 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001422:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80015d0 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001426:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001428:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800142a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800142e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001430:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001434:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001438:	45b6      	cmp	lr, r6
 800143a:	f040 80ae 	bne.w	800159a <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800143e:	684c      	ldr	r4, [r1, #4]
 8001440:	f024 0710 	bic.w	r7, r4, #16
 8001444:	2f02      	cmp	r7, #2
 8001446:	d116      	bne.n	8001476 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001448:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800144c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001450:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001454:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001458:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800145c:	f04f 0c0f 	mov.w	ip, #15
 8001460:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001464:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001468:	690d      	ldr	r5, [r1, #16]
 800146a:	fa05 f50b 	lsl.w	r5, r5, fp
 800146e:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001472:	f8ca 5020 	str.w	r5, [sl, #32]
 8001476:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800147a:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800147c:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001480:	fa05 f50a 	lsl.w	r5, r5, sl
 8001484:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001486:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800148a:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800148e:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001492:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001494:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001498:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800149a:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800149e:	d811      	bhi.n	80014c4 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80014a0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014a2:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014a6:	68cf      	ldr	r7, [r1, #12]
 80014a8:	fa07 fc0a 	lsl.w	ip, r7, sl
 80014ac:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80014b0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80014b2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014b4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014b8:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80014bc:	409f      	lsls	r7, r3
 80014be:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80014c2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80014c4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014c6:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014c8:	688f      	ldr	r7, [r1, #8]
 80014ca:	fa07 f70a 	lsl.w	r7, r7, sl
 80014ce:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80014d0:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014d2:	00e5      	lsls	r5, r4, #3
 80014d4:	d561      	bpl.n	800159a <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d6:	f04f 0b00 	mov.w	fp, #0
 80014da:	f8cd b00c 	str.w	fp, [sp, #12]
 80014de:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014e2:	4d39      	ldr	r5, [pc, #228]	; (80015c8 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e4:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80014e8:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80014ec:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80014f0:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80014f4:	9703      	str	r7, [sp, #12]
 80014f6:	9f03      	ldr	r7, [sp, #12]
 80014f8:	f023 0703 	bic.w	r7, r3, #3
 80014fc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001500:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001504:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001508:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800150c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001510:	f04f 0e0f 	mov.w	lr, #15
 8001514:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001518:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800151a:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800151e:	d043      	beq.n	80015a8 <HAL_GPIO_Init+0x194>
 8001520:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001524:	42a8      	cmp	r0, r5
 8001526:	d041      	beq.n	80015ac <HAL_GPIO_Init+0x198>
 8001528:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800152c:	42a8      	cmp	r0, r5
 800152e:	d03f      	beq.n	80015b0 <HAL_GPIO_Init+0x19c>
 8001530:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001534:	42a8      	cmp	r0, r5
 8001536:	d03d      	beq.n	80015b4 <HAL_GPIO_Init+0x1a0>
 8001538:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800153c:	42a8      	cmp	r0, r5
 800153e:	d03b      	beq.n	80015b8 <HAL_GPIO_Init+0x1a4>
 8001540:	4548      	cmp	r0, r9
 8001542:	d03b      	beq.n	80015bc <HAL_GPIO_Init+0x1a8>
 8001544:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001548:	42a8      	cmp	r0, r5
 800154a:	d039      	beq.n	80015c0 <HAL_GPIO_Init+0x1ac>
 800154c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001550:	42a8      	cmp	r0, r5
 8001552:	bf14      	ite	ne
 8001554:	2508      	movne	r5, #8
 8001556:	2507      	moveq	r5, #7
 8001558:	fa05 f50c 	lsl.w	r5, r5, ip
 800155c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001560:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001562:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001564:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001566:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800156a:	bf0c      	ite	eq
 800156c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800156e:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001570:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001572:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001574:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001578:	bf0c      	ite	eq
 800157a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800157c:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800157e:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001580:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001582:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001586:	bf0c      	ite	eq
 8001588:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800158a:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800158c:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800158e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001590:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001592:	bf54      	ite	pl
 8001594:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001596:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001598:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800159a:	3301      	adds	r3, #1
 800159c:	2b10      	cmp	r3, #16
 800159e:	f47f af44 	bne.w	800142a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80015a2:	b005      	add	sp, #20
 80015a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015a8:	465d      	mov	r5, fp
 80015aa:	e7d5      	b.n	8001558 <HAL_GPIO_Init+0x144>
 80015ac:	2501      	movs	r5, #1
 80015ae:	e7d3      	b.n	8001558 <HAL_GPIO_Init+0x144>
 80015b0:	2502      	movs	r5, #2
 80015b2:	e7d1      	b.n	8001558 <HAL_GPIO_Init+0x144>
 80015b4:	2503      	movs	r5, #3
 80015b6:	e7cf      	b.n	8001558 <HAL_GPIO_Init+0x144>
 80015b8:	2504      	movs	r5, #4
 80015ba:	e7cd      	b.n	8001558 <HAL_GPIO_Init+0x144>
 80015bc:	2505      	movs	r5, #5
 80015be:	e7cb      	b.n	8001558 <HAL_GPIO_Init+0x144>
 80015c0:	2506      	movs	r5, #6
 80015c2:	e7c9      	b.n	8001558 <HAL_GPIO_Init+0x144>
 80015c4:	40013c00 	.word	0x40013c00
 80015c8:	40020000 	.word	0x40020000
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40021400 	.word	0x40021400

080015d4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015d4:	6903      	ldr	r3, [r0, #16]
 80015d6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80015d8:	bf14      	ite	ne
 80015da:	2001      	movne	r0, #1
 80015dc:	2000      	moveq	r0, #0
 80015de:	4770      	bx	lr

080015e0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015e0:	b10a      	cbz	r2, 80015e6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015e2:	6181      	str	r1, [r0, #24]
 80015e4:	4770      	bx	lr
 80015e6:	0409      	lsls	r1, r1, #16
 80015e8:	e7fb      	b.n	80015e2 <HAL_GPIO_WritePin+0x2>
	...

080015ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015ee:	4604      	mov	r4, r0
 80015f0:	b910      	cbnz	r0, 80015f8 <HAL_RCC_OscConfig+0xc>
  {
    return HAL_ERROR;
 80015f2:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80015f4:	b003      	add	sp, #12
 80015f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015f8:	6803      	ldr	r3, [r0, #0]
 80015fa:	07d8      	lsls	r0, r3, #31
 80015fc:	d43b      	bmi.n	8001676 <HAL_RCC_OscConfig+0x8a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015fe:	6823      	ldr	r3, [r4, #0]
 8001600:	0799      	lsls	r1, r3, #30
 8001602:	f100 8084 	bmi.w	800170e <HAL_RCC_OscConfig+0x122>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001606:	6823      	ldr	r3, [r4, #0]
 8001608:	071e      	lsls	r6, r3, #28
 800160a:	f100 80c6 	bmi.w	800179a <HAL_RCC_OscConfig+0x1ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800160e:	6823      	ldr	r3, [r4, #0]
 8001610:	075d      	lsls	r5, r3, #29
 8001612:	d52a      	bpl.n	800166a <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001614:	2300      	movs	r3, #0
 8001616:	9301      	str	r3, [sp, #4]
 8001618:	4baa      	ldr	r3, [pc, #680]	; (80018c4 <HAL_RCC_OscConfig+0x2d8>)
    PWR->CR |= PWR_CR_DBP;
 800161a:	4dab      	ldr	r5, [pc, #684]	; (80018c8 <HAL_RCC_OscConfig+0x2dc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800161c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800161e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001622:	641a      	str	r2, [r3, #64]	; 0x40
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800162e:	682b      	ldr	r3, [r5, #0]
 8001630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001634:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001636:	f7ff fc7b 	bl	8000f30 <HAL_GetTick>
 800163a:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800163c:	682b      	ldr	r3, [r5, #0]
 800163e:	05da      	lsls	r2, r3, #23
 8001640:	f140 80cd 	bpl.w	80017de <HAL_RCC_OscConfig+0x1f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001644:	68a3      	ldr	r3, [r4, #8]
 8001646:	4d9f      	ldr	r5, [pc, #636]	; (80018c4 <HAL_RCC_OscConfig+0x2d8>)
 8001648:	2b01      	cmp	r3, #1
 800164a:	f040 80cf 	bne.w	80017ec <HAL_RCC_OscConfig+0x200>
 800164e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001656:	f7ff fc6b 	bl	8000f30 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800165a:	4d9a      	ldr	r5, [pc, #616]	; (80018c4 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 800165c:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800165e:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001662:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001664:	079b      	lsls	r3, r3, #30
 8001666:	f140 80e2 	bpl.w	800182e <HAL_RCC_OscConfig+0x242>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800166a:	69a2      	ldr	r2, [r4, #24]
 800166c:	2a00      	cmp	r2, #0
 800166e:	f040 80e5 	bne.w	800183c <HAL_RCC_OscConfig+0x250>
  return HAL_OK;
 8001672:	2000      	movs	r0, #0
 8001674:	e7be      	b.n	80015f4 <HAL_RCC_OscConfig+0x8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001676:	4b93      	ldr	r3, [pc, #588]	; (80018c4 <HAL_RCC_OscConfig+0x2d8>)
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	f002 020c 	and.w	r2, r2, #12
 800167e:	2a04      	cmp	r2, #4
 8001680:	d007      	beq.n	8001692 <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001688:	2a08      	cmp	r2, #8
 800168a:	d10a      	bne.n	80016a2 <HAL_RCC_OscConfig+0xb6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	025a      	lsls	r2, r3, #9
 8001690:	d507      	bpl.n	80016a2 <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001692:	4b8c      	ldr	r3, [pc, #560]	; (80018c4 <HAL_RCC_OscConfig+0x2d8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	039b      	lsls	r3, r3, #14
 8001698:	d5b1      	bpl.n	80015fe <HAL_RCC_OscConfig+0x12>
 800169a:	6863      	ldr	r3, [r4, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1ae      	bne.n	80015fe <HAL_RCC_OscConfig+0x12>
 80016a0:	e7a7      	b.n	80015f2 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016a2:	6863      	ldr	r3, [r4, #4]
 80016a4:	4d87      	ldr	r5, [pc, #540]	; (80018c4 <HAL_RCC_OscConfig+0x2d8>)
 80016a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016aa:	d111      	bne.n	80016d0 <HAL_RCC_OscConfig+0xe4>
 80016ac:	682b      	ldr	r3, [r5, #0]
 80016ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80016b4:	f7ff fc3c 	bl	8000f30 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b8:	4d82      	ldr	r5, [pc, #520]	; (80018c4 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 80016ba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016bc:	682b      	ldr	r3, [r5, #0]
 80016be:	039f      	lsls	r7, r3, #14
 80016c0:	d49d      	bmi.n	80015fe <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016c2:	f7ff fc35 	bl	8000f30 <HAL_GetTick>
 80016c6:	1b80      	subs	r0, r0, r6
 80016c8:	2864      	cmp	r0, #100	; 0x64
 80016ca:	d9f7      	bls.n	80016bc <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 80016cc:	2003      	movs	r0, #3
 80016ce:	e791      	b.n	80015f4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016d4:	d104      	bne.n	80016e0 <HAL_RCC_OscConfig+0xf4>
 80016d6:	682b      	ldr	r3, [r5, #0]
 80016d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016dc:	602b      	str	r3, [r5, #0]
 80016de:	e7e5      	b.n	80016ac <HAL_RCC_OscConfig+0xc0>
 80016e0:	682a      	ldr	r2, [r5, #0]
 80016e2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016e6:	602a      	str	r2, [r5, #0]
 80016e8:	682a      	ldr	r2, [r5, #0]
 80016ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016ee:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1df      	bne.n	80016b4 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 80016f4:	f7ff fc1c 	bl	8000f30 <HAL_GetTick>
 80016f8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016fa:	682b      	ldr	r3, [r5, #0]
 80016fc:	0398      	lsls	r0, r3, #14
 80016fe:	f57f af7e 	bpl.w	80015fe <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001702:	f7ff fc15 	bl	8000f30 <HAL_GetTick>
 8001706:	1b80      	subs	r0, r0, r6
 8001708:	2864      	cmp	r0, #100	; 0x64
 800170a:	d9f6      	bls.n	80016fa <HAL_RCC_OscConfig+0x10e>
 800170c:	e7de      	b.n	80016cc <HAL_RCC_OscConfig+0xe0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800170e:	4b6d      	ldr	r3, [pc, #436]	; (80018c4 <HAL_RCC_OscConfig+0x2d8>)
 8001710:	689a      	ldr	r2, [r3, #8]
 8001712:	f012 0f0c 	tst.w	r2, #12
 8001716:	d007      	beq.n	8001728 <HAL_RCC_OscConfig+0x13c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800171e:	2a08      	cmp	r2, #8
 8001720:	d112      	bne.n	8001748 <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	0259      	lsls	r1, r3, #9
 8001726:	d40f      	bmi.n	8001748 <HAL_RCC_OscConfig+0x15c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001728:	4b66      	ldr	r3, [pc, #408]	; (80018c4 <HAL_RCC_OscConfig+0x2d8>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	0792      	lsls	r2, r2, #30
 800172e:	d503      	bpl.n	8001738 <HAL_RCC_OscConfig+0x14c>
 8001730:	68e2      	ldr	r2, [r4, #12]
 8001732:	2a01      	cmp	r2, #1
 8001734:	f47f af5d 	bne.w	80015f2 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	6921      	ldr	r1, [r4, #16]
 800173c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001740:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001744:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001746:	e75e      	b.n	8001606 <HAL_RCC_OscConfig+0x1a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001748:	68e2      	ldr	r2, [r4, #12]
 800174a:	4b60      	ldr	r3, [pc, #384]	; (80018cc <HAL_RCC_OscConfig+0x2e0>)
 800174c:	b1b2      	cbz	r2, 800177c <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 800174e:	2201      	movs	r2, #1
 8001750:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001752:	f7ff fbed 	bl	8000f30 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001756:	4d5b      	ldr	r5, [pc, #364]	; (80018c4 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8001758:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175a:	682b      	ldr	r3, [r5, #0]
 800175c:	079b      	lsls	r3, r3, #30
 800175e:	d507      	bpl.n	8001770 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001760:	682b      	ldr	r3, [r5, #0]
 8001762:	6922      	ldr	r2, [r4, #16]
 8001764:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001768:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800176c:	602b      	str	r3, [r5, #0]
 800176e:	e74a      	b.n	8001606 <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001770:	f7ff fbde 	bl	8000f30 <HAL_GetTick>
 8001774:	1b80      	subs	r0, r0, r6
 8001776:	2802      	cmp	r0, #2
 8001778:	d9ef      	bls.n	800175a <HAL_RCC_OscConfig+0x16e>
 800177a:	e7a7      	b.n	80016cc <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 800177c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800177e:	f7ff fbd7 	bl	8000f30 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001782:	4d50      	ldr	r5, [pc, #320]	; (80018c4 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8001784:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001786:	682b      	ldr	r3, [r5, #0]
 8001788:	079f      	lsls	r7, r3, #30
 800178a:	f57f af3c 	bpl.w	8001606 <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800178e:	f7ff fbcf 	bl	8000f30 <HAL_GetTick>
 8001792:	1b80      	subs	r0, r0, r6
 8001794:	2802      	cmp	r0, #2
 8001796:	d9f6      	bls.n	8001786 <HAL_RCC_OscConfig+0x19a>
 8001798:	e798      	b.n	80016cc <HAL_RCC_OscConfig+0xe0>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800179a:	6962      	ldr	r2, [r4, #20]
 800179c:	4b4c      	ldr	r3, [pc, #304]	; (80018d0 <HAL_RCC_OscConfig+0x2e4>)
 800179e:	b17a      	cbz	r2, 80017c0 <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_LSI_ENABLE();
 80017a0:	2201      	movs	r2, #1
 80017a2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80017a4:	f7ff fbc4 	bl	8000f30 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a8:	4d46      	ldr	r5, [pc, #280]	; (80018c4 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 80017aa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ac:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80017ae:	0798      	lsls	r0, r3, #30
 80017b0:	f53f af2d 	bmi.w	800160e <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b4:	f7ff fbbc 	bl	8000f30 <HAL_GetTick>
 80017b8:	1b80      	subs	r0, r0, r6
 80017ba:	2802      	cmp	r0, #2
 80017bc:	d9f6      	bls.n	80017ac <HAL_RCC_OscConfig+0x1c0>
 80017be:	e785      	b.n	80016cc <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_LSI_DISABLE();
 80017c0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80017c2:	f7ff fbb5 	bl	8000f30 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c6:	4d3f      	ldr	r5, [pc, #252]	; (80018c4 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 80017c8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ca:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80017cc:	0799      	lsls	r1, r3, #30
 80017ce:	f57f af1e 	bpl.w	800160e <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017d2:	f7ff fbad 	bl	8000f30 <HAL_GetTick>
 80017d6:	1b80      	subs	r0, r0, r6
 80017d8:	2802      	cmp	r0, #2
 80017da:	d9f6      	bls.n	80017ca <HAL_RCC_OscConfig+0x1de>
 80017dc:	e776      	b.n	80016cc <HAL_RCC_OscConfig+0xe0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80017de:	f7ff fba7 	bl	8000f30 <HAL_GetTick>
 80017e2:	1b80      	subs	r0, r0, r6
 80017e4:	2802      	cmp	r0, #2
 80017e6:	f67f af29 	bls.w	800163c <HAL_RCC_OscConfig+0x50>
 80017ea:	e76f      	b.n	80016cc <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ec:	2b05      	cmp	r3, #5
 80017ee:	d104      	bne.n	80017fa <HAL_RCC_OscConfig+0x20e>
 80017f0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80017f2:	f043 0304 	orr.w	r3, r3, #4
 80017f6:	672b      	str	r3, [r5, #112]	; 0x70
 80017f8:	e729      	b.n	800164e <HAL_RCC_OscConfig+0x62>
 80017fa:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80017fc:	f022 0201 	bic.w	r2, r2, #1
 8001800:	672a      	str	r2, [r5, #112]	; 0x70
 8001802:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001804:	f022 0204 	bic.w	r2, r2, #4
 8001808:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800180a:	2b00      	cmp	r3, #0
 800180c:	f47f af23 	bne.w	8001656 <HAL_RCC_OscConfig+0x6a>
      tickstart = HAL_GetTick();
 8001810:	f7ff fb8e 	bl	8000f30 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001814:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001818:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800181a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800181c:	0798      	lsls	r0, r3, #30
 800181e:	f57f af24 	bpl.w	800166a <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001822:	f7ff fb85 	bl	8000f30 <HAL_GetTick>
 8001826:	1b80      	subs	r0, r0, r6
 8001828:	42b8      	cmp	r0, r7
 800182a:	d9f6      	bls.n	800181a <HAL_RCC_OscConfig+0x22e>
 800182c:	e74e      	b.n	80016cc <HAL_RCC_OscConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800182e:	f7ff fb7f 	bl	8000f30 <HAL_GetTick>
 8001832:	1b80      	subs	r0, r0, r6
 8001834:	42b8      	cmp	r0, r7
 8001836:	f67f af14 	bls.w	8001662 <HAL_RCC_OscConfig+0x76>
 800183a:	e747      	b.n	80016cc <HAL_RCC_OscConfig+0xe0>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800183c:	4d21      	ldr	r5, [pc, #132]	; (80018c4 <HAL_RCC_OscConfig+0x2d8>)
 800183e:	68ab      	ldr	r3, [r5, #8]
 8001840:	f003 030c 	and.w	r3, r3, #12
 8001844:	2b08      	cmp	r3, #8
 8001846:	f43f aed4 	beq.w	80015f2 <HAL_RCC_OscConfig+0x6>
 800184a:	4e22      	ldr	r6, [pc, #136]	; (80018d4 <HAL_RCC_OscConfig+0x2e8>)
 800184c:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800184e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001850:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001852:	d12a      	bne.n	80018aa <HAL_RCC_OscConfig+0x2be>
        tickstart = HAL_GetTick();
 8001854:	f7ff fb6c 	bl	8000f30 <HAL_GetTick>
 8001858:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800185a:	682b      	ldr	r3, [r5, #0]
 800185c:	0199      	lsls	r1, r3, #6
 800185e:	d41e      	bmi.n	800189e <HAL_RCC_OscConfig+0x2b2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001860:	6a22      	ldr	r2, [r4, #32]
 8001862:	69e3      	ldr	r3, [r4, #28]
 8001864:	4313      	orrs	r3, r2
 8001866:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001868:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800186c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800186e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001872:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001874:	4c13      	ldr	r4, [pc, #76]	; (80018c4 <HAL_RCC_OscConfig+0x2d8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001876:	0852      	lsrs	r2, r2, #1
 8001878:	3a01      	subs	r2, #1
 800187a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800187e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001880:	2301      	movs	r3, #1
 8001882:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001884:	f7ff fb54 	bl	8000f30 <HAL_GetTick>
 8001888:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800188a:	6823      	ldr	r3, [r4, #0]
 800188c:	019a      	lsls	r2, r3, #6
 800188e:	f53f aef0 	bmi.w	8001672 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001892:	f7ff fb4d 	bl	8000f30 <HAL_GetTick>
 8001896:	1b40      	subs	r0, r0, r5
 8001898:	2802      	cmp	r0, #2
 800189a:	d9f6      	bls.n	800188a <HAL_RCC_OscConfig+0x29e>
 800189c:	e716      	b.n	80016cc <HAL_RCC_OscConfig+0xe0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800189e:	f7ff fb47 	bl	8000f30 <HAL_GetTick>
 80018a2:	1bc0      	subs	r0, r0, r7
 80018a4:	2802      	cmp	r0, #2
 80018a6:	d9d8      	bls.n	800185a <HAL_RCC_OscConfig+0x26e>
 80018a8:	e710      	b.n	80016cc <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 80018aa:	f7ff fb41 	bl	8000f30 <HAL_GetTick>
 80018ae:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b0:	682b      	ldr	r3, [r5, #0]
 80018b2:	019b      	lsls	r3, r3, #6
 80018b4:	f57f aedd 	bpl.w	8001672 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b8:	f7ff fb3a 	bl	8000f30 <HAL_GetTick>
 80018bc:	1b00      	subs	r0, r0, r4
 80018be:	2802      	cmp	r0, #2
 80018c0:	d9f6      	bls.n	80018b0 <HAL_RCC_OscConfig+0x2c4>
 80018c2:	e703      	b.n	80016cc <HAL_RCC_OscConfig+0xe0>
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40007000 	.word	0x40007000
 80018cc:	42470000 	.word	0x42470000
 80018d0:	42470e80 	.word	0x42470e80
 80018d4:	42470060 	.word	0x42470060

080018d8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018d8:	4913      	ldr	r1, [pc, #76]	; (8001928 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80018da:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018dc:	688b      	ldr	r3, [r1, #8]
 80018de:	f003 030c 	and.w	r3, r3, #12
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	d003      	beq.n	80018ee <HAL_RCC_GetSysClockFreq+0x16>
 80018e6:	2b08      	cmp	r3, #8
 80018e8:	d003      	beq.n	80018f2 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018ea:	4810      	ldr	r0, [pc, #64]	; (800192c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80018ec:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80018ee:	4810      	ldr	r0, [pc, #64]	; (8001930 <HAL_RCC_GetSysClockFreq+0x58>)
 80018f0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018f2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018f4:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018f6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018f8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018fc:	bf14      	ite	ne
 80018fe:	480c      	ldrne	r0, [pc, #48]	; (8001930 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001900:	480a      	ldreq	r0, [pc, #40]	; (800192c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001902:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001906:	bf18      	it	ne
 8001908:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800190a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800190e:	fba1 0100 	umull	r0, r1, r1, r0
 8001912:	f7ff f94f 	bl	8000bb4 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001916:	4b04      	ldr	r3, [pc, #16]	; (8001928 <HAL_RCC_GetSysClockFreq+0x50>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800191e:	3301      	adds	r3, #1
 8001920:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001922:	fbb0 f0f3 	udiv	r0, r0, r3
 8001926:	bd08      	pop	{r3, pc}
 8001928:	40023800 	.word	0x40023800
 800192c:	00f42400 	.word	0x00f42400
 8001930:	007a1200 	.word	0x007a1200

08001934 <HAL_RCC_ClockConfig>:
{
 8001934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001938:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800193a:	4604      	mov	r4, r0
 800193c:	b910      	cbnz	r0, 8001944 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800193e:	2001      	movs	r0, #1
 8001940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001944:	4b44      	ldr	r3, [pc, #272]	; (8001a58 <HAL_RCC_ClockConfig+0x124>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	f002 020f 	and.w	r2, r2, #15
 800194c:	428a      	cmp	r2, r1
 800194e:	d328      	bcc.n	80019a2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001950:	6821      	ldr	r1, [r4, #0]
 8001952:	078f      	lsls	r7, r1, #30
 8001954:	d42d      	bmi.n	80019b2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001956:	07c8      	lsls	r0, r1, #31
 8001958:	d440      	bmi.n	80019dc <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800195a:	4b3f      	ldr	r3, [pc, #252]	; (8001a58 <HAL_RCC_ClockConfig+0x124>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	f002 020f 	and.w	r2, r2, #15
 8001962:	4295      	cmp	r5, r2
 8001964:	d366      	bcc.n	8001a34 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001966:	6822      	ldr	r2, [r4, #0]
 8001968:	0751      	lsls	r1, r2, #29
 800196a:	d46c      	bmi.n	8001a46 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800196c:	0713      	lsls	r3, r2, #28
 800196e:	d507      	bpl.n	8001980 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001970:	4a3a      	ldr	r2, [pc, #232]	; (8001a5c <HAL_RCC_ClockConfig+0x128>)
 8001972:	6921      	ldr	r1, [r4, #16]
 8001974:	6893      	ldr	r3, [r2, #8]
 8001976:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800197a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800197e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001980:	f7ff ffaa 	bl	80018d8 <HAL_RCC_GetSysClockFreq>
 8001984:	4b35      	ldr	r3, [pc, #212]	; (8001a5c <HAL_RCC_ClockConfig+0x128>)
 8001986:	4a36      	ldr	r2, [pc, #216]	; (8001a60 <HAL_RCC_ClockConfig+0x12c>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800198e:	5cd3      	ldrb	r3, [r2, r3]
 8001990:	40d8      	lsrs	r0, r3
 8001992:	4b34      	ldr	r3, [pc, #208]	; (8001a64 <HAL_RCC_ClockConfig+0x130>)
 8001994:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001996:	2000      	movs	r0, #0
 8001998:	f7ff fa94 	bl	8000ec4 <HAL_InitTick>
  return HAL_OK;
 800199c:	2000      	movs	r0, #0
 800199e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a2:	b2ca      	uxtb	r2, r1
 80019a4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 030f 	and.w	r3, r3, #15
 80019ac:	4299      	cmp	r1, r3
 80019ae:	d1c6      	bne.n	800193e <HAL_RCC_ClockConfig+0xa>
 80019b0:	e7ce      	b.n	8001950 <HAL_RCC_ClockConfig+0x1c>
 80019b2:	4b2a      	ldr	r3, [pc, #168]	; (8001a5c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019b8:	bf1e      	ittt	ne
 80019ba:	689a      	ldrne	r2, [r3, #8]
 80019bc:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80019c0:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c2:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019c4:	bf42      	ittt	mi
 80019c6:	689a      	ldrmi	r2, [r3, #8]
 80019c8:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80019cc:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	68a0      	ldr	r0, [r4, #8]
 80019d2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80019d6:	4302      	orrs	r2, r0
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	e7bc      	b.n	8001956 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019dc:	6862      	ldr	r2, [r4, #4]
 80019de:	4b1f      	ldr	r3, [pc, #124]	; (8001a5c <HAL_RCC_ClockConfig+0x128>)
 80019e0:	2a01      	cmp	r2, #1
 80019e2:	d11d      	bne.n	8001a20 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ea:	d0a8      	beq.n	800193e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ec:	4e1b      	ldr	r6, [pc, #108]	; (8001a5c <HAL_RCC_ClockConfig+0x128>)
 80019ee:	68b3      	ldr	r3, [r6, #8]
 80019f0:	f023 0303 	bic.w	r3, r3, #3
 80019f4:	4313      	orrs	r3, r2
 80019f6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80019f8:	f7ff fa9a 	bl	8000f30 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019fc:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001a00:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a02:	68b3      	ldr	r3, [r6, #8]
 8001a04:	6862      	ldr	r2, [r4, #4]
 8001a06:	f003 030c 	and.w	r3, r3, #12
 8001a0a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001a0e:	d0a4      	beq.n	800195a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a10:	f7ff fa8e 	bl	8000f30 <HAL_GetTick>
 8001a14:	1bc0      	subs	r0, r0, r7
 8001a16:	4540      	cmp	r0, r8
 8001a18:	d9f3      	bls.n	8001a02 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001a1a:	2003      	movs	r0, #3
}
 8001a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a20:	1e91      	subs	r1, r2, #2
 8001a22:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a24:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a26:	d802      	bhi.n	8001a2e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a28:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001a2c:	e7dd      	b.n	80019ea <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2e:	f013 0f02 	tst.w	r3, #2
 8001a32:	e7da      	b.n	80019ea <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a34:	b2ea      	uxtb	r2, r5
 8001a36:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	429d      	cmp	r5, r3
 8001a40:	f47f af7d 	bne.w	800193e <HAL_RCC_ClockConfig+0xa>
 8001a44:	e78f      	b.n	8001966 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a46:	4905      	ldr	r1, [pc, #20]	; (8001a5c <HAL_RCC_ClockConfig+0x128>)
 8001a48:	68e0      	ldr	r0, [r4, #12]
 8001a4a:	688b      	ldr	r3, [r1, #8]
 8001a4c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001a50:	4303      	orrs	r3, r0
 8001a52:	608b      	str	r3, [r1, #8]
 8001a54:	e78a      	b.n	800196c <HAL_RCC_ClockConfig+0x38>
 8001a56:	bf00      	nop
 8001a58:	40023c00 	.word	0x40023c00
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	0800546f 	.word	0x0800546f
 8001a64:	2000000c 	.word	0x2000000c

08001a68 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001a68:	4b01      	ldr	r3, [pc, #4]	; (8001a70 <HAL_RCC_GetHCLKFreq+0x8>)
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	2000000c 	.word	0x2000000c

08001a74 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a74:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001a76:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001a7e:	5cd3      	ldrb	r3, [r2, r3]
 8001a80:	4a03      	ldr	r2, [pc, #12]	; (8001a90 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001a82:	6810      	ldr	r0, [r2, #0]
}
 8001a84:	40d8      	lsrs	r0, r3
 8001a86:	4770      	bx	lr
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	0800547f 	.word	0x0800547f
 8001a90:	2000000c 	.word	0x2000000c

08001a94 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a94:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001a96:	4a05      	ldr	r2, [pc, #20]	; (8001aac <HAL_RCC_GetPCLK2Freq+0x18>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001a9e:	5cd3      	ldrb	r3, [r2, r3]
 8001aa0:	4a03      	ldr	r2, [pc, #12]	; (8001ab0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001aa2:	6810      	ldr	r0, [r2, #0]
}
 8001aa4:	40d8      	lsrs	r0, r3
 8001aa6:	4770      	bx	lr
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	0800547f 	.word	0x0800547f
 8001ab0:	2000000c 	.word	0x2000000c

08001ab4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ab4:	6a03      	ldr	r3, [r0, #32]
 8001ab6:	f023 0301 	bic.w	r3, r3, #1
 8001aba:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001abc:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001abe:	6842      	ldr	r2, [r0, #4]
{
 8001ac0:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ac2:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ac4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001ac6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001aca:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001acc:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001ace:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001ad2:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001ad4:	4c0c      	ldr	r4, [pc, #48]	; (8001b08 <TIM_OC1_SetConfig+0x54>)
 8001ad6:	42a0      	cmp	r0, r4
 8001ad8:	d009      	beq.n	8001aee <TIM_OC1_SetConfig+0x3a>
 8001ada:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001ade:	42a0      	cmp	r0, r4
 8001ae0:	d005      	beq.n	8001aee <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ae2:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001ae4:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001ae6:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001ae8:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001aea:	6203      	str	r3, [r0, #32]
} 
 8001aec:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8001aee:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8001af0:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001af2:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001af6:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001af8:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001afa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001afe:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001b00:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001b04:	4322      	orrs	r2, r4
 8001b06:	e7ec      	b.n	8001ae2 <TIM_OC1_SetConfig+0x2e>
 8001b08:	40010000 	.word	0x40010000

08001b0c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001b0c:	6a03      	ldr	r3, [r0, #32]
 8001b0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b12:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b14:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001b16:	6842      	ldr	r2, [r0, #4]
{
 8001b18:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001b1a:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001b1c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001b1e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001b22:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001b24:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001b26:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001b2a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001b2e:	4c0e      	ldr	r4, [pc, #56]	; (8001b68 <TIM_OC3_SetConfig+0x5c>)
 8001b30:	42a0      	cmp	r0, r4
 8001b32:	d009      	beq.n	8001b48 <TIM_OC3_SetConfig+0x3c>
 8001b34:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001b38:	42a0      	cmp	r0, r4
 8001b3a:	d005      	beq.n	8001b48 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b3c:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001b3e:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001b40:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001b42:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b44:	6203      	str	r3, [r0, #32]
}
 8001b46:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001b48:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001b4a:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001b4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001b50:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001b54:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001b56:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001b5a:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001b5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001b60:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8001b64:	e7ea      	b.n	8001b3c <TIM_OC3_SetConfig+0x30>
 8001b66:	bf00      	nop
 8001b68:	40010000 	.word	0x40010000

08001b6c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001b6c:	6a03      	ldr	r3, [r0, #32]
 8001b6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b72:	6203      	str	r3, [r0, #32]
{
 8001b74:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b76:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001b78:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001b7a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b7c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001b7e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b82:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001b86:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001b88:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001b8c:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001b90:	4d09      	ldr	r5, [pc, #36]	; (8001bb8 <TIM_OC4_SetConfig+0x4c>)
 8001b92:	42a8      	cmp	r0, r5
 8001b94:	d009      	beq.n	8001baa <TIM_OC4_SetConfig+0x3e>
 8001b96:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b9a:	42a8      	cmp	r0, r5
 8001b9c:	d005      	beq.n	8001baa <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b9e:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001ba0:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001ba2:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001ba4:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ba6:	6204      	str	r4, [r0, #32]
}
 8001ba8:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001baa:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001bac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001bb0:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8001bb4:	e7f3      	b.n	8001b9e <TIM_OC4_SetConfig+0x32>
 8001bb6:	bf00      	nop
 8001bb8:	40010000 	.word	0x40010000

08001bbc <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bbc:	6803      	ldr	r3, [r0, #0]
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	f042 0201 	orr.w	r2, r2, #1
 8001bc4:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	f042 0201 	orr.w	r2, r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]
}
 8001bce:	2000      	movs	r0, #0
 8001bd0:	4770      	bx	lr

08001bd2 <HAL_TIM_PWM_MspInit>:
 8001bd2:	4770      	bx	lr

08001bd4 <HAL_TIM_Encoder_Start>:
{
 8001bd4:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 8001bd6:	b189      	cbz	r1, 8001bfc <HAL_TIM_Encoder_Start+0x28>
 8001bd8:	2904      	cmp	r1, #4
 8001bda:	d007      	beq.n	8001bec <HAL_TIM_Encoder_Start+0x18>
  TIMx->CCER &= ~tmp;
 8001bdc:	6a1a      	ldr	r2, [r3, #32]
 8001bde:	f022 0201 	bic.w	r2, r2, #1
 8001be2:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001be4:	6a1a      	ldr	r2, [r3, #32]
 8001be6:	f042 0201 	orr.w	r2, r2, #1
 8001bea:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8001bec:	6a1a      	ldr	r2, [r3, #32]
 8001bee:	f022 0210 	bic.w	r2, r2, #16
 8001bf2:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001bf4:	6a1a      	ldr	r2, [r3, #32]
 8001bf6:	f042 0210 	orr.w	r2, r2, #16
 8001bfa:	e006      	b.n	8001c0a <HAL_TIM_Encoder_Start+0x36>
  TIMx->CCER &= ~tmp;
 8001bfc:	6a1a      	ldr	r2, [r3, #32]
 8001bfe:	f022 0201 	bic.w	r2, r2, #1
 8001c02:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001c04:	6a1a      	ldr	r2, [r3, #32]
 8001c06:	f042 0201 	orr.w	r2, r2, #1
 8001c0a:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	f042 0201 	orr.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]
}
 8001c14:	2000      	movs	r0, #0
 8001c16:	4770      	bx	lr

08001c18 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001c18:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001c1c:	2b01      	cmp	r3, #1
{
 8001c1e:	b570      	push	{r4, r5, r6, lr}
 8001c20:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001c24:	d01c      	beq.n	8001c60 <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8001c26:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8001c2a:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8001c32:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c34:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001c38:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001c3c:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001c3e:	680a      	ldr	r2, [r1, #0]
 8001c40:	2a40      	cmp	r2, #64	; 0x40
 8001c42:	d079      	beq.n	8001d38 <HAL_TIM_ConfigClockSource+0x120>
 8001c44:	d819      	bhi.n	8001c7a <HAL_TIM_ConfigClockSource+0x62>
 8001c46:	2a10      	cmp	r2, #16
 8001c48:	f000 8093 	beq.w	8001d72 <HAL_TIM_ConfigClockSource+0x15a>
 8001c4c:	d80a      	bhi.n	8001c64 <HAL_TIM_ConfigClockSource+0x4c>
 8001c4e:	2a00      	cmp	r2, #0
 8001c50:	f000 8089 	beq.w	8001d66 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8001c54:	2301      	movs	r3, #1
 8001c56:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001c60:	4618      	mov	r0, r3
}
 8001c62:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001c64:	2a20      	cmp	r2, #32
 8001c66:	f000 808a 	beq.w	8001d7e <HAL_TIM_ConfigClockSource+0x166>
 8001c6a:	2a30      	cmp	r2, #48	; 0x30
 8001c6c:	d1f2      	bne.n	8001c54 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001c6e:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001c70:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001c74:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8001c78:	e036      	b.n	8001ce8 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001c7a:	2a70      	cmp	r2, #112	; 0x70
 8001c7c:	d036      	beq.n	8001cec <HAL_TIM_ConfigClockSource+0xd4>
 8001c7e:	d81b      	bhi.n	8001cb8 <HAL_TIM_ConfigClockSource+0xa0>
 8001c80:	2a50      	cmp	r2, #80	; 0x50
 8001c82:	d042      	beq.n	8001d0a <HAL_TIM_ConfigClockSource+0xf2>
 8001c84:	2a60      	cmp	r2, #96	; 0x60
 8001c86:	d1e5      	bne.n	8001c54 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c88:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001c8a:	684d      	ldr	r5, [r1, #4]
 8001c8c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c8e:	f024 0410 	bic.w	r4, r4, #16
 8001c92:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c94:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001c96:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c98:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001ca0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ca4:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001ca8:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001caa:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001cac:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001cae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001cb2:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001cb6:	e017      	b.n	8001ce8 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001cb8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001cbc:	d011      	beq.n	8001ce2 <HAL_TIM_ConfigClockSource+0xca>
 8001cbe:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001cc2:	d1c7      	bne.n	8001c54 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001cc4:	688a      	ldr	r2, [r1, #8]
 8001cc6:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001cc8:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001cca:	68c9      	ldr	r1, [r1, #12]
 8001ccc:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cce:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001cd2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001cd6:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001cd8:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ce0:	e002      	b.n	8001ce8 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001ce8:	609a      	str	r2, [r3, #8]
 8001cea:	e7b3      	b.n	8001c54 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001cec:	688a      	ldr	r2, [r1, #8]
 8001cee:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001cf0:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001cf2:	68c9      	ldr	r1, [r1, #12]
 8001cf4:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cf6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001cfa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001cfe:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001d00:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001d02:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d04:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001d08:	e7ee      	b.n	8001ce8 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001d0a:	684c      	ldr	r4, [r1, #4]
 8001d0c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001d0e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d10:	6a1d      	ldr	r5, [r3, #32]
 8001d12:	f025 0501 	bic.w	r5, r5, #1
 8001d16:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001d18:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d1a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d1e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d22:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001d26:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001d28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d2a:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001d2c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d2e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001d32:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001d36:	e7d7      	b.n	8001ce8 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001d38:	684c      	ldr	r4, [r1, #4]
 8001d3a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001d3c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d3e:	6a1d      	ldr	r5, [r3, #32]
 8001d40:	f025 0501 	bic.w	r5, r5, #1
 8001d44:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001d46:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d48:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d4c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d50:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001d54:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001d56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d58:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001d5a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d5c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001d60:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001d64:	e7c0      	b.n	8001ce8 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001d66:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d68:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001d6c:	f042 0207 	orr.w	r2, r2, #7
 8001d70:	e7ba      	b.n	8001ce8 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001d72:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d74:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001d78:	f042 0217 	orr.w	r2, r2, #23
 8001d7c:	e7b4      	b.n	8001ce8 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001d7e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d80:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001d84:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8001d88:	e7ae      	b.n	8001ce8 <HAL_TIM_ConfigClockSource+0xd0>

08001d8a <HAL_TIM_OC_DelayElapsedCallback>:
 8001d8a:	4770      	bx	lr

08001d8c <HAL_TIM_IC_CaptureCallback>:
 8001d8c:	4770      	bx	lr

08001d8e <HAL_TIM_PWM_PulseFinishedCallback>:
 8001d8e:	4770      	bx	lr

08001d90 <HAL_TIM_TriggerCallback>:
 8001d90:	4770      	bx	lr

08001d92 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d92:	6803      	ldr	r3, [r0, #0]
 8001d94:	691a      	ldr	r2, [r3, #16]
 8001d96:	0791      	lsls	r1, r2, #30
{
 8001d98:	b510      	push	{r4, lr}
 8001d9a:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d9c:	d50e      	bpl.n	8001dbc <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001d9e:	68da      	ldr	r2, [r3, #12]
 8001da0:	0792      	lsls	r2, r2, #30
 8001da2:	d50b      	bpl.n	8001dbc <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001da4:	f06f 0202 	mvn.w	r2, #2
 8001da8:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001daa:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dac:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dae:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001db0:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001db2:	d077      	beq.n	8001ea4 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001db4:	f7ff ffea 	bl	8001d8c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db8:	2300      	movs	r3, #0
 8001dba:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dbc:	6823      	ldr	r3, [r4, #0]
 8001dbe:	691a      	ldr	r2, [r3, #16]
 8001dc0:	0750      	lsls	r0, r2, #29
 8001dc2:	d510      	bpl.n	8001de6 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001dc4:	68da      	ldr	r2, [r3, #12]
 8001dc6:	0751      	lsls	r1, r2, #29
 8001dc8:	d50d      	bpl.n	8001de6 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dca:	f06f 0204 	mvn.w	r2, #4
 8001dce:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dd0:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dd2:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dd4:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dd8:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001dda:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ddc:	d068      	beq.n	8001eb0 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001dde:	f7ff ffd5 	bl	8001d8c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de2:	2300      	movs	r3, #0
 8001de4:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001de6:	6823      	ldr	r3, [r4, #0]
 8001de8:	691a      	ldr	r2, [r3, #16]
 8001dea:	0712      	lsls	r2, r2, #28
 8001dec:	d50f      	bpl.n	8001e0e <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	0710      	lsls	r0, r2, #28
 8001df2:	d50c      	bpl.n	8001e0e <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001df4:	f06f 0208 	mvn.w	r2, #8
 8001df8:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dfa:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dfc:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dfe:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e00:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001e02:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e04:	d05a      	beq.n	8001ebc <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001e06:	f7ff ffc1 	bl	8001d8c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e0e:	6823      	ldr	r3, [r4, #0]
 8001e10:	691a      	ldr	r2, [r3, #16]
 8001e12:	06d2      	lsls	r2, r2, #27
 8001e14:	d510      	bpl.n	8001e38 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001e16:	68da      	ldr	r2, [r3, #12]
 8001e18:	06d0      	lsls	r0, r2, #27
 8001e1a:	d50d      	bpl.n	8001e38 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e1c:	f06f 0210 	mvn.w	r2, #16
 8001e20:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e22:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e24:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e26:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e2a:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001e2c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e2e:	d04b      	beq.n	8001ec8 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001e30:	f7ff ffac 	bl	8001d8c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e34:	2300      	movs	r3, #0
 8001e36:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e38:	6823      	ldr	r3, [r4, #0]
 8001e3a:	691a      	ldr	r2, [r3, #16]
 8001e3c:	07d1      	lsls	r1, r2, #31
 8001e3e:	d508      	bpl.n	8001e52 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	07d2      	lsls	r2, r2, #31
 8001e44:	d505      	bpl.n	8001e52 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e46:	f06f 0201 	mvn.w	r2, #1
 8001e4a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	f001 fa05 	bl	800325c <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e52:	6823      	ldr	r3, [r4, #0]
 8001e54:	691a      	ldr	r2, [r3, #16]
 8001e56:	0610      	lsls	r0, r2, #24
 8001e58:	d508      	bpl.n	8001e6c <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001e5a:	68da      	ldr	r2, [r3, #12]
 8001e5c:	0611      	lsls	r1, r2, #24
 8001e5e:	d505      	bpl.n	8001e6c <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e64:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001e66:	4620      	mov	r0, r4
 8001e68:	f000 f9f3 	bl	8002252 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e6c:	6823      	ldr	r3, [r4, #0]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	0652      	lsls	r2, r2, #25
 8001e72:	d508      	bpl.n	8001e86 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001e74:	68da      	ldr	r2, [r3, #12]
 8001e76:	0650      	lsls	r0, r2, #25
 8001e78:	d505      	bpl.n	8001e86 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e7e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001e80:	4620      	mov	r0, r4
 8001e82:	f7ff ff85 	bl	8001d90 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e86:	6823      	ldr	r3, [r4, #0]
 8001e88:	691a      	ldr	r2, [r3, #16]
 8001e8a:	0691      	lsls	r1, r2, #26
 8001e8c:	d522      	bpl.n	8001ed4 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	0692      	lsls	r2, r2, #26
 8001e92:	d51f      	bpl.n	8001ed4 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e94:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001e98:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e9a:	611a      	str	r2, [r3, #16]
}
 8001e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8001ea0:	f000 b9d6 	b.w	8002250 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea4:	f7ff ff71 	bl	8001d8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	f7ff ff70 	bl	8001d8e <HAL_TIM_PWM_PulseFinishedCallback>
 8001eae:	e783      	b.n	8001db8 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eb0:	f7ff ff6b 	bl	8001d8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb4:	4620      	mov	r0, r4
 8001eb6:	f7ff ff6a 	bl	8001d8e <HAL_TIM_PWM_PulseFinishedCallback>
 8001eba:	e792      	b.n	8001de2 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ebc:	f7ff ff65 	bl	8001d8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001ec0:	4620      	mov	r0, r4
 8001ec2:	f7ff ff64 	bl	8001d8e <HAL_TIM_PWM_PulseFinishedCallback>
 8001ec6:	e7a0      	b.n	8001e0a <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec8:	f7ff ff5f 	bl	8001d8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ecc:	4620      	mov	r0, r4
 8001ece:	f7ff ff5e 	bl	8001d8e <HAL_TIM_PWM_PulseFinishedCallback>
 8001ed2:	e7af      	b.n	8001e34 <HAL_TIM_IRQHandler+0xa2>
 8001ed4:	bd10      	pop	{r4, pc}
	...

08001ed8 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001ed8:	4a2e      	ldr	r2, [pc, #184]	; (8001f94 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8001eda:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001edc:	4290      	cmp	r0, r2
 8001ede:	d012      	beq.n	8001f06 <TIM_Base_SetConfig+0x2e>
 8001ee0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001ee4:	d00f      	beq.n	8001f06 <TIM_Base_SetConfig+0x2e>
 8001ee6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001eea:	4290      	cmp	r0, r2
 8001eec:	d00b      	beq.n	8001f06 <TIM_Base_SetConfig+0x2e>
 8001eee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ef2:	4290      	cmp	r0, r2
 8001ef4:	d007      	beq.n	8001f06 <TIM_Base_SetConfig+0x2e>
 8001ef6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001efa:	4290      	cmp	r0, r2
 8001efc:	d003      	beq.n	8001f06 <TIM_Base_SetConfig+0x2e>
 8001efe:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001f02:	4290      	cmp	r0, r2
 8001f04:	d11d      	bne.n	8001f42 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8001f06:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001f0c:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001f0e:	4a21      	ldr	r2, [pc, #132]	; (8001f94 <TIM_Base_SetConfig+0xbc>)
 8001f10:	4290      	cmp	r0, r2
 8001f12:	d104      	bne.n	8001f1e <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f14:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	e028      	b.n	8001f70 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001f1e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001f22:	d0f7      	beq.n	8001f14 <TIM_Base_SetConfig+0x3c>
 8001f24:	4a1c      	ldr	r2, [pc, #112]	; (8001f98 <TIM_Base_SetConfig+0xc0>)
 8001f26:	4290      	cmp	r0, r2
 8001f28:	d0f4      	beq.n	8001f14 <TIM_Base_SetConfig+0x3c>
 8001f2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f2e:	4290      	cmp	r0, r2
 8001f30:	d0f0      	beq.n	8001f14 <TIM_Base_SetConfig+0x3c>
 8001f32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f36:	4290      	cmp	r0, r2
 8001f38:	d0ec      	beq.n	8001f14 <TIM_Base_SetConfig+0x3c>
 8001f3a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001f3e:	4290      	cmp	r0, r2
 8001f40:	d0e8      	beq.n	8001f14 <TIM_Base_SetConfig+0x3c>
 8001f42:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <TIM_Base_SetConfig+0xc4>)
 8001f44:	4290      	cmp	r0, r2
 8001f46:	d0e5      	beq.n	8001f14 <TIM_Base_SetConfig+0x3c>
 8001f48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f4c:	4290      	cmp	r0, r2
 8001f4e:	d0e1      	beq.n	8001f14 <TIM_Base_SetConfig+0x3c>
 8001f50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f54:	4290      	cmp	r0, r2
 8001f56:	d0dd      	beq.n	8001f14 <TIM_Base_SetConfig+0x3c>
 8001f58:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001f5c:	4290      	cmp	r0, r2
 8001f5e:	d0d9      	beq.n	8001f14 <TIM_Base_SetConfig+0x3c>
 8001f60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f64:	4290      	cmp	r0, r2
 8001f66:	d0d5      	beq.n	8001f14 <TIM_Base_SetConfig+0x3c>
 8001f68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f6c:	4290      	cmp	r0, r2
 8001f6e:	d0d1      	beq.n	8001f14 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8001f70:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f72:	688b      	ldr	r3, [r1, #8]
 8001f74:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001f76:	680b      	ldr	r3, [r1, #0]
 8001f78:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <TIM_Base_SetConfig+0xbc>)
 8001f7c:	4298      	cmp	r0, r3
 8001f7e:	d006      	beq.n	8001f8e <TIM_Base_SetConfig+0xb6>
 8001f80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f84:	4298      	cmp	r0, r3
 8001f86:	d002      	beq.n	8001f8e <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	6143      	str	r3, [r0, #20]
}
 8001f8c:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001f8e:	690b      	ldr	r3, [r1, #16]
 8001f90:	6303      	str	r3, [r0, #48]	; 0x30
 8001f92:	e7f9      	b.n	8001f88 <TIM_Base_SetConfig+0xb0>
 8001f94:	40010000 	.word	0x40010000
 8001f98:	40000400 	.word	0x40000400
 8001f9c:	40014000 	.word	0x40014000

08001fa0 <HAL_TIM_Base_Init>:
{ 
 8001fa0:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001fa2:	4604      	mov	r4, r0
 8001fa4:	b1a0      	cbz	r0, 8001fd0 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001fa6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001faa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001fae:	b91b      	cbnz	r3, 8001fb8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001fb0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8001fb4:	f001 ff08 	bl	8003dc8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001fbe:	6820      	ldr	r0, [r4, #0]
 8001fc0:	1d21      	adds	r1, r4, #4
 8001fc2:	f7ff ff89 	bl	8001ed8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001fcc:	2000      	movs	r0, #0
 8001fce:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001fd0:	2001      	movs	r0, #1
}
 8001fd2:	bd10      	pop	{r4, pc}

08001fd4 <HAL_TIM_PWM_Init>:
{
 8001fd4:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001fd6:	4604      	mov	r4, r0
 8001fd8:	b1a0      	cbz	r0, 8002004 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001fda:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001fde:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001fe2:	b91b      	cbnz	r3, 8001fec <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001fe4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8001fe8:	f7ff fdf3 	bl	8001bd2 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8001fec:	2302      	movs	r3, #2
 8001fee:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001ff2:	6820      	ldr	r0, [r4, #0]
 8001ff4:	1d21      	adds	r1, r4, #4
 8001ff6:	f7ff ff6f 	bl	8001ed8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002000:	2000      	movs	r0, #0
 8002002:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002004:	2001      	movs	r0, #1
}  
 8002006:	bd10      	pop	{r4, pc}

08002008 <HAL_TIM_Encoder_Init>:
{
 8002008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800200a:	460c      	mov	r4, r1
  if(htim == NULL)
 800200c:	4605      	mov	r5, r0
 800200e:	2800      	cmp	r0, #0
 8002010:	d041      	beq.n	8002096 <HAL_TIM_Encoder_Init+0x8e>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002012:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002016:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800201a:	b91b      	cbnz	r3, 8002024 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 800201c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Encoder_MspInit(htim);
 8002020:	f001 fe18 	bl	8003c54 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002024:	4629      	mov	r1, r5
  htim->State= HAL_TIM_STATE_BUSY;   
 8002026:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002028:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State= HAL_TIM_STATE_BUSY;   
 800202c:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002030:	6883      	ldr	r3, [r0, #8]
 8002032:	f023 0307 	bic.w	r3, r3, #7
 8002036:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 8002038:	f7ff ff4e 	bl	8001ed8 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 800203c:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 800203e:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 8002040:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8002042:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002044:	68a1      	ldr	r1, [r4, #8]
  tmpccer = htim->Instance->CCER;
 8002046:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8002048:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800204a:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800204c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002050:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002054:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8002058:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800205a:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800205e:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002060:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002062:	011b      	lsls	r3, r3, #4
 8002064:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002068:	68e1      	ldr	r1, [r4, #12]
 800206a:	430b      	orrs	r3, r1
 800206c:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800206e:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002072:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8002076:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002078:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800207a:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800207e:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 8002080:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002082:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 8002086:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002088:	4317      	orrs	r7, r2
  htim->State= HAL_TIM_STATE_READY;
 800208a:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 800208c:	6207      	str	r7, [r0, #32]
  htim->State= HAL_TIM_STATE_READY;
 800208e:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  return HAL_OK;
 8002092:	2000      	movs	r0, #0
 8002094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002096:	2001      	movs	r0, #1
}
 8002098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800209c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800209c:	6a03      	ldr	r3, [r0, #32]
 800209e:	f023 0310 	bic.w	r3, r3, #16
 80020a2:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80020a4:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80020a6:	6842      	ldr	r2, [r0, #4]
{
 80020a8:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 80020aa:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020ac:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80020ae:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020b2:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80020b6:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80020b8:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80020bc:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80020c0:	4c0d      	ldr	r4, [pc, #52]	; (80020f8 <TIM_OC2_SetConfig+0x5c>)
 80020c2:	42a0      	cmp	r0, r4
 80020c4:	d009      	beq.n	80020da <TIM_OC2_SetConfig+0x3e>
 80020c6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80020ca:	42a0      	cmp	r0, r4
 80020cc:	d005      	beq.n	80020da <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 80020ce:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80020d0:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80020d2:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80020d4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80020d6:	6203      	str	r3, [r0, #32]
}
 80020d8:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80020da:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80020dc:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 80020de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80020e2:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80020e6:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80020e8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80020ec:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80020ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80020f2:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 80020f6:	e7ea      	b.n	80020ce <TIM_OC2_SetConfig+0x32>
 80020f8:	40010000 	.word	0x40010000

080020fc <HAL_TIM_PWM_ConfigChannel>:
{
 80020fc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80020fe:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002102:	2b01      	cmp	r3, #1
{
 8002104:	4604      	mov	r4, r0
 8002106:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800210a:	d025      	beq.n	8002158 <HAL_TIM_PWM_ConfigChannel+0x5c>
 800210c:	2301      	movs	r3, #1
 800210e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8002112:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 8002116:	2a0c      	cmp	r2, #12
 8002118:	d818      	bhi.n	800214c <HAL_TIM_PWM_ConfigChannel+0x50>
 800211a:	e8df f002 	tbb	[pc, r2]
 800211e:	1707      	.short	0x1707
 8002120:	171e1717 	.word	0x171e1717
 8002124:	172f1717 	.word	0x172f1717
 8002128:	1717      	.short	0x1717
 800212a:	40          	.byte	0x40
 800212b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800212c:	6820      	ldr	r0, [r4, #0]
 800212e:	f7ff fcc1 	bl	8001ab4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002132:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002134:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002136:	699a      	ldr	r2, [r3, #24]
 8002138:	f042 0208 	orr.w	r2, r2, #8
 800213c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800213e:	699a      	ldr	r2, [r3, #24]
 8002140:	f022 0204 	bic.w	r2, r2, #4
 8002144:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002146:	699a      	ldr	r2, [r3, #24]
 8002148:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800214a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800214c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800214e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002150:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8002154:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8002158:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800215a:	6820      	ldr	r0, [r4, #0]
 800215c:	f7ff ff9e 	bl	800209c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002160:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002162:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002164:	699a      	ldr	r2, [r3, #24]
 8002166:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800216a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800216c:	699a      	ldr	r2, [r3, #24]
 800216e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002172:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002174:	699a      	ldr	r2, [r3, #24]
 8002176:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800217a:	e7e6      	b.n	800214a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800217c:	6820      	ldr	r0, [r4, #0]
 800217e:	f7ff fcc5 	bl	8001b0c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002182:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002184:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002186:	69da      	ldr	r2, [r3, #28]
 8002188:	f042 0208 	orr.w	r2, r2, #8
 800218c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800218e:	69da      	ldr	r2, [r3, #28]
 8002190:	f022 0204 	bic.w	r2, r2, #4
 8002194:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002196:	69da      	ldr	r2, [r3, #28]
 8002198:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800219a:	61da      	str	r2, [r3, #28]
    break;
 800219c:	e7d6      	b.n	800214c <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800219e:	6820      	ldr	r0, [r4, #0]
 80021a0:	f7ff fce4 	bl	8001b6c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021a4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80021a6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021a8:	69da      	ldr	r2, [r3, #28]
 80021aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80021b0:	69da      	ldr	r2, [r3, #28]
 80021b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021b6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80021b8:	69da      	ldr	r2, [r3, #28]
 80021ba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80021be:	e7ec      	b.n	800219a <HAL_TIM_PWM_ConfigChannel+0x9e>

080021c0 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 80021c0:	6a03      	ldr	r3, [r0, #32]
{
 80021c2:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 80021c4:	2401      	movs	r4, #1
 80021c6:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80021c8:	ea23 0304 	bic.w	r3, r3, r4
 80021cc:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80021ce:	6a03      	ldr	r3, [r0, #32]
 80021d0:	408a      	lsls	r2, r1
 80021d2:	431a      	orrs	r2, r3
 80021d4:	6202      	str	r2, [r0, #32]
 80021d6:	bd10      	pop	{r4, pc}

080021d8 <HAL_TIM_PWM_Start>:
{
 80021d8:	b510      	push	{r4, lr}
 80021da:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021dc:	2201      	movs	r2, #1
 80021de:	6800      	ldr	r0, [r0, #0]
 80021e0:	f7ff ffee 	bl	80021c0 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80021e4:	6823      	ldr	r3, [r4, #0]
 80021e6:	4a08      	ldr	r2, [pc, #32]	; (8002208 <HAL_TIM_PWM_Start+0x30>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d003      	beq.n	80021f4 <HAL_TIM_PWM_Start+0x1c>
 80021ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d103      	bne.n	80021fc <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 80021f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021fa:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	f042 0201 	orr.w	r2, r2, #1
 8002202:	601a      	str	r2, [r3, #0]
} 
 8002204:	2000      	movs	r0, #0
 8002206:	bd10      	pop	{r4, pc}
 8002208:	40010000 	.word	0x40010000

0800220c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 800220c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002210:	2b01      	cmp	r3, #1
{
 8002212:	b510      	push	{r4, lr}
 8002214:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002218:	d018      	beq.n	800224c <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 800221a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800221e:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8002220:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002222:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002224:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002226:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800222a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	4322      	orrs	r2, r4
 8002230:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002238:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	430a      	orrs	r2, r1
 800223e:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8002240:	2301      	movs	r3, #1
 8002242:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8002246:	2300      	movs	r3, #0
 8002248:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 800224c:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 800224e:	bd10      	pop	{r4, pc}

08002250 <HAL_TIMEx_CommutationCallback>:
 8002250:	4770      	bx	lr

08002252 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002252:	4770      	bx	lr

08002254 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002254:	6803      	ldr	r3, [r0, #0]
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800225c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800225e:	695a      	ldr	r2, [r3, #20]
 8002260:	f022 0201 	bic.w	r2, r2, #1
 8002264:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002266:	2320      	movs	r3, #32
 8002268:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 800226c:	4770      	bx	lr
	...

08002270 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8002274:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002276:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8002278:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800227a:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800227c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002280:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8002282:	6133      	str	r3, [r6, #16]
{
 8002284:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002286:	6883      	ldr	r3, [r0, #8]
 8002288:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 800228a:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800228c:	4303      	orrs	r3, r0
 800228e:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002290:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002294:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002296:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800229a:	430b      	orrs	r3, r1
 800229c:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800229e:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80022a0:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80022a2:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80022a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 80022a8:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022aa:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80022ae:	6173      	str	r3, [r6, #20]
 80022b0:	4b7a      	ldr	r3, [pc, #488]	; (800249c <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022b2:	d17c      	bne.n	80023ae <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80022b4:	429e      	cmp	r6, r3
 80022b6:	d003      	beq.n	80022c0 <UART_SetConfig+0x50>
 80022b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022bc:	429e      	cmp	r6, r3
 80022be:	d144      	bne.n	800234a <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80022c0:	f7ff fbe8 	bl	8001a94 <HAL_RCC_GetPCLK2Freq>
 80022c4:	2519      	movs	r5, #25
 80022c6:	fb05 f300 	mul.w	r3, r5, r0
 80022ca:	6860      	ldr	r0, [r4, #4]
 80022cc:	f04f 0964 	mov.w	r9, #100	; 0x64
 80022d0:	0040      	lsls	r0, r0, #1
 80022d2:	fbb3 f3f0 	udiv	r3, r3, r0
 80022d6:	fbb3 f3f9 	udiv	r3, r3, r9
 80022da:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80022de:	f7ff fbd9 	bl	8001a94 <HAL_RCC_GetPCLK2Freq>
 80022e2:	6863      	ldr	r3, [r4, #4]
 80022e4:	4368      	muls	r0, r5
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	fbb0 f7f3 	udiv	r7, r0, r3
 80022ec:	f7ff fbd2 	bl	8001a94 <HAL_RCC_GetPCLK2Freq>
 80022f0:	6863      	ldr	r3, [r4, #4]
 80022f2:	4368      	muls	r0, r5
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022fa:	fbb3 f3f9 	udiv	r3, r3, r9
 80022fe:	fb09 7313 	mls	r3, r9, r3, r7
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	3332      	adds	r3, #50	; 0x32
 8002306:	fbb3 f3f9 	udiv	r3, r3, r9
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002310:	f7ff fbc0 	bl	8001a94 <HAL_RCC_GetPCLK2Freq>
 8002314:	6862      	ldr	r2, [r4, #4]
 8002316:	4368      	muls	r0, r5
 8002318:	0052      	lsls	r2, r2, #1
 800231a:	fbb0 faf2 	udiv	sl, r0, r2
 800231e:	f7ff fbb9 	bl	8001a94 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002322:	6863      	ldr	r3, [r4, #4]
 8002324:	4368      	muls	r0, r5
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	fbb0 f3f3 	udiv	r3, r0, r3
 800232c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002330:	fb09 a313 	mls	r3, r9, r3, sl
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	3332      	adds	r3, #50	; 0x32
 8002338:	fbb3 f3f9 	udiv	r3, r3, r9
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002342:	443b      	add	r3, r7
 8002344:	60b3      	str	r3, [r6, #8]
 8002346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800234a:	f7ff fb93 	bl	8001a74 <HAL_RCC_GetPCLK1Freq>
 800234e:	2519      	movs	r5, #25
 8002350:	fb05 f300 	mul.w	r3, r5, r0
 8002354:	6860      	ldr	r0, [r4, #4]
 8002356:	f04f 0964 	mov.w	r9, #100	; 0x64
 800235a:	0040      	lsls	r0, r0, #1
 800235c:	fbb3 f3f0 	udiv	r3, r3, r0
 8002360:	fbb3 f3f9 	udiv	r3, r3, r9
 8002364:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002368:	f7ff fb84 	bl	8001a74 <HAL_RCC_GetPCLK1Freq>
 800236c:	6863      	ldr	r3, [r4, #4]
 800236e:	4368      	muls	r0, r5
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	fbb0 f7f3 	udiv	r7, r0, r3
 8002376:	f7ff fb7d 	bl	8001a74 <HAL_RCC_GetPCLK1Freq>
 800237a:	6863      	ldr	r3, [r4, #4]
 800237c:	4368      	muls	r0, r5
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	fbb0 f3f3 	udiv	r3, r0, r3
 8002384:	fbb3 f3f9 	udiv	r3, r3, r9
 8002388:	fb09 7313 	mls	r3, r9, r3, r7
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	3332      	adds	r3, #50	; 0x32
 8002390:	fbb3 f3f9 	udiv	r3, r3, r9
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800239a:	f7ff fb6b 	bl	8001a74 <HAL_RCC_GetPCLK1Freq>
 800239e:	6862      	ldr	r2, [r4, #4]
 80023a0:	4368      	muls	r0, r5
 80023a2:	0052      	lsls	r2, r2, #1
 80023a4:	fbb0 faf2 	udiv	sl, r0, r2
 80023a8:	f7ff fb64 	bl	8001a74 <HAL_RCC_GetPCLK1Freq>
 80023ac:	e7b9      	b.n	8002322 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80023ae:	429e      	cmp	r6, r3
 80023b0:	d002      	beq.n	80023b8 <UART_SetConfig+0x148>
 80023b2:	4b3b      	ldr	r3, [pc, #236]	; (80024a0 <UART_SetConfig+0x230>)
 80023b4:	429e      	cmp	r6, r3
 80023b6:	d140      	bne.n	800243a <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80023b8:	f7ff fb6c 	bl	8001a94 <HAL_RCC_GetPCLK2Freq>
 80023bc:	6867      	ldr	r7, [r4, #4]
 80023be:	2519      	movs	r5, #25
 80023c0:	f04f 0964 	mov.w	r9, #100	; 0x64
 80023c4:	fb05 f300 	mul.w	r3, r5, r0
 80023c8:	00bf      	lsls	r7, r7, #2
 80023ca:	fbb3 f3f7 	udiv	r3, r3, r7
 80023ce:	fbb3 f3f9 	udiv	r3, r3, r9
 80023d2:	011f      	lsls	r7, r3, #4
 80023d4:	f7ff fb5e 	bl	8001a94 <HAL_RCC_GetPCLK2Freq>
 80023d8:	6863      	ldr	r3, [r4, #4]
 80023da:	4368      	muls	r0, r5
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	fbb0 f8f3 	udiv	r8, r0, r3
 80023e2:	f7ff fb57 	bl	8001a94 <HAL_RCC_GetPCLK2Freq>
 80023e6:	6863      	ldr	r3, [r4, #4]
 80023e8:	4368      	muls	r0, r5
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80023f0:	fbb3 f3f9 	udiv	r3, r3, r9
 80023f4:	fb09 8313 	mls	r3, r9, r3, r8
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	3332      	adds	r3, #50	; 0x32
 80023fc:	fbb3 f3f9 	udiv	r3, r3, r9
 8002400:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002404:	f7ff fb46 	bl	8001a94 <HAL_RCC_GetPCLK2Freq>
 8002408:	6862      	ldr	r2, [r4, #4]
 800240a:	4368      	muls	r0, r5
 800240c:	0092      	lsls	r2, r2, #2
 800240e:	fbb0 faf2 	udiv	sl, r0, r2
 8002412:	f7ff fb3f 	bl	8001a94 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002416:	6863      	ldr	r3, [r4, #4]
 8002418:	4368      	muls	r0, r5
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002420:	fbb3 f3f9 	udiv	r3, r3, r9
 8002424:	fb09 a313 	mls	r3, r9, r3, sl
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	3332      	adds	r3, #50	; 0x32
 800242c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002430:	f003 030f 	and.w	r3, r3, #15
 8002434:	ea43 0308 	orr.w	r3, r3, r8
 8002438:	e783      	b.n	8002342 <UART_SetConfig+0xd2>
 800243a:	f7ff fb1b 	bl	8001a74 <HAL_RCC_GetPCLK1Freq>
 800243e:	6867      	ldr	r7, [r4, #4]
 8002440:	2519      	movs	r5, #25
 8002442:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002446:	fb05 f300 	mul.w	r3, r5, r0
 800244a:	00bf      	lsls	r7, r7, #2
 800244c:	fbb3 f3f7 	udiv	r3, r3, r7
 8002450:	fbb3 f3f9 	udiv	r3, r3, r9
 8002454:	011f      	lsls	r7, r3, #4
 8002456:	f7ff fb0d 	bl	8001a74 <HAL_RCC_GetPCLK1Freq>
 800245a:	6863      	ldr	r3, [r4, #4]
 800245c:	4368      	muls	r0, r5
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	fbb0 f8f3 	udiv	r8, r0, r3
 8002464:	f7ff fb06 	bl	8001a74 <HAL_RCC_GetPCLK1Freq>
 8002468:	6863      	ldr	r3, [r4, #4]
 800246a:	4368      	muls	r0, r5
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002472:	fbb3 f3f9 	udiv	r3, r3, r9
 8002476:	fb09 8313 	mls	r3, r9, r3, r8
 800247a:	011b      	lsls	r3, r3, #4
 800247c:	3332      	adds	r3, #50	; 0x32
 800247e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002482:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002486:	f7ff faf5 	bl	8001a74 <HAL_RCC_GetPCLK1Freq>
 800248a:	6862      	ldr	r2, [r4, #4]
 800248c:	4368      	muls	r0, r5
 800248e:	0092      	lsls	r2, r2, #2
 8002490:	fbb0 faf2 	udiv	sl, r0, r2
 8002494:	f7ff faee 	bl	8001a74 <HAL_RCC_GetPCLK1Freq>
 8002498:	e7bd      	b.n	8002416 <UART_SetConfig+0x1a6>
 800249a:	bf00      	nop
 800249c:	40011000 	.word	0x40011000
 80024a0:	40011400 	.word	0x40011400

080024a4 <HAL_UART_Init>:
{
 80024a4:	b510      	push	{r4, lr}
  if(huart == NULL)
 80024a6:	4604      	mov	r4, r0
 80024a8:	b340      	cbz	r0, 80024fc <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80024aa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80024ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80024b2:	b91b      	cbnz	r3, 80024bc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80024b4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80024b8:	f001 fd32 	bl	8003f20 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80024bc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80024be:	2324      	movs	r3, #36	; 0x24
 80024c0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80024c4:	68d3      	ldr	r3, [r2, #12]
 80024c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024ca:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80024cc:	4620      	mov	r0, r4
 80024ce:	f7ff fecf 	bl	8002270 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024d2:	6823      	ldr	r3, [r4, #0]
 80024d4:	691a      	ldr	r2, [r3, #16]
 80024d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024da:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024dc:	695a      	ldr	r2, [r3, #20]
 80024de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024e2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024ea:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ec:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80024ee:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80024f2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80024f6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80024fa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80024fc:	2001      	movs	r0, #1
}
 80024fe:	bd10      	pop	{r4, pc}

08002500 <HAL_UART_Receive_DMA>:
{  
 8002500:	4613      	mov	r3, r2
  if(huart->RxState == HAL_UART_STATE_READY) 
 8002502:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 8002506:	2a20      	cmp	r2, #32
{  
 8002508:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800250a:	4605      	mov	r5, r0
  if(huart->RxState == HAL_UART_STATE_READY) 
 800250c:	d138      	bne.n	8002580 <HAL_UART_Receive_DMA+0x80>
    if((pData == NULL ) || (Size == 0)) 
 800250e:	2900      	cmp	r1, #0
 8002510:	d034      	beq.n	800257c <HAL_UART_Receive_DMA+0x7c>
 8002512:	2b00      	cmp	r3, #0
 8002514:	d032      	beq.n	800257c <HAL_UART_Receive_DMA+0x7c>
    __HAL_LOCK(huart);
 8002516:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800251a:	2a01      	cmp	r2, #1
 800251c:	d030      	beq.n	8002580 <HAL_UART_Receive_DMA+0x80>
 800251e:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002520:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 8002522:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002526:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002528:	63c4      	str	r4, [r0, #60]	; 0x3c
    huart->pRxBuffPtr = pData;
 800252a:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 800252c:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800252e:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002532:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002534:	4a13      	ldr	r2, [pc, #76]	; (8002584 <HAL_UART_Receive_DMA+0x84>)
 8002536:	63c2      	str	r2, [r0, #60]	; 0x3c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8002538:	682e      	ldr	r6, [r5, #0]
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800253a:	4a13      	ldr	r2, [pc, #76]	; (8002588 <HAL_UART_Receive_DMA+0x88>)
 800253c:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800253e:	4a13      	ldr	r2, [pc, #76]	; (800258c <HAL_UART_Receive_DMA+0x8c>)
 8002540:	64c2      	str	r2, [r0, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 8002542:	6504      	str	r4, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8002544:	460a      	mov	r2, r1
 8002546:	1d31      	adds	r1, r6, #4
 8002548:	f7fe fe16 	bl	8001178 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 800254c:	682b      	ldr	r3, [r5, #0]
 800254e:	9401      	str	r4, [sp, #4]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	9201      	str	r2, [sp, #4]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	9201      	str	r2, [sp, #4]
 8002558:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800255a:	68da      	ldr	r2, [r3, #12]
    __HAL_UNLOCK(huart);
 800255c:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002560:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002564:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002566:	695a      	ldr	r2, [r3, #20]
 8002568:	f042 0201 	orr.w	r2, r2, #1
 800256c:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800256e:	695a      	ldr	r2, [r3, #20]
 8002570:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002574:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8002576:	4620      	mov	r0, r4
}
 8002578:	b002      	add	sp, #8
 800257a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800257c:	2001      	movs	r0, #1
 800257e:	e7fb      	b.n	8002578 <HAL_UART_Receive_DMA+0x78>
    return HAL_BUSY; 
 8002580:	2002      	movs	r0, #2
 8002582:	e7f9      	b.n	8002578 <HAL_UART_Receive_DMA+0x78>
 8002584:	080025cf 	.word	0x080025cf
 8002588:	0800267b 	.word	0x0800267b
 800258c:	08002687 	.word	0x08002687

08002590 <HAL_UART_AbortReceive>:
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002590:	6803      	ldr	r3, [r0, #0]
 8002592:	68da      	ldr	r2, [r3, #12]
 8002594:	f422 7290 	bic.w	r2, r2, #288	; 0x120
{
 8002598:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800259a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800259c:	695a      	ldr	r2, [r3, #20]
 800259e:	f022 0201 	bic.w	r2, r2, #1
 80025a2:	615a      	str	r2, [r3, #20]
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025a4:	695a      	ldr	r2, [r3, #20]
 80025a6:	0652      	lsls	r2, r2, #25
{
 80025a8:	4604      	mov	r4, r0
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025aa:	d509      	bpl.n	80025c0 <HAL_UART_AbortReceive+0x30>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025ac:	695a      	ldr	r2, [r3, #20]
    if(huart->hdmarx != NULL)
 80025ae:	6b40      	ldr	r0, [r0, #52]	; 0x34
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025b4:	615a      	str	r2, [r3, #20]
    if(huart->hdmarx != NULL)
 80025b6:	b118      	cbz	r0, 80025c0 <HAL_UART_AbortReceive+0x30>
      huart->hdmarx->XferAbortCallback = NULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	6503      	str	r3, [r0, #80]	; 0x50
      HAL_DMA_Abort(huart->hdmarx);
 80025bc:	f7fe fe1a 	bl	80011f4 <HAL_DMA_Abort>
  huart->RxXferCount = 0x00U;
 80025c0:	2000      	movs	r0, #0
  huart->RxState = HAL_UART_STATE_READY;
 80025c2:	2320      	movs	r3, #32
  huart->RxXferCount = 0x00U;
 80025c4:	85e0      	strh	r0, [r4, #46]	; 0x2e
  huart->RxState = HAL_UART_STATE_READY;
 80025c6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80025ca:	bd10      	pop	{r4, pc}

080025cc <HAL_UART_TxCpltCallback>:
 80025cc:	4770      	bx	lr

080025ce <UART_DMAReceiveCplt>:
{
 80025ce:	b508      	push	{r3, lr}
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80025d0:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025d2:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80025da:	d110      	bne.n	80025fe <UART_DMAReceiveCplt+0x30>
    huart->RxXferCount = 0U;
 80025dc:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025de:	6813      	ldr	r3, [r2, #0]
 80025e0:	68d9      	ldr	r1, [r3, #12]
 80025e2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80025e6:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025e8:	6959      	ldr	r1, [r3, #20]
 80025ea:	f021 0101 	bic.w	r1, r1, #1
 80025ee:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025f0:	6959      	ldr	r1, [r3, #20]
 80025f2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80025f6:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 80025f8:	2320      	movs	r3, #32
 80025fa:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 80025fe:	4610      	mov	r0, r2
 8002600:	f000 ff42 	bl	8003488 <HAL_UART_RxCpltCallback>
 8002604:	bd08      	pop	{r3, pc}

08002606 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002606:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800260a:	2b22      	cmp	r3, #34	; 0x22
{
 800260c:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800260e:	d132      	bne.n	8002676 <UART_Receive_IT+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002610:	6883      	ldr	r3, [r0, #8]
 8002612:	6901      	ldr	r1, [r0, #16]
 8002614:	6802      	ldr	r2, [r0, #0]
 8002616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800261a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800261c:	d11f      	bne.n	800265e <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800261e:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002620:	b9c9      	cbnz	r1, 8002656 <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002622:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002626:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 800262a:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 800262c:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 800262e:	3c01      	subs	r4, #1
 8002630:	b2a4      	uxth	r4, r4
 8002632:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002634:	b96c      	cbnz	r4, 8002652 <UART_Receive_IT+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002636:	6803      	ldr	r3, [r0, #0]
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800263e:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002640:	695a      	ldr	r2, [r3, #20]
 8002642:	f022 0201 	bic.w	r2, r2, #1
 8002646:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002648:	2320      	movs	r3, #32
 800264a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800264e:	f000 ff1b 	bl	8003488 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8002652:	2000      	movs	r0, #0
}
 8002654:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	f823 2b01 	strh.w	r2, [r3], #1
 800265c:	e7e5      	b.n	800262a <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 800265e:	b921      	cbnz	r1, 800266a <UART_Receive_IT+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002660:	1c59      	adds	r1, r3, #1
 8002662:	6852      	ldr	r2, [r2, #4]
 8002664:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002666:	701a      	strb	r2, [r3, #0]
 8002668:	e7e0      	b.n	800262c <UART_Receive_IT+0x26>
 800266a:	6852      	ldr	r2, [r2, #4]
 800266c:	1c59      	adds	r1, r3, #1
 800266e:	6281      	str	r1, [r0, #40]	; 0x28
 8002670:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002674:	e7f7      	b.n	8002666 <UART_Receive_IT+0x60>
    return HAL_BUSY;
 8002676:	2002      	movs	r0, #2
 8002678:	bd10      	pop	{r4, pc}

0800267a <UART_DMARxHalfCplt>:
{
 800267a:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart); 
 800267c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800267e:	f000 ff23 	bl	80034c8 <HAL_UART_RxHalfCpltCallback>
 8002682:	bd08      	pop	{r3, pc}

08002684 <HAL_UART_ErrorCallback>:
 8002684:	4770      	bx	lr

08002686 <UART_DMAError>:
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002686:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
 8002688:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800268a:	680b      	ldr	r3, [r1, #0]
 800268c:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800268e:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8002692:	2821      	cmp	r0, #33	; 0x21
 8002694:	d10a      	bne.n	80026ac <UART_DMAError+0x26>
 8002696:	0612      	lsls	r2, r2, #24
 8002698:	d508      	bpl.n	80026ac <UART_DMAError+0x26>
    huart->TxXferCount = 0U;
 800269a:	2200      	movs	r2, #0
 800269c:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80026a4:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80026a6:	2220      	movs	r2, #32
 80026a8:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 80026ac:	695b      	ldr	r3, [r3, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80026ae:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 80026b2:	2a22      	cmp	r2, #34	; 0x22
 80026b4:	d106      	bne.n	80026c4 <UART_DMAError+0x3e>
 80026b6:	065b      	lsls	r3, r3, #25
 80026b8:	d504      	bpl.n	80026c4 <UART_DMAError+0x3e>
    huart->RxXferCount = 0U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80026be:	4608      	mov	r0, r1
 80026c0:	f7ff fdc8 	bl	8002254 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80026c4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80026c6:	f043 0310 	orr.w	r3, r3, #16
 80026ca:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80026cc:	4608      	mov	r0, r1
 80026ce:	f7ff ffd9 	bl	8002684 <HAL_UART_ErrorCallback>
 80026d2:	bd08      	pop	{r3, pc}

080026d4 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026d4:	6803      	ldr	r3, [r0, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026d8:	68d9      	ldr	r1, [r3, #12]
{
 80026da:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 80026dc:	0716      	lsls	r6, r2, #28
{
 80026de:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026e0:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 80026e2:	d107      	bne.n	80026f4 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026e4:	0696      	lsls	r6, r2, #26
 80026e6:	d55a      	bpl.n	800279e <HAL_UART_IRQHandler+0xca>
 80026e8:	068d      	lsls	r5, r1, #26
 80026ea:	d558      	bpl.n	800279e <HAL_UART_IRQHandler+0xca>
}
 80026ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80026f0:	f7ff bf89 	b.w	8002606 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80026f4:	f015 0501 	ands.w	r5, r5, #1
 80026f8:	d102      	bne.n	8002700 <HAL_UART_IRQHandler+0x2c>
 80026fa:	f411 7f90 	tst.w	r1, #288	; 0x120
 80026fe:	d04e      	beq.n	800279e <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002700:	07d3      	lsls	r3, r2, #31
 8002702:	d505      	bpl.n	8002710 <HAL_UART_IRQHandler+0x3c>
 8002704:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002706:	bf42      	ittt	mi
 8002708:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800270a:	f043 0301 	orrmi.w	r3, r3, #1
 800270e:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002710:	0750      	lsls	r0, r2, #29
 8002712:	d504      	bpl.n	800271e <HAL_UART_IRQHandler+0x4a>
 8002714:	b11d      	cbz	r5, 800271e <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002716:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002718:	f043 0302 	orr.w	r3, r3, #2
 800271c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800271e:	0793      	lsls	r3, r2, #30
 8002720:	d504      	bpl.n	800272c <HAL_UART_IRQHandler+0x58>
 8002722:	b11d      	cbz	r5, 800272c <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002724:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002726:	f043 0304 	orr.w	r3, r3, #4
 800272a:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800272c:	0716      	lsls	r6, r2, #28
 800272e:	d504      	bpl.n	800273a <HAL_UART_IRQHandler+0x66>
 8002730:	b11d      	cbz	r5, 800273a <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002732:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002734:	f043 0308 	orr.w	r3, r3, #8
 8002738:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800273a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800273c:	2b00      	cmp	r3, #0
 800273e:	d066      	beq.n	800280e <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002740:	0695      	lsls	r5, r2, #26
 8002742:	d504      	bpl.n	800274e <HAL_UART_IRQHandler+0x7a>
 8002744:	0688      	lsls	r0, r1, #26
 8002746:	d502      	bpl.n	800274e <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8002748:	4620      	mov	r0, r4
 800274a:	f7ff ff5c 	bl	8002606 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800274e:	6823      	ldr	r3, [r4, #0]
 8002750:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002752:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002754:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8002756:	4620      	mov	r0, r4
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002758:	d402      	bmi.n	8002760 <HAL_UART_IRQHandler+0x8c>
 800275a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800275e:	d01a      	beq.n	8002796 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8002760:	f7ff fd78 	bl	8002254 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002764:	6823      	ldr	r3, [r4, #0]
 8002766:	695a      	ldr	r2, [r3, #20]
 8002768:	0652      	lsls	r2, r2, #25
 800276a:	d510      	bpl.n	800278e <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800276c:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800276e:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002770:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002774:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002776:	b150      	cbz	r0, 800278e <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002778:	4b25      	ldr	r3, [pc, #148]	; (8002810 <HAL_UART_IRQHandler+0x13c>)
 800277a:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800277c:	f7fe fd7d 	bl	800127a <HAL_DMA_Abort_IT>
 8002780:	2800      	cmp	r0, #0
 8002782:	d044      	beq.n	800280e <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002784:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8002786:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800278a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800278c:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800278e:	4620      	mov	r0, r4
 8002790:	f7ff ff78 	bl	8002684 <HAL_UART_ErrorCallback>
 8002794:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002796:	f7ff ff75 	bl	8002684 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800279a:	63e5      	str	r5, [r4, #60]	; 0x3c
 800279c:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800279e:	0616      	lsls	r6, r2, #24
 80027a0:	d527      	bpl.n	80027f2 <HAL_UART_IRQHandler+0x11e>
 80027a2:	060d      	lsls	r5, r1, #24
 80027a4:	d525      	bpl.n	80027f2 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80027a6:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80027aa:	2a21      	cmp	r2, #33	; 0x21
 80027ac:	d12f      	bne.n	800280e <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80027ae:	68a2      	ldr	r2, [r4, #8]
 80027b0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80027b4:	6a22      	ldr	r2, [r4, #32]
 80027b6:	d117      	bne.n	80027e8 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80027b8:	8811      	ldrh	r1, [r2, #0]
 80027ba:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80027be:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80027c0:	6921      	ldr	r1, [r4, #16]
 80027c2:	b979      	cbnz	r1, 80027e4 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80027c4:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80027c6:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 80027c8:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80027ca:	3a01      	subs	r2, #1
 80027cc:	b292      	uxth	r2, r2
 80027ce:	84e2      	strh	r2, [r4, #38]	; 0x26
 80027d0:	b9ea      	cbnz	r2, 800280e <HAL_UART_IRQHandler+0x13a>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80027d2:	68da      	ldr	r2, [r3, #12]
 80027d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027d8:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80027e4:	3201      	adds	r2, #1
 80027e6:	e7ee      	b.n	80027c6 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80027e8:	1c51      	adds	r1, r2, #1
 80027ea:	6221      	str	r1, [r4, #32]
 80027ec:	7812      	ldrb	r2, [r2, #0]
 80027ee:	605a      	str	r2, [r3, #4]
 80027f0:	e7ea      	b.n	80027c8 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80027f2:	0650      	lsls	r0, r2, #25
 80027f4:	d50b      	bpl.n	800280e <HAL_UART_IRQHandler+0x13a>
 80027f6:	064a      	lsls	r2, r1, #25
 80027f8:	d509      	bpl.n	800280e <HAL_UART_IRQHandler+0x13a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002800:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002802:	2320      	movs	r3, #32
 8002804:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002808:	4620      	mov	r0, r4
 800280a:	f7ff fedf 	bl	80025cc <HAL_UART_TxCpltCallback>
 800280e:	bd70      	pop	{r4, r5, r6, pc}
 8002810:	08002815 	.word	0x08002815

08002814 <UART_DMAAbortOnError>:
{
 8002814:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002816:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 800281c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800281e:	f7ff ff31 	bl	8002684 <HAL_UART_ErrorCallback>
 8002822:	bd08      	pop	{r3, pc}

08002824 <lcd_4bit>:
		}
	}
}

void lcd_4bit(uint8_t data)
{
 8002824:	b538      	push	{r3, r4, r5, lr}
/*	GPIO_WriteBit(lcd_db7_port, lcd_db7_pin, (data & 0x08) >> 3);
	GPIO_WriteBit(lcd_db6_port, lcd_db6_pin, (data & 0x04) >> 2);
	GPIO_WriteBit(lcd_db5_port, lcd_db5_pin, (data & 0x02) >> 1);
	GPIO_WriteBit(lcd_db4_port, lcd_db4_pin, (data & 0x01) >> 0);*/

	HAL_GPIO_WritePin(lcd_db7_GPIO_Port,lcd_db7_Pin,(data & 0x08)>>3);
 8002826:	4c1e      	ldr	r4, [pc, #120]	; (80028a0 <lcd_4bit+0x7c>)
{
 8002828:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(lcd_db7_GPIO_Port,lcd_db7_Pin,(data & 0x08)>>3);
 800282a:	f3c0 02c0 	ubfx	r2, r0, #3, #1
 800282e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002832:	4620      	mov	r0, r4
 8002834:	f7fe fed4 	bl	80015e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_db6_GPIO_Port,lcd_db6_Pin,(data & 0x04)>>2);
 8002838:	f3c5 0280 	ubfx	r2, r5, #2, #1
 800283c:	4620      	mov	r0, r4
 800283e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002842:	f7fe fecd 	bl	80015e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_db5_GPIO_Port,lcd_db5_Pin,(data & 0x02)>>1);
 8002846:	f3c5 0240 	ubfx	r2, r5, #1, #1
 800284a:	4620      	mov	r0, r4
 800284c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002850:	f7fe fec6 	bl	80015e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_db4_GPIO_Port,lcd_db4_Pin,(data & 0x01)>>0);
 8002854:	f005 0201 	and.w	r2, r5, #1
 8002858:	f44f 7100 	mov.w	r1, #512	; 0x200
 800285c:	4620      	mov	r0, r4
 800285e:	f7fe febf 	bl	80015e0 <HAL_GPIO_WritePin>



	//delay_us(37);
	HAL_Delay(0.037);
	lcd_e_set;
 8002862:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
	HAL_Delay(0.037);
 8002866:	2000      	movs	r0, #0
 8002868:	f7fe fb68 	bl	8000f3c <HAL_Delay>
	lcd_e_set;
 800286c:	2201      	movs	r2, #1
 800286e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002872:	4620      	mov	r0, r4
 8002874:	f7fe feb4 	bl	80015e0 <HAL_GPIO_WritePin>
	//delay_us(37);
	HAL_Delay(0.037);
 8002878:	2000      	movs	r0, #0
 800287a:	f7fe fb5f 	bl	8000f3c <HAL_Delay>
	lcd_e_reset;
 800287e:	2200      	movs	r2, #0
 8002880:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002884:	4620      	mov	r0, r4
 8002886:	f7fe feab 	bl	80015e0 <HAL_GPIO_WritePin>
	//delay_us(37);
	HAL_Delay(0.037);
 800288a:	2000      	movs	r0, #0
 800288c:	f7fe fb56 	bl	8000f3c <HAL_Delay>
	lcd_e_set;
 8002890:	4620      	mov	r0, r4
 8002892:	2201      	movs	r2, #1
 8002894:	f44f 4100 	mov.w	r1, #32768	; 0x8000
}
 8002898:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lcd_e_set;
 800289c:	f7fe bea0 	b.w	80015e0 <HAL_GPIO_WritePin>
 80028a0:	40020c00 	.word	0x40020c00

080028a4 <lcd_8bit>:

void lcd_8bit(uint8_t data)
{
 80028a4:	b570      	push	{r4, r5, r6, lr}
/*	GPIO_WriteBit(lcd_db7_port, lcd_db7_pin, (data & 0x80) >> 7);
	GPIO_WriteBit(lcd_db6_port, lcd_db6_pin, (data & 0x40) >> 6);
	GPIO_WriteBit(lcd_db5_port, lcd_db5_pin, (data & 0x20) >> 5);
	GPIO_WriteBit(lcd_db4_port, lcd_db4_pin, (data & 0x10) >> 4);*/

	HAL_GPIO_WritePin(lcd_db7_GPIO_Port,lcd_db7_Pin,(data & 0x80)>>7);
 80028a6:	4c39      	ldr	r4, [pc, #228]	; (800298c <lcd_8bit+0xe8>)
	HAL_GPIO_WritePin(lcd_db5_GPIO_Port,lcd_db5_Pin,(data & 0x20)>>5);
	HAL_GPIO_WritePin(lcd_db4_GPIO_Port,lcd_db4_Pin,(data & 0x10)>>4);

	//delay_us(37);
	HAL_Delay(0.037);
	lcd_e_set;
 80028a8:	4e39      	ldr	r6, [pc, #228]	; (8002990 <lcd_8bit+0xec>)
{
 80028aa:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(lcd_db7_GPIO_Port,lcd_db7_Pin,(data & 0x80)>>7);
 80028ac:	09c2      	lsrs	r2, r0, #7
 80028ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028b2:	4620      	mov	r0, r4
 80028b4:	f7fe fe94 	bl	80015e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_db6_GPIO_Port,lcd_db6_Pin,(data & 0x40)>>6);
 80028b8:	f3c5 1280 	ubfx	r2, r5, #6, #1
 80028bc:	4620      	mov	r0, r4
 80028be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028c2:	f7fe fe8d 	bl	80015e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_db5_GPIO_Port,lcd_db5_Pin,(data & 0x20)>>5);
 80028c6:	f3c5 1240 	ubfx	r2, r5, #5, #1
 80028ca:	4620      	mov	r0, r4
 80028cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028d0:	f7fe fe86 	bl	80015e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_db4_GPIO_Port,lcd_db4_Pin,(data & 0x10)>>4);
 80028d4:	f3c5 1200 	ubfx	r2, r5, #4, #1
 80028d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028dc:	4620      	mov	r0, r4
 80028de:	f7fe fe7f 	bl	80015e0 <HAL_GPIO_WritePin>
	HAL_Delay(0.037);
 80028e2:	2000      	movs	r0, #0
 80028e4:	f7fe fb2a 	bl	8000f3c <HAL_Delay>
	lcd_e_set;
 80028e8:	2201      	movs	r2, #1
 80028ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028ee:	4630      	mov	r0, r6
 80028f0:	f7fe fe76 	bl	80015e0 <HAL_GPIO_WritePin>
	//delay_us(37);
	HAL_Delay(0.037);
 80028f4:	2000      	movs	r0, #0
 80028f6:	f7fe fb21 	bl	8000f3c <HAL_Delay>
	lcd_e_reset;
 80028fa:	2200      	movs	r2, #0
 80028fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002900:	4630      	mov	r0, r6
 8002902:	f7fe fe6d 	bl	80015e0 <HAL_GPIO_WritePin>
	//delay_us(37);
	HAL_Delay(0.037);
 8002906:	2000      	movs	r0, #0
 8002908:	f7fe fb18 	bl	8000f3c <HAL_Delay>
	lcd_e_set;
 800290c:	4630      	mov	r0, r6
 800290e:	2201      	movs	r2, #1
 8002910:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002914:	f7fe fe64 	bl	80015e0 <HAL_GPIO_WritePin>
/*	GPIO_WriteBit(lcd_db7_port, lcd_db7_pin, (data & 0x08) >> 3);
	GPIO_WriteBit(lcd_db6_port, lcd_db6_pin, (data & 0x04) >> 2);
	GPIO_WriteBit(lcd_db5_port, lcd_db5_pin, (data & 0x02) >> 1);
	GPIO_WriteBit(lcd_db4_port, lcd_db4_pin, (data & 0x01) >> 0);*/

	HAL_GPIO_WritePin(lcd_db7_GPIO_Port,lcd_db7_Pin,(data & 0x08)>>3);
 8002918:	f3c5 02c0 	ubfx	r2, r5, #3, #1
 800291c:	4620      	mov	r0, r4
 800291e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002922:	f7fe fe5d 	bl	80015e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_db6_GPIO_Port,lcd_db6_Pin,(data & 0x04)>>2);
 8002926:	f3c5 0280 	ubfx	r2, r5, #2, #1
 800292a:	4620      	mov	r0, r4
 800292c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002930:	f7fe fe56 	bl	80015e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_db5_GPIO_Port,lcd_db5_Pin,(data & 0x02)>>1);
 8002934:	f3c5 0240 	ubfx	r2, r5, #1, #1
 8002938:	4620      	mov	r0, r4
 800293a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800293e:	f7fe fe4f 	bl	80015e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_db4_GPIO_Port,lcd_db4_Pin,(data & 0x01)>>0);
 8002942:	f005 0201 	and.w	r2, r5, #1
 8002946:	f44f 7100 	mov.w	r1, #512	; 0x200
 800294a:	4620      	mov	r0, r4
 800294c:	f7fe fe48 	bl	80015e0 <HAL_GPIO_WritePin>

	//delay_us(37);
	HAL_Delay(0.037);
 8002950:	2000      	movs	r0, #0
 8002952:	f7fe faf3 	bl	8000f3c <HAL_Delay>
	lcd_e_set;
 8002956:	2201      	movs	r2, #1
 8002958:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800295c:	4630      	mov	r0, r6
 800295e:	f7fe fe3f 	bl	80015e0 <HAL_GPIO_WritePin>
	//delay_us(37);
	HAL_Delay(0.037);
 8002962:	2000      	movs	r0, #0
 8002964:	f7fe faea 	bl	8000f3c <HAL_Delay>
	lcd_e_reset;
 8002968:	2200      	movs	r2, #0
 800296a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800296e:	4630      	mov	r0, r6
 8002970:	f7fe fe36 	bl	80015e0 <HAL_GPIO_WritePin>
	//delay_us(37);
	HAL_Delay(0.037);
 8002974:	2000      	movs	r0, #0
 8002976:	f7fe fae1 	bl	8000f3c <HAL_Delay>
	lcd_e_set;
 800297a:	4630      	mov	r0, r6
 800297c:	2201      	movs	r2, #1
 800297e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
}
 8002982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	lcd_e_set;
 8002986:	f7fe be2b 	b.w	80015e0 <HAL_GPIO_WritePin>
 800298a:	bf00      	nop
 800298c:	40020c00 	.word	0x40020c00
 8002990:	40020400 	.word	0x40020400

08002994 <lcd_init>:
{
 8002994:	b570      	push	{r4, r5, r6, lr}
	lcd_address[0] = 0x00;
 8002996:	4bc1      	ldr	r3, [pc, #772]	; (8002c9c <lcd_init+0x308>)
	lcd_rs_reset;
 8002998:	4dc1      	ldr	r5, [pc, #772]	; (8002ca0 <lcd_init+0x30c>)
	lcd_address[2] = 0x00 + column;
 800299a:	7098      	strb	r0, [r3, #2]
	lcd_address[1] = 0x40;
 800299c:	2640      	movs	r6, #64	; 0x40
	lcd_address[0] = 0x00;
 800299e:	2400      	movs	r4, #0
	lcd_address[3] = 0x40 + column;
 80029a0:	1982      	adds	r2, r0, r6
	lcd_address[0] = 0x00;
 80029a2:	701c      	strb	r4, [r3, #0]
	lcd_address[1] = 0x40;
 80029a4:	705e      	strb	r6, [r3, #1]
	lcd_address[3] = 0x40 + column;
 80029a6:	70da      	strb	r2, [r3, #3]
	lcd_max_column = column;
 80029a8:	4bbe      	ldr	r3, [pc, #760]	; (8002ca4 <lcd_init+0x310>)
 80029aa:	7018      	strb	r0, [r3, #0]
	lcd_max_row = row;
 80029ac:	4bbe      	ldr	r3, [pc, #760]	; (8002ca8 <lcd_init+0x314>)
	lcd_rs_reset;
 80029ae:	4622      	mov	r2, r4
	lcd_max_row = row;
 80029b0:	7019      	strb	r1, [r3, #0]
	lcd_rs_reset;
 80029b2:	4628      	mov	r0, r5
 80029b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029b8:	f7fe fe12 	bl	80015e0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80029bc:	2064      	movs	r0, #100	; 0x64
 80029be:	f7fe fabd 	bl	8000f3c <HAL_Delay>
	lcd_4bit(0b0011);
 80029c2:	2003      	movs	r0, #3
 80029c4:	f7ff ff2e 	bl	8002824 <lcd_4bit>
	HAL_Delay(5);
 80029c8:	2005      	movs	r0, #5
 80029ca:	f7fe fab7 	bl	8000f3c <HAL_Delay>
	lcd_4bit(0b0011);
 80029ce:	2003      	movs	r0, #3
 80029d0:	f7ff ff28 	bl	8002824 <lcd_4bit>
	HAL_Delay(1);
 80029d4:	2001      	movs	r0, #1
 80029d6:	f7fe fab1 	bl	8000f3c <HAL_Delay>
	lcd_4bit(0b0011);
 80029da:	2003      	movs	r0, #3
 80029dc:	f7ff ff22 	bl	8002824 <lcd_4bit>
	HAL_Delay(1);
 80029e0:	2001      	movs	r0, #1
 80029e2:	f7fe faab 	bl	8000f3c <HAL_Delay>
	lcd_4bit(0b0010);
 80029e6:	2002      	movs	r0, #2
 80029e8:	f7ff ff1c 	bl	8002824 <lcd_4bit>
	HAL_Delay(1);
 80029ec:	2001      	movs	r0, #1
 80029ee:	f7fe faa5 	bl	8000f3c <HAL_Delay>
	lcd_8bit(0b00101000);
 80029f2:	2028      	movs	r0, #40	; 0x28
 80029f4:	f7ff ff56 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b00001000);
 80029f8:	2008      	movs	r0, #8
 80029fa:	f7ff ff53 	bl	80028a4 <lcd_8bit>
	HAL_Delay(1);
 80029fe:	2001      	movs	r0, #1
 8002a00:	f7fe fa9c 	bl	8000f3c <HAL_Delay>
	lcd_8bit(0b00000001);
 8002a04:	2001      	movs	r0, #1
 8002a06:	f7ff ff4d 	bl	80028a4 <lcd_8bit>
	HAL_Delay(3);
 8002a0a:	2003      	movs	r0, #3
 8002a0c:	f7fe fa96 	bl	8000f3c <HAL_Delay>
	lcd_8bit(0b00000110);
 8002a10:	2006      	movs	r0, #6
 8002a12:	f7ff ff47 	bl	80028a4 <lcd_8bit>
	HAL_Delay(1);
 8002a16:	2001      	movs	r0, #1
 8002a18:	f7fe fa90 	bl	8000f3c <HAL_Delay>
	lcd_8bit(0b00001100);
 8002a1c:	200c      	movs	r0, #12
 8002a1e:	f7ff ff41 	bl	80028a4 <lcd_8bit>
	HAL_Delay(1);
 8002a22:	2001      	movs	r0, #1
 8002a24:	f7fe fa8a 	bl	8000f3c <HAL_Delay>
	lcd_rs_reset;
 8002a28:	4622      	mov	r2, r4
 8002a2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a2e:	4628      	mov	r0, r5
 8002a30:	f7fe fdd6 	bl	80015e0 <HAL_GPIO_WritePin>
	lcd_8bit(0x40);
 8002a34:	4630      	mov	r0, r6
 8002a36:	f7ff ff35 	bl	80028a4 <lcd_8bit>
	lcd_rs_set;
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a40:	4628      	mov	r0, r5
 8002a42:	f7fe fdcd 	bl	80015e0 <HAL_GPIO_WritePin>
	lcd_8bit(0b00111);
 8002a46:	2007      	movs	r0, #7
 8002a48:	f7ff ff2c 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b01111);
 8002a4c:	200f      	movs	r0, #15
 8002a4e:	f7ff ff29 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002a52:	201f      	movs	r0, #31
 8002a54:	f7ff ff26 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002a58:	201f      	movs	r0, #31
 8002a5a:	f7ff ff23 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002a5e:	201f      	movs	r0, #31
 8002a60:	f7ff ff20 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002a64:	201f      	movs	r0, #31
 8002a66:	f7ff ff1d 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002a6a:	201f      	movs	r0, #31
 8002a6c:	f7ff ff1a 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002a70:	201f      	movs	r0, #31
 8002a72:	f7ff ff17 	bl	80028a4 <lcd_8bit>
	lcd_rs_reset;
 8002a76:	4622      	mov	r2, r4
 8002a78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a7c:	4628      	mov	r0, r5
 8002a7e:	f7fe fdaf 	bl	80015e0 <HAL_GPIO_WritePin>
	lcd_8bit(0x48);
 8002a82:	2048      	movs	r0, #72	; 0x48
 8002a84:	f7ff ff0e 	bl	80028a4 <lcd_8bit>
	lcd_rs_set;
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a8e:	4628      	mov	r0, r5
 8002a90:	f7fe fda6 	bl	80015e0 <HAL_GPIO_WritePin>
	lcd_8bit(0b11111);
 8002a94:	201f      	movs	r0, #31
 8002a96:	f7ff ff05 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002a9a:	201f      	movs	r0, #31
 8002a9c:	f7ff ff02 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002aa0:	201f      	movs	r0, #31
 8002aa2:	f7ff feff 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002aa6:	201f      	movs	r0, #31
 8002aa8:	f7ff fefc 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002aac:	201f      	movs	r0, #31
 8002aae:	f7ff fef9 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002ab2:	201f      	movs	r0, #31
 8002ab4:	f7ff fef6 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b01111);
 8002ab8:	200f      	movs	r0, #15
 8002aba:	f7ff fef3 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b00111);
 8002abe:	2007      	movs	r0, #7
 8002ac0:	f7ff fef0 	bl	80028a4 <lcd_8bit>
	lcd_rs_reset;
 8002ac4:	4622      	mov	r2, r4
 8002ac6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002aca:	4628      	mov	r0, r5
 8002acc:	f7fe fd88 	bl	80015e0 <HAL_GPIO_WritePin>
	lcd_8bit(0x50);
 8002ad0:	2050      	movs	r0, #80	; 0x50
 8002ad2:	f7ff fee7 	bl	80028a4 <lcd_8bit>
	lcd_rs_set;
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002adc:	4628      	mov	r0, r5
 8002ade:	f7fe fd7f 	bl	80015e0 <HAL_GPIO_WritePin>
	lcd_8bit(0b11100);
 8002ae2:	201c      	movs	r0, #28
 8002ae4:	f7ff fede 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11110);
 8002ae8:	201e      	movs	r0, #30
 8002aea:	f7ff fedb 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002aee:	201f      	movs	r0, #31
 8002af0:	f7ff fed8 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002af4:	201f      	movs	r0, #31
 8002af6:	f7ff fed5 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002afa:	201f      	movs	r0, #31
 8002afc:	f7ff fed2 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002b00:	201f      	movs	r0, #31
 8002b02:	f7ff fecf 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002b06:	201f      	movs	r0, #31
 8002b08:	f7ff fecc 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002b0c:	201f      	movs	r0, #31
 8002b0e:	f7ff fec9 	bl	80028a4 <lcd_8bit>
	lcd_rs_reset;
 8002b12:	4622      	mov	r2, r4
 8002b14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b18:	4628      	mov	r0, r5
 8002b1a:	f7fe fd61 	bl	80015e0 <HAL_GPIO_WritePin>
	lcd_8bit(0x58);
 8002b1e:	2058      	movs	r0, #88	; 0x58
 8002b20:	f7ff fec0 	bl	80028a4 <lcd_8bit>
	lcd_rs_set;
 8002b24:	2201      	movs	r2, #1
 8002b26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b2a:	4628      	mov	r0, r5
 8002b2c:	f7fe fd58 	bl	80015e0 <HAL_GPIO_WritePin>
	lcd_8bit(0b11111);
 8002b30:	201f      	movs	r0, #31
 8002b32:	f7ff feb7 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002b36:	201f      	movs	r0, #31
 8002b38:	f7ff feb4 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002b3c:	201f      	movs	r0, #31
 8002b3e:	f7ff feb1 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002b42:	201f      	movs	r0, #31
 8002b44:	f7ff feae 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002b48:	201f      	movs	r0, #31
 8002b4a:	f7ff feab 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002b4e:	201f      	movs	r0, #31
 8002b50:	f7ff fea8 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11110);
 8002b54:	201e      	movs	r0, #30
 8002b56:	f7ff fea5 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11100);
 8002b5a:	201c      	movs	r0, #28
 8002b5c:	f7ff fea2 	bl	80028a4 <lcd_8bit>
	lcd_rs_reset;
 8002b60:	4622      	mov	r2, r4
 8002b62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b66:	4628      	mov	r0, r5
 8002b68:	f7fe fd3a 	bl	80015e0 <HAL_GPIO_WritePin>
	lcd_8bit(0x60);
 8002b6c:	2060      	movs	r0, #96	; 0x60
 8002b6e:	f7ff fe99 	bl	80028a4 <lcd_8bit>
	lcd_rs_set;
 8002b72:	2201      	movs	r2, #1
 8002b74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b78:	4628      	mov	r0, r5
 8002b7a:	f7fe fd31 	bl	80015e0 <HAL_GPIO_WritePin>
	lcd_8bit(0b11111);
 8002b7e:	201f      	movs	r0, #31
 8002b80:	f7ff fe90 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002b84:	201f      	movs	r0, #31
 8002b86:	f7ff fe8d 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002b8a:	201f      	movs	r0, #31
 8002b8c:	f7ff fe8a 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b00000);
 8002b90:	4620      	mov	r0, r4
 8002b92:	f7ff fe87 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b00000);
 8002b96:	4620      	mov	r0, r4
 8002b98:	f7ff fe84 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b00000);
 8002b9c:	4620      	mov	r0, r4
 8002b9e:	f7ff fe81 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b00000);
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	f7ff fe7e 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b00000);
 8002ba8:	4620      	mov	r0, r4
 8002baa:	f7ff fe7b 	bl	80028a4 <lcd_8bit>
	lcd_rs_reset;
 8002bae:	4622      	mov	r2, r4
 8002bb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bb4:	4628      	mov	r0, r5
 8002bb6:	f7fe fd13 	bl	80015e0 <HAL_GPIO_WritePin>
	lcd_8bit(0x68);
 8002bba:	2068      	movs	r0, #104	; 0x68
 8002bbc:	f7ff fe72 	bl	80028a4 <lcd_8bit>
	lcd_rs_set;
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bc6:	4628      	mov	r0, r5
 8002bc8:	f7fe fd0a 	bl	80015e0 <HAL_GPIO_WritePin>
	lcd_8bit(0b11111);
 8002bcc:	201f      	movs	r0, #31
 8002bce:	f7ff fe69 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002bd2:	201f      	movs	r0, #31
 8002bd4:	f7ff fe66 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002bd8:	201f      	movs	r0, #31
 8002bda:	f7ff fe63 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b00000);
 8002bde:	4620      	mov	r0, r4
 8002be0:	f7ff fe60 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b00000);
 8002be4:	4620      	mov	r0, r4
 8002be6:	f7ff fe5d 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b00000);
 8002bea:	4620      	mov	r0, r4
 8002bec:	f7ff fe5a 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002bf0:	201f      	movs	r0, #31
 8002bf2:	f7ff fe57 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002bf6:	201f      	movs	r0, #31
 8002bf8:	f7ff fe54 	bl	80028a4 <lcd_8bit>
	lcd_rs_reset;
 8002bfc:	4622      	mov	r2, r4
 8002bfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c02:	4628      	mov	r0, r5
 8002c04:	f7fe fcec 	bl	80015e0 <HAL_GPIO_WritePin>
	lcd_8bit(0x70);
 8002c08:	2070      	movs	r0, #112	; 0x70
 8002c0a:	f7ff fe4b 	bl	80028a4 <lcd_8bit>
	lcd_rs_set;
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c14:	4628      	mov	r0, r5
 8002c16:	f7fe fce3 	bl	80015e0 <HAL_GPIO_WritePin>
	lcd_8bit(0b00000);
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	f7ff fe42 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b00000);
 8002c20:	4620      	mov	r0, r4
 8002c22:	f7ff fe3f 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b00000);
 8002c26:	4620      	mov	r0, r4
 8002c28:	f7ff fe3c 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b00000);
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	f7ff fe39 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b00000);
 8002c32:	4620      	mov	r0, r4
 8002c34:	f7ff fe36 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002c38:	201f      	movs	r0, #31
 8002c3a:	f7ff fe33 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002c3e:	201f      	movs	r0, #31
 8002c40:	f7ff fe30 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002c44:	201f      	movs	r0, #31
 8002c46:	f7ff fe2d 	bl	80028a4 <lcd_8bit>
	lcd_rs_reset;
 8002c4a:	4622      	mov	r2, r4
 8002c4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c50:	4628      	mov	r0, r5
 8002c52:	f7fe fcc5 	bl	80015e0 <HAL_GPIO_WritePin>
	lcd_8bit(0x78);
 8002c56:	2078      	movs	r0, #120	; 0x78
 8002c58:	f7ff fe24 	bl	80028a4 <lcd_8bit>
	lcd_rs_set;
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c62:	4628      	mov	r0, r5
 8002c64:	f7fe fcbc 	bl	80015e0 <HAL_GPIO_WritePin>
	lcd_8bit(0b11111);
 8002c68:	201f      	movs	r0, #31
 8002c6a:	f7ff fe1b 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002c6e:	201f      	movs	r0, #31
 8002c70:	f7ff fe18 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002c74:	201f      	movs	r0, #31
 8002c76:	f7ff fe15 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002c7a:	201f      	movs	r0, #31
 8002c7c:	f7ff fe12 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002c80:	201f      	movs	r0, #31
 8002c82:	f7ff fe0f 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002c86:	201f      	movs	r0, #31
 8002c88:	f7ff fe0c 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002c8c:	201f      	movs	r0, #31
 8002c8e:	f7ff fe09 	bl	80028a4 <lcd_8bit>
	lcd_8bit(0b11111);
 8002c92:	201f      	movs	r0, #31
}
 8002c94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	lcd_8bit(0b11111);
 8002c98:	f7ff be04 	b.w	80028a4 <lcd_8bit>
 8002c9c:	200000ae 	.word	0x200000ae
 8002ca0:	40020400 	.word	0x40020400
 8002ca4:	200000b7 	.word	0x200000b7
 8002ca8:	200000ac 	.word	0x200000ac

08002cac <lcd_gotoxy>:
{
 8002cac:	b538      	push	{r3, r4, r5, lr}
	if(column >= lcd_max_column) column = 0;
 8002cae:	4b0f      	ldr	r3, [pc, #60]	; (8002cec <lcd_gotoxy+0x40>)
 8002cb0:	781c      	ldrb	r4, [r3, #0]
	if(row >= lcd_max_row) row = 0;
 8002cb2:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <lcd_gotoxy+0x44>)
 8002cb4:	781d      	ldrb	r5, [r3, #0]
	if(column >= lcd_max_column) column = 0;
 8002cb6:	4284      	cmp	r4, r0
 8002cb8:	bf8c      	ite	hi
 8002cba:	4604      	movhi	r4, r0
 8002cbc:	2400      	movls	r4, #0
	if(row >= lcd_max_row) row = 0;
 8002cbe:	428d      	cmp	r5, r1
 8002cc0:	bf8c      	ite	hi
 8002cc2:	460d      	movhi	r5, r1
 8002cc4:	2500      	movls	r5, #0
	lcd_rs_reset;
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ccc:	4809      	ldr	r0, [pc, #36]	; (8002cf4 <lcd_gotoxy+0x48>)
 8002cce:	f7fe fc87 	bl	80015e0 <HAL_GPIO_WritePin>
	lcd_8bit(0x80 | (lcd_address[row] + column));
 8002cd2:	4b09      	ldr	r3, [pc, #36]	; (8002cf8 <lcd_gotoxy+0x4c>)
 8002cd4:	5d58      	ldrb	r0, [r3, r5]
 8002cd6:	4420      	add	r0, r4
 8002cd8:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8002cdc:	b2c0      	uxtb	r0, r0
 8002cde:	f7ff fde1 	bl	80028a4 <lcd_8bit>
	HAL_Delay(0.037);
 8002ce2:	2000      	movs	r0, #0
}
 8002ce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_Delay(0.037);
 8002ce8:	f7fe b928 	b.w	8000f3c <HAL_Delay>
 8002cec:	200000b7 	.word	0x200000b7
 8002cf0:	200000ac 	.word	0x200000ac
 8002cf4:	40020400 	.word	0x40020400
 8002cf8:	200000ae 	.word	0x200000ae

08002cfc <lcd_putc>:
{
 8002cfc:	b510      	push	{r4, lr}
	lcd_rs_set;
 8002cfe:	2201      	movs	r2, #1
{
 8002d00:	4604      	mov	r4, r0
	lcd_rs_set;
 8002d02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d06:	4805      	ldr	r0, [pc, #20]	; (8002d1c <lcd_putc+0x20>)
 8002d08:	f7fe fc6a 	bl	80015e0 <HAL_GPIO_WritePin>
	lcd_8bit(data);
 8002d0c:	4620      	mov	r0, r4
 8002d0e:	f7ff fdc9 	bl	80028a4 <lcd_8bit>
	HAL_Delay(0.037);
 8002d12:	2000      	movs	r0, #0
}
 8002d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(0.037);
 8002d18:	f7fe b910 	b.w	8000f3c <HAL_Delay>
 8002d1c:	40020400 	.word	0x40020400

08002d20 <lcd_print>:
{
 8002d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if(current_column >= lcd_max_column && current_row >= lcd_max_row)
 8002d24:	4f19      	ldr	r7, [pc, #100]	; (8002d8c <lcd_print+0x6c>)
 8002d26:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8002d90 <lcd_print+0x70>
{
 8002d2a:	4604      	mov	r4, r0
 8002d2c:	460d      	mov	r5, r1
 8002d2e:	1c56      	adds	r6, r2, #1
	while(*data)
 8002d30:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8002d34:	b90b      	cbnz	r3, 8002d3a <lcd_print+0x1a>
}
 8002d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(current_column >= lcd_max_column && current_row >= lcd_max_row)
 8002d3a:	783b      	ldrb	r3, [r7, #0]
 8002d3c:	42a3      	cmp	r3, r4
 8002d3e:	d81a      	bhi.n	8002d76 <lcd_print+0x56>
 8002d40:	f898 3000 	ldrb.w	r3, [r8]
 8002d44:	42ab      	cmp	r3, r5
 8002d46:	d80b      	bhi.n	8002d60 <lcd_print+0x40>
			lcd_gotoxy(current_column,current_row);
 8002d48:	2100      	movs	r1, #0
 8002d4a:	4608      	mov	r0, r1
 8002d4c:	f7ff ffae 	bl	8002cac <lcd_gotoxy>
			lcd_putc(*data++);
 8002d50:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8002d54:	f7ff ffd2 	bl	8002cfc <lcd_putc>
			current_row = 0;
 8002d58:	2500      	movs	r5, #0
			current_column++;
 8002d5a:	2401      	movs	r4, #1
 8002d5c:	3601      	adds	r6, #1
 8002d5e:	e7e7      	b.n	8002d30 <lcd_print+0x10>
			current_row++;
 8002d60:	3501      	adds	r5, #1
 8002d62:	b2ed      	uxtb	r5, r5
			lcd_gotoxy(current_column,current_row);
 8002d64:	4629      	mov	r1, r5
 8002d66:	2000      	movs	r0, #0
 8002d68:	f7ff ffa0 	bl	8002cac <lcd_gotoxy>
			lcd_putc(*data++);
 8002d6c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8002d70:	f7ff ffc4 	bl	8002cfc <lcd_putc>
 8002d74:	e7f1      	b.n	8002d5a <lcd_print+0x3a>
			lcd_gotoxy(current_column,current_row);
 8002d76:	4620      	mov	r0, r4
 8002d78:	4629      	mov	r1, r5
 8002d7a:	f7ff ff97 	bl	8002cac <lcd_gotoxy>
			current_column++;
 8002d7e:	3401      	adds	r4, #1
			lcd_putc(*data++);
 8002d80:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8002d84:	f7ff ffba 	bl	8002cfc <lcd_putc>
			current_column++;
 8002d88:	b2e4      	uxtb	r4, r4
 8002d8a:	e7e7      	b.n	8002d5c <lcd_print+0x3c>
 8002d8c:	200000b7 	.word	0x200000b7
 8002d90:	200000ac 	.word	0x200000ac

08002d94 <buzzer>:
	}
}

void buzzer(short int waktu, short int jumlah)
{
	buzzer_status = 1;
 8002d94:	4b08      	ldr	r3, [pc, #32]	; (8002db8 <buzzer+0x24>)
 8002d96:	2201      	movs	r2, #1
{
 8002d98:	b410      	push	{r4}
	buzzer_status = 1;
 8002d9a:	701a      	strb	r2, [r3, #0]
	buzzer_iterasi = 0;
 8002d9c:	4b07      	ldr	r3, [pc, #28]	; (8002dbc <buzzer+0x28>)
 8002d9e:	2400      	movs	r4, #0
 8002da0:	801c      	strh	r4, [r3, #0]
	buzzer_waktu = waktu;
 8002da2:	4b07      	ldr	r3, [pc, #28]	; (8002dc0 <buzzer+0x2c>)
	buzzer_jumlah = jumlah * 2;

	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_2,SET);
}
 8002da4:	f85d 4b04 	ldr.w	r4, [sp], #4
	buzzer_waktu = waktu;
 8002da8:	8018      	strh	r0, [r3, #0]
	buzzer_jumlah = jumlah * 2;
 8002daa:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <buzzer+0x30>)
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_2,SET);
 8002dac:	4806      	ldr	r0, [pc, #24]	; (8002dc8 <buzzer+0x34>)
	buzzer_jumlah = jumlah * 2;
 8002dae:	4091      	lsls	r1, r2
 8002db0:	8019      	strh	r1, [r3, #0]
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_2,SET);
 8002db2:	2104      	movs	r1, #4
 8002db4:	f7fe bc14 	b.w	80015e0 <HAL_GPIO_WritePin>
 8002db8:	20000094 	.word	0x20000094
 8002dbc:	20000090 	.word	0x20000090
 8002dc0:	20000096 	.word	0x20000096
 8002dc4:	20000092 	.word	0x20000092
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	00000000 	.word	0x00000000

08002dd0 <hitung_odometry>:

void hitung_odometry(void)
{
	short int kecepatan_odometry0 = odometry0;
 8002dd0:	4a53      	ldr	r2, [pc, #332]	; (8002f20 <hitung_odometry+0x150>)
	short int kecepatan_odometry1 = odometry1;
 8002dd2:	4854      	ldr	r0, [pc, #336]	; (8002f24 <hitung_odometry+0x154>)
{
 8002dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	short int kecepatan_odometry0 = odometry0;
 8002dd6:	6a53      	ldr	r3, [r2, #36]	; 0x24
	short int kecepatan_odometry1 = odometry1;
 8002dd8:	6a44      	ldr	r4, [r0, #36]	; 0x24

	odometry0 = odometry1 = 0;

	buffer_x[0] = kecepatan_odometry0 * cosf(gyro_radian + 2.356190);
 8002dda:	4d53      	ldr	r5, [pc, #332]	; (8002f28 <hitung_odometry+0x158>)
 8002ddc:	b21b      	sxth	r3, r3
 8002dde:	ee07 3a90 	vmov	s15, r3
 8002de2:	4b52      	ldr	r3, [pc, #328]	; (8002f2c <hitung_odometry+0x15c>)
	odometry0 = odometry1 = 0;
 8002de4:	2100      	movs	r1, #0
{
 8002de6:	ed2d 8b06 	vpush	{d8-d10}
	odometry0 = odometry1 = 0;
 8002dea:	6241      	str	r1, [r0, #36]	; 0x24
	buffer_x[0] = kecepatan_odometry0 * cosf(gyro_radian + 2.356190);
 8002dec:	6818      	ldr	r0, [r3, #0]
	odometry0 = odometry1 = 0;
 8002dee:	6251      	str	r1, [r2, #36]	; 0x24
	buffer_x[0] = kecepatan_odometry0 * cosf(gyro_radian + 2.356190);
 8002df0:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8002df4:	f7fd fba0 	bl	8000538 <__aeabi_f2d>
 8002df8:	a343      	add	r3, pc, #268	; (adr r3, 8002f08 <hitung_odometry+0x138>)
 8002dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfe:	4606      	mov	r6, r0
 8002e00:	460f      	mov	r7, r1
 8002e02:	f7fd fa3b 	bl	800027c <__adddf3>
 8002e06:	f7fd fe85 	bl	8000b14 <__aeabi_d2f>
 8002e0a:	ee00 0a10 	vmov	s0, r0
 8002e0e:	ee0a 0a90 	vmov	s21, r0
 8002e12:	f001 fd91 	bl	8004938 <cosf>
	buffer_x[1] = kecepatan_odometry1 * cosf(gyro_radian + 0.785398);
 8002e16:	b224      	sxth	r4, r4
	buffer_x[0] = kecepatan_odometry0 * cosf(gyro_radian + 2.356190);
 8002e18:	ee68 9a80 	vmul.f32	s19, s17, s0
	buffer_x[1] = kecepatan_odometry1 * cosf(gyro_radian + 0.785398);
 8002e1c:	ee07 4a90 	vmov	s15, r4
 8002e20:	a33b      	add	r3, pc, #236	; (adr r3, 8002f10 <hitung_odometry+0x140>)
 8002e22:	e9d3 2300 	ldrd	r2, r3, [r3]
	buffer_x[0] = kecepatan_odometry0 * cosf(gyro_radian + 2.356190);
 8002e26:	edc5 9a00 	vstr	s19, [r5]
	buffer_x[1] = kecepatan_odometry1 * cosf(gyro_radian + 0.785398);
 8002e2a:	4630      	mov	r0, r6
 8002e2c:	4639      	mov	r1, r7
 8002e2e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002e32:	f7fd fa23 	bl	800027c <__adddf3>
 8002e36:	f7fd fe6d 	bl	8000b14 <__aeabi_d2f>
 8002e3a:	ee00 0a10 	vmov	s0, r0
 8002e3e:	ee0a 0a10 	vmov	s20, r0
 8002e42:	f001 fd79 	bl	8004938 <cosf>
 8002e46:	ee28 9a00 	vmul.f32	s18, s16, s0

	buffer_y[0] = kecepatan_odometry0 * sinf(gyro_radian + 2.356190);
 8002e4a:	eeb0 0a6a 	vmov.f32	s0, s21
	buffer_x[1] = kecepatan_odometry1 * cosf(gyro_radian + 0.785398);
 8002e4e:	ed85 9a01 	vstr	s18, [r5, #4]
	buffer_y[0] = kecepatan_odometry0 * sinf(gyro_radian + 2.356190);
 8002e52:	f001 fdb1 	bl	80049b8 <sinf>
 8002e56:	4c36      	ldr	r4, [pc, #216]	; (8002f30 <hitung_odometry+0x160>)
 8002e58:	ee68 8a80 	vmul.f32	s17, s17, s0
	buffer_y[1] = kecepatan_odometry1 * sinf(gyro_radian + 0.785398);
 8002e5c:	eeb0 0a4a 	vmov.f32	s0, s20
	buffer_y[0] = kecepatan_odometry0 * sinf(gyro_radian + 2.356190);
 8002e60:	edc4 8a00 	vstr	s17, [r4]
	buffer_y[1] = kecepatan_odometry1 * sinf(gyro_radian + 0.785398);
 8002e64:	f001 fda8 	bl	80049b8 <sinf>

	posisi_x_buffer += (buffer_x[0] + buffer_x[1]) * odometry_to_cm;
 8002e68:	ee79 7a89 	vadd.f32	s15, s19, s18
	buffer_y[1] = kecepatan_odometry1 * sinf(gyro_radian + 0.785398);
 8002e6c:	ee28 8a00 	vmul.f32	s16, s16, s0
	posisi_x_buffer += (buffer_x[0] + buffer_x[1]) * odometry_to_cm;
 8002e70:	ee17 0a90 	vmov	r0, s15
	buffer_y[1] = kecepatan_odometry1 * sinf(gyro_radian + 0.785398);
 8002e74:	ed84 8a01 	vstr	s16, [r4, #4]
	posisi_x_buffer += (buffer_x[0] + buffer_x[1]) * odometry_to_cm;
 8002e78:	f7fd fb5e 	bl	8000538 <__aeabi_f2d>
 8002e7c:	a326      	add	r3, pc, #152	; (adr r3, 8002f18 <hitung_odometry+0x148>)
 8002e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e82:	f7fd fbad 	bl	80005e0 <__aeabi_dmul>
 8002e86:	4c2b      	ldr	r4, [pc, #172]	; (8002f34 <hitung_odometry+0x164>)
 8002e88:	4606      	mov	r6, r0
 8002e8a:	6820      	ldr	r0, [r4, #0]
 8002e8c:	460f      	mov	r7, r1
 8002e8e:	f7fd fb53 	bl	8000538 <__aeabi_f2d>
 8002e92:	4602      	mov	r2, r0
 8002e94:	460b      	mov	r3, r1
 8002e96:	4630      	mov	r0, r6
 8002e98:	4639      	mov	r1, r7
 8002e9a:	f7fd f9ef 	bl	800027c <__adddf3>
 8002e9e:	f7fd fe39 	bl	8000b14 <__aeabi_d2f>
	posisi_y_buffer += (buffer_y[0] + buffer_y[1]) * odometry_to_cm;
 8002ea2:	ee78 7a88 	vadd.f32	s15, s17, s16
	posisi_x_buffer += (buffer_x[0] + buffer_x[1]) * odometry_to_cm;
 8002ea6:	6020      	str	r0, [r4, #0]
 8002ea8:	ee09 0a10 	vmov	s18, r0
	posisi_y_buffer += (buffer_y[0] + buffer_y[1]) * odometry_to_cm;
 8002eac:	ee17 0a90 	vmov	r0, s15
 8002eb0:	f7fd fb42 	bl	8000538 <__aeabi_f2d>
 8002eb4:	a318      	add	r3, pc, #96	; (adr r3, 8002f18 <hitung_odometry+0x148>)
 8002eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eba:	f7fd fb91 	bl	80005e0 <__aeabi_dmul>
 8002ebe:	4c1e      	ldr	r4, [pc, #120]	; (8002f38 <hitung_odometry+0x168>)
 8002ec0:	4606      	mov	r6, r0
 8002ec2:	6820      	ldr	r0, [r4, #0]
 8002ec4:	460f      	mov	r7, r1
 8002ec6:	f7fd fb37 	bl	8000538 <__aeabi_f2d>
 8002eca:	460b      	mov	r3, r1
 8002ecc:	4602      	mov	r2, r0
 8002ece:	4639      	mov	r1, r7
 8002ed0:	4630      	mov	r0, r6
 8002ed2:	f7fd f9d3 	bl	800027c <__adddf3>
 8002ed6:	f7fd fe1d 	bl	8000b14 <__aeabi_d2f>

	//kecepatan_robot_x_buffer += kecepatan_odometry0 * cosf(3.926990) + kecepatan_odometry1 * cosf(2.356190);
	//kecepatan_robot_y_buffer += kecepatan_odometry0 * sinf(3.926990) + kecepatan_odometry1 * sinf(2.356190);

	posisi_x = posisi_x_buffer - posisi_x_offset;
 8002eda:	4b18      	ldr	r3, [pc, #96]	; (8002f3c <hitung_odometry+0x16c>)
	posisi_y_buffer += (buffer_y[0] + buffer_y[1]) * odometry_to_cm;
 8002edc:	6020      	str	r0, [r4, #0]
	posisi_x = posisi_x_buffer - posisi_x_offset;
 8002ede:	ed93 7a00 	vldr	s14, [r3]
 8002ee2:	4b17      	ldr	r3, [pc, #92]	; (8002f40 <hitung_odometry+0x170>)
 8002ee4:	ee39 9a47 	vsub.f32	s18, s18, s14
	posisi_y_buffer += (buffer_y[0] + buffer_y[1]) * odometry_to_cm;
 8002ee8:	ee07 0a90 	vmov	s15, r0
	posisi_x = posisi_x_buffer - posisi_x_offset;
 8002eec:	ed83 9a00 	vstr	s18, [r3]
	posisi_y = posisi_y_buffer - posisi_y_offset;
 8002ef0:	4b14      	ldr	r3, [pc, #80]	; (8002f44 <hitung_odometry+0x174>)
}
 8002ef2:	ecbd 8b06 	vpop	{d8-d10}
	posisi_y = posisi_y_buffer - posisi_y_offset;
 8002ef6:	ed93 7a00 	vldr	s14, [r3]
 8002efa:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <hitung_odometry+0x178>)
 8002efc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f00:	edc3 7a00 	vstr	s15, [r3]
}
 8002f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f06:	bf00      	nop
 8002f08:	24894c44 	.word	0x24894c44
 8002f0c:	4002d97a 	.word	0x4002d97a
 8002f10:	fc8b007a 	.word	0xfc8b007a
 8002f14:	3fe921fa 	.word	0x3fe921fa
 8002f18:	20e857ee 	.word	0x20e857ee
 8002f1c:	3fa3b13b 	.word	0x3fa3b13b
 8002f20:	40000c00 	.word	0x40000c00
 8002f24:	40000800 	.word	0x40000800
 8002f28:	200002e8 	.word	0x200002e8
 8002f2c:	20000008 	.word	0x20000008
 8002f30:	200004ac 	.word	0x200004ac
 8002f34:	20000138 	.word	0x20000138
 8002f38:	200003d0 	.word	0x200003d0
 8002f3c:	200000b8 	.word	0x200000b8
 8002f40:	20000378 	.word	0x20000378
 8002f44:	200003b8 	.word	0x200003b8
 8002f48:	200000bc 	.word	0x200000bc
 8002f4c:	00000000 	.word	0x00000000

08002f50 <kontrol_motor>:

void kontrol_motor()
{
 8002f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	v_motor[0] = encoder0;
 8002f54:	4aac      	ldr	r2, [pc, #688]	; (8003208 <kontrol_motor+0x2b8>)
 8002f56:	4bad      	ldr	r3, [pc, #692]	; (800320c <kontrol_motor+0x2bc>)
 8002f58:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002f5a:	f8df 92f4 	ldr.w	r9, [pc, #756]	; 8003250 <kontrol_motor+0x300>
 8002f5e:	4fac      	ldr	r7, [pc, #688]	; (8003210 <kontrol_motor+0x2c0>)
 8002f60:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 8003254 <kontrol_motor+0x304>
 8002f64:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 8003258 <kontrol_motor+0x308>
{
 8002f68:	ed2d 8b08 	vpush	{d8-d11}
	v_motor[0] = encoder0;
 8002f6c:	8019      	strh	r1, [r3, #0]
    v_motor[1] = encoder1;
 8002f6e:	49a9      	ldr	r1, [pc, #676]	; (8003214 <kontrol_motor+0x2c4>)
		i_motor[i] += ki_motor * error_motor[i];
		d_motor[i] = kd_motor * (error_motor[i] - previous_error_motor[i]);

		previous_error_motor[i] = error_motor[i];

		if(i_motor[i] > 100) i_motor[i] = 100;
 8002f70:	eddf 9aa9 	vldr	s19, [pc, #676]	; 8003218 <kontrol_motor+0x2c8>
    v_motor[1] = encoder1;
 8002f74:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8002f76:	8058      	strh	r0, [r3, #2]
	v_motor[2] = encoder2;
 8002f78:	48a8      	ldr	r0, [pc, #672]	; (800321c <kontrol_motor+0x2cc>)
		else if(i_motor[i] < -100) i_motor[i] = -100;
 8002f7a:	ed9f 9aa9 	vldr	s18, [pc, #676]	; 8003220 <kontrol_motor+0x2d0>
	v_motor[2] = encoder2;
 8002f7e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8002f80:	809c      	strh	r4, [r3, #4]
	v_motor[3] = encoder3;
 8002f82:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
{
 8002f86:	b089      	sub	sp, #36	; 0x24
	v_motor[3] = encoder3;
 8002f88:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8002f8a:	80dc      	strh	r4, [r3, #6]
	encoder0 = encoder1 = encoder2 = encoder3 = 0;
 8002f8c:	2400      	movs	r4, #0
 8002f8e:	626c      	str	r4, [r5, #36]	; 0x24
 8002f90:	6244      	str	r4, [r0, #36]	; 0x24
 8002f92:	624c      	str	r4, [r1, #36]	; 0x24
 8002f94:	6254      	str	r4, [r2, #36]	; 0x24
 8002f96:	4aa3      	ldr	r2, [pc, #652]	; (8003224 <kontrol_motor+0x2d4>)
 8002f98:	9203      	str	r2, [sp, #12]
 8002f9a:	4aa3      	ldr	r2, [pc, #652]	; (8003228 <kontrol_motor+0x2d8>)
 8002f9c:	9204      	str	r2, [sp, #16]
 8002f9e:	4693      	mov	fp, r2
 8002fa0:	4aa0      	ldr	r2, [pc, #640]	; (8003224 <kontrol_motor+0x2d4>)
 8002fa2:	f8cd 8000 	str.w	r8, [sp]
 8002fa6:	463e      	mov	r6, r7
 8002fa8:	464d      	mov	r5, r9
 8002faa:	9201      	str	r2, [sp, #4]
 8002fac:	f8cd a008 	str.w	sl, [sp, #8]
		error_motor[i] = sp_motor[i] - v_motor[i];
 8002fb0:	9305      	str	r3, [sp, #20]
		p_motor[i] = kp_motor * error_motor[i];
 8002fb2:	eeb1 ba00 	vmov.f32	s22, #16	; 0x40800000  4.0
 8002fb6:	eef0 aa69 	vmov.f32	s21, s19
		error_motor[i] = sp_motor[i] - v_motor[i];
 8002fba:	4b9c      	ldr	r3, [pc, #624]	; (800322c <kontrol_motor+0x2dc>)
 8002fbc:	9a05      	ldr	r2, [sp, #20]
 8002fbe:	f933 3014 	ldrsh.w	r3, [r3, r4, lsl #1]
 8002fc2:	f932 2014 	ldrsh.w	r2, [r2, r4, lsl #1]
		i_motor[i] += ki_motor * error_motor[i];
 8002fc6:	6828      	ldr	r0, [r5, #0]
		error_motor[i] = sp_motor[i] - v_motor[i];
 8002fc8:	1a9b      	subs	r3, r3, r2
 8002fca:	ee07 3a90 	vmov	s15, r3
 8002fce:	9b02      	ldr	r3, [sp, #8]
 8002fd0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002fd4:	eca3 8a01 	vstmia	r3!, {s16}
 8002fd8:	9302      	str	r3, [sp, #8]
		p_motor[i] = kp_motor * error_motor[i];
 8002fda:	ee68 8a0b 	vmul.f32	s17, s16, s22
 8002fde:	9b01      	ldr	r3, [sp, #4]
 8002fe0:	ece3 8a01 	vstmia	r3!, {s17}
 8002fe4:	9301      	str	r3, [sp, #4]
		i_motor[i] += ki_motor * error_motor[i];
 8002fe6:	f7fd faa7 	bl	8000538 <__aeabi_f2d>
 8002fea:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002fee:	ee18 0a10 	vmov	r0, s16
 8002ff2:	f7fd faa1 	bl	8000538 <__aeabi_f2d>
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	4b8d      	ldr	r3, [pc, #564]	; (8003230 <kontrol_motor+0x2e0>)
 8002ffa:	f7fd faf1 	bl	80005e0 <__aeabi_dmul>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003006:	f7fd f939 	bl	800027c <__adddf3>
 800300a:	f7fd fd83 	bl	8000b14 <__aeabi_d2f>
		d_motor[i] = kd_motor * (error_motor[i] - previous_error_motor[i]);
 800300e:	eddb 7a00 	vldr	s15, [fp]
		i_motor[i] += ki_motor * error_motor[i];
 8003012:	6028      	str	r0, [r5, #0]
		d_motor[i] = kd_motor * (error_motor[i] - previous_error_motor[i]);
 8003014:	ee78 7a67 	vsub.f32	s15, s16, s15
		i_motor[i] += ki_motor * error_motor[i];
 8003018:	ee0a 0a10 	vmov	s20, r0
		d_motor[i] = kd_motor * (error_motor[i] - previous_error_motor[i]);
 800301c:	ee17 0a90 	vmov	r0, s15
 8003020:	f7fd fa8a 	bl	8000538 <__aeabi_f2d>
 8003024:	a376      	add	r3, pc, #472	; (adr r3, 8003200 <kontrol_motor+0x2b0>)
 8003026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302a:	f7fd fad9 	bl	80005e0 <__aeabi_dmul>
 800302e:	f7fd fd71 	bl	8000b14 <__aeabi_d2f>
 8003032:	9b00      	ldr	r3, [sp, #0]
		previous_error_motor[i] = error_motor[i];
 8003034:	ecab 8a01 	vstmia	fp!, {s16}
		d_motor[i] = kd_motor * (error_motor[i] - previous_error_motor[i]);
 8003038:	f843 0b04 	str.w	r0, [r3], #4
		if(i_motor[i] > 100) i_motor[i] = 100;
 800303c:	eeb4 aae9 	vcmpe.f32	s20, s19
 8003040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		d_motor[i] = kd_motor * (error_motor[i] - previous_error_motor[i]);
 8003044:	ee07 0a10 	vmov	s14, r0
 8003048:	9300      	str	r3, [sp, #0]
		if(i_motor[i] > 100) i_motor[i] = 100;
 800304a:	dd28      	ble.n	800309e <kontrol_motor+0x14e>
 800304c:	edc5 9a00 	vstr	s19, [r5]

		output_motor[i] = p_motor[i] + i_motor[i] + d_motor[i];
 8003050:	edd5 7a00 	vldr	s15, [r5]
 8003054:	ee78 7aa7 	vadd.f32	s15, s17, s15
 8003058:	ee77 7a87 	vadd.f32	s15, s15, s14

		if(output_motor[i] > 100) output_motor[i] = 100;
 800305c:	eef4 7aea 	vcmpe.f32	s15, s21
 8003060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003064:	dd23      	ble.n	80030ae <kontrol_motor+0x15e>
 8003066:	edc6 aa00 	vstr	s21, [r6]
	for(int i = 0; i < 4; i++)
 800306a:	3401      	adds	r4, #1
 800306c:	2c04      	cmp	r4, #4
 800306e:	f105 0504 	add.w	r5, r5, #4
 8003072:	f106 0604 	add.w	r6, r6, #4
 8003076:	d1a0      	bne.n	8002fba <kontrol_motor+0x6a>
		else if(output_motor[i] < -100) output_motor[i] = -100;
	}

	if(status_kontrol == SET)
 8003078:	4b6e      	ldr	r3, [pc, #440]	; (8003234 <kontrol_motor+0x2e4>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d020      	beq.n	80030c2 <kontrol_motor+0x172>
			i_motor[i] = 0;
			d_motor[i] = 0;
		}
	}

	if(output_motor[0] > 0)
 8003080:	4c63      	ldr	r4, [pc, #396]	; (8003210 <kontrol_motor+0x2c0>)
 8003082:	edd4 7a00 	vldr	s15, [r4]
 8003086:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800308a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800308e:	dc2d      	bgt.n	80030ec <kontrol_motor+0x19c>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4,SET);
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,RESET);
	}
	else
	{
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4,RESET);
 8003090:	2200      	movs	r2, #0
 8003092:	2110      	movs	r1, #16
 8003094:	4868      	ldr	r0, [pc, #416]	; (8003238 <kontrol_motor+0x2e8>)
 8003096:	f7fe faa3 	bl	80015e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,SET);
 800309a:	2201      	movs	r2, #1
 800309c:	e02c      	b.n	80030f8 <kontrol_motor+0x1a8>
		else if(i_motor[i] < -100) i_motor[i] = -100;
 800309e:	eeb4 aac9 	vcmpe.f32	s20, s18
 80030a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030a6:	bf48      	it	mi
 80030a8:	ed85 9a00 	vstrmi	s18, [r5]
 80030ac:	e7d0      	b.n	8003050 <kontrol_motor+0x100>
		else if(output_motor[i] < -100) output_motor[i] = -100;
 80030ae:	eef4 7ac9 	vcmpe.f32	s15, s18
 80030b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		output_motor[i] = p_motor[i] + i_motor[i] + d_motor[i];
 80030b6:	bf54      	ite	pl
 80030b8:	edc6 7a00 	vstrpl	s15, [r6]
		else if(output_motor[i] < -100) output_motor[i] = -100;
 80030bc:	ed86 9a00 	vstrmi	s18, [r6]
 80030c0:	e7d3      	b.n	800306a <kontrol_motor+0x11a>
 80030c2:	4a5e      	ldr	r2, [pc, #376]	; (800323c <kontrol_motor+0x2ec>)
			output_motor[i] = 0;
 80030c4:	2300      	movs	r3, #0
			previous_error_motor[i] = 0;
 80030c6:	9904      	ldr	r1, [sp, #16]
			output_motor[i] = 0;
 80030c8:	f847 3b04 	str.w	r3, [r7], #4
			previous_error_motor[i] = 0;
 80030cc:	f841 3b04 	str.w	r3, [r1], #4
 80030d0:	9104      	str	r1, [sp, #16]
			p_motor[i] = 0;
 80030d2:	9903      	ldr	r1, [sp, #12]
			error_motor[i] = 0;
 80030d4:	f84a 3b04 	str.w	r3, [sl], #4
			p_motor[i] = 0;
 80030d8:	f841 3b04 	str.w	r3, [r1], #4
		for(int i = 0; i < 4; i++)
 80030dc:	42ba      	cmp	r2, r7
			p_motor[i] = 0;
 80030de:	9103      	str	r1, [sp, #12]
			i_motor[i] = 0;
 80030e0:	f849 3b04 	str.w	r3, [r9], #4
			d_motor[i] = 0;
 80030e4:	f848 3b04 	str.w	r3, [r8], #4
		for(int i = 0; i < 4; i++)
 80030e8:	d1ed      	bne.n	80030c6 <kontrol_motor+0x176>
 80030ea:	e7c9      	b.n	8003080 <kontrol_motor+0x130>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4,SET);
 80030ec:	2201      	movs	r2, #1
 80030ee:	2110      	movs	r1, #16
 80030f0:	4851      	ldr	r0, [pc, #324]	; (8003238 <kontrol_motor+0x2e8>)
 80030f2:	f7fe fa75 	bl	80015e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,RESET);
 80030f6:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,SET);
 80030f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030fc:	4850      	ldr	r0, [pc, #320]	; (8003240 <kontrol_motor+0x2f0>)
 80030fe:	f7fe fa6f 	bl	80015e0 <HAL_GPIO_WritePin>
	}

	if(output_motor[1] > 0)
 8003102:	edd4 7a01 	vldr	s15, [r4, #4]
 8003106:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800310a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800310e:	dd5e      	ble.n	80031ce <kontrol_motor+0x27e>
	{
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_4,SET);
 8003110:	2201      	movs	r2, #1
 8003112:	2110      	movs	r1, #16
 8003114:	484b      	ldr	r0, [pc, #300]	; (8003244 <kontrol_motor+0x2f4>)
 8003116:	f7fe fa63 	bl	80015e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_6,RESET);
 800311a:	2200      	movs	r2, #0
	}
	else
	{
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_4,RESET);
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_6,SET);
 800311c:	2140      	movs	r1, #64	; 0x40
 800311e:	4849      	ldr	r0, [pc, #292]	; (8003244 <kontrol_motor+0x2f4>)
 8003120:	f7fe fa5e 	bl	80015e0 <HAL_GPIO_WritePin>
	}

	if(output_motor[2] > 0)
 8003124:	edd4 7a02 	vldr	s15, [r4, #8]
 8003128:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800312c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003130:	dd54      	ble.n	80031dc <kontrol_motor+0x28c>
	{
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_1,SET);
 8003132:	2201      	movs	r2, #1
 8003134:	2102      	movs	r1, #2
 8003136:	4843      	ldr	r0, [pc, #268]	; (8003244 <kontrol_motor+0x2f4>)
 8003138:	f7fe fa52 	bl	80015e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_3,RESET);
 800313c:	2200      	movs	r2, #0
	}
	else
	{
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_1,RESET);
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_3,SET);
 800313e:	2108      	movs	r1, #8
 8003140:	4840      	ldr	r0, [pc, #256]	; (8003244 <kontrol_motor+0x2f4>)
 8003142:	f7fe fa4d 	bl	80015e0 <HAL_GPIO_WritePin>
	}

	if(output_motor[3] > 0)
 8003146:	edd4 7a03 	vldr	s15, [r4, #12]
 800314a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800314e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003152:	dd4a      	ble.n	80031ea <kontrol_motor+0x29a>
	{
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_15,SET);
 8003154:	2201      	movs	r2, #1
 8003156:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800315a:	4839      	ldr	r0, [pc, #228]	; (8003240 <kontrol_motor+0x2f0>)
 800315c:	f7fe fa40 	bl	80015e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_14,RESET);
 8003160:	2200      	movs	r2, #0
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_15,RESET);
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_14,SET);
 8003162:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003166:	4836      	ldr	r0, [pc, #216]	; (8003240 <kontrol_motor+0x2f0>)
 8003168:	f7fe fa3a 	bl	80015e0 <HAL_GPIO_WritePin>
	}

	motor0 = abs(output_motor[0]);
 800316c:	edd4 7a00 	vldr	s15, [r4]
 8003170:	4a35      	ldr	r2, [pc, #212]	; (8003248 <kontrol_motor+0x2f8>)
	motor1 = abs(output_motor[1]);
 8003172:	4936      	ldr	r1, [pc, #216]	; (800324c <kontrol_motor+0x2fc>)
	motor0 = abs(output_motor[0]);
 8003174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003178:	ee17 3a90 	vmov	r3, s15
	motor1 = abs(output_motor[1]);
 800317c:	edd4 7a01 	vldr	s15, [r4, #4]
	motor0 = abs(output_motor[0]);
 8003180:	2b00      	cmp	r3, #0
	motor1 = abs(output_motor[1]);
 8003182:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	motor0 = abs(output_motor[0]);
 8003186:	bfb8      	it	lt
 8003188:	425b      	neglt	r3, r3
 800318a:	6353      	str	r3, [r2, #52]	; 0x34
	motor1 = abs(output_motor[1]);
 800318c:	ee17 3a90 	vmov	r3, s15
	motor2 = abs(output_motor[2]);
 8003190:	edd4 7a02 	vldr	s15, [r4, #8]
	motor1 = abs(output_motor[1]);
 8003194:	2b00      	cmp	r3, #0
	motor2 = abs(output_motor[2]);
 8003196:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	motor1 = abs(output_motor[1]);
 800319a:	bfb8      	it	lt
 800319c:	425b      	neglt	r3, r3
 800319e:	634b      	str	r3, [r1, #52]	; 0x34
	motor2 = abs(output_motor[2]);
 80031a0:	ee17 3a90 	vmov	r3, s15
	motor3 = abs(output_motor[3]);
 80031a4:	edd4 7a03 	vldr	s15, [r4, #12]
	motor2 = abs(output_motor[2]);
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
	motor3 = abs(output_motor[3]);
 80031ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	motor2 = abs(output_motor[2]);
 80031b2:	bfb8      	it	lt
 80031b4:	425b      	neglt	r3, r3
 80031b6:	634b      	str	r3, [r1, #52]	; 0x34
	motor3 = abs(output_motor[3]);
 80031b8:	ee17 3a90 	vmov	r3, s15
 80031bc:	2b00      	cmp	r3, #0
 80031be:	bfb8      	it	lt
 80031c0:	425b      	neglt	r3, r3
 80031c2:	6393      	str	r3, [r2, #56]	; 0x38

}
 80031c4:	b009      	add	sp, #36	; 0x24
 80031c6:	ecbd 8b08 	vpop	{d8-d11}
 80031ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_4,RESET);
 80031ce:	2200      	movs	r2, #0
 80031d0:	2110      	movs	r1, #16
 80031d2:	481c      	ldr	r0, [pc, #112]	; (8003244 <kontrol_motor+0x2f4>)
 80031d4:	f7fe fa04 	bl	80015e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_6,SET);
 80031d8:	2201      	movs	r2, #1
 80031da:	e79f      	b.n	800311c <kontrol_motor+0x1cc>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_1,RESET);
 80031dc:	2200      	movs	r2, #0
 80031de:	2102      	movs	r1, #2
 80031e0:	4818      	ldr	r0, [pc, #96]	; (8003244 <kontrol_motor+0x2f4>)
 80031e2:	f7fe f9fd 	bl	80015e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_3,SET);
 80031e6:	2201      	movs	r2, #1
 80031e8:	e7a9      	b.n	800313e <kontrol_motor+0x1ee>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_15,RESET);
 80031ea:	2200      	movs	r2, #0
 80031ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031f0:	4813      	ldr	r0, [pc, #76]	; (8003240 <kontrol_motor+0x2f0>)
 80031f2:	f7fe f9f5 	bl	80015e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_14,SET);
 80031f6:	2201      	movs	r2, #1
 80031f8:	e7b3      	b.n	8003162 <kontrol_motor+0x212>
 80031fa:	bf00      	nop
 80031fc:	f3af 8000 	nop.w
 8003200:	47ae147b 	.word	0x47ae147b
 8003204:	3fb47ae1 	.word	0x3fb47ae1
 8003208:	40010000 	.word	0x40010000
 800320c:	20000456 	.word	0x20000456
 8003210:	20000218 	.word	0x20000218
 8003214:	40010400 	.word	0x40010400
 8003218:	42c80000 	.word	0x42c80000
 800321c:	40000400 	.word	0x40000400
 8003220:	c2c80000 	.word	0xc2c80000
 8003224:	20000418 	.word	0x20000418
 8003228:	20000428 	.word	0x20000428
 800322c:	2000022c 	.word	0x2000022c
 8003230:	3fe00000 	.word	0x3fe00000
 8003234:	20000228 	.word	0x20000228
 8003238:	40021000 	.word	0x40021000
 800323c:	20000228 	.word	0x20000228
 8003240:	40020800 	.word	0x40020800
 8003244:	40020c00 	.word	0x40020c00
 8003248:	40014000 	.word	0x40014000
 800324c:	40001c00 	.word	0x40001c00
 8003250:	200003c0 	.word	0x200003c0
 8003254:	2000049c 	.word	0x2000049c
 8003258:	200002f0 	.word	0x200002f0

0800325c <HAL_TIM_PeriodElapsedCallback>:
	if(htim->Instance == TIM6)
 800325c:	6802      	ldr	r2, [r0, #0]
 800325e:	4b28      	ldr	r3, [pc, #160]	; (8003300 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8003260:	429a      	cmp	r2, r3
{
 8003262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003266:	4680      	mov	r8, r0
	if(htim->Instance == TIM6)
 8003268:	d11f      	bne.n	80032aa <HAL_TIM_PeriodElapsedCallback+0x4e>
		if (buzzer_status == 1 && buzzer_jumlah > 0 && buzzer_iterasi++ == buzzer_waktu)
 800326a:	4d26      	ldr	r5, [pc, #152]	; (8003304 <HAL_TIM_PeriodElapsedCallback+0xa8>)
		hitung_odometry();
 800326c:	f7ff fdb0 	bl	8002dd0 <hitung_odometry>
		if (buzzer_status == 1 && buzzer_jumlah > 0 && buzzer_iterasi++ == buzzer_waktu)
 8003270:	782f      	ldrb	r7, [r5, #0]
 8003272:	2f01      	cmp	r7, #1
 8003274:	d129      	bne.n	80032ca <HAL_TIM_PeriodElapsedCallback+0x6e>
 8003276:	4c24      	ldr	r4, [pc, #144]	; (8003308 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8003278:	f9b4 3000 	ldrsh.w	r3, [r4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	dd14      	ble.n	80032aa <HAL_TIM_PeriodElapsedCallback+0x4e>
 8003280:	4e22      	ldr	r6, [pc, #136]	; (800330c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8003282:	f9b6 3000 	ldrsh.w	r3, [r6]
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	8032      	strh	r2, [r6, #0]
 800328a:	4a21      	ldr	r2, [pc, #132]	; (8003310 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800328c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003290:	429a      	cmp	r2, r3
 8003292:	d10a      	bne.n	80032aa <HAL_TIM_PeriodElapsedCallback+0x4e>
			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_2,RESET);
 8003294:	2200      	movs	r2, #0
 8003296:	2104      	movs	r1, #4
 8003298:	481e      	ldr	r0, [pc, #120]	; (8003314 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800329a:	f7fe f9a1 	bl	80015e0 <HAL_GPIO_WritePin>
			buzzer_iterasi = 0;
 800329e:	2300      	movs	r3, #0
 80032a0:	8033      	strh	r3, [r6, #0]
			buzzer_status = 1;
 80032a2:	702b      	strb	r3, [r5, #0]
			buzzer_jumlah--;
 80032a4:	8823      	ldrh	r3, [r4, #0]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	8023      	strh	r3, [r4, #0]
	if(htim->Instance == TIM7)
 80032aa:	f8d8 2000 	ldr.w	r2, [r8]
 80032ae:	4b1a      	ldr	r3, [pc, #104]	; (8003318 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d123      	bne.n	80032fc <HAL_TIM_PeriodElapsedCallback+0xa0>
		status_kontrol = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8);
 80032b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032b8:	4818      	ldr	r0, [pc, #96]	; (800331c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80032ba:	f7fe f98b 	bl	80015d4 <HAL_GPIO_ReadPin>
 80032be:	4b18      	ldr	r3, [pc, #96]	; (8003320 <HAL_TIM_PeriodElapsedCallback+0xc4>)
}
 80032c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		status_kontrol = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8);
 80032c4:	6018      	str	r0, [r3, #0]
		kontrol_motor();
 80032c6:	f7ff be43 	b.w	8002f50 <kontrol_motor>
		else if (buzzer_status == 0 && buzzer_jumlah > 1 && buzzer_iterasi++ == buzzer_waktu)
 80032ca:	2f00      	cmp	r7, #0
 80032cc:	d1ed      	bne.n	80032aa <HAL_TIM_PeriodElapsedCallback+0x4e>
 80032ce:	4c0e      	ldr	r4, [pc, #56]	; (8003308 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80032d0:	f9b4 3000 	ldrsh.w	r3, [r4]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	dde8      	ble.n	80032aa <HAL_TIM_PeriodElapsedCallback+0x4e>
 80032d8:	4e0c      	ldr	r6, [pc, #48]	; (800330c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80032da:	f9b6 3000 	ldrsh.w	r3, [r6]
 80032de:	1c5a      	adds	r2, r3, #1
 80032e0:	8032      	strh	r2, [r6, #0]
 80032e2:	4a0b      	ldr	r2, [pc, #44]	; (8003310 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80032e4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d1de      	bne.n	80032aa <HAL_TIM_PeriodElapsedCallback+0x4e>
			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_2,SET);
 80032ec:	2201      	movs	r2, #1
 80032ee:	2104      	movs	r1, #4
 80032f0:	4808      	ldr	r0, [pc, #32]	; (8003314 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80032f2:	f7fe f975 	bl	80015e0 <HAL_GPIO_WritePin>
			buzzer_iterasi = 0;
 80032f6:	8037      	strh	r7, [r6, #0]
			buzzer_status = 1;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e7d2      	b.n	80032a2 <HAL_TIM_PeriodElapsedCallback+0x46>
 80032fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003300:	40001000 	.word	0x40001000
 8003304:	20000094 	.word	0x20000094
 8003308:	20000092 	.word	0x20000092
 800330c:	20000090 	.word	0x20000090
 8003310:	20000096 	.word	0x20000096
 8003314:	40021000 	.word	0x40021000
 8003318:	40001400 	.word	0x40001400
 800331c:	40020000 	.word	0x40020000
 8003320:	20000228 	.word	0x20000228
 8003324:	00000000 	.word	0x00000000

08003328 <terima_gyro>:
	sp_motor[2] = (short int)((kecepatan_y * -0.57357643635104609610803191282616) + (kecepatan_x * 0.81915204428899178968448838591684) + kecepatan_sudut);
	sp_motor[3] = (short int)((kecepatan_y * 0.57357643635104609610803191282616)  + (kecepatan_x * 0.81915204428899178968448838591684) + kecepatan_sudut);
}

void terima_gyro()
{
 8003328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800332c:	ed2d 8b02 	vpush	{d8}
	memcpy(&gyro_buffer, data_terima + 3, 4);
 8003330:	4b4d      	ldr	r3, [pc, #308]	; (8003468 <terima_gyro+0x140>)
 8003332:	4a4e      	ldr	r2, [pc, #312]	; (800346c <terima_gyro+0x144>)
 8003334:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8003338:	6013      	str	r3, [r2, #0]

	gyro_derajat = (gyro_offset - gyro_buffer);
 800333a:	4a4d      	ldr	r2, [pc, #308]	; (8003470 <terima_gyro+0x148>)
 800333c:	4e4d      	ldr	r6, [pc, #308]	; (8003474 <terima_gyro+0x14c>)
 800333e:	edd2 7a00 	vldr	s15, [r2]
	gyro_radian = (gyro_offset - gyro_buffer) * 0.01745329252;
 8003342:	4c4d      	ldr	r4, [pc, #308]	; (8003478 <terima_gyro+0x150>)
	gyro_derajat = (gyro_offset - gyro_buffer);
 8003344:	ee07 3a10 	vmov	s14, r3
 8003348:	ee37 8ac7 	vsub.f32	s16, s15, s14
 800334c:	ed86 8a00 	vstr	s16, [r6]
	gyro_radian = (gyro_offset - gyro_buffer) * 0.01745329252;
 8003350:	ee18 0a10 	vmov	r0, s16
 8003354:	f7fd f8f0 	bl	8000538 <__aeabi_f2d>
 8003358:	a33b      	add	r3, pc, #236	; (adr r3, 8003448 <terima_gyro+0x120>)
 800335a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335e:	f7fd f93f 	bl	80005e0 <__aeabi_dmul>
 8003362:	f7fd fbd7 	bl	8000b14 <__aeabi_d2f>

	while(gyro_derajat > 180) gyro_derajat -= 360;
 8003366:	eddf 7a45 	vldr	s15, [pc, #276]	; 800347c <terima_gyro+0x154>
 800336a:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8003480 <terima_gyro+0x158>
	gyro_radian = (gyro_offset - gyro_buffer) * 0.01745329252;
 800336e:	6020      	str	r0, [r4, #0]
 8003370:	4605      	mov	r5, r0
	while(gyro_derajat > 180) gyro_derajat -= 360;
 8003372:	2200      	movs	r2, #0
 8003374:	4633      	mov	r3, r6
 8003376:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800337a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800337e:	dc40      	bgt.n	8003402 <terima_gyro+0xda>
 8003380:	b10a      	cbz	r2, 8003386 <terima_gyro+0x5e>
 8003382:	ed83 8a00 	vstr	s16, [r3]
 8003386:	edd3 7a00 	vldr	s15, [r3]
	while(gyro_derajat < -180) gyro_derajat +=360;
 800338a:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8003484 <terima_gyro+0x15c>
 800338e:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8003480 <terima_gyro+0x158>
	while(gyro_derajat > 180) gyro_derajat -= 360;
 8003392:	2200      	movs	r2, #0
	while(gyro_derajat < -180) gyro_derajat +=360;
 8003394:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800339c:	d435      	bmi.n	800340a <terima_gyro+0xe2>
 800339e:	b10a      	cbz	r2, 80033a4 <terima_gyro+0x7c>
 80033a0:	edc3 7a00 	vstr	s15, [r3]

	while(gyro_radian > 3.14159265359) gyro_radian -= 6.28318530718;
 80033a4:	f20f 09a8 	addw	r9, pc, #168	; 0xa8
 80033a8:	e9d9 8900 	ldrd	r8, r9, [r9]
	while(gyro_derajat > 180) gyro_derajat -= 360;
 80033ac:	f04f 0a00 	mov.w	sl, #0
	while(gyro_radian > 3.14159265359) gyro_radian -= 6.28318530718;
 80033b0:	4628      	mov	r0, r5
 80033b2:	f7fd f8c1 	bl	8000538 <__aeabi_f2d>
 80033b6:	a328      	add	r3, pc, #160	; (adr r3, 8003458 <terima_gyro+0x130>)
 80033b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033bc:	4606      	mov	r6, r0
 80033be:	460f      	mov	r7, r1
 80033c0:	f7fd fb9e 	bl	8000b00 <__aeabi_dcmpgt>
 80033c4:	bb28      	cbnz	r0, 8003412 <terima_gyro+0xea>
 80033c6:	f1ba 0f00 	cmp.w	sl, #0
 80033ca:	d000      	beq.n	80033ce <terima_gyro+0xa6>
 80033cc:	6025      	str	r5, [r4, #0]
	while(gyro_radian < -3.14159265359) gyro_radian += 6.28318530718;
 80033ce:	f20f 0980 	addw	r9, pc, #128	; 0x80
 80033d2:	e9d9 8900 	ldrd	r8, r9, [r9]
 80033d6:	6825      	ldr	r5, [r4, #0]
	while(gyro_derajat > 180) gyro_derajat -= 360;
 80033d8:	f04f 0a00 	mov.w	sl, #0
	while(gyro_radian < -3.14159265359) gyro_radian += 6.28318530718;
 80033dc:	4628      	mov	r0, r5
 80033de:	f7fd f8ab 	bl	8000538 <__aeabi_f2d>
 80033e2:	a31f      	add	r3, pc, #124	; (adr r3, 8003460 <terima_gyro+0x138>)
 80033e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e8:	4606      	mov	r6, r0
 80033ea:	460f      	mov	r7, r1
 80033ec:	f7fd fb6a 	bl	8000ac4 <__aeabi_dcmplt>
 80033f0:	b9d8      	cbnz	r0, 800342a <terima_gyro+0x102>
 80033f2:	f1ba 0f00 	cmp.w	sl, #0
 80033f6:	d000      	beq.n	80033fa <terima_gyro+0xd2>
 80033f8:	6025      	str	r5, [r4, #0]
}
 80033fa:	ecbd 8b02 	vpop	{d8}
 80033fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while(gyro_derajat > 180) gyro_derajat -= 360;
 8003402:	ee38 8a47 	vsub.f32	s16, s16, s14
 8003406:	2201      	movs	r2, #1
 8003408:	e7b5      	b.n	8003376 <terima_gyro+0x4e>
	while(gyro_derajat < -180) gyro_derajat +=360;
 800340a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800340e:	2201      	movs	r2, #1
 8003410:	e7c0      	b.n	8003394 <terima_gyro+0x6c>
	while(gyro_radian > 3.14159265359) gyro_radian -= 6.28318530718;
 8003412:	4642      	mov	r2, r8
 8003414:	464b      	mov	r3, r9
 8003416:	4630      	mov	r0, r6
 8003418:	4639      	mov	r1, r7
 800341a:	f7fc ff2d 	bl	8000278 <__aeabi_dsub>
 800341e:	f7fd fb79 	bl	8000b14 <__aeabi_d2f>
 8003422:	f04f 0a01 	mov.w	sl, #1
 8003426:	4605      	mov	r5, r0
 8003428:	e7c2      	b.n	80033b0 <terima_gyro+0x88>
	while(gyro_radian < -3.14159265359) gyro_radian += 6.28318530718;
 800342a:	4642      	mov	r2, r8
 800342c:	464b      	mov	r3, r9
 800342e:	4630      	mov	r0, r6
 8003430:	4639      	mov	r1, r7
 8003432:	f7fc ff23 	bl	800027c <__adddf3>
 8003436:	f7fd fb6d 	bl	8000b14 <__aeabi_d2f>
 800343a:	f04f 0a01 	mov.w	sl, #1
 800343e:	4605      	mov	r5, r0
 8003440:	e7cc      	b.n	80033dc <terima_gyro+0xb4>
 8003442:	bf00      	nop
 8003444:	f3af 8000 	nop.w
 8003448:	a252dd11 	.word	0xa252dd11
 800344c:	3f91df46 	.word	0x3f91df46
 8003450:	54442eea 	.word	0x54442eea
 8003454:	401921fb 	.word	0x401921fb
 8003458:	54442eea 	.word	0x54442eea
 800345c:	400921fb 	.word	0x400921fb
 8003460:	54442eea 	.word	0x54442eea
 8003464:	c00921fb 	.word	0xc00921fb
 8003468:	20000410 	.word	0x20000410
 800346c:	20000098 	.word	0x20000098
 8003470:	20000004 	.word	0x20000004
 8003474:	20000000 	.word	0x20000000
 8003478:	20000008 	.word	0x20000008
 800347c:	43340000 	.word	0x43340000
 8003480:	43b40000 	.word	0x43b40000
 8003484:	c3340000 	.word	0xc3340000

08003488 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart->Instance == USART3)
 8003488:	6802      	ldr	r2, [r0, #0]
 800348a:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <HAL_UART_RxCpltCallback+0x30>)
 800348c:	429a      	cmp	r2, r3
{
 800348e:	b510      	push	{r4, lr}
	if(huart->Instance == USART3)
 8003490:	d111      	bne.n	80034b6 <HAL_UART_RxCpltCallback+0x2e>
	{
		if(status_data == RESET)
 8003492:	4c0a      	ldr	r4, [pc, #40]	; (80034bc <HAL_UART_RxCpltCallback+0x34>)
 8003494:	6823      	ldr	r3, [r4, #0]
 8003496:	b92b      	cbnz	r3, 80034a4 <HAL_UART_RxCpltCallback+0x1c>
		{
			buzzer(10,20);
 8003498:	2114      	movs	r1, #20
 800349a:	200a      	movs	r0, #10
 800349c:	f7ff fc7a 	bl	8002d94 <buzzer>
			status_data = SET;
 80034a0:	2301      	movs	r3, #1
 80034a2:	6023      	str	r3, [r4, #0]
		}
		terima_gyro();
 80034a4:	f7ff ff40 	bl	8003328 <terima_gyro>
		HAL_UART_Receive_DMA(&huart3, (uint8_t*)data_terima, 7);
 80034a8:	2207      	movs	r2, #7
 80034aa:	4905      	ldr	r1, [pc, #20]	; (80034c0 <HAL_UART_RxCpltCallback+0x38>)
 80034ac:	4805      	ldr	r0, [pc, #20]	; (80034c4 <HAL_UART_RxCpltCallback+0x3c>)
	}
}
 80034ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_UART_Receive_DMA(&huart3, (uint8_t*)data_terima, 7);
 80034b2:	f7ff b825 	b.w	8002500 <HAL_UART_Receive_DMA>
 80034b6:	bd10      	pop	{r4, pc}
 80034b8:	40004800 	.word	0x40004800
 80034bc:	200003bc 	.word	0x200003bc
 80034c0:	20000410 	.word	0x20000410
 80034c4:	2000019c 	.word	0x2000019c

080034c8 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart->Instance == USART3)
 80034c8:	6802      	ldr	r2, [r0, #0]
 80034ca:	4b13      	ldr	r3, [pc, #76]	; (8003518 <HAL_UART_RxHalfCpltCallback+0x50>)
 80034cc:	429a      	cmp	r2, r3
{
 80034ce:	b570      	push	{r4, r5, r6, lr}
	if(huart->Instance == USART3)
 80034d0:	d10a      	bne.n	80034e8 <HAL_UART_RxHalfCpltCallback+0x20>
					usart3_status = 0;
				}
			else
				{
					usart3_status = 0;
					HAL_UART_AbortReceive(&huart3);
 80034d2:	4e12      	ldr	r6, [pc, #72]	; (800351c <HAL_UART_RxHalfCpltCallback+0x54>)
					HAL_UART_Receive_DMA(&huart3, (uint8_t*)data_terima, 7);
 80034d4:	4c12      	ldr	r4, [pc, #72]	; (8003520 <HAL_UART_RxHalfCpltCallback+0x58>)
 80034d6:	2503      	movs	r5, #3
 80034d8:	2300      	movs	r3, #0
			if(usart3_status == 0 && data_terima[0] == 'i') usart3_status++;
 80034da:	b933      	cbnz	r3, 80034ea <HAL_UART_RxHalfCpltCallback+0x22>
 80034dc:	7823      	ldrb	r3, [r4, #0]
 80034de:	2b69      	cmp	r3, #105	; 0x69
 80034e0:	d10f      	bne.n	8003502 <HAL_UART_RxHalfCpltCallback+0x3a>
 80034e2:	2301      	movs	r3, #1
		for(i=0;i<3;i++)
 80034e4:	3d01      	subs	r5, #1
 80034e6:	d1f8      	bne.n	80034da <HAL_UART_RxHalfCpltCallback+0x12>
 80034e8:	bd70      	pop	{r4, r5, r6, pc}
			else if(usart3_status == 1 && data_terima[1] == 't') usart3_status++;
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d104      	bne.n	80034f8 <HAL_UART_RxHalfCpltCallback+0x30>
 80034ee:	7863      	ldrb	r3, [r4, #1]
 80034f0:	2b74      	cmp	r3, #116	; 0x74
 80034f2:	d106      	bne.n	8003502 <HAL_UART_RxHalfCpltCallback+0x3a>
 80034f4:	2302      	movs	r3, #2
 80034f6:	e7f5      	b.n	80034e4 <HAL_UART_RxHalfCpltCallback+0x1c>
			else if(usart3_status == 2 && data_terima[2] == 's')
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d102      	bne.n	8003502 <HAL_UART_RxHalfCpltCallback+0x3a>
 80034fc:	78a3      	ldrb	r3, [r4, #2]
 80034fe:	2b73      	cmp	r3, #115	; 0x73
 8003500:	d007      	beq.n	8003512 <HAL_UART_RxHalfCpltCallback+0x4a>
					HAL_UART_AbortReceive(&huart3);
 8003502:	4630      	mov	r0, r6
 8003504:	f7ff f844 	bl	8002590 <HAL_UART_AbortReceive>
					HAL_UART_Receive_DMA(&huart3, (uint8_t*)data_terima, 7);
 8003508:	2207      	movs	r2, #7
 800350a:	4621      	mov	r1, r4
 800350c:	4630      	mov	r0, r6
 800350e:	f7fe fff7 	bl	8002500 <HAL_UART_Receive_DMA>
					usart3_status = 0;
 8003512:	2300      	movs	r3, #0
 8003514:	e7e6      	b.n	80034e4 <HAL_UART_RxHalfCpltCallback+0x1c>
 8003516:	bf00      	nop
 8003518:	40004800 	.word	0x40004800
 800351c:	2000019c 	.word	0x2000019c
 8003520:	20000410 	.word	0x20000410

08003524 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8003524:	b530      	push	{r4, r5, lr}
 8003526:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003528:	4b27      	ldr	r3, [pc, #156]	; (80035c8 <SystemClock_Config+0xa4>)
 800352a:	2100      	movs	r1, #0
 800352c:	9101      	str	r1, [sp, #4]
 800352e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003530:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003534:	641a      	str	r2, [r3, #64]	; 0x40
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353c:	9301      	str	r3, [sp, #4]
 800353e:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003540:	4b22      	ldr	r3, [pc, #136]	; (80035cc <SystemClock_Config+0xa8>)
 8003542:	9102      	str	r1, [sp, #8]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003552:	9302      	str	r3, [sp, #8]
 8003554:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003556:	2301      	movs	r3, #1
 8003558:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800355a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800355e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003560:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003564:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003566:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003568:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800356a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 168;
 800356c:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800356e:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003570:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003572:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003574:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003576:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003578:	f7fe f838 	bl	80015ec <HAL_RCC_OscConfig>
 800357c:	b100      	cbz	r0, 8003580 <SystemClock_Config+0x5c>
 800357e:	e7fe      	b.n	800357e <SystemClock_Config+0x5a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003580:	230f      	movs	r3, #15
 8003582:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003584:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003588:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800358a:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800358c:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800358e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003592:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003594:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003596:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003598:	f7fe f9cc 	bl	8001934 <HAL_RCC_ClockConfig>
 800359c:	4605      	mov	r5, r0
 800359e:	b100      	cbz	r0, 80035a2 <SystemClock_Config+0x7e>
 80035a0:	e7fe      	b.n	80035a0 <SystemClock_Config+0x7c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80035a2:	f7fe fa61 	bl	8001a68 <HAL_RCC_GetHCLKFreq>
 80035a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035aa:	fbb0 f0f3 	udiv	r0, r0, r3
 80035ae:	f7fd fd27 	bl	8001000 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80035b2:	4620      	mov	r0, r4
 80035b4:	f7fd fd3a 	bl	800102c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80035b8:	462a      	mov	r2, r5
 80035ba:	4629      	mov	r1, r5
 80035bc:	f04f 30ff 	mov.w	r0, #4294967295
 80035c0:	f7fd fcde 	bl	8000f80 <HAL_NVIC_SetPriority>
}
 80035c4:	b015      	add	sp, #84	; 0x54
 80035c6:	bd30      	pop	{r4, r5, pc}
 80035c8:	40023800 	.word	0x40023800
 80035cc:	40007000 	.word	0x40007000

080035d0 <main>:
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b094      	sub	sp, #80	; 0x50
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80035d4:	2400      	movs	r4, #0
 80035d6:	4d92      	ldr	r5, [pc, #584]	; (8003820 <main+0x250>)
  HAL_Init();
 80035d8:	f7fd fc88 	bl	8000eec <HAL_Init>
  SystemClock_Config();
 80035dc:	f7ff ffa2 	bl	8003524 <SystemClock_Config>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80035e0:	9401      	str	r4, [sp, #4]
 80035e2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 80035e4:	488f      	ldr	r0, [pc, #572]	; (8003824 <main+0x254>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80035e6:	f043 0310 	orr.w	r3, r3, #16
 80035ea:	632b      	str	r3, [r5, #48]	; 0x30
 80035ec:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80035ee:	f003 0310 	and.w	r3, r3, #16
 80035f2:	9301      	str	r3, [sp, #4]
 80035f4:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035f6:	9402      	str	r4, [sp, #8]
 80035f8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80035fa:	f043 0304 	orr.w	r3, r3, #4
 80035fe:	632b      	str	r3, [r5, #48]	; 0x30
 8003600:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003602:	f003 0304 	and.w	r3, r3, #4
 8003606:	9302      	str	r3, [sp, #8]
 8003608:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800360a:	9403      	str	r4, [sp, #12]
 800360c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800360e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003612:	632b      	str	r3, [r5, #48]	; 0x30
 8003614:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800361a:	9303      	str	r3, [sp, #12]
 800361c:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800361e:	9404      	str	r4, [sp, #16]
 8003620:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003622:	f043 0301 	orr.w	r3, r3, #1
 8003626:	632b      	str	r3, [r5, #48]	; 0x30
 8003628:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	9304      	str	r3, [sp, #16]
 8003630:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003632:	9405      	str	r4, [sp, #20]
 8003634:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003636:	f043 0302 	orr.w	r3, r3, #2
 800363a:	632b      	str	r3, [r5, #48]	; 0x30
 800363c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	9305      	str	r3, [sp, #20]
 8003644:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003646:	9406      	str	r4, [sp, #24]
 8003648:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800364a:	f043 0308 	orr.w	r3, r3, #8
 800364e:	632b      	str	r3, [r5, #48]	; 0x30
 8003650:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 8003658:	4622      	mov	r2, r4
 800365a:	2114      	movs	r1, #20
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800365c:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 800365e:	f7fd ffbf 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8003662:	4622      	mov	r2, r4
 8003664:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8003668:	486f      	ldr	r0, [pc, #444]	; (8003828 <main+0x258>)
 800366a:	f7fd ffb9 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 800366e:	4622      	mov	r2, r4
 8003670:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8003674:	486d      	ldr	r0, [pc, #436]	; (800382c <main+0x25c>)
 8003676:	f7fd ffb3 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13 
 800367a:	4622      	mov	r2, r4
 800367c:	f64a 315a 	movw	r1, #43866	; 0xab5a
 8003680:	486b      	ldr	r0, [pc, #428]	; (8003830 <main+0x260>)
 8003682:	f7fd ffad 	bl	80015e0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003686:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8003688:	2314      	movs	r3, #20
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800368a:	a90b      	add	r1, sp, #44	; 0x2c
 800368c:	4865      	ldr	r0, [pc, #404]	; (8003824 <main+0x254>)
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 800368e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003690:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003692:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003694:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003696:	f7fd febd 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800369a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800369e:	a90b      	add	r1, sp, #44	; 0x2c
 80036a0:	4861      	ldr	r0, [pc, #388]	; (8003828 <main+0x258>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80036a2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036a4:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a8:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036aa:	f7fd feb3 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80036ae:	f44f 4320 	mov.w	r3, #40960	; 0xa000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036b2:	a90b      	add	r1, sp, #44	; 0x2c
 80036b4:	485d      	ldr	r0, [pc, #372]	; (800382c <main+0x25c>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80036b6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036b8:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ba:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036bc:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036be:	f7fd fea9 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD11 PD13 
                           PD15 PD1 PD3 PD4 
                           PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13 
 80036c2:	f64a 335a 	movw	r3, #43866	; 0xab5a
                          |GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036c6:	a90b      	add	r1, sp, #44	; 0x2c
 80036c8:	4859      	ldr	r0, [pc, #356]	; (8003830 <main+0x260>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13 
 80036ca:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036cc:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ce:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036d0:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036d2:	f7fd fe9f 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80036d6:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036da:	a90b      	add	r1, sp, #44	; 0x2c
 80036dc:	4855      	ldr	r0, [pc, #340]	; (8003834 <main+0x264>)
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80036de:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036e0:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036e2:	960d      	str	r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e4:	f7fd fe96 	bl	8001414 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80036e8:	9400      	str	r4, [sp, #0]
 80036ea:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80036ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80036f0:	632b      	str	r3, [r5, #48]	; 0x30
 80036f2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  htim7.Instance = TIM7;
 80036f4:	4d50      	ldr	r5, [pc, #320]	; (8003838 <main+0x268>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 80036f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036fa:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80036fc:	4622      	mov	r2, r4
 80036fe:	4621      	mov	r1, r4
 8003700:	200c      	movs	r0, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003702:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003704:	f7fd fc3c 	bl	8000f80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003708:	200c      	movs	r0, #12
 800370a:	f7fd fc6d 	bl	8000fe8 <HAL_NVIC_EnableIRQ>
  htim7.Init.Prescaler = 840;
 800370e:	484b      	ldr	r0, [pc, #300]	; (800383c <main+0x26c>)
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003710:	60ac      	str	r4, [r5, #8]
  htim7.Init.Prescaler = 840;
 8003712:	f44f 7352 	mov.w	r3, #840	; 0x348
 8003716:	e885 0009 	stmia.w	r5, {r0, r3}
  htim7.Init.Period = 4000;
 800371a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800371e:	4628      	mov	r0, r5
  htim7.Init.Period = 4000;
 8003720:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003722:	f7fe fc3d 	bl	8001fa0 <HAL_TIM_Base_Init>
 8003726:	b100      	cbz	r0, 800372a <main+0x15a>
 8003728:	e7fe      	b.n	8003728 <main+0x158>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800372a:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800372c:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800372e:	a90b      	add	r1, sp, #44	; 0x2c
 8003730:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003732:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003734:	f7fe fd6a 	bl	800220c <HAL_TIMEx_MasterConfigSynchronization>
 8003738:	b100      	cbz	r0, 800373c <main+0x16c>
 800373a:	e7fe      	b.n	800373a <main+0x16a>
  huart3.Instance = USART3;
 800373c:	4b40      	ldr	r3, [pc, #256]	; (8003840 <main+0x270>)
  huart3.Init.BaudRate = 115200;
 800373e:	4941      	ldr	r1, [pc, #260]	; (8003844 <main+0x274>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003740:	6098      	str	r0, [r3, #8]
  huart3.Init.BaudRate = 115200;
 8003742:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003746:	e883 0006 	stmia.w	r3, {r1, r2}
  huart3.Init.StopBits = UART_STOPBITS_1;
 800374a:	60d8      	str	r0, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800374c:	6118      	str	r0, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800374e:	220c      	movs	r2, #12
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003750:	6198      	str	r0, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003752:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003754:	4618      	mov	r0, r3
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003756:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003758:	f7fe fea4 	bl	80024a4 <HAL_UART_Init>
 800375c:	b100      	cbz	r0, 8003760 <main+0x190>
 800375e:	e7fe      	b.n	800375e <main+0x18e>
  htim1.Instance = TIM1;
 8003760:	4c39      	ldr	r4, [pc, #228]	; (8003848 <main+0x278>)
 8003762:	4b3a      	ldr	r3, [pc, #232]	; (800384c <main+0x27c>)
  htim1.Init.Prescaler = 0;
 8003764:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003766:	60a0      	str	r0, [r4, #8]
  htim1.Init.Period = 65535;
 8003768:	f64f 77ff 	movw	r7, #65535	; 0xffff
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800376c:	6120      	str	r0, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 800376e:	6160      	str	r0, [r4, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8003770:	2502      	movs	r5, #2
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003772:	900c      	str	r0, [sp, #48]	; 0x30
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003774:	900e      	str	r0, [sp, #56]	; 0x38
  sConfig.IC1Filter = 0;
 8003776:	900f      	str	r0, [sp, #60]	; 0x3c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003778:	9010      	str	r0, [sp, #64]	; 0x40
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800377a:	9012      	str	r0, [sp, #72]	; 0x48
  sConfig.IC2Filter = 0;
 800377c:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800377e:	a90b      	add	r1, sp, #44	; 0x2c
 8003780:	4620      	mov	r0, r4
  htim1.Instance = TIM1;
 8003782:	6023      	str	r3, [r4, #0]
  htim1.Init.Period = 65535;
 8003784:	60e7      	str	r7, [r4, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8003786:	950b      	str	r5, [sp, #44]	; 0x2c
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003788:	960d      	str	r6, [sp, #52]	; 0x34
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800378a:	9611      	str	r6, [sp, #68]	; 0x44
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800378c:	f7fe fc3c 	bl	8002008 <HAL_TIM_Encoder_Init>
 8003790:	b100      	cbz	r0, 8003794 <main+0x1c4>
 8003792:	e7fe      	b.n	8003792 <main+0x1c2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003794:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003796:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003798:	a907      	add	r1, sp, #28
 800379a:	4620      	mov	r0, r4
 800379c:	f7fe fd36 	bl	800220c <HAL_TIMEx_MasterConfigSynchronization>
 80037a0:	b100      	cbz	r0, 80037a4 <main+0x1d4>
 80037a2:	e7fe      	b.n	80037a2 <main+0x1d2>
  htim8.Instance = TIM8;
 80037a4:	4c2a      	ldr	r4, [pc, #168]	; (8003850 <main+0x280>)
 80037a6:	4b2b      	ldr	r3, [pc, #172]	; (8003854 <main+0x284>)
  htim8.Init.Prescaler = 0;
 80037a8:	6060      	str	r0, [r4, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037aa:	60a0      	str	r0, [r4, #8]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037ac:	6120      	str	r0, [r4, #16]
  htim8.Init.RepetitionCounter = 0;
 80037ae:	6160      	str	r0, [r4, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80037b0:	900e      	str	r0, [sp, #56]	; 0x38
  sConfig.IC1Filter = 0;
 80037b2:	900f      	str	r0, [sp, #60]	; 0x3c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80037b4:	9010      	str	r0, [sp, #64]	; 0x40
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80037b6:	9012      	str	r0, [sp, #72]	; 0x48
  sConfig.IC2Filter = 0;
 80037b8:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80037ba:	a90b      	add	r1, sp, #44	; 0x2c
 80037bc:	4620      	mov	r0, r4
  htim8.Instance = TIM8;
 80037be:	6023      	str	r3, [r4, #0]
  htim8.Init.Period = 65535;
 80037c0:	60e7      	str	r7, [r4, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 80037c2:	950b      	str	r5, [sp, #44]	; 0x2c
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80037c4:	950c      	str	r5, [sp, #48]	; 0x30
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80037c6:	960d      	str	r6, [sp, #52]	; 0x34
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80037c8:	9611      	str	r6, [sp, #68]	; 0x44
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80037ca:	f7fe fc1d 	bl	8002008 <HAL_TIM_Encoder_Init>
 80037ce:	b100      	cbz	r0, 80037d2 <main+0x202>
 80037d0:	e7fe      	b.n	80037d0 <main+0x200>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037d2:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037d4:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80037d6:	a907      	add	r1, sp, #28
 80037d8:	4620      	mov	r0, r4
 80037da:	f7fe fd17 	bl	800220c <HAL_TIMEx_MasterConfigSynchronization>
 80037de:	b100      	cbz	r0, 80037e2 <main+0x212>
 80037e0:	e7fe      	b.n	80037e0 <main+0x210>
  htim3.Instance = TIM3;
 80037e2:	4c1d      	ldr	r4, [pc, #116]	; (8003858 <main+0x288>)
 80037e4:	4b1d      	ldr	r3, [pc, #116]	; (800385c <main+0x28c>)
  htim3.Init.Prescaler = 0;
 80037e6:	6060      	str	r0, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037e8:	60a0      	str	r0, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037ea:	6120      	str	r0, [r4, #16]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80037ec:	900c      	str	r0, [sp, #48]	; 0x30
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80037ee:	900e      	str	r0, [sp, #56]	; 0x38
  sConfig.IC1Filter = 0;
 80037f0:	900f      	str	r0, [sp, #60]	; 0x3c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80037f2:	9010      	str	r0, [sp, #64]	; 0x40
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80037f4:	9012      	str	r0, [sp, #72]	; 0x48
  sConfig.IC2Filter = 0;
 80037f6:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80037f8:	a90b      	add	r1, sp, #44	; 0x2c
 80037fa:	4620      	mov	r0, r4
  htim3.Instance = TIM3;
 80037fc:	6023      	str	r3, [r4, #0]
  htim3.Init.Period = 65535;
 80037fe:	60e7      	str	r7, [r4, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8003800:	950b      	str	r5, [sp, #44]	; 0x2c
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003802:	960d      	str	r6, [sp, #52]	; 0x34
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003804:	9611      	str	r6, [sp, #68]	; 0x44
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003806:	f7fe fbff 	bl	8002008 <HAL_TIM_Encoder_Init>
 800380a:	b100      	cbz	r0, 800380e <main+0x23e>
 800380c:	e7fe      	b.n	800380c <main+0x23c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800380e:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003810:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003812:	a907      	add	r1, sp, #28
 8003814:	4620      	mov	r0, r4
 8003816:	f7fe fcf9 	bl	800220c <HAL_TIMEx_MasterConfigSynchronization>
 800381a:	4603      	mov	r3, r0
 800381c:	b300      	cbz	r0, 8003860 <main+0x290>
 800381e:	e7fe      	b.n	800381e <main+0x24e>
 8003820:	40023800 	.word	0x40023800
 8003824:	40021000 	.word	0x40021000
 8003828:	40020800 	.word	0x40020800
 800382c:	40020400 	.word	0x40020400
 8003830:	40020c00 	.word	0x40020c00
 8003834:	40020000 	.word	0x40020000
 8003838:	20000460 	.word	0x20000460
 800383c:	40001400 	.word	0x40001400
 8003840:	2000019c 	.word	0x2000019c
 8003844:	40004800 	.word	0x40004800
 8003848:	2000033c 	.word	0x2000033c
 800384c:	40010000 	.word	0x40010000
 8003850:	200000c0 	.word	0x200000c0
 8003854:	40010400 	.word	0x40010400
 8003858:	20000270 	.word	0x20000270
 800385c:	40000400 	.word	0x40000400
  htim2.Instance = TIM2;
 8003860:	4878      	ldr	r0, [pc, #480]	; (8003a44 <main+0x474>)
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8003862:	950b      	str	r5, [sp, #44]	; 0x2c
  htim2.Instance = TIM2;
 8003864:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003868:	a90b      	add	r1, sp, #44	; 0x2c
  htim2.Init.Prescaler = 0;
 800386a:	e880 000c 	stmia.w	r0, {r2, r3}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800386e:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 8003870:	60c7      	str	r7, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003872:	6103      	str	r3, [r0, #16]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003874:	930c      	str	r3, [sp, #48]	; 0x30
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003876:	960d      	str	r6, [sp, #52]	; 0x34
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003878:	930e      	str	r3, [sp, #56]	; 0x38
  sConfig.IC1Filter = 0;
 800387a:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800387c:	9310      	str	r3, [sp, #64]	; 0x40
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800387e:	9611      	str	r6, [sp, #68]	; 0x44
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003880:	9312      	str	r3, [sp, #72]	; 0x48
  sConfig.IC2Filter = 0;
 8003882:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003884:	f7fe fbc0 	bl	8002008 <HAL_TIM_Encoder_Init>
 8003888:	b100      	cbz	r0, 800388c <main+0x2bc>
 800388a:	e7fe      	b.n	800388a <main+0x2ba>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800388c:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800388e:	a907      	add	r1, sp, #28
 8003890:	486c      	ldr	r0, [pc, #432]	; (8003a44 <main+0x474>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003892:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003894:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003896:	f7fe fcb9 	bl	800220c <HAL_TIMEx_MasterConfigSynchronization>
 800389a:	b100      	cbz	r0, 800389e <main+0x2ce>
 800389c:	e7fe      	b.n	800389c <main+0x2cc>
  htim9.Instance = TIM9;
 800389e:	4c6a      	ldr	r4, [pc, #424]	; (8003a48 <main+0x478>)
  htim9.Init.Prescaler = 84;
 80038a0:	4b6a      	ldr	r3, [pc, #424]	; (8003a4c <main+0x47c>)
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038a2:	60a0      	str	r0, [r4, #8]
  htim9.Init.Prescaler = 84;
 80038a4:	2754      	movs	r7, #84	; 0x54
  htim9.Init.Period = 100;
 80038a6:	2664      	movs	r6, #100	; 0x64
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038a8:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80038aa:	4620      	mov	r0, r4
  htim9.Init.Prescaler = 84;
 80038ac:	e884 0088 	stmia.w	r4, {r3, r7}
  htim9.Init.Period = 100;
 80038b0:	60e6      	str	r6, [r4, #12]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80038b2:	f7fe fb75 	bl	8001fa0 <HAL_TIM_Base_Init>
 80038b6:	b100      	cbz	r0, 80038ba <main+0x2ea>
 80038b8:	e7fe      	b.n	80038b8 <main+0x2e8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80038be:	a907      	add	r1, sp, #28
 80038c0:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038c2:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80038c4:	f7fe f9a8 	bl	8001c18 <HAL_TIM_ConfigClockSource>
 80038c8:	b100      	cbz	r0, 80038cc <main+0x2fc>
 80038ca:	e7fe      	b.n	80038ca <main+0x2fa>
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80038cc:	4620      	mov	r0, r4
 80038ce:	f7fe fb81 	bl	8001fd4 <HAL_TIM_PWM_Init>
 80038d2:	4602      	mov	r2, r0
 80038d4:	b100      	cbz	r0, 80038d8 <main+0x308>
 80038d6:	e7fe      	b.n	80038d6 <main+0x306>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038d8:	f04f 0860 	mov.w	r8, #96	; 0x60
  sConfigOC.Pulse = 0;
 80038dc:	900c      	str	r0, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038de:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038e0:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038e2:	a90b      	add	r1, sp, #44	; 0x2c
 80038e4:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038e6:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038ea:	f7fe fc07 	bl	80020fc <HAL_TIM_PWM_ConfigChannel>
 80038ee:	b100      	cbz	r0, 80038f2 <main+0x322>
 80038f0:	e7fe      	b.n	80038f0 <main+0x320>
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80038f2:	2204      	movs	r2, #4
 80038f4:	a90b      	add	r1, sp, #44	; 0x2c
 80038f6:	4620      	mov	r0, r4
 80038f8:	f7fe fc00 	bl	80020fc <HAL_TIM_PWM_ConfigChannel>
 80038fc:	4605      	mov	r5, r0
 80038fe:	b100      	cbz	r0, 8003902 <main+0x332>
 8003900:	e7fe      	b.n	8003900 <main+0x330>
  HAL_TIM_MspPostInit(&htim9);
 8003902:	4620      	mov	r0, r4
  htim10.Instance = TIM10;
 8003904:	4c52      	ldr	r4, [pc, #328]	; (8003a50 <main+0x480>)
  HAL_TIM_MspPostInit(&htim9);
 8003906:	f000 facb 	bl	8003ea0 <HAL_TIM_MspPostInit>
  htim10.Instance = TIM10;
 800390a:	4b52      	ldr	r3, [pc, #328]	; (8003a54 <main+0x484>)
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800390c:	60a5      	str	r5, [r4, #8]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800390e:	4620      	mov	r0, r4
  htim10.Init.Prescaler = 84;
 8003910:	e884 0088 	stmia.w	r4, {r3, r7}
  htim10.Init.Period = 100;
 8003914:	60e6      	str	r6, [r4, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003916:	6125      	str	r5, [r4, #16]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003918:	f7fe fb42 	bl	8001fa0 <HAL_TIM_Base_Init>
 800391c:	b100      	cbz	r0, 8003920 <main+0x350>
 800391e:	e7fe      	b.n	800391e <main+0x34e>
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8003920:	4620      	mov	r0, r4
 8003922:	f7fe fb57 	bl	8001fd4 <HAL_TIM_PWM_Init>
 8003926:	4602      	mov	r2, r0
 8003928:	b100      	cbz	r0, 800392c <main+0x35c>
 800392a:	e7fe      	b.n	800392a <main+0x35a>
  sConfigOC.Pulse = 0;
 800392c:	900c      	str	r0, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800392e:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003930:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003932:	a90b      	add	r1, sp, #44	; 0x2c
 8003934:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003936:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800393a:	f7fe fbdf 	bl	80020fc <HAL_TIM_PWM_ConfigChannel>
 800393e:	4605      	mov	r5, r0
 8003940:	b100      	cbz	r0, 8003944 <main+0x374>
 8003942:	e7fe      	b.n	8003942 <main+0x372>
  HAL_TIM_MspPostInit(&htim10);
 8003944:	4620      	mov	r0, r4
 8003946:	f000 faab 	bl	8003ea0 <HAL_TIM_MspPostInit>
  htim13.Instance = TIM13;
 800394a:	4843      	ldr	r0, [pc, #268]	; (8003a58 <main+0x488>)
 800394c:	4b43      	ldr	r3, [pc, #268]	; (8003a5c <main+0x48c>)
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800394e:	6085      	str	r5, [r0, #8]
  htim13.Init.Prescaler = 84;
 8003950:	e880 0088 	stmia.w	r0, {r3, r7}
  htim13.Init.Period = 100;
 8003954:	60c6      	str	r6, [r0, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003956:	6105      	str	r5, [r0, #16]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003958:	f7fe fb22 	bl	8001fa0 <HAL_TIM_Base_Init>
 800395c:	b100      	cbz	r0, 8003960 <main+0x390>
 800395e:	e7fe      	b.n	800395e <main+0x38e>
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8003960:	483d      	ldr	r0, [pc, #244]	; (8003a58 <main+0x488>)
 8003962:	f7fe fb37 	bl	8001fd4 <HAL_TIM_PWM_Init>
 8003966:	4602      	mov	r2, r0
 8003968:	b100      	cbz	r0, 800396c <main+0x39c>
 800396a:	e7fe      	b.n	800396a <main+0x39a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800396c:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 800396e:	900c      	str	r0, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003970:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003972:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003974:	a90b      	add	r1, sp, #44	; 0x2c
 8003976:	4838      	ldr	r0, [pc, #224]	; (8003a58 <main+0x488>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003978:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800397a:	f7fe fbbf 	bl	80020fc <HAL_TIM_PWM_ConfigChannel>
 800397e:	4604      	mov	r4, r0
 8003980:	b100      	cbz	r0, 8003984 <main+0x3b4>
 8003982:	e7fe      	b.n	8003982 <main+0x3b2>
  HAL_TIM_MspPostInit(&htim13);
 8003984:	4834      	ldr	r0, [pc, #208]	; (8003a58 <main+0x488>)
  htim6.Instance = TIM6;
 8003986:	4f36      	ldr	r7, [pc, #216]	; (8003a60 <main+0x490>)
  HAL_TIM_MspPostInit(&htim13);
 8003988:	f000 fa8a 	bl	8003ea0 <HAL_TIM_MspPostInit>
  htim6.Init.Prescaler = 84;
 800398c:	4a35      	ldr	r2, [pc, #212]	; (8003a64 <main+0x494>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800398e:	60bc      	str	r4, [r7, #8]
  htim6.Init.Prescaler = 84;
 8003990:	2354      	movs	r3, #84	; 0x54
 8003992:	e887 000c 	stmia.w	r7, {r2, r3}
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003996:	4638      	mov	r0, r7
  htim6.Init.Period = 2000;
 8003998:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800399c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800399e:	f7fe faff 	bl	8001fa0 <HAL_TIM_Base_Init>
 80039a2:	b100      	cbz	r0, 80039a6 <main+0x3d6>
 80039a4:	e7fe      	b.n	80039a4 <main+0x3d4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80039a6:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039a8:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80039aa:	a90b      	add	r1, sp, #44	; 0x2c
 80039ac:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80039ae:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80039b0:	f7fe fc2c 	bl	800220c <HAL_TIMEx_MasterConfigSynchronization>
 80039b4:	b100      	cbz	r0, 80039b8 <main+0x3e8>
 80039b6:	e7fe      	b.n	80039b6 <main+0x3e6>
  htim4.Instance = TIM4;
 80039b8:	4e2b      	ldr	r6, [pc, #172]	; (8003a68 <main+0x498>)
 80039ba:	4b2c      	ldr	r3, [pc, #176]	; (8003a6c <main+0x49c>)
  htim4.Init.Prescaler = 0;
 80039bc:	6070      	str	r0, [r6, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80039be:	2401      	movs	r4, #1
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039c0:	60b0      	str	r0, [r6, #8]
  htim4.Init.Period = 65535;
 80039c2:	f64f 79ff 	movw	r9, #65535	; 0xffff
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039c6:	6130      	str	r0, [r6, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 80039c8:	f04f 0802 	mov.w	r8, #2
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80039cc:	900c      	str	r0, [sp, #48]	; 0x30
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80039ce:	900e      	str	r0, [sp, #56]	; 0x38
  sConfig.IC1Filter = 0;
 80039d0:	900f      	str	r0, [sp, #60]	; 0x3c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80039d2:	9010      	str	r0, [sp, #64]	; 0x40
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80039d4:	9012      	str	r0, [sp, #72]	; 0x48
  sConfig.IC2Filter = 0;
 80039d6:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80039d8:	a90b      	add	r1, sp, #44	; 0x2c
 80039da:	4630      	mov	r0, r6
  htim4.Instance = TIM4;
 80039dc:	6033      	str	r3, [r6, #0]
  htim4.Init.Period = 65535;
 80039de:	f8c6 900c 	str.w	r9, [r6, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 80039e2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80039e6:	940d      	str	r4, [sp, #52]	; 0x34
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80039e8:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80039ea:	f7fe fb0d 	bl	8002008 <HAL_TIM_Encoder_Init>
 80039ee:	b100      	cbz	r0, 80039f2 <main+0x422>
 80039f0:	e7fe      	b.n	80039f0 <main+0x420>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039f2:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039f4:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80039f6:	a907      	add	r1, sp, #28
 80039f8:	4630      	mov	r0, r6
 80039fa:	f7fe fc07 	bl	800220c <HAL_TIMEx_MasterConfigSynchronization>
 80039fe:	b100      	cbz	r0, 8003a02 <main+0x432>
 8003a00:	e7fe      	b.n	8003a00 <main+0x430>
  htim5.Instance = TIM5;
 8003a02:	4d1b      	ldr	r5, [pc, #108]	; (8003a70 <main+0x4a0>)
 8003a04:	4b1b      	ldr	r3, [pc, #108]	; (8003a74 <main+0x4a4>)
  htim5.Init.Prescaler = 0;
 8003a06:	6068      	str	r0, [r5, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a08:	60a8      	str	r0, [r5, #8]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a0a:	6128      	str	r0, [r5, #16]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003a0c:	900c      	str	r0, [sp, #48]	; 0x30
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003a0e:	900e      	str	r0, [sp, #56]	; 0x38
  sConfig.IC1Filter = 0;
 8003a10:	900f      	str	r0, [sp, #60]	; 0x3c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003a12:	9010      	str	r0, [sp, #64]	; 0x40
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003a14:	9012      	str	r0, [sp, #72]	; 0x48
  sConfig.IC2Filter = 0;
 8003a16:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003a18:	a90b      	add	r1, sp, #44	; 0x2c
 8003a1a:	4628      	mov	r0, r5
  htim5.Instance = TIM5;
 8003a1c:	602b      	str	r3, [r5, #0]
  htim5.Init.Period = 65535;
 8003a1e:	f8c5 900c 	str.w	r9, [r5, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8003a22:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003a26:	940d      	str	r4, [sp, #52]	; 0x34
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003a28:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003a2a:	f7fe faed 	bl	8002008 <HAL_TIM_Encoder_Init>
 8003a2e:	b100      	cbz	r0, 8003a32 <main+0x462>
 8003a30:	e7fe      	b.n	8003a30 <main+0x460>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a32:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a34:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003a36:	a907      	add	r1, sp, #28
 8003a38:	4628      	mov	r0, r5
 8003a3a:	f7fe fbe7 	bl	800220c <HAL_TIMEx_MasterConfigSynchronization>
 8003a3e:	4604      	mov	r4, r0
 8003a40:	b1d0      	cbz	r0, 8003a78 <main+0x4a8>
 8003a42:	e7fe      	b.n	8003a42 <main+0x472>
 8003a44:	200003d4 	.word	0x200003d4
 8003a48:	2000037c 	.word	0x2000037c
 8003a4c:	40014000 	.word	0x40014000
 8003a50:	200001dc 	.word	0x200001dc
 8003a54:	40014400 	.word	0x40014400
 8003a58:	200002ac 	.word	0x200002ac
 8003a5c:	40001c00 	.word	0x40001c00
 8003a60:	20000300 	.word	0x20000300
 8003a64:	40001000 	.word	0x40001000
 8003a68:	200000fc 	.word	0x200000fc
 8003a6c:	40000800 	.word	0x40000800
 8003a70:	20000234 	.word	0x20000234
 8003a74:	40000c00 	.word	0x40000c00
   lcd_init(20,4);
 8003a78:	2104      	movs	r1, #4
 8003a7a:	2014      	movs	r0, #20
 8003a7c:	f7fe ff8a 	bl	8002994 <lcd_init>
   HAL_TIM_Base_Start_IT(&htim7);
 8003a80:	4849      	ldr	r0, [pc, #292]	; (8003ba8 <main+0x5d8>)
 8003a82:	f7fe f89b 	bl	8001bbc <HAL_TIM_Base_Start_IT>
   HAL_TIM_Base_Start_IT(&htim6);
 8003a86:	4638      	mov	r0, r7
 8003a88:	f7fe f898 	bl	8001bbc <HAL_TIM_Base_Start_IT>
   HAL_TIM_PWM_Start(&htim9,TIM_CHANNEL_1);
 8003a8c:	4621      	mov	r1, r4
 8003a8e:	4847      	ldr	r0, [pc, #284]	; (8003bac <main+0x5dc>)
 8003a90:	f7fe fba2 	bl	80021d8 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim13,TIM_CHANNEL_1);
 8003a94:	4621      	mov	r1, r4
 8003a96:	4846      	ldr	r0, [pc, #280]	; (8003bb0 <main+0x5e0>)
 8003a98:	f7fe fb9e 	bl	80021d8 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim10,TIM_CHANNEL_1);
 8003a9c:	4621      	mov	r1, r4
 8003a9e:	4845      	ldr	r0, [pc, #276]	; (8003bb4 <main+0x5e4>)
 8003aa0:	f7fe fb9a 	bl	80021d8 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim9,TIM_CHANNEL_2);
 8003aa4:	2104      	movs	r1, #4
 8003aa6:	4841      	ldr	r0, [pc, #260]	; (8003bac <main+0x5dc>)
 8003aa8:	f7fe fb96 	bl	80021d8 <HAL_TIM_PWM_Start>
   HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_1);
 8003aac:	4621      	mov	r1, r4
 8003aae:	4842      	ldr	r0, [pc, #264]	; (8003bb8 <main+0x5e8>)
 8003ab0:	f7fe f890 	bl	8001bd4 <HAL_TIM_Encoder_Start>
   HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_1);
 8003ab4:	4621      	mov	r1, r4
 8003ab6:	4841      	ldr	r0, [pc, #260]	; (8003bbc <main+0x5ec>)
 8003ab8:	f7fe f88c 	bl	8001bd4 <HAL_TIM_Encoder_Start>
   HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
 8003abc:	4621      	mov	r1, r4
 8003abe:	4840      	ldr	r0, [pc, #256]	; (8003bc0 <main+0x5f0>)
 8003ac0:	f7fe f888 	bl	8001bd4 <HAL_TIM_Encoder_Start>
   HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_1);
 8003ac4:	4621      	mov	r1, r4
 8003ac6:	483f      	ldr	r0, [pc, #252]	; (8003bc4 <main+0x5f4>)
 8003ac8:	f7fe f884 	bl	8001bd4 <HAL_TIM_Encoder_Start>
   HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_1);
 8003acc:	4621      	mov	r1, r4
 8003ace:	4630      	mov	r0, r6
 8003ad0:	f7fe f880 	bl	8001bd4 <HAL_TIM_Encoder_Start>
   HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_1);
 8003ad4:	4621      	mov	r1, r4
 8003ad6:	4628      	mov	r0, r5
 8003ad8:	f7fe f87c 	bl	8001bd4 <HAL_TIM_Encoder_Start>
   HAL_UART_Receive_DMA(&huart3, (uint8_t*)data_terima, 7);
 8003adc:	2207      	movs	r2, #7
 8003ade:	493a      	ldr	r1, [pc, #232]	; (8003bc8 <main+0x5f8>)
 8003ae0:	483a      	ldr	r0, [pc, #232]	; (8003bcc <main+0x5fc>)
	 sprintf(tampil,"%4d",v_motor[0]); lcd_print(0,0,tampil);
 8003ae2:	4d3b      	ldr	r5, [pc, #236]	; (8003bd0 <main+0x600>)
 8003ae4:	4c3b      	ldr	r4, [pc, #236]	; (8003bd4 <main+0x604>)
   HAL_UART_Receive_DMA(&huart3, (uint8_t*)data_terima, 7);
 8003ae6:	f7fe fd0b 	bl	8002500 <HAL_UART_Receive_DMA>
	 sprintf(tampil,"%4d",v_motor[0]); lcd_print(0,0,tampil);
 8003aea:	4e3b      	ldr	r6, [pc, #236]	; (8003bd8 <main+0x608>)
 8003aec:	4629      	mov	r1, r5
 8003aee:	f9b6 2000 	ldrsh.w	r2, [r6]
 8003af2:	4620      	mov	r0, r4
 8003af4:	f000 fb02 	bl	80040fc <siprintf>
 8003af8:	2100      	movs	r1, #0
 8003afa:	4622      	mov	r2, r4
 8003afc:	4608      	mov	r0, r1
 8003afe:	f7ff f90f 	bl	8002d20 <lcd_print>
	 sprintf(tampil,"%4d",v_motor[1]); lcd_print(0,1,tampil);
 8003b02:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 8003b06:	4629      	mov	r1, r5
 8003b08:	4620      	mov	r0, r4
 8003b0a:	f000 faf7 	bl	80040fc <siprintf>
 8003b0e:	4622      	mov	r2, r4
 8003b10:	2101      	movs	r1, #1
 8003b12:	2000      	movs	r0, #0
 8003b14:	f7ff f904 	bl	8002d20 <lcd_print>
	 sprintf(tampil,"%4d",v_motor[2]); lcd_print(0,2,tampil);
 8003b18:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
 8003b1c:	4629      	mov	r1, r5
 8003b1e:	4620      	mov	r0, r4
 8003b20:	f000 faec 	bl	80040fc <siprintf>
 8003b24:	4622      	mov	r2, r4
 8003b26:	2102      	movs	r1, #2
 8003b28:	2000      	movs	r0, #0
 8003b2a:	f7ff f8f9 	bl	8002d20 <lcd_print>
	 sprintf(tampil,"%4d",v_motor[3]); lcd_print(0,3,tampil);
 8003b2e:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 8003b32:	4629      	mov	r1, r5
 8003b34:	4620      	mov	r0, r4
 8003b36:	f000 fae1 	bl	80040fc <siprintf>
 8003b3a:	4622      	mov	r2, r4
 8003b3c:	2103      	movs	r1, #3
 8003b3e:	2000      	movs	r0, #0
 8003b40:	f7ff f8ee 	bl	8002d20 <lcd_print>
	 sprintf(tampil,"%+05d", (int)posisi_x); lcd_print(10,0,tampil);
 8003b44:	4b25      	ldr	r3, [pc, #148]	; (8003bdc <main+0x60c>)
 8003b46:	4926      	ldr	r1, [pc, #152]	; (8003be0 <main+0x610>)
 8003b48:	edd3 7a00 	vldr	s15, [r3]
 8003b4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b50:	4620      	mov	r0, r4
 8003b52:	ee17 2a90 	vmov	r2, s15
 8003b56:	f000 fad1 	bl	80040fc <siprintf>
 8003b5a:	4622      	mov	r2, r4
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	200a      	movs	r0, #10
 8003b60:	f7ff f8de 	bl	8002d20 <lcd_print>
	 sprintf(tampil,"%+05d", (int)posisi_y); lcd_print(10,1,tampil);
 8003b64:	4b1f      	ldr	r3, [pc, #124]	; (8003be4 <main+0x614>)
 8003b66:	491e      	ldr	r1, [pc, #120]	; (8003be0 <main+0x610>)
 8003b68:	edd3 7a00 	vldr	s15, [r3]
 8003b6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b70:	4620      	mov	r0, r4
 8003b72:	ee17 2a90 	vmov	r2, s15
 8003b76:	f000 fac1 	bl	80040fc <siprintf>
 8003b7a:	4622      	mov	r2, r4
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	200a      	movs	r0, #10
 8003b80:	f7ff f8ce 	bl	8002d20 <lcd_print>
	 sprintf(tampil,"%+04d", (int)gyro_derajat); lcd_print(10,2,tampil);
 8003b84:	4b18      	ldr	r3, [pc, #96]	; (8003be8 <main+0x618>)
 8003b86:	4919      	ldr	r1, [pc, #100]	; (8003bec <main+0x61c>)
 8003b88:	edd3 7a00 	vldr	s15, [r3]
 8003b8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b90:	4620      	mov	r0, r4
 8003b92:	ee17 2a90 	vmov	r2, s15
 8003b96:	f000 fab1 	bl	80040fc <siprintf>
 8003b9a:	4622      	mov	r2, r4
 8003b9c:	2102      	movs	r1, #2
 8003b9e:	200a      	movs	r0, #10
 8003ba0:	f7ff f8be 	bl	8002d20 <lcd_print>
 8003ba4:	e7a1      	b.n	8003aea <main+0x51a>
 8003ba6:	bf00      	nop
 8003ba8:	20000460 	.word	0x20000460
 8003bac:	2000037c 	.word	0x2000037c
 8003bb0:	200002ac 	.word	0x200002ac
 8003bb4:	200001dc 	.word	0x200001dc
 8003bb8:	2000033c 	.word	0x2000033c
 8003bbc:	200000c0 	.word	0x200000c0
 8003bc0:	20000270 	.word	0x20000270
 8003bc4:	200003d4 	.word	0x200003d4
 8003bc8:	20000410 	.word	0x20000410
 8003bcc:	2000019c 	.word	0x2000019c
 8003bd0:	08005444 	.word	0x08005444
 8003bd4:	20000438 	.word	0x20000438
 8003bd8:	20000456 	.word	0x20000456
 8003bdc:	20000378 	.word	0x20000378
 8003be0:	08005448 	.word	0x08005448
 8003be4:	200000bc 	.word	0x200000bc
 8003be8:	20000000 	.word	0x20000000
 8003bec:	0800544e 	.word	0x0800544e

08003bf0 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8003bf0:	e7fe      	b.n	8003bf0 <_Error_Handler>

08003bf2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bf2:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bf4:	2003      	movs	r0, #3
 8003bf6:	f7fd f9b1 	bl	8000f5c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	4611      	mov	r1, r2
 8003bfe:	f06f 000b 	mvn.w	r0, #11
 8003c02:	f7fd f9bd 	bl	8000f80 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003c06:	2200      	movs	r2, #0
 8003c08:	4611      	mov	r1, r2
 8003c0a:	f06f 000a 	mvn.w	r0, #10
 8003c0e:	f7fd f9b7 	bl	8000f80 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003c12:	2200      	movs	r2, #0
 8003c14:	4611      	mov	r1, r2
 8003c16:	f06f 0009 	mvn.w	r0, #9
 8003c1a:	f7fd f9b1 	bl	8000f80 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003c1e:	2200      	movs	r2, #0
 8003c20:	4611      	mov	r1, r2
 8003c22:	f06f 0004 	mvn.w	r0, #4
 8003c26:	f7fd f9ab 	bl	8000f80 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	4611      	mov	r1, r2
 8003c2e:	f06f 0003 	mvn.w	r0, #3
 8003c32:	f7fd f9a5 	bl	8000f80 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003c36:	2200      	movs	r2, #0
 8003c38:	4611      	mov	r1, r2
 8003c3a:	f06f 0001 	mvn.w	r0, #1
 8003c3e:	f7fd f99f 	bl	8000f80 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003c42:	2200      	movs	r2, #0
 8003c44:	4611      	mov	r1, r2
 8003c46:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003c4e:	f7fd b997 	b.w	8000f80 <HAL_NVIC_SetPriority>
	...

08003c54 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003c54:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_encoder->Instance==TIM1)
 8003c56:	6803      	ldr	r3, [r0, #0]
 8003c58:	4a52      	ldr	r2, [pc, #328]	; (8003da4 <HAL_TIM_Encoder_MspInit+0x150>)
 8003c5a:	4293      	cmp	r3, r2
{
 8003c5c:	b08c      	sub	sp, #48	; 0x30
  if(htim_encoder->Instance==TIM1)
 8003c5e:	d11b      	bne.n	8003c98 <HAL_TIM_Encoder_MspInit+0x44>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c60:	2300      	movs	r3, #0
 8003c62:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 8003c66:	9301      	str	r3, [sp, #4]
 8003c68:	6c51      	ldr	r1, [r2, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c6a:	484f      	ldr	r0, [pc, #316]	; (8003da8 <HAL_TIM_Encoder_MspInit+0x154>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c6c:	f041 0101 	orr.w	r1, r1, #1
 8003c70:	6451      	str	r1, [r2, #68]	; 0x44
 8003c72:	6c52      	ldr	r2, [r2, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c74:	9309      	str	r3, [sp, #36]	; 0x24
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c76:	f002 0201 	and.w	r2, r2, #1
 8003c7a:	9201      	str	r2, [sp, #4]
 8003c7c:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c7e:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8003c80:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8003c84:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003c86:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c88:	2202      	movs	r2, #2
 8003c8a:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003c8c:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c8e:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c90:	f7fd fbc0 	bl	8001414 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003c94:	b00c      	add	sp, #48	; 0x30
 8003c96:	bd70      	pop	{r4, r5, r6, pc}
  else if(htim_encoder->Instance==TIM2)
 8003c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c9c:	d122      	bne.n	8003ce4 <HAL_TIM_Encoder_MspInit+0x90>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c9e:	2400      	movs	r4, #0
 8003ca0:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8003ca4:	9402      	str	r4, [sp, #8]
 8003ca6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ca8:	4840      	ldr	r0, [pc, #256]	; (8003dac <HAL_TIM_Encoder_MspInit+0x158>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003caa:	f042 0201 	orr.w	r2, r2, #1
 8003cae:	641a      	str	r2, [r3, #64]	; 0x40
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb2:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	9302      	str	r3, [sp, #8]
 8003cba:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cbc:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc2:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003cc4:	2501      	movs	r5, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cc6:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003cc8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cca:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ccc:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cce:	f7fd fba1 	bl	8001414 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003cd2:	2308      	movs	r3, #8
 8003cd4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd6:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd8:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cda:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003cdc:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cde:	a907      	add	r1, sp, #28
 8003ce0:	4833      	ldr	r0, [pc, #204]	; (8003db0 <HAL_TIM_Encoder_MspInit+0x15c>)
 8003ce2:	e7d5      	b.n	8003c90 <HAL_TIM_Encoder_MspInit+0x3c>
  else if(htim_encoder->Instance==TIM3)
 8003ce4:	4a33      	ldr	r2, [pc, #204]	; (8003db4 <HAL_TIM_Encoder_MspInit+0x160>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d114      	bne.n	8003d14 <HAL_TIM_Encoder_MspInit+0xc0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003cea:	f502 320d 	add.w	r2, r2, #144384	; 0x23400
 8003cee:	2300      	movs	r3, #0
 8003cf0:	9303      	str	r3, [sp, #12]
 8003cf2:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003cf4:	f041 0102 	orr.w	r1, r1, #2
 8003cf8:	6411      	str	r1, [r2, #64]	; 0x40
 8003cfa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003cfc:	f002 0202 	and.w	r2, r2, #2
 8003d00:	9203      	str	r2, [sp, #12]
 8003d02:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003d04:	2230      	movs	r2, #48	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d06:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d08:	2202      	movs	r2, #2
 8003d0a:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0c:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d0e:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003d10:	920b      	str	r2, [sp, #44]	; 0x2c
 8003d12:	e7e4      	b.n	8003cde <HAL_TIM_Encoder_MspInit+0x8a>
  else if(htim_encoder->Instance==TIM4)
 8003d14:	4a28      	ldr	r2, [pc, #160]	; (8003db8 <HAL_TIM_Encoder_MspInit+0x164>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d10e      	bne.n	8003d38 <HAL_TIM_Encoder_MspInit+0xe4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d1a:	f502 320c 	add.w	r2, r2, #143360	; 0x23000
 8003d1e:	2300      	movs	r3, #0
 8003d20:	9304      	str	r3, [sp, #16]
 8003d22:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003d24:	f041 0104 	orr.w	r1, r1, #4
 8003d28:	6411      	str	r1, [r2, #64]	; 0x40
 8003d2a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d2c:	f002 0204 	and.w	r2, r2, #4
 8003d30:	9204      	str	r2, [sp, #16]
 8003d32:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d34:	22c0      	movs	r2, #192	; 0xc0
 8003d36:	e7e6      	b.n	8003d06 <HAL_TIM_Encoder_MspInit+0xb2>
  else if(htim_encoder->Instance==TIM5)
 8003d38:	4a20      	ldr	r2, [pc, #128]	; (8003dbc <HAL_TIM_Encoder_MspInit+0x168>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d116      	bne.n	8003d6c <HAL_TIM_Encoder_MspInit+0x118>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003d3e:	2300      	movs	r3, #0
 8003d40:	f502 320b 	add.w	r2, r2, #142336	; 0x22c00
 8003d44:	9305      	str	r3, [sp, #20]
 8003d46:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d48:	4818      	ldr	r0, [pc, #96]	; (8003dac <HAL_TIM_Encoder_MspInit+0x158>)
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003d4a:	f041 0108 	orr.w	r1, r1, #8
 8003d4e:	6411      	str	r1, [r2, #64]	; 0x40
 8003d50:	6c12      	ldr	r2, [r2, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d52:	9309      	str	r3, [sp, #36]	; 0x24
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003d54:	f002 0208 	and.w	r2, r2, #8
 8003d58:	9205      	str	r2, [sp, #20]
 8003d5a:	9a05      	ldr	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d5c:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003d5e:	2203      	movs	r2, #3
 8003d60:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d62:	2202      	movs	r2, #2
 8003d64:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003d66:	920b      	str	r2, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d68:	a907      	add	r1, sp, #28
 8003d6a:	e791      	b.n	8003c90 <HAL_TIM_Encoder_MspInit+0x3c>
  else if(htim_encoder->Instance==TIM8)
 8003d6c:	4a14      	ldr	r2, [pc, #80]	; (8003dc0 <HAL_TIM_Encoder_MspInit+0x16c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d190      	bne.n	8003c94 <HAL_TIM_Encoder_MspInit+0x40>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003d72:	2300      	movs	r3, #0
 8003d74:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8003d78:	9306      	str	r3, [sp, #24]
 8003d7a:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d7c:	4811      	ldr	r0, [pc, #68]	; (8003dc4 <HAL_TIM_Encoder_MspInit+0x170>)
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003d7e:	f041 0102 	orr.w	r1, r1, #2
 8003d82:	6451      	str	r1, [r2, #68]	; 0x44
 8003d84:	6c52      	ldr	r2, [r2, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d86:	9309      	str	r3, [sp, #36]	; 0x24
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003d88:	f002 0202 	and.w	r2, r2, #2
 8003d8c:	9206      	str	r2, [sp, #24]
 8003d8e:	9a06      	ldr	r2, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d90:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d92:	22c0      	movs	r2, #192	; 0xc0
 8003d94:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003d96:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d98:	2202      	movs	r2, #2
 8003d9a:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003d9c:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d9e:	a907      	add	r1, sp, #28
 8003da0:	e776      	b.n	8003c90 <HAL_TIM_Encoder_MspInit+0x3c>
 8003da2:	bf00      	nop
 8003da4:	40010000 	.word	0x40010000
 8003da8:	40021000 	.word	0x40021000
 8003dac:	40020000 	.word	0x40020000
 8003db0:	40020400 	.word	0x40020400
 8003db4:	40000400 	.word	0x40000400
 8003db8:	40000800 	.word	0x40000800
 8003dbc:	40000c00 	.word	0x40000c00
 8003dc0:	40010400 	.word	0x40010400
 8003dc4:	40020800 	.word	0x40020800

08003dc8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003dc8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  if(htim_base->Instance==TIM6)
 8003dca:	6803      	ldr	r3, [r0, #0]
 8003dcc:	4a2e      	ldr	r2, [pc, #184]	; (8003e88 <HAL_TIM_Base_MspInit+0xc0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d115      	bne.n	8003dfe <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	4b2d      	ldr	r3, [pc, #180]	; (8003e8c <HAL_TIM_Base_MspInit+0xc4>)
 8003dd6:	9201      	str	r2, [sp, #4]
 8003dd8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003dda:	f041 0110 	orr.w	r1, r1, #16
 8003dde:	6419      	str	r1, [r3, #64]	; 0x40
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	f003 0310 	and.w	r3, r3, #16
 8003de6:	9301      	str	r3, [sp, #4]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003de8:	2036      	movs	r0, #54	; 0x36
 8003dea:	4611      	mov	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003dec:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003dee:	f7fd f8c7 	bl	8000f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003df2:	2036      	movs	r0, #54	; 0x36
  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003df4:	f7fd f8f8 	bl	8000fe8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8003df8:	b007      	add	sp, #28
 8003dfa:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM7)
 8003dfe:	4a24      	ldr	r2, [pc, #144]	; (8003e90 <HAL_TIM_Base_MspInit+0xc8>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d111      	bne.n	8003e28 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003e04:	2200      	movs	r2, #0
 8003e06:	4b21      	ldr	r3, [pc, #132]	; (8003e8c <HAL_TIM_Base_MspInit+0xc4>)
 8003e08:	9202      	str	r2, [sp, #8]
 8003e0a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003e0c:	f041 0120 	orr.w	r1, r1, #32
 8003e10:	6419      	str	r1, [r3, #64]	; 0x40
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	f003 0320 	and.w	r3, r3, #32
 8003e18:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003e1a:	2037      	movs	r0, #55	; 0x37
 8003e1c:	4611      	mov	r1, r2
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003e1e:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003e20:	f7fd f8ae 	bl	8000f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003e24:	2037      	movs	r0, #55	; 0x37
 8003e26:	e7e5      	b.n	8003df4 <HAL_TIM_Base_MspInit+0x2c>
  else if(htim_base->Instance==TIM9)
 8003e28:	4a1a      	ldr	r2, [pc, #104]	; (8003e94 <HAL_TIM_Base_MspInit+0xcc>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d10c      	bne.n	8003e48 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003e2e:	2300      	movs	r3, #0
 8003e30:	9303      	str	r3, [sp, #12]
 8003e32:	4b16      	ldr	r3, [pc, #88]	; (8003e8c <HAL_TIM_Base_MspInit+0xc4>)
 8003e34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e36:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003e3a:	645a      	str	r2, [r3, #68]	; 0x44
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e42:	9303      	str	r3, [sp, #12]
 8003e44:	9b03      	ldr	r3, [sp, #12]
 8003e46:	e7d7      	b.n	8003df8 <HAL_TIM_Base_MspInit+0x30>
  else if(htim_base->Instance==TIM10)
 8003e48:	4a13      	ldr	r2, [pc, #76]	; (8003e98 <HAL_TIM_Base_MspInit+0xd0>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d10c      	bne.n	8003e68 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003e4e:	2300      	movs	r3, #0
 8003e50:	9304      	str	r3, [sp, #16]
 8003e52:	4b0e      	ldr	r3, [pc, #56]	; (8003e8c <HAL_TIM_Base_MspInit+0xc4>)
 8003e54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e56:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003e5a:	645a      	str	r2, [r3, #68]	; 0x44
 8003e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e62:	9304      	str	r3, [sp, #16]
 8003e64:	9b04      	ldr	r3, [sp, #16]
 8003e66:	e7c7      	b.n	8003df8 <HAL_TIM_Base_MspInit+0x30>
  else if(htim_base->Instance==TIM13)
 8003e68:	4a0c      	ldr	r2, [pc, #48]	; (8003e9c <HAL_TIM_Base_MspInit+0xd4>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d1c4      	bne.n	8003df8 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003e6e:	2300      	movs	r3, #0
 8003e70:	9305      	str	r3, [sp, #20]
 8003e72:	4b06      	ldr	r3, [pc, #24]	; (8003e8c <HAL_TIM_Base_MspInit+0xc4>)
 8003e74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e7a:	641a      	str	r2, [r3, #64]	; 0x40
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e82:	9305      	str	r3, [sp, #20]
 8003e84:	9b05      	ldr	r3, [sp, #20]
}
 8003e86:	e7b7      	b.n	8003df8 <HAL_TIM_Base_MspInit+0x30>
 8003e88:	40001000 	.word	0x40001000
 8003e8c:	40023800 	.word	0x40023800
 8003e90:	40001400 	.word	0x40001400
 8003e94:	40014000 	.word	0x40014000
 8003e98:	40014400 	.word	0x40014400
 8003e9c:	40001c00 	.word	0x40001c00

08003ea0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ea0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM9)
 8003ea2:	6803      	ldr	r3, [r0, #0]
 8003ea4:	4a18      	ldr	r2, [pc, #96]	; (8003f08 <HAL_TIM_MspPostInit+0x68>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d10f      	bne.n	8003eca <HAL_TIM_MspPostInit+0x2a>
  /* USER CODE END TIM9_MspPostInit 0 */
    /**TIM9 GPIO Configuration    
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003eaa:	2360      	movs	r3, #96	; 0x60
 8003eac:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eae:	2302      	movs	r3, #2
 8003eb0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eb6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003eb8:	4814      	ldr	r0, [pc, #80]	; (8003f0c <HAL_TIM_MspPostInit+0x6c>)
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ebe:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ec0:	f7fd faa8 	bl	8001414 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8003ec4:	b007      	add	sp, #28
 8003ec6:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim->Instance==TIM10)
 8003eca:	4a11      	ldr	r2, [pc, #68]	; (8003f10 <HAL_TIM_MspPostInit+0x70>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d10c      	bne.n	8003eea <HAL_TIM_MspPostInit+0x4a>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003ed0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ed4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eda:	2300      	movs	r3, #0
 8003edc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ede:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ee4:	a901      	add	r1, sp, #4
 8003ee6:	480b      	ldr	r0, [pc, #44]	; (8003f14 <HAL_TIM_MspPostInit+0x74>)
 8003ee8:	e7ea      	b.n	8003ec0 <HAL_TIM_MspPostInit+0x20>
  else if(htim->Instance==TIM13)
 8003eea:	4a0b      	ldr	r2, [pc, #44]	; (8003f18 <HAL_TIM_MspPostInit+0x78>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d1e9      	bne.n	8003ec4 <HAL_TIM_MspPostInit+0x24>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003ef0:	2340      	movs	r3, #64	; 0x40
 8003ef2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003efc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003efe:	2309      	movs	r3, #9
 8003f00:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f02:	a901      	add	r1, sp, #4
 8003f04:	4805      	ldr	r0, [pc, #20]	; (8003f1c <HAL_TIM_MspPostInit+0x7c>)
 8003f06:	e7db      	b.n	8003ec0 <HAL_TIM_MspPostInit+0x20>
 8003f08:	40014000 	.word	0x40014000
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	40014400 	.word	0x40014400
 8003f14:	40020400 	.word	0x40020400
 8003f18:	40001c00 	.word	0x40001c00
 8003f1c:	40020000 	.word	0x40020000

08003f20 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f20:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART3)
 8003f22:	6802      	ldr	r2, [r0, #0]
 8003f24:	4b22      	ldr	r3, [pc, #136]	; (8003fb0 <HAL_UART_MspInit+0x90>)
 8003f26:	429a      	cmp	r2, r3
{
 8003f28:	b086      	sub	sp, #24
 8003f2a:	4606      	mov	r6, r0
  if(huart->Instance==USART3)
 8003f2c:	d13e      	bne.n	8003fac <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003f2e:	2500      	movs	r5, #0
 8003f30:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8003f34:	9500      	str	r5, [sp, #0]
 8003f36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f38:	481e      	ldr	r0, [pc, #120]	; (8003fb4 <HAL_UART_MspInit+0x94>)

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003f3a:	4c1f      	ldr	r4, [pc, #124]	; (8003fb8 <HAL_UART_MspInit+0x98>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8003f3c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003f40:	641a      	str	r2, [r3, #64]	; 0x40
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003f4c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003f50:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f52:	2302      	movs	r3, #2
 8003f54:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f56:	2301      	movs	r3, #1
 8003f58:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f5e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003f60:	2307      	movs	r3, #7
 8003f62:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f64:	f7fd fa56 	bl	8001414 <HAL_GPIO_Init>
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003f68:	4a14      	ldr	r2, [pc, #80]	; (8003fbc <HAL_UART_MspInit+0x9c>)
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f6a:	60a5      	str	r5, [r4, #8]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003f6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f70:	e884 000c 	stmia.w	r4, {r2, r3}
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003f74:	4620      	mov	r0, r4
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f7a:	60e5      	str	r5, [r4, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f7c:	6123      	str	r3, [r4, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f7e:	6165      	str	r5, [r4, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f80:	61a5      	str	r5, [r4, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003f82:	61e5      	str	r5, [r4, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003f84:	6225      	str	r5, [r4, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f86:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003f88:	f7fd f878 	bl	800107c <HAL_DMA_Init>
 8003f8c:	b120      	cbz	r0, 8003f98 <HAL_UART_MspInit+0x78>
    {
      _Error_Handler(__FILE__, __LINE__);
 8003f8e:	f240 214a 	movw	r1, #586	; 0x24a
 8003f92:	480b      	ldr	r0, [pc, #44]	; (8003fc0 <HAL_UART_MspInit+0xa0>)
 8003f94:	f7ff fe2c 	bl	8003bf0 <_Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003f98:	2200      	movs	r2, #0
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003f9a:	6374      	str	r4, [r6, #52]	; 0x34
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003f9c:	2027      	movs	r0, #39	; 0x27
 8003f9e:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003fa0:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003fa2:	f7fc ffed 	bl	8000f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003fa6:	2027      	movs	r0, #39	; 0x27
 8003fa8:	f7fd f81e 	bl	8000fe8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003fac:	b006      	add	sp, #24
 8003fae:	bd70      	pop	{r4, r5, r6, pc}
 8003fb0:	40004800 	.word	0x40004800
 8003fb4:	40020400 	.word	0x40020400
 8003fb8:	2000013c 	.word	0x2000013c
 8003fbc:	40026028 	.word	0x40026028
 8003fc0:	08005454 	.word	0x08005454

08003fc4 <NMI_Handler>:
 8003fc4:	4770      	bx	lr

08003fc6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003fc6:	e7fe      	b.n	8003fc6 <HardFault_Handler>

08003fc8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003fc8:	e7fe      	b.n	8003fc8 <MemManage_Handler>

08003fca <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003fca:	e7fe      	b.n	8003fca <BusFault_Handler>

08003fcc <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003fcc:	e7fe      	b.n	8003fcc <UsageFault_Handler>

08003fce <SVC_Handler>:
 8003fce:	4770      	bx	lr

08003fd0 <DebugMon_Handler>:
 8003fd0:	4770      	bx	lr

08003fd2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003fd2:	4770      	bx	lr

08003fd4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003fd4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003fd6:	f7fc ffa3 	bl	8000f20 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003fda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8003fde:	f7fd b832 	b.w	8001046 <HAL_SYSTICK_IRQHandler>
	...

08003fe4 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003fe4:	4801      	ldr	r0, [pc, #4]	; (8003fec <DMA1_Stream1_IRQHandler+0x8>)
 8003fe6:	f7fd b95b 	b.w	80012a0 <HAL_DMA_IRQHandler>
 8003fea:	bf00      	nop
 8003fec:	2000013c 	.word	0x2000013c

08003ff0 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003ff0:	4801      	ldr	r0, [pc, #4]	; (8003ff8 <USART3_IRQHandler+0x8>)
 8003ff2:	f7fe bb6f 	b.w	80026d4 <HAL_UART_IRQHandler>
 8003ff6:	bf00      	nop
 8003ff8:	2000019c 	.word	0x2000019c

08003ffc <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003ffc:	4801      	ldr	r0, [pc, #4]	; (8004004 <TIM6_DAC_IRQHandler+0x8>)
 8003ffe:	f7fd bec8 	b.w	8001d92 <HAL_TIM_IRQHandler>
 8004002:	bf00      	nop
 8004004:	20000300 	.word	0x20000300

08004008 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004008:	4801      	ldr	r0, [pc, #4]	; (8004010 <TIM7_IRQHandler+0x8>)
 800400a:	f7fd bec2 	b.w	8001d92 <HAL_TIM_IRQHandler>
 800400e:	bf00      	nop
 8004010:	20000460 	.word	0x20000460

08004014 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004014:	490f      	ldr	r1, [pc, #60]	; (8004054 <SystemInit+0x40>)
 8004016:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800401a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800401e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004022:	4b0d      	ldr	r3, [pc, #52]	; (8004058 <SystemInit+0x44>)
 8004024:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004026:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8004028:	f042 0201 	orr.w	r2, r2, #1
 800402c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800402e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004036:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800403a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800403c:	4a07      	ldr	r2, [pc, #28]	; (800405c <SystemInit+0x48>)
 800403e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004046:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004048:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800404a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800404e:	608b      	str	r3, [r1, #8]
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	e000ed00 	.word	0xe000ed00
 8004058:	40023800 	.word	0x40023800
 800405c:	24003010 	.word	0x24003010

08004060 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004060:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004098 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004064:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004066:	e003      	b.n	8004070 <LoopCopyDataInit>

08004068 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004068:	4b0c      	ldr	r3, [pc, #48]	; (800409c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800406a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800406c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800406e:	3104      	adds	r1, #4

08004070 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004070:	480b      	ldr	r0, [pc, #44]	; (80040a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004072:	4b0c      	ldr	r3, [pc, #48]	; (80040a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004074:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004076:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004078:	d3f6      	bcc.n	8004068 <CopyDataInit>
  ldr  r2, =_sbss
 800407a:	4a0b      	ldr	r2, [pc, #44]	; (80040a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800407c:	e002      	b.n	8004084 <LoopFillZerobss>

0800407e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800407e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004080:	f842 3b04 	str.w	r3, [r2], #4

08004084 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004084:	4b09      	ldr	r3, [pc, #36]	; (80040ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004086:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004088:	d3f9      	bcc.n	800407e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800408a:	f7ff ffc3 	bl	8004014 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800408e:	f000 f811 	bl	80040b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004092:	f7ff fa9d 	bl	80035d0 <main>
  bx  lr    
 8004096:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004098:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800409c:	0800589c 	.word	0x0800589c
  ldr  r0, =_sdata
 80040a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80040a4:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80040a8:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80040ac:	200004b8 	.word	0x200004b8

080040b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040b0:	e7fe      	b.n	80040b0 <ADC_IRQHandler>
	...

080040b4 <__libc_init_array>:
 80040b4:	b570      	push	{r4, r5, r6, lr}
 80040b6:	4e0d      	ldr	r6, [pc, #52]	; (80040ec <__libc_init_array+0x38>)
 80040b8:	4c0d      	ldr	r4, [pc, #52]	; (80040f0 <__libc_init_array+0x3c>)
 80040ba:	1ba4      	subs	r4, r4, r6
 80040bc:	10a4      	asrs	r4, r4, #2
 80040be:	2500      	movs	r5, #0
 80040c0:	42a5      	cmp	r5, r4
 80040c2:	d109      	bne.n	80040d8 <__libc_init_array+0x24>
 80040c4:	4e0b      	ldr	r6, [pc, #44]	; (80040f4 <__libc_init_array+0x40>)
 80040c6:	4c0c      	ldr	r4, [pc, #48]	; (80040f8 <__libc_init_array+0x44>)
 80040c8:	f001 f9ac 	bl	8005424 <_init>
 80040cc:	1ba4      	subs	r4, r4, r6
 80040ce:	10a4      	asrs	r4, r4, #2
 80040d0:	2500      	movs	r5, #0
 80040d2:	42a5      	cmp	r5, r4
 80040d4:	d105      	bne.n	80040e2 <__libc_init_array+0x2e>
 80040d6:	bd70      	pop	{r4, r5, r6, pc}
 80040d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040dc:	4798      	blx	r3
 80040de:	3501      	adds	r5, #1
 80040e0:	e7ee      	b.n	80040c0 <__libc_init_array+0xc>
 80040e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040e6:	4798      	blx	r3
 80040e8:	3501      	adds	r5, #1
 80040ea:	e7f2      	b.n	80040d2 <__libc_init_array+0x1e>
 80040ec:	08005894 	.word	0x08005894
 80040f0:	08005894 	.word	0x08005894
 80040f4:	08005894 	.word	0x08005894
 80040f8:	08005898 	.word	0x08005898

080040fc <siprintf>:
 80040fc:	b40e      	push	{r1, r2, r3}
 80040fe:	b500      	push	{lr}
 8004100:	b09c      	sub	sp, #112	; 0x70
 8004102:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004106:	ab1d      	add	r3, sp, #116	; 0x74
 8004108:	f8ad 1014 	strh.w	r1, [sp, #20]
 800410c:	9002      	str	r0, [sp, #8]
 800410e:	9006      	str	r0, [sp, #24]
 8004110:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004114:	480a      	ldr	r0, [pc, #40]	; (8004140 <siprintf+0x44>)
 8004116:	9104      	str	r1, [sp, #16]
 8004118:	9107      	str	r1, [sp, #28]
 800411a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800411e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004122:	f8ad 1016 	strh.w	r1, [sp, #22]
 8004126:	6800      	ldr	r0, [r0, #0]
 8004128:	9301      	str	r3, [sp, #4]
 800412a:	a902      	add	r1, sp, #8
 800412c:	f000 f866 	bl	80041fc <_svfiprintf_r>
 8004130:	9b02      	ldr	r3, [sp, #8]
 8004132:	2200      	movs	r2, #0
 8004134:	701a      	strb	r2, [r3, #0]
 8004136:	b01c      	add	sp, #112	; 0x70
 8004138:	f85d eb04 	ldr.w	lr, [sp], #4
 800413c:	b003      	add	sp, #12
 800413e:	4770      	bx	lr
 8004140:	20000010 	.word	0x20000010

08004144 <__ssputs_r>:
 8004144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004148:	688e      	ldr	r6, [r1, #8]
 800414a:	429e      	cmp	r6, r3
 800414c:	4682      	mov	sl, r0
 800414e:	460c      	mov	r4, r1
 8004150:	4691      	mov	r9, r2
 8004152:	4698      	mov	r8, r3
 8004154:	d835      	bhi.n	80041c2 <__ssputs_r+0x7e>
 8004156:	898a      	ldrh	r2, [r1, #12]
 8004158:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800415c:	d031      	beq.n	80041c2 <__ssputs_r+0x7e>
 800415e:	6825      	ldr	r5, [r4, #0]
 8004160:	6909      	ldr	r1, [r1, #16]
 8004162:	1a6f      	subs	r7, r5, r1
 8004164:	6965      	ldr	r5, [r4, #20]
 8004166:	2302      	movs	r3, #2
 8004168:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800416c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004170:	f108 0301 	add.w	r3, r8, #1
 8004174:	443b      	add	r3, r7
 8004176:	429d      	cmp	r5, r3
 8004178:	bf38      	it	cc
 800417a:	461d      	movcc	r5, r3
 800417c:	0553      	lsls	r3, r2, #21
 800417e:	d531      	bpl.n	80041e4 <__ssputs_r+0xa0>
 8004180:	4629      	mov	r1, r5
 8004182:	f000 fb39 	bl	80047f8 <_malloc_r>
 8004186:	4606      	mov	r6, r0
 8004188:	b950      	cbnz	r0, 80041a0 <__ssputs_r+0x5c>
 800418a:	230c      	movs	r3, #12
 800418c:	f8ca 3000 	str.w	r3, [sl]
 8004190:	89a3      	ldrh	r3, [r4, #12]
 8004192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004196:	81a3      	strh	r3, [r4, #12]
 8004198:	f04f 30ff 	mov.w	r0, #4294967295
 800419c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041a0:	463a      	mov	r2, r7
 80041a2:	6921      	ldr	r1, [r4, #16]
 80041a4:	f000 fab4 	bl	8004710 <memcpy>
 80041a8:	89a3      	ldrh	r3, [r4, #12]
 80041aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041b2:	81a3      	strh	r3, [r4, #12]
 80041b4:	6126      	str	r6, [r4, #16]
 80041b6:	6165      	str	r5, [r4, #20]
 80041b8:	443e      	add	r6, r7
 80041ba:	1bed      	subs	r5, r5, r7
 80041bc:	6026      	str	r6, [r4, #0]
 80041be:	60a5      	str	r5, [r4, #8]
 80041c0:	4646      	mov	r6, r8
 80041c2:	4546      	cmp	r6, r8
 80041c4:	bf28      	it	cs
 80041c6:	4646      	movcs	r6, r8
 80041c8:	4632      	mov	r2, r6
 80041ca:	4649      	mov	r1, r9
 80041cc:	6820      	ldr	r0, [r4, #0]
 80041ce:	f000 faaa 	bl	8004726 <memmove>
 80041d2:	68a3      	ldr	r3, [r4, #8]
 80041d4:	1b9b      	subs	r3, r3, r6
 80041d6:	60a3      	str	r3, [r4, #8]
 80041d8:	6823      	ldr	r3, [r4, #0]
 80041da:	441e      	add	r6, r3
 80041dc:	6026      	str	r6, [r4, #0]
 80041de:	2000      	movs	r0, #0
 80041e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041e4:	462a      	mov	r2, r5
 80041e6:	f000 fb65 	bl	80048b4 <_realloc_r>
 80041ea:	4606      	mov	r6, r0
 80041ec:	2800      	cmp	r0, #0
 80041ee:	d1e1      	bne.n	80041b4 <__ssputs_r+0x70>
 80041f0:	6921      	ldr	r1, [r4, #16]
 80041f2:	4650      	mov	r0, sl
 80041f4:	f000 fab2 	bl	800475c <_free_r>
 80041f8:	e7c7      	b.n	800418a <__ssputs_r+0x46>
	...

080041fc <_svfiprintf_r>:
 80041fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004200:	b09d      	sub	sp, #116	; 0x74
 8004202:	4680      	mov	r8, r0
 8004204:	9303      	str	r3, [sp, #12]
 8004206:	898b      	ldrh	r3, [r1, #12]
 8004208:	061c      	lsls	r4, r3, #24
 800420a:	460d      	mov	r5, r1
 800420c:	4616      	mov	r6, r2
 800420e:	d50f      	bpl.n	8004230 <_svfiprintf_r+0x34>
 8004210:	690b      	ldr	r3, [r1, #16]
 8004212:	b96b      	cbnz	r3, 8004230 <_svfiprintf_r+0x34>
 8004214:	2140      	movs	r1, #64	; 0x40
 8004216:	f000 faef 	bl	80047f8 <_malloc_r>
 800421a:	6028      	str	r0, [r5, #0]
 800421c:	6128      	str	r0, [r5, #16]
 800421e:	b928      	cbnz	r0, 800422c <_svfiprintf_r+0x30>
 8004220:	230c      	movs	r3, #12
 8004222:	f8c8 3000 	str.w	r3, [r8]
 8004226:	f04f 30ff 	mov.w	r0, #4294967295
 800422a:	e0c5      	b.n	80043b8 <_svfiprintf_r+0x1bc>
 800422c:	2340      	movs	r3, #64	; 0x40
 800422e:	616b      	str	r3, [r5, #20]
 8004230:	2300      	movs	r3, #0
 8004232:	9309      	str	r3, [sp, #36]	; 0x24
 8004234:	2320      	movs	r3, #32
 8004236:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800423a:	2330      	movs	r3, #48	; 0x30
 800423c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004240:	f04f 0b01 	mov.w	fp, #1
 8004244:	4637      	mov	r7, r6
 8004246:	463c      	mov	r4, r7
 8004248:	f814 3b01 	ldrb.w	r3, [r4], #1
 800424c:	2b00      	cmp	r3, #0
 800424e:	d13c      	bne.n	80042ca <_svfiprintf_r+0xce>
 8004250:	ebb7 0a06 	subs.w	sl, r7, r6
 8004254:	d00b      	beq.n	800426e <_svfiprintf_r+0x72>
 8004256:	4653      	mov	r3, sl
 8004258:	4632      	mov	r2, r6
 800425a:	4629      	mov	r1, r5
 800425c:	4640      	mov	r0, r8
 800425e:	f7ff ff71 	bl	8004144 <__ssputs_r>
 8004262:	3001      	adds	r0, #1
 8004264:	f000 80a3 	beq.w	80043ae <_svfiprintf_r+0x1b2>
 8004268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800426a:	4453      	add	r3, sl
 800426c:	9309      	str	r3, [sp, #36]	; 0x24
 800426e:	783b      	ldrb	r3, [r7, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 809c 	beq.w	80043ae <_svfiprintf_r+0x1b2>
 8004276:	2300      	movs	r3, #0
 8004278:	f04f 32ff 	mov.w	r2, #4294967295
 800427c:	9304      	str	r3, [sp, #16]
 800427e:	9307      	str	r3, [sp, #28]
 8004280:	9205      	str	r2, [sp, #20]
 8004282:	9306      	str	r3, [sp, #24]
 8004284:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004288:	931a      	str	r3, [sp, #104]	; 0x68
 800428a:	2205      	movs	r2, #5
 800428c:	7821      	ldrb	r1, [r4, #0]
 800428e:	4850      	ldr	r0, [pc, #320]	; (80043d0 <_svfiprintf_r+0x1d4>)
 8004290:	f7fb ff9e 	bl	80001d0 <memchr>
 8004294:	1c67      	adds	r7, r4, #1
 8004296:	9b04      	ldr	r3, [sp, #16]
 8004298:	b9d8      	cbnz	r0, 80042d2 <_svfiprintf_r+0xd6>
 800429a:	06d9      	lsls	r1, r3, #27
 800429c:	bf44      	itt	mi
 800429e:	2220      	movmi	r2, #32
 80042a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80042a4:	071a      	lsls	r2, r3, #28
 80042a6:	bf44      	itt	mi
 80042a8:	222b      	movmi	r2, #43	; 0x2b
 80042aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80042ae:	7822      	ldrb	r2, [r4, #0]
 80042b0:	2a2a      	cmp	r2, #42	; 0x2a
 80042b2:	d016      	beq.n	80042e2 <_svfiprintf_r+0xe6>
 80042b4:	9a07      	ldr	r2, [sp, #28]
 80042b6:	2100      	movs	r1, #0
 80042b8:	200a      	movs	r0, #10
 80042ba:	4627      	mov	r7, r4
 80042bc:	3401      	adds	r4, #1
 80042be:	783b      	ldrb	r3, [r7, #0]
 80042c0:	3b30      	subs	r3, #48	; 0x30
 80042c2:	2b09      	cmp	r3, #9
 80042c4:	d951      	bls.n	800436a <_svfiprintf_r+0x16e>
 80042c6:	b1c9      	cbz	r1, 80042fc <_svfiprintf_r+0x100>
 80042c8:	e011      	b.n	80042ee <_svfiprintf_r+0xf2>
 80042ca:	2b25      	cmp	r3, #37	; 0x25
 80042cc:	d0c0      	beq.n	8004250 <_svfiprintf_r+0x54>
 80042ce:	4627      	mov	r7, r4
 80042d0:	e7b9      	b.n	8004246 <_svfiprintf_r+0x4a>
 80042d2:	4a3f      	ldr	r2, [pc, #252]	; (80043d0 <_svfiprintf_r+0x1d4>)
 80042d4:	1a80      	subs	r0, r0, r2
 80042d6:	fa0b f000 	lsl.w	r0, fp, r0
 80042da:	4318      	orrs	r0, r3
 80042dc:	9004      	str	r0, [sp, #16]
 80042de:	463c      	mov	r4, r7
 80042e0:	e7d3      	b.n	800428a <_svfiprintf_r+0x8e>
 80042e2:	9a03      	ldr	r2, [sp, #12]
 80042e4:	1d11      	adds	r1, r2, #4
 80042e6:	6812      	ldr	r2, [r2, #0]
 80042e8:	9103      	str	r1, [sp, #12]
 80042ea:	2a00      	cmp	r2, #0
 80042ec:	db01      	blt.n	80042f2 <_svfiprintf_r+0xf6>
 80042ee:	9207      	str	r2, [sp, #28]
 80042f0:	e004      	b.n	80042fc <_svfiprintf_r+0x100>
 80042f2:	4252      	negs	r2, r2
 80042f4:	f043 0302 	orr.w	r3, r3, #2
 80042f8:	9207      	str	r2, [sp, #28]
 80042fa:	9304      	str	r3, [sp, #16]
 80042fc:	783b      	ldrb	r3, [r7, #0]
 80042fe:	2b2e      	cmp	r3, #46	; 0x2e
 8004300:	d10e      	bne.n	8004320 <_svfiprintf_r+0x124>
 8004302:	787b      	ldrb	r3, [r7, #1]
 8004304:	2b2a      	cmp	r3, #42	; 0x2a
 8004306:	f107 0101 	add.w	r1, r7, #1
 800430a:	d132      	bne.n	8004372 <_svfiprintf_r+0x176>
 800430c:	9b03      	ldr	r3, [sp, #12]
 800430e:	1d1a      	adds	r2, r3, #4
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	9203      	str	r2, [sp, #12]
 8004314:	2b00      	cmp	r3, #0
 8004316:	bfb8      	it	lt
 8004318:	f04f 33ff 	movlt.w	r3, #4294967295
 800431c:	3702      	adds	r7, #2
 800431e:	9305      	str	r3, [sp, #20]
 8004320:	4c2c      	ldr	r4, [pc, #176]	; (80043d4 <_svfiprintf_r+0x1d8>)
 8004322:	7839      	ldrb	r1, [r7, #0]
 8004324:	2203      	movs	r2, #3
 8004326:	4620      	mov	r0, r4
 8004328:	f7fb ff52 	bl	80001d0 <memchr>
 800432c:	b138      	cbz	r0, 800433e <_svfiprintf_r+0x142>
 800432e:	2340      	movs	r3, #64	; 0x40
 8004330:	1b00      	subs	r0, r0, r4
 8004332:	fa03 f000 	lsl.w	r0, r3, r0
 8004336:	9b04      	ldr	r3, [sp, #16]
 8004338:	4303      	orrs	r3, r0
 800433a:	9304      	str	r3, [sp, #16]
 800433c:	3701      	adds	r7, #1
 800433e:	7839      	ldrb	r1, [r7, #0]
 8004340:	4825      	ldr	r0, [pc, #148]	; (80043d8 <_svfiprintf_r+0x1dc>)
 8004342:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004346:	2206      	movs	r2, #6
 8004348:	1c7e      	adds	r6, r7, #1
 800434a:	f7fb ff41 	bl	80001d0 <memchr>
 800434e:	2800      	cmp	r0, #0
 8004350:	d035      	beq.n	80043be <_svfiprintf_r+0x1c2>
 8004352:	4b22      	ldr	r3, [pc, #136]	; (80043dc <_svfiprintf_r+0x1e0>)
 8004354:	b9fb      	cbnz	r3, 8004396 <_svfiprintf_r+0x19a>
 8004356:	9b03      	ldr	r3, [sp, #12]
 8004358:	3307      	adds	r3, #7
 800435a:	f023 0307 	bic.w	r3, r3, #7
 800435e:	3308      	adds	r3, #8
 8004360:	9303      	str	r3, [sp, #12]
 8004362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004364:	444b      	add	r3, r9
 8004366:	9309      	str	r3, [sp, #36]	; 0x24
 8004368:	e76c      	b.n	8004244 <_svfiprintf_r+0x48>
 800436a:	fb00 3202 	mla	r2, r0, r2, r3
 800436e:	2101      	movs	r1, #1
 8004370:	e7a3      	b.n	80042ba <_svfiprintf_r+0xbe>
 8004372:	2300      	movs	r3, #0
 8004374:	9305      	str	r3, [sp, #20]
 8004376:	4618      	mov	r0, r3
 8004378:	240a      	movs	r4, #10
 800437a:	460f      	mov	r7, r1
 800437c:	3101      	adds	r1, #1
 800437e:	783a      	ldrb	r2, [r7, #0]
 8004380:	3a30      	subs	r2, #48	; 0x30
 8004382:	2a09      	cmp	r2, #9
 8004384:	d903      	bls.n	800438e <_svfiprintf_r+0x192>
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0ca      	beq.n	8004320 <_svfiprintf_r+0x124>
 800438a:	9005      	str	r0, [sp, #20]
 800438c:	e7c8      	b.n	8004320 <_svfiprintf_r+0x124>
 800438e:	fb04 2000 	mla	r0, r4, r0, r2
 8004392:	2301      	movs	r3, #1
 8004394:	e7f1      	b.n	800437a <_svfiprintf_r+0x17e>
 8004396:	ab03      	add	r3, sp, #12
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	462a      	mov	r2, r5
 800439c:	4b10      	ldr	r3, [pc, #64]	; (80043e0 <_svfiprintf_r+0x1e4>)
 800439e:	a904      	add	r1, sp, #16
 80043a0:	4640      	mov	r0, r8
 80043a2:	f3af 8000 	nop.w
 80043a6:	f1b0 3fff 	cmp.w	r0, #4294967295
 80043aa:	4681      	mov	r9, r0
 80043ac:	d1d9      	bne.n	8004362 <_svfiprintf_r+0x166>
 80043ae:	89ab      	ldrh	r3, [r5, #12]
 80043b0:	065b      	lsls	r3, r3, #25
 80043b2:	f53f af38 	bmi.w	8004226 <_svfiprintf_r+0x2a>
 80043b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043b8:	b01d      	add	sp, #116	; 0x74
 80043ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043be:	ab03      	add	r3, sp, #12
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	462a      	mov	r2, r5
 80043c4:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <_svfiprintf_r+0x1e4>)
 80043c6:	a904      	add	r1, sp, #16
 80043c8:	4640      	mov	r0, r8
 80043ca:	f000 f881 	bl	80044d0 <_printf_i>
 80043ce:	e7ea      	b.n	80043a6 <_svfiprintf_r+0x1aa>
 80043d0:	08005487 	.word	0x08005487
 80043d4:	0800548d 	.word	0x0800548d
 80043d8:	08005491 	.word	0x08005491
 80043dc:	00000000 	.word	0x00000000
 80043e0:	08004145 	.word	0x08004145

080043e4 <_printf_common>:
 80043e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043e8:	4691      	mov	r9, r2
 80043ea:	461f      	mov	r7, r3
 80043ec:	688a      	ldr	r2, [r1, #8]
 80043ee:	690b      	ldr	r3, [r1, #16]
 80043f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043f4:	4293      	cmp	r3, r2
 80043f6:	bfb8      	it	lt
 80043f8:	4613      	movlt	r3, r2
 80043fa:	f8c9 3000 	str.w	r3, [r9]
 80043fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004402:	4606      	mov	r6, r0
 8004404:	460c      	mov	r4, r1
 8004406:	b112      	cbz	r2, 800440e <_printf_common+0x2a>
 8004408:	3301      	adds	r3, #1
 800440a:	f8c9 3000 	str.w	r3, [r9]
 800440e:	6823      	ldr	r3, [r4, #0]
 8004410:	0699      	lsls	r1, r3, #26
 8004412:	bf42      	ittt	mi
 8004414:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004418:	3302      	addmi	r3, #2
 800441a:	f8c9 3000 	strmi.w	r3, [r9]
 800441e:	6825      	ldr	r5, [r4, #0]
 8004420:	f015 0506 	ands.w	r5, r5, #6
 8004424:	d107      	bne.n	8004436 <_printf_common+0x52>
 8004426:	f104 0a19 	add.w	sl, r4, #25
 800442a:	68e3      	ldr	r3, [r4, #12]
 800442c:	f8d9 2000 	ldr.w	r2, [r9]
 8004430:	1a9b      	subs	r3, r3, r2
 8004432:	429d      	cmp	r5, r3
 8004434:	db29      	blt.n	800448a <_printf_common+0xa6>
 8004436:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800443a:	6822      	ldr	r2, [r4, #0]
 800443c:	3300      	adds	r3, #0
 800443e:	bf18      	it	ne
 8004440:	2301      	movne	r3, #1
 8004442:	0692      	lsls	r2, r2, #26
 8004444:	d42e      	bmi.n	80044a4 <_printf_common+0xc0>
 8004446:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800444a:	4639      	mov	r1, r7
 800444c:	4630      	mov	r0, r6
 800444e:	47c0      	blx	r8
 8004450:	3001      	adds	r0, #1
 8004452:	d021      	beq.n	8004498 <_printf_common+0xb4>
 8004454:	6823      	ldr	r3, [r4, #0]
 8004456:	68e5      	ldr	r5, [r4, #12]
 8004458:	f8d9 2000 	ldr.w	r2, [r9]
 800445c:	f003 0306 	and.w	r3, r3, #6
 8004460:	2b04      	cmp	r3, #4
 8004462:	bf08      	it	eq
 8004464:	1aad      	subeq	r5, r5, r2
 8004466:	68a3      	ldr	r3, [r4, #8]
 8004468:	6922      	ldr	r2, [r4, #16]
 800446a:	bf0c      	ite	eq
 800446c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004470:	2500      	movne	r5, #0
 8004472:	4293      	cmp	r3, r2
 8004474:	bfc4      	itt	gt
 8004476:	1a9b      	subgt	r3, r3, r2
 8004478:	18ed      	addgt	r5, r5, r3
 800447a:	f04f 0900 	mov.w	r9, #0
 800447e:	341a      	adds	r4, #26
 8004480:	454d      	cmp	r5, r9
 8004482:	d11b      	bne.n	80044bc <_printf_common+0xd8>
 8004484:	2000      	movs	r0, #0
 8004486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800448a:	2301      	movs	r3, #1
 800448c:	4652      	mov	r2, sl
 800448e:	4639      	mov	r1, r7
 8004490:	4630      	mov	r0, r6
 8004492:	47c0      	blx	r8
 8004494:	3001      	adds	r0, #1
 8004496:	d103      	bne.n	80044a0 <_printf_common+0xbc>
 8004498:	f04f 30ff 	mov.w	r0, #4294967295
 800449c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044a0:	3501      	adds	r5, #1
 80044a2:	e7c2      	b.n	800442a <_printf_common+0x46>
 80044a4:	18e1      	adds	r1, r4, r3
 80044a6:	1c5a      	adds	r2, r3, #1
 80044a8:	2030      	movs	r0, #48	; 0x30
 80044aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044ae:	4422      	add	r2, r4
 80044b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044b8:	3302      	adds	r3, #2
 80044ba:	e7c4      	b.n	8004446 <_printf_common+0x62>
 80044bc:	2301      	movs	r3, #1
 80044be:	4622      	mov	r2, r4
 80044c0:	4639      	mov	r1, r7
 80044c2:	4630      	mov	r0, r6
 80044c4:	47c0      	blx	r8
 80044c6:	3001      	adds	r0, #1
 80044c8:	d0e6      	beq.n	8004498 <_printf_common+0xb4>
 80044ca:	f109 0901 	add.w	r9, r9, #1
 80044ce:	e7d7      	b.n	8004480 <_printf_common+0x9c>

080044d0 <_printf_i>:
 80044d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044d4:	4617      	mov	r7, r2
 80044d6:	7e0a      	ldrb	r2, [r1, #24]
 80044d8:	b085      	sub	sp, #20
 80044da:	2a6e      	cmp	r2, #110	; 0x6e
 80044dc:	4698      	mov	r8, r3
 80044de:	4606      	mov	r6, r0
 80044e0:	460c      	mov	r4, r1
 80044e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80044e4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80044e8:	f000 80bc 	beq.w	8004664 <_printf_i+0x194>
 80044ec:	d81a      	bhi.n	8004524 <_printf_i+0x54>
 80044ee:	2a63      	cmp	r2, #99	; 0x63
 80044f0:	d02e      	beq.n	8004550 <_printf_i+0x80>
 80044f2:	d80a      	bhi.n	800450a <_printf_i+0x3a>
 80044f4:	2a00      	cmp	r2, #0
 80044f6:	f000 80c8 	beq.w	800468a <_printf_i+0x1ba>
 80044fa:	2a58      	cmp	r2, #88	; 0x58
 80044fc:	f000 808a 	beq.w	8004614 <_printf_i+0x144>
 8004500:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004504:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004508:	e02a      	b.n	8004560 <_printf_i+0x90>
 800450a:	2a64      	cmp	r2, #100	; 0x64
 800450c:	d001      	beq.n	8004512 <_printf_i+0x42>
 800450e:	2a69      	cmp	r2, #105	; 0x69
 8004510:	d1f6      	bne.n	8004500 <_printf_i+0x30>
 8004512:	6821      	ldr	r1, [r4, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	f011 0f80 	tst.w	r1, #128	; 0x80
 800451a:	d023      	beq.n	8004564 <_printf_i+0x94>
 800451c:	1d11      	adds	r1, r2, #4
 800451e:	6019      	str	r1, [r3, #0]
 8004520:	6813      	ldr	r3, [r2, #0]
 8004522:	e027      	b.n	8004574 <_printf_i+0xa4>
 8004524:	2a73      	cmp	r2, #115	; 0x73
 8004526:	f000 80b4 	beq.w	8004692 <_printf_i+0x1c2>
 800452a:	d808      	bhi.n	800453e <_printf_i+0x6e>
 800452c:	2a6f      	cmp	r2, #111	; 0x6f
 800452e:	d02a      	beq.n	8004586 <_printf_i+0xb6>
 8004530:	2a70      	cmp	r2, #112	; 0x70
 8004532:	d1e5      	bne.n	8004500 <_printf_i+0x30>
 8004534:	680a      	ldr	r2, [r1, #0]
 8004536:	f042 0220 	orr.w	r2, r2, #32
 800453a:	600a      	str	r2, [r1, #0]
 800453c:	e003      	b.n	8004546 <_printf_i+0x76>
 800453e:	2a75      	cmp	r2, #117	; 0x75
 8004540:	d021      	beq.n	8004586 <_printf_i+0xb6>
 8004542:	2a78      	cmp	r2, #120	; 0x78
 8004544:	d1dc      	bne.n	8004500 <_printf_i+0x30>
 8004546:	2278      	movs	r2, #120	; 0x78
 8004548:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800454c:	496e      	ldr	r1, [pc, #440]	; (8004708 <_printf_i+0x238>)
 800454e:	e064      	b.n	800461a <_printf_i+0x14a>
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004556:	1d11      	adds	r1, r2, #4
 8004558:	6019      	str	r1, [r3, #0]
 800455a:	6813      	ldr	r3, [r2, #0]
 800455c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004560:	2301      	movs	r3, #1
 8004562:	e0a3      	b.n	80046ac <_printf_i+0x1dc>
 8004564:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004568:	f102 0104 	add.w	r1, r2, #4
 800456c:	6019      	str	r1, [r3, #0]
 800456e:	d0d7      	beq.n	8004520 <_printf_i+0x50>
 8004570:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004574:	2b00      	cmp	r3, #0
 8004576:	da03      	bge.n	8004580 <_printf_i+0xb0>
 8004578:	222d      	movs	r2, #45	; 0x2d
 800457a:	425b      	negs	r3, r3
 800457c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004580:	4962      	ldr	r1, [pc, #392]	; (800470c <_printf_i+0x23c>)
 8004582:	220a      	movs	r2, #10
 8004584:	e017      	b.n	80045b6 <_printf_i+0xe6>
 8004586:	6820      	ldr	r0, [r4, #0]
 8004588:	6819      	ldr	r1, [r3, #0]
 800458a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800458e:	d003      	beq.n	8004598 <_printf_i+0xc8>
 8004590:	1d08      	adds	r0, r1, #4
 8004592:	6018      	str	r0, [r3, #0]
 8004594:	680b      	ldr	r3, [r1, #0]
 8004596:	e006      	b.n	80045a6 <_printf_i+0xd6>
 8004598:	f010 0f40 	tst.w	r0, #64	; 0x40
 800459c:	f101 0004 	add.w	r0, r1, #4
 80045a0:	6018      	str	r0, [r3, #0]
 80045a2:	d0f7      	beq.n	8004594 <_printf_i+0xc4>
 80045a4:	880b      	ldrh	r3, [r1, #0]
 80045a6:	4959      	ldr	r1, [pc, #356]	; (800470c <_printf_i+0x23c>)
 80045a8:	2a6f      	cmp	r2, #111	; 0x6f
 80045aa:	bf14      	ite	ne
 80045ac:	220a      	movne	r2, #10
 80045ae:	2208      	moveq	r2, #8
 80045b0:	2000      	movs	r0, #0
 80045b2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80045b6:	6865      	ldr	r5, [r4, #4]
 80045b8:	60a5      	str	r5, [r4, #8]
 80045ba:	2d00      	cmp	r5, #0
 80045bc:	f2c0 809c 	blt.w	80046f8 <_printf_i+0x228>
 80045c0:	6820      	ldr	r0, [r4, #0]
 80045c2:	f020 0004 	bic.w	r0, r0, #4
 80045c6:	6020      	str	r0, [r4, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d13f      	bne.n	800464c <_printf_i+0x17c>
 80045cc:	2d00      	cmp	r5, #0
 80045ce:	f040 8095 	bne.w	80046fc <_printf_i+0x22c>
 80045d2:	4675      	mov	r5, lr
 80045d4:	2a08      	cmp	r2, #8
 80045d6:	d10b      	bne.n	80045f0 <_printf_i+0x120>
 80045d8:	6823      	ldr	r3, [r4, #0]
 80045da:	07da      	lsls	r2, r3, #31
 80045dc:	d508      	bpl.n	80045f0 <_printf_i+0x120>
 80045de:	6923      	ldr	r3, [r4, #16]
 80045e0:	6862      	ldr	r2, [r4, #4]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	bfde      	ittt	le
 80045e6:	2330      	movle	r3, #48	; 0x30
 80045e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80045f0:	ebae 0305 	sub.w	r3, lr, r5
 80045f4:	6123      	str	r3, [r4, #16]
 80045f6:	f8cd 8000 	str.w	r8, [sp]
 80045fa:	463b      	mov	r3, r7
 80045fc:	aa03      	add	r2, sp, #12
 80045fe:	4621      	mov	r1, r4
 8004600:	4630      	mov	r0, r6
 8004602:	f7ff feef 	bl	80043e4 <_printf_common>
 8004606:	3001      	adds	r0, #1
 8004608:	d155      	bne.n	80046b6 <_printf_i+0x1e6>
 800460a:	f04f 30ff 	mov.w	r0, #4294967295
 800460e:	b005      	add	sp, #20
 8004610:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004614:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004618:	493c      	ldr	r1, [pc, #240]	; (800470c <_printf_i+0x23c>)
 800461a:	6822      	ldr	r2, [r4, #0]
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004622:	f100 0504 	add.w	r5, r0, #4
 8004626:	601d      	str	r5, [r3, #0]
 8004628:	d001      	beq.n	800462e <_printf_i+0x15e>
 800462a:	6803      	ldr	r3, [r0, #0]
 800462c:	e002      	b.n	8004634 <_printf_i+0x164>
 800462e:	0655      	lsls	r5, r2, #25
 8004630:	d5fb      	bpl.n	800462a <_printf_i+0x15a>
 8004632:	8803      	ldrh	r3, [r0, #0]
 8004634:	07d0      	lsls	r0, r2, #31
 8004636:	bf44      	itt	mi
 8004638:	f042 0220 	orrmi.w	r2, r2, #32
 800463c:	6022      	strmi	r2, [r4, #0]
 800463e:	b91b      	cbnz	r3, 8004648 <_printf_i+0x178>
 8004640:	6822      	ldr	r2, [r4, #0]
 8004642:	f022 0220 	bic.w	r2, r2, #32
 8004646:	6022      	str	r2, [r4, #0]
 8004648:	2210      	movs	r2, #16
 800464a:	e7b1      	b.n	80045b0 <_printf_i+0xe0>
 800464c:	4675      	mov	r5, lr
 800464e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004652:	fb02 3310 	mls	r3, r2, r0, r3
 8004656:	5ccb      	ldrb	r3, [r1, r3]
 8004658:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800465c:	4603      	mov	r3, r0
 800465e:	2800      	cmp	r0, #0
 8004660:	d1f5      	bne.n	800464e <_printf_i+0x17e>
 8004662:	e7b7      	b.n	80045d4 <_printf_i+0x104>
 8004664:	6808      	ldr	r0, [r1, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	6949      	ldr	r1, [r1, #20]
 800466a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800466e:	d004      	beq.n	800467a <_printf_i+0x1aa>
 8004670:	1d10      	adds	r0, r2, #4
 8004672:	6018      	str	r0, [r3, #0]
 8004674:	6813      	ldr	r3, [r2, #0]
 8004676:	6019      	str	r1, [r3, #0]
 8004678:	e007      	b.n	800468a <_printf_i+0x1ba>
 800467a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800467e:	f102 0004 	add.w	r0, r2, #4
 8004682:	6018      	str	r0, [r3, #0]
 8004684:	6813      	ldr	r3, [r2, #0]
 8004686:	d0f6      	beq.n	8004676 <_printf_i+0x1a6>
 8004688:	8019      	strh	r1, [r3, #0]
 800468a:	2300      	movs	r3, #0
 800468c:	6123      	str	r3, [r4, #16]
 800468e:	4675      	mov	r5, lr
 8004690:	e7b1      	b.n	80045f6 <_printf_i+0x126>
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	1d11      	adds	r1, r2, #4
 8004696:	6019      	str	r1, [r3, #0]
 8004698:	6815      	ldr	r5, [r2, #0]
 800469a:	6862      	ldr	r2, [r4, #4]
 800469c:	2100      	movs	r1, #0
 800469e:	4628      	mov	r0, r5
 80046a0:	f7fb fd96 	bl	80001d0 <memchr>
 80046a4:	b108      	cbz	r0, 80046aa <_printf_i+0x1da>
 80046a6:	1b40      	subs	r0, r0, r5
 80046a8:	6060      	str	r0, [r4, #4]
 80046aa:	6863      	ldr	r3, [r4, #4]
 80046ac:	6123      	str	r3, [r4, #16]
 80046ae:	2300      	movs	r3, #0
 80046b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046b4:	e79f      	b.n	80045f6 <_printf_i+0x126>
 80046b6:	6923      	ldr	r3, [r4, #16]
 80046b8:	462a      	mov	r2, r5
 80046ba:	4639      	mov	r1, r7
 80046bc:	4630      	mov	r0, r6
 80046be:	47c0      	blx	r8
 80046c0:	3001      	adds	r0, #1
 80046c2:	d0a2      	beq.n	800460a <_printf_i+0x13a>
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	079b      	lsls	r3, r3, #30
 80046c8:	d507      	bpl.n	80046da <_printf_i+0x20a>
 80046ca:	2500      	movs	r5, #0
 80046cc:	f104 0919 	add.w	r9, r4, #25
 80046d0:	68e3      	ldr	r3, [r4, #12]
 80046d2:	9a03      	ldr	r2, [sp, #12]
 80046d4:	1a9b      	subs	r3, r3, r2
 80046d6:	429d      	cmp	r5, r3
 80046d8:	db05      	blt.n	80046e6 <_printf_i+0x216>
 80046da:	68e0      	ldr	r0, [r4, #12]
 80046dc:	9b03      	ldr	r3, [sp, #12]
 80046de:	4298      	cmp	r0, r3
 80046e0:	bfb8      	it	lt
 80046e2:	4618      	movlt	r0, r3
 80046e4:	e793      	b.n	800460e <_printf_i+0x13e>
 80046e6:	2301      	movs	r3, #1
 80046e8:	464a      	mov	r2, r9
 80046ea:	4639      	mov	r1, r7
 80046ec:	4630      	mov	r0, r6
 80046ee:	47c0      	blx	r8
 80046f0:	3001      	adds	r0, #1
 80046f2:	d08a      	beq.n	800460a <_printf_i+0x13a>
 80046f4:	3501      	adds	r5, #1
 80046f6:	e7eb      	b.n	80046d0 <_printf_i+0x200>
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1a7      	bne.n	800464c <_printf_i+0x17c>
 80046fc:	780b      	ldrb	r3, [r1, #0]
 80046fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004702:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004706:	e765      	b.n	80045d4 <_printf_i+0x104>
 8004708:	080054a9 	.word	0x080054a9
 800470c:	08005498 	.word	0x08005498

08004710 <memcpy>:
 8004710:	b510      	push	{r4, lr}
 8004712:	1e43      	subs	r3, r0, #1
 8004714:	440a      	add	r2, r1
 8004716:	4291      	cmp	r1, r2
 8004718:	d100      	bne.n	800471c <memcpy+0xc>
 800471a:	bd10      	pop	{r4, pc}
 800471c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004720:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004724:	e7f7      	b.n	8004716 <memcpy+0x6>

08004726 <memmove>:
 8004726:	4288      	cmp	r0, r1
 8004728:	b510      	push	{r4, lr}
 800472a:	eb01 0302 	add.w	r3, r1, r2
 800472e:	d803      	bhi.n	8004738 <memmove+0x12>
 8004730:	1e42      	subs	r2, r0, #1
 8004732:	4299      	cmp	r1, r3
 8004734:	d10c      	bne.n	8004750 <memmove+0x2a>
 8004736:	bd10      	pop	{r4, pc}
 8004738:	4298      	cmp	r0, r3
 800473a:	d2f9      	bcs.n	8004730 <memmove+0xa>
 800473c:	1881      	adds	r1, r0, r2
 800473e:	1ad2      	subs	r2, r2, r3
 8004740:	42d3      	cmn	r3, r2
 8004742:	d100      	bne.n	8004746 <memmove+0x20>
 8004744:	bd10      	pop	{r4, pc}
 8004746:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800474a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800474e:	e7f7      	b.n	8004740 <memmove+0x1a>
 8004750:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004754:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004758:	e7eb      	b.n	8004732 <memmove+0xc>
	...

0800475c <_free_r>:
 800475c:	b538      	push	{r3, r4, r5, lr}
 800475e:	4605      	mov	r5, r0
 8004760:	2900      	cmp	r1, #0
 8004762:	d045      	beq.n	80047f0 <_free_r+0x94>
 8004764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004768:	1f0c      	subs	r4, r1, #4
 800476a:	2b00      	cmp	r3, #0
 800476c:	bfb8      	it	lt
 800476e:	18e4      	addlt	r4, r4, r3
 8004770:	f000 f8d6 	bl	8004920 <__malloc_lock>
 8004774:	4a1f      	ldr	r2, [pc, #124]	; (80047f4 <_free_r+0x98>)
 8004776:	6813      	ldr	r3, [r2, #0]
 8004778:	4610      	mov	r0, r2
 800477a:	b933      	cbnz	r3, 800478a <_free_r+0x2e>
 800477c:	6063      	str	r3, [r4, #4]
 800477e:	6014      	str	r4, [r2, #0]
 8004780:	4628      	mov	r0, r5
 8004782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004786:	f000 b8cc 	b.w	8004922 <__malloc_unlock>
 800478a:	42a3      	cmp	r3, r4
 800478c:	d90c      	bls.n	80047a8 <_free_r+0x4c>
 800478e:	6821      	ldr	r1, [r4, #0]
 8004790:	1862      	adds	r2, r4, r1
 8004792:	4293      	cmp	r3, r2
 8004794:	bf04      	itt	eq
 8004796:	681a      	ldreq	r2, [r3, #0]
 8004798:	685b      	ldreq	r3, [r3, #4]
 800479a:	6063      	str	r3, [r4, #4]
 800479c:	bf04      	itt	eq
 800479e:	1852      	addeq	r2, r2, r1
 80047a0:	6022      	streq	r2, [r4, #0]
 80047a2:	6004      	str	r4, [r0, #0]
 80047a4:	e7ec      	b.n	8004780 <_free_r+0x24>
 80047a6:	4613      	mov	r3, r2
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	b10a      	cbz	r2, 80047b0 <_free_r+0x54>
 80047ac:	42a2      	cmp	r2, r4
 80047ae:	d9fa      	bls.n	80047a6 <_free_r+0x4a>
 80047b0:	6819      	ldr	r1, [r3, #0]
 80047b2:	1858      	adds	r0, r3, r1
 80047b4:	42a0      	cmp	r0, r4
 80047b6:	d10b      	bne.n	80047d0 <_free_r+0x74>
 80047b8:	6820      	ldr	r0, [r4, #0]
 80047ba:	4401      	add	r1, r0
 80047bc:	1858      	adds	r0, r3, r1
 80047be:	4282      	cmp	r2, r0
 80047c0:	6019      	str	r1, [r3, #0]
 80047c2:	d1dd      	bne.n	8004780 <_free_r+0x24>
 80047c4:	6810      	ldr	r0, [r2, #0]
 80047c6:	6852      	ldr	r2, [r2, #4]
 80047c8:	605a      	str	r2, [r3, #4]
 80047ca:	4401      	add	r1, r0
 80047cc:	6019      	str	r1, [r3, #0]
 80047ce:	e7d7      	b.n	8004780 <_free_r+0x24>
 80047d0:	d902      	bls.n	80047d8 <_free_r+0x7c>
 80047d2:	230c      	movs	r3, #12
 80047d4:	602b      	str	r3, [r5, #0]
 80047d6:	e7d3      	b.n	8004780 <_free_r+0x24>
 80047d8:	6820      	ldr	r0, [r4, #0]
 80047da:	1821      	adds	r1, r4, r0
 80047dc:	428a      	cmp	r2, r1
 80047de:	bf04      	itt	eq
 80047e0:	6811      	ldreq	r1, [r2, #0]
 80047e2:	6852      	ldreq	r2, [r2, #4]
 80047e4:	6062      	str	r2, [r4, #4]
 80047e6:	bf04      	itt	eq
 80047e8:	1809      	addeq	r1, r1, r0
 80047ea:	6021      	streq	r1, [r4, #0]
 80047ec:	605c      	str	r4, [r3, #4]
 80047ee:	e7c7      	b.n	8004780 <_free_r+0x24>
 80047f0:	bd38      	pop	{r3, r4, r5, pc}
 80047f2:	bf00      	nop
 80047f4:	2000009c 	.word	0x2000009c

080047f8 <_malloc_r>:
 80047f8:	b570      	push	{r4, r5, r6, lr}
 80047fa:	1ccd      	adds	r5, r1, #3
 80047fc:	f025 0503 	bic.w	r5, r5, #3
 8004800:	3508      	adds	r5, #8
 8004802:	2d0c      	cmp	r5, #12
 8004804:	bf38      	it	cc
 8004806:	250c      	movcc	r5, #12
 8004808:	2d00      	cmp	r5, #0
 800480a:	4606      	mov	r6, r0
 800480c:	db01      	blt.n	8004812 <_malloc_r+0x1a>
 800480e:	42a9      	cmp	r1, r5
 8004810:	d903      	bls.n	800481a <_malloc_r+0x22>
 8004812:	230c      	movs	r3, #12
 8004814:	6033      	str	r3, [r6, #0]
 8004816:	2000      	movs	r0, #0
 8004818:	bd70      	pop	{r4, r5, r6, pc}
 800481a:	f000 f881 	bl	8004920 <__malloc_lock>
 800481e:	4a23      	ldr	r2, [pc, #140]	; (80048ac <_malloc_r+0xb4>)
 8004820:	6814      	ldr	r4, [r2, #0]
 8004822:	4621      	mov	r1, r4
 8004824:	b991      	cbnz	r1, 800484c <_malloc_r+0x54>
 8004826:	4c22      	ldr	r4, [pc, #136]	; (80048b0 <_malloc_r+0xb8>)
 8004828:	6823      	ldr	r3, [r4, #0]
 800482a:	b91b      	cbnz	r3, 8004834 <_malloc_r+0x3c>
 800482c:	4630      	mov	r0, r6
 800482e:	f000 f867 	bl	8004900 <_sbrk_r>
 8004832:	6020      	str	r0, [r4, #0]
 8004834:	4629      	mov	r1, r5
 8004836:	4630      	mov	r0, r6
 8004838:	f000 f862 	bl	8004900 <_sbrk_r>
 800483c:	1c43      	adds	r3, r0, #1
 800483e:	d126      	bne.n	800488e <_malloc_r+0x96>
 8004840:	230c      	movs	r3, #12
 8004842:	6033      	str	r3, [r6, #0]
 8004844:	4630      	mov	r0, r6
 8004846:	f000 f86c 	bl	8004922 <__malloc_unlock>
 800484a:	e7e4      	b.n	8004816 <_malloc_r+0x1e>
 800484c:	680b      	ldr	r3, [r1, #0]
 800484e:	1b5b      	subs	r3, r3, r5
 8004850:	d41a      	bmi.n	8004888 <_malloc_r+0x90>
 8004852:	2b0b      	cmp	r3, #11
 8004854:	d90f      	bls.n	8004876 <_malloc_r+0x7e>
 8004856:	600b      	str	r3, [r1, #0]
 8004858:	50cd      	str	r5, [r1, r3]
 800485a:	18cc      	adds	r4, r1, r3
 800485c:	4630      	mov	r0, r6
 800485e:	f000 f860 	bl	8004922 <__malloc_unlock>
 8004862:	f104 000b 	add.w	r0, r4, #11
 8004866:	1d23      	adds	r3, r4, #4
 8004868:	f020 0007 	bic.w	r0, r0, #7
 800486c:	1ac3      	subs	r3, r0, r3
 800486e:	d01b      	beq.n	80048a8 <_malloc_r+0xb0>
 8004870:	425a      	negs	r2, r3
 8004872:	50e2      	str	r2, [r4, r3]
 8004874:	bd70      	pop	{r4, r5, r6, pc}
 8004876:	428c      	cmp	r4, r1
 8004878:	bf0d      	iteet	eq
 800487a:	6863      	ldreq	r3, [r4, #4]
 800487c:	684b      	ldrne	r3, [r1, #4]
 800487e:	6063      	strne	r3, [r4, #4]
 8004880:	6013      	streq	r3, [r2, #0]
 8004882:	bf18      	it	ne
 8004884:	460c      	movne	r4, r1
 8004886:	e7e9      	b.n	800485c <_malloc_r+0x64>
 8004888:	460c      	mov	r4, r1
 800488a:	6849      	ldr	r1, [r1, #4]
 800488c:	e7ca      	b.n	8004824 <_malloc_r+0x2c>
 800488e:	1cc4      	adds	r4, r0, #3
 8004890:	f024 0403 	bic.w	r4, r4, #3
 8004894:	42a0      	cmp	r0, r4
 8004896:	d005      	beq.n	80048a4 <_malloc_r+0xac>
 8004898:	1a21      	subs	r1, r4, r0
 800489a:	4630      	mov	r0, r6
 800489c:	f000 f830 	bl	8004900 <_sbrk_r>
 80048a0:	3001      	adds	r0, #1
 80048a2:	d0cd      	beq.n	8004840 <_malloc_r+0x48>
 80048a4:	6025      	str	r5, [r4, #0]
 80048a6:	e7d9      	b.n	800485c <_malloc_r+0x64>
 80048a8:	bd70      	pop	{r4, r5, r6, pc}
 80048aa:	bf00      	nop
 80048ac:	2000009c 	.word	0x2000009c
 80048b0:	200000a0 	.word	0x200000a0

080048b4 <_realloc_r>:
 80048b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b6:	4607      	mov	r7, r0
 80048b8:	4614      	mov	r4, r2
 80048ba:	460e      	mov	r6, r1
 80048bc:	b921      	cbnz	r1, 80048c8 <_realloc_r+0x14>
 80048be:	4611      	mov	r1, r2
 80048c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80048c4:	f7ff bf98 	b.w	80047f8 <_malloc_r>
 80048c8:	b922      	cbnz	r2, 80048d4 <_realloc_r+0x20>
 80048ca:	f7ff ff47 	bl	800475c <_free_r>
 80048ce:	4625      	mov	r5, r4
 80048d0:	4628      	mov	r0, r5
 80048d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048d4:	f000 f826 	bl	8004924 <_malloc_usable_size_r>
 80048d8:	4284      	cmp	r4, r0
 80048da:	d90f      	bls.n	80048fc <_realloc_r+0x48>
 80048dc:	4621      	mov	r1, r4
 80048de:	4638      	mov	r0, r7
 80048e0:	f7ff ff8a 	bl	80047f8 <_malloc_r>
 80048e4:	4605      	mov	r5, r0
 80048e6:	2800      	cmp	r0, #0
 80048e8:	d0f2      	beq.n	80048d0 <_realloc_r+0x1c>
 80048ea:	4631      	mov	r1, r6
 80048ec:	4622      	mov	r2, r4
 80048ee:	f7ff ff0f 	bl	8004710 <memcpy>
 80048f2:	4631      	mov	r1, r6
 80048f4:	4638      	mov	r0, r7
 80048f6:	f7ff ff31 	bl	800475c <_free_r>
 80048fa:	e7e9      	b.n	80048d0 <_realloc_r+0x1c>
 80048fc:	4635      	mov	r5, r6
 80048fe:	e7e7      	b.n	80048d0 <_realloc_r+0x1c>

08004900 <_sbrk_r>:
 8004900:	b538      	push	{r3, r4, r5, lr}
 8004902:	4c06      	ldr	r4, [pc, #24]	; (800491c <_sbrk_r+0x1c>)
 8004904:	2300      	movs	r3, #0
 8004906:	4605      	mov	r5, r0
 8004908:	4608      	mov	r0, r1
 800490a:	6023      	str	r3, [r4, #0]
 800490c:	f000 fd7c 	bl	8005408 <_sbrk>
 8004910:	1c43      	adds	r3, r0, #1
 8004912:	d102      	bne.n	800491a <_sbrk_r+0x1a>
 8004914:	6823      	ldr	r3, [r4, #0]
 8004916:	b103      	cbz	r3, 800491a <_sbrk_r+0x1a>
 8004918:	602b      	str	r3, [r5, #0]
 800491a:	bd38      	pop	{r3, r4, r5, pc}
 800491c:	200004b4 	.word	0x200004b4

08004920 <__malloc_lock>:
 8004920:	4770      	bx	lr

08004922 <__malloc_unlock>:
 8004922:	4770      	bx	lr

08004924 <_malloc_usable_size_r>:
 8004924:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004928:	2800      	cmp	r0, #0
 800492a:	f1a0 0004 	sub.w	r0, r0, #4
 800492e:	bfbc      	itt	lt
 8004930:	580b      	ldrlt	r3, [r1, r0]
 8004932:	18c0      	addlt	r0, r0, r3
 8004934:	4770      	bx	lr
	...

08004938 <cosf>:
 8004938:	ee10 3a10 	vmov	r3, s0
 800493c:	b507      	push	{r0, r1, r2, lr}
 800493e:	4a1c      	ldr	r2, [pc, #112]	; (80049b0 <cosf+0x78>)
 8004940:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004944:	4293      	cmp	r3, r2
 8004946:	dc04      	bgt.n	8004952 <cosf+0x1a>
 8004948:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80049b4 <cosf+0x7c>
 800494c:	f000 f9a2 	bl	8004c94 <__kernel_cosf>
 8004950:	e004      	b.n	800495c <cosf+0x24>
 8004952:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004956:	db04      	blt.n	8004962 <cosf+0x2a>
 8004958:	ee30 0a40 	vsub.f32	s0, s0, s0
 800495c:	b003      	add	sp, #12
 800495e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004962:	4668      	mov	r0, sp
 8004964:	f000 f86a 	bl	8004a3c <__ieee754_rem_pio2f>
 8004968:	f000 0003 	and.w	r0, r0, #3
 800496c:	2801      	cmp	r0, #1
 800496e:	d007      	beq.n	8004980 <cosf+0x48>
 8004970:	2802      	cmp	r0, #2
 8004972:	d00e      	beq.n	8004992 <cosf+0x5a>
 8004974:	b9a0      	cbnz	r0, 80049a0 <cosf+0x68>
 8004976:	eddd 0a01 	vldr	s1, [sp, #4]
 800497a:	ed9d 0a00 	vldr	s0, [sp]
 800497e:	e7e5      	b.n	800494c <cosf+0x14>
 8004980:	eddd 0a01 	vldr	s1, [sp, #4]
 8004984:	ed9d 0a00 	vldr	s0, [sp]
 8004988:	f000 fc40 	bl	800520c <__kernel_sinf>
 800498c:	eeb1 0a40 	vneg.f32	s0, s0
 8004990:	e7e4      	b.n	800495c <cosf+0x24>
 8004992:	eddd 0a01 	vldr	s1, [sp, #4]
 8004996:	ed9d 0a00 	vldr	s0, [sp]
 800499a:	f000 f97b 	bl	8004c94 <__kernel_cosf>
 800499e:	e7f5      	b.n	800498c <cosf+0x54>
 80049a0:	2001      	movs	r0, #1
 80049a2:	eddd 0a01 	vldr	s1, [sp, #4]
 80049a6:	ed9d 0a00 	vldr	s0, [sp]
 80049aa:	f000 fc2f 	bl	800520c <__kernel_sinf>
 80049ae:	e7d5      	b.n	800495c <cosf+0x24>
 80049b0:	3f490fd8 	.word	0x3f490fd8
 80049b4:	00000000 	.word	0x00000000

080049b8 <sinf>:
 80049b8:	ee10 3a10 	vmov	r3, s0
 80049bc:	b507      	push	{r0, r1, r2, lr}
 80049be:	4a1d      	ldr	r2, [pc, #116]	; (8004a34 <sinf+0x7c>)
 80049c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80049c4:	4293      	cmp	r3, r2
 80049c6:	dc05      	bgt.n	80049d4 <sinf+0x1c>
 80049c8:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8004a38 <sinf+0x80>
 80049cc:	2000      	movs	r0, #0
 80049ce:	f000 fc1d 	bl	800520c <__kernel_sinf>
 80049d2:	e004      	b.n	80049de <sinf+0x26>
 80049d4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80049d8:	db04      	blt.n	80049e4 <sinf+0x2c>
 80049da:	ee30 0a40 	vsub.f32	s0, s0, s0
 80049de:	b003      	add	sp, #12
 80049e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80049e4:	4668      	mov	r0, sp
 80049e6:	f000 f829 	bl	8004a3c <__ieee754_rem_pio2f>
 80049ea:	f000 0003 	and.w	r0, r0, #3
 80049ee:	2801      	cmp	r0, #1
 80049f0:	d008      	beq.n	8004a04 <sinf+0x4c>
 80049f2:	2802      	cmp	r0, #2
 80049f4:	d00d      	beq.n	8004a12 <sinf+0x5a>
 80049f6:	b9b0      	cbnz	r0, 8004a26 <sinf+0x6e>
 80049f8:	2001      	movs	r0, #1
 80049fa:	eddd 0a01 	vldr	s1, [sp, #4]
 80049fe:	ed9d 0a00 	vldr	s0, [sp]
 8004a02:	e7e4      	b.n	80049ce <sinf+0x16>
 8004a04:	eddd 0a01 	vldr	s1, [sp, #4]
 8004a08:	ed9d 0a00 	vldr	s0, [sp]
 8004a0c:	f000 f942 	bl	8004c94 <__kernel_cosf>
 8004a10:	e7e5      	b.n	80049de <sinf+0x26>
 8004a12:	2001      	movs	r0, #1
 8004a14:	eddd 0a01 	vldr	s1, [sp, #4]
 8004a18:	ed9d 0a00 	vldr	s0, [sp]
 8004a1c:	f000 fbf6 	bl	800520c <__kernel_sinf>
 8004a20:	eeb1 0a40 	vneg.f32	s0, s0
 8004a24:	e7db      	b.n	80049de <sinf+0x26>
 8004a26:	eddd 0a01 	vldr	s1, [sp, #4]
 8004a2a:	ed9d 0a00 	vldr	s0, [sp]
 8004a2e:	f000 f931 	bl	8004c94 <__kernel_cosf>
 8004a32:	e7f5      	b.n	8004a20 <sinf+0x68>
 8004a34:	3f490fd8 	.word	0x3f490fd8
 8004a38:	00000000 	.word	0x00000000

08004a3c <__ieee754_rem_pio2f>:
 8004a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a3e:	ee10 6a10 	vmov	r6, s0
 8004a42:	4b86      	ldr	r3, [pc, #536]	; (8004c5c <__ieee754_rem_pio2f+0x220>)
 8004a44:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8004a48:	429c      	cmp	r4, r3
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	4605      	mov	r5, r0
 8004a4e:	dc05      	bgt.n	8004a5c <__ieee754_rem_pio2f+0x20>
 8004a50:	2300      	movs	r3, #0
 8004a52:	ed85 0a00 	vstr	s0, [r5]
 8004a56:	6043      	str	r3, [r0, #4]
 8004a58:	2000      	movs	r0, #0
 8004a5a:	e020      	b.n	8004a9e <__ieee754_rem_pio2f+0x62>
 8004a5c:	4b80      	ldr	r3, [pc, #512]	; (8004c60 <__ieee754_rem_pio2f+0x224>)
 8004a5e:	429c      	cmp	r4, r3
 8004a60:	dc38      	bgt.n	8004ad4 <__ieee754_rem_pio2f+0x98>
 8004a62:	2e00      	cmp	r6, #0
 8004a64:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8004c64 <__ieee754_rem_pio2f+0x228>
 8004a68:	4b7f      	ldr	r3, [pc, #508]	; (8004c68 <__ieee754_rem_pio2f+0x22c>)
 8004a6a:	f024 040f 	bic.w	r4, r4, #15
 8004a6e:	dd18      	ble.n	8004aa2 <__ieee754_rem_pio2f+0x66>
 8004a70:	429c      	cmp	r4, r3
 8004a72:	ee70 7a47 	vsub.f32	s15, s0, s14
 8004a76:	bf09      	itett	eq
 8004a78:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8004c6c <__ieee754_rem_pio2f+0x230>
 8004a7c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8004c70 <__ieee754_rem_pio2f+0x234>
 8004a80:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8004a84:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8004c74 <__ieee754_rem_pio2f+0x238>
 8004a88:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004a8c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004a90:	edc0 6a00 	vstr	s13, [r0]
 8004a94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004a98:	edc0 7a01 	vstr	s15, [r0, #4]
 8004a9c:	2001      	movs	r0, #1
 8004a9e:	b007      	add	sp, #28
 8004aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004aa2:	429c      	cmp	r4, r3
 8004aa4:	ee70 7a07 	vadd.f32	s15, s0, s14
 8004aa8:	bf09      	itett	eq
 8004aaa:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8004c6c <__ieee754_rem_pio2f+0x230>
 8004aae:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8004c70 <__ieee754_rem_pio2f+0x234>
 8004ab2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8004ab6:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8004c74 <__ieee754_rem_pio2f+0x238>
 8004aba:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004abe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004ac2:	edc0 6a00 	vstr	s13, [r0]
 8004ac6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004aca:	edc0 7a01 	vstr	s15, [r0, #4]
 8004ace:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad2:	e7e4      	b.n	8004a9e <__ieee754_rem_pio2f+0x62>
 8004ad4:	4b68      	ldr	r3, [pc, #416]	; (8004c78 <__ieee754_rem_pio2f+0x23c>)
 8004ad6:	429c      	cmp	r4, r3
 8004ad8:	dc71      	bgt.n	8004bbe <__ieee754_rem_pio2f+0x182>
 8004ada:	f000 fbdf 	bl	800529c <fabsf>
 8004ade:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8004c7c <__ieee754_rem_pio2f+0x240>
 8004ae2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004ae6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004aea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004aee:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8004af2:	ee17 0a90 	vmov	r0, s15
 8004af6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8004c64 <__ieee754_rem_pio2f+0x228>
 8004afa:	eeb1 7a46 	vneg.f32	s14, s12
 8004afe:	eea7 0a27 	vfma.f32	s0, s14, s15
 8004b02:	281f      	cmp	r0, #31
 8004b04:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8004c70 <__ieee754_rem_pio2f+0x234>
 8004b08:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004b0c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8004b10:	ee16 3a90 	vmov	r3, s13
 8004b14:	dc1c      	bgt.n	8004b50 <__ieee754_rem_pio2f+0x114>
 8004b16:	1e47      	subs	r7, r0, #1
 8004b18:	4959      	ldr	r1, [pc, #356]	; (8004c80 <__ieee754_rem_pio2f+0x244>)
 8004b1a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8004b1e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8004b22:	428a      	cmp	r2, r1
 8004b24:	d014      	beq.n	8004b50 <__ieee754_rem_pio2f+0x114>
 8004b26:	602b      	str	r3, [r5, #0]
 8004b28:	ed95 7a00 	vldr	s14, [r5]
 8004b2c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004b30:	2e00      	cmp	r6, #0
 8004b32:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004b36:	ed85 0a01 	vstr	s0, [r5, #4]
 8004b3a:	dab0      	bge.n	8004a9e <__ieee754_rem_pio2f+0x62>
 8004b3c:	eeb1 7a47 	vneg.f32	s14, s14
 8004b40:	eeb1 0a40 	vneg.f32	s0, s0
 8004b44:	ed85 7a00 	vstr	s14, [r5]
 8004b48:	ed85 0a01 	vstr	s0, [r5, #4]
 8004b4c:	4240      	negs	r0, r0
 8004b4e:	e7a6      	b.n	8004a9e <__ieee754_rem_pio2f+0x62>
 8004b50:	15e4      	asrs	r4, r4, #23
 8004b52:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004b56:	1aa2      	subs	r2, r4, r2
 8004b58:	2a08      	cmp	r2, #8
 8004b5a:	dde4      	ble.n	8004b26 <__ieee754_rem_pio2f+0xea>
 8004b5c:	eddf 7a43 	vldr	s15, [pc, #268]	; 8004c6c <__ieee754_rem_pio2f+0x230>
 8004b60:	eef0 6a40 	vmov.f32	s13, s0
 8004b64:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004b68:	ee30 0a66 	vsub.f32	s0, s0, s13
 8004b6c:	eea7 0a27 	vfma.f32	s0, s14, s15
 8004b70:	eddf 7a40 	vldr	s15, [pc, #256]	; 8004c74 <__ieee754_rem_pio2f+0x238>
 8004b74:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8004b78:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8004b7c:	eef0 7a40 	vmov.f32	s15, s0
 8004b80:	ee15 3a90 	vmov	r3, s11
 8004b84:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004b88:	1aa4      	subs	r4, r4, r2
 8004b8a:	2c19      	cmp	r4, #25
 8004b8c:	dc04      	bgt.n	8004b98 <__ieee754_rem_pio2f+0x15c>
 8004b8e:	edc5 5a00 	vstr	s11, [r5]
 8004b92:	eeb0 0a66 	vmov.f32	s0, s13
 8004b96:	e7c7      	b.n	8004b28 <__ieee754_rem_pio2f+0xec>
 8004b98:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8004c84 <__ieee754_rem_pio2f+0x248>
 8004b9c:	eeb0 0a66 	vmov.f32	s0, s13
 8004ba0:	eea7 0a25 	vfma.f32	s0, s14, s11
 8004ba4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8004ba8:	eee7 7a25 	vfma.f32	s15, s14, s11
 8004bac:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8004c88 <__ieee754_rem_pio2f+0x24c>
 8004bb0:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8004bb4:	ee30 7a67 	vsub.f32	s14, s0, s15
 8004bb8:	ed85 7a00 	vstr	s14, [r5]
 8004bbc:	e7b4      	b.n	8004b28 <__ieee754_rem_pio2f+0xec>
 8004bbe:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8004bc2:	db06      	blt.n	8004bd2 <__ieee754_rem_pio2f+0x196>
 8004bc4:	ee70 7a40 	vsub.f32	s15, s0, s0
 8004bc8:	edc0 7a01 	vstr	s15, [r0, #4]
 8004bcc:	edc0 7a00 	vstr	s15, [r0]
 8004bd0:	e742      	b.n	8004a58 <__ieee754_rem_pio2f+0x1c>
 8004bd2:	15e2      	asrs	r2, r4, #23
 8004bd4:	3a86      	subs	r2, #134	; 0x86
 8004bd6:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8004bda:	ee07 3a90 	vmov	s15, r3
 8004bde:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004be2:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8004c8c <__ieee754_rem_pio2f+0x250>
 8004be6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004bea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004bee:	ed8d 7a03 	vstr	s14, [sp, #12]
 8004bf2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004bf6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004bfa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004bfe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c02:	ed8d 7a04 	vstr	s14, [sp, #16]
 8004c06:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004c0a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c12:	edcd 7a05 	vstr	s15, [sp, #20]
 8004c16:	d11e      	bne.n	8004c56 <__ieee754_rem_pio2f+0x21a>
 8004c18:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c20:	bf14      	ite	ne
 8004c22:	2302      	movne	r3, #2
 8004c24:	2301      	moveq	r3, #1
 8004c26:	491a      	ldr	r1, [pc, #104]	; (8004c90 <__ieee754_rem_pio2f+0x254>)
 8004c28:	9101      	str	r1, [sp, #4]
 8004c2a:	2102      	movs	r1, #2
 8004c2c:	9100      	str	r1, [sp, #0]
 8004c2e:	a803      	add	r0, sp, #12
 8004c30:	4629      	mov	r1, r5
 8004c32:	f000 f88d 	bl	8004d50 <__kernel_rem_pio2f>
 8004c36:	2e00      	cmp	r6, #0
 8004c38:	f6bf af31 	bge.w	8004a9e <__ieee754_rem_pio2f+0x62>
 8004c3c:	edd5 7a00 	vldr	s15, [r5]
 8004c40:	eef1 7a67 	vneg.f32	s15, s15
 8004c44:	edc5 7a00 	vstr	s15, [r5]
 8004c48:	edd5 7a01 	vldr	s15, [r5, #4]
 8004c4c:	eef1 7a67 	vneg.f32	s15, s15
 8004c50:	edc5 7a01 	vstr	s15, [r5, #4]
 8004c54:	e77a      	b.n	8004b4c <__ieee754_rem_pio2f+0x110>
 8004c56:	2303      	movs	r3, #3
 8004c58:	e7e5      	b.n	8004c26 <__ieee754_rem_pio2f+0x1ea>
 8004c5a:	bf00      	nop
 8004c5c:	3f490fd8 	.word	0x3f490fd8
 8004c60:	4016cbe3 	.word	0x4016cbe3
 8004c64:	3fc90f80 	.word	0x3fc90f80
 8004c68:	3fc90fd0 	.word	0x3fc90fd0
 8004c6c:	37354400 	.word	0x37354400
 8004c70:	37354443 	.word	0x37354443
 8004c74:	2e85a308 	.word	0x2e85a308
 8004c78:	43490f80 	.word	0x43490f80
 8004c7c:	3f22f984 	.word	0x3f22f984
 8004c80:	080054bc 	.word	0x080054bc
 8004c84:	2e85a300 	.word	0x2e85a300
 8004c88:	248d3132 	.word	0x248d3132
 8004c8c:	43800000 	.word	0x43800000
 8004c90:	0800553c 	.word	0x0800553c

08004c94 <__kernel_cosf>:
 8004c94:	ee10 3a10 	vmov	r3, s0
 8004c98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c9c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004ca0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ca4:	da05      	bge.n	8004cb2 <__kernel_cosf+0x1e>
 8004ca6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004caa:	ee17 2a90 	vmov	r2, s15
 8004cae:	2a00      	cmp	r2, #0
 8004cb0:	d03b      	beq.n	8004d2a <__kernel_cosf+0x96>
 8004cb2:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004cb6:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8004d30 <__kernel_cosf+0x9c>
 8004cba:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8004d34 <__kernel_cosf+0xa0>
 8004cbe:	eddf 5a1e 	vldr	s11, [pc, #120]	; 8004d38 <__kernel_cosf+0xa4>
 8004cc2:	4a1e      	ldr	r2, [pc, #120]	; (8004d3c <__kernel_cosf+0xa8>)
 8004cc4:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	ee60 0a20 	vmul.f32	s1, s0, s1
 8004cce:	eee7 5a06 	vfma.f32	s11, s14, s12
 8004cd2:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8004d40 <__kernel_cosf+0xac>
 8004cd6:	eea7 6a25 	vfma.f32	s12, s14, s11
 8004cda:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8004d44 <__kernel_cosf+0xb0>
 8004cde:	eee7 5a06 	vfma.f32	s11, s14, s12
 8004ce2:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8004d48 <__kernel_cosf+0xb4>
 8004ce6:	eea7 6a25 	vfma.f32	s12, s14, s11
 8004cea:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8004cee:	ee26 6a07 	vmul.f32	s12, s12, s14
 8004cf2:	dc06      	bgt.n	8004d02 <__kernel_cosf+0x6e>
 8004cf4:	eed7 0a06 	vfnms.f32	s1, s14, s12
 8004cf8:	eed7 0a25 	vfnms.f32	s1, s14, s11
 8004cfc:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8004d00:	4770      	bx	lr
 8004d02:	4a12      	ldr	r2, [pc, #72]	; (8004d4c <__kernel_cosf+0xb8>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	bfda      	itte	le
 8004d08:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8004d0c:	ee07 3a90 	vmovle	s15, r3
 8004d10:	eef5 7a02 	vmovgt.f32	s15, #82	; 0x3e900000  0.2812500
 8004d14:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004d18:	eed7 0a06 	vfnms.f32	s1, s14, s12
 8004d1c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8004d20:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8004d24:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8004d28:	4770      	bx	lr
 8004d2a:	eeb0 0a66 	vmov.f32	s0, s13
 8004d2e:	4770      	bx	lr
 8004d30:	310f74f6 	.word	0x310f74f6
 8004d34:	ad47d74e 	.word	0xad47d74e
 8004d38:	b493f27c 	.word	0xb493f27c
 8004d3c:	3e999999 	.word	0x3e999999
 8004d40:	37d00d01 	.word	0x37d00d01
 8004d44:	bab60b61 	.word	0xbab60b61
 8004d48:	3d2aaaab 	.word	0x3d2aaaab
 8004d4c:	3f480000 	.word	0x3f480000

08004d50 <__kernel_rem_pio2f>:
 8004d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d54:	ed2d 8b04 	vpush	{d8-d9}
 8004d58:	b0d7      	sub	sp, #348	; 0x15c
 8004d5a:	468b      	mov	fp, r1
 8004d5c:	9301      	str	r3, [sp, #4]
 8004d5e:	9964      	ldr	r1, [sp, #400]	; 0x190
 8004d60:	4bcb      	ldr	r3, [pc, #812]	; (8005090 <__kernel_rem_pio2f+0x340>)
 8004d62:	9002      	str	r0, [sp, #8]
 8004d64:	f853 a021 	ldr.w	sl, [r3, r1, lsl #2]
 8004d68:	9b01      	ldr	r3, [sp, #4]
 8004d6a:	9e65      	ldr	r6, [sp, #404]	; 0x194
 8004d6c:	ed9f 7acc 	vldr	s14, [pc, #816]	; 80050a0 <__kernel_rem_pio2f+0x350>
 8004d70:	3b01      	subs	r3, #1
 8004d72:	1ed0      	subs	r0, r2, #3
 8004d74:	2408      	movs	r4, #8
 8004d76:	fb90 f0f4 	sdiv	r0, r0, r4
 8004d7a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8004d7e:	1c45      	adds	r5, r0, #1
 8004d80:	1ac7      	subs	r7, r0, r3
 8004d82:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8004d86:	eb0a 0e03 	add.w	lr, sl, r3
 8004d8a:	ac1a      	add	r4, sp, #104	; 0x68
 8004d8c:	eb06 0c87 	add.w	ip, r6, r7, lsl #2
 8004d90:	2200      	movs	r2, #0
 8004d92:	4572      	cmp	r2, lr
 8004d94:	dd0f      	ble.n	8004db6 <__kernel_rem_pio2f+0x66>
 8004d96:	f50d 7e84 	add.w	lr, sp, #264	; 0x108
 8004d9a:	2400      	movs	r4, #0
 8004d9c:	4554      	cmp	r4, sl
 8004d9e:	dc26      	bgt.n	8004dee <__kernel_rem_pio2f+0x9e>
 8004da0:	9a01      	ldr	r2, [sp, #4]
 8004da2:	9f02      	ldr	r7, [sp, #8]
 8004da4:	eddf 7abe 	vldr	s15, [pc, #760]	; 80050a0 <__kernel_rem_pio2f+0x350>
 8004da8:	4422      	add	r2, r4
 8004daa:	a91a      	add	r1, sp, #104	; 0x68
 8004dac:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8004db0:	f04f 0c00 	mov.w	ip, #0
 8004db4:	e015      	b.n	8004de2 <__kernel_rem_pio2f+0x92>
 8004db6:	42d7      	cmn	r7, r2
 8004db8:	bf5d      	ittte	pl
 8004dba:	f85c 1022 	ldrpl.w	r1, [ip, r2, lsl #2]
 8004dbe:	ee07 1a90 	vmovpl	s15, r1
 8004dc2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8004dc6:	eef0 7a47 	vmovmi.f32	s15, s14
 8004dca:	ece4 7a01 	vstmia	r4!, {s15}
 8004dce:	3201      	adds	r2, #1
 8004dd0:	e7df      	b.n	8004d92 <__kernel_rem_pio2f+0x42>
 8004dd2:	ecf7 6a01 	vldmia	r7!, {s13}
 8004dd6:	ed32 7a01 	vldmdb	r2!, {s14}
 8004dda:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004dde:	f10c 0c01 	add.w	ip, ip, #1
 8004de2:	459c      	cmp	ip, r3
 8004de4:	ddf5      	ble.n	8004dd2 <__kernel_rem_pio2f+0x82>
 8004de6:	ecee 7a01 	vstmia	lr!, {s15}
 8004dea:	3401      	adds	r4, #1
 8004dec:	e7d6      	b.n	8004d9c <__kernel_rem_pio2f+0x4c>
 8004dee:	aa06      	add	r2, sp, #24
 8004df0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004df4:	9204      	str	r2, [sp, #16]
 8004df6:	eddf 8aa7 	vldr	s17, [pc, #668]	; 8005094 <__kernel_rem_pio2f+0x344>
 8004dfa:	ed9f 9aa7 	vldr	s18, [pc, #668]	; 8005098 <__kernel_rem_pio2f+0x348>
 8004dfe:	eb06 0280 	add.w	r2, r6, r0, lsl #2
 8004e02:	9203      	str	r2, [sp, #12]
 8004e04:	4657      	mov	r7, sl
 8004e06:	aa56      	add	r2, sp, #344	; 0x158
 8004e08:	f107 4880 	add.w	r8, r7, #1073741824	; 0x40000000
 8004e0c:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 8004e10:	f108 38ff 	add.w	r8, r8, #4294967295
 8004e14:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
 8004e18:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8004e1c:	aa56      	add	r2, sp, #344	; 0x158
 8004e1e:	eb02 0008 	add.w	r0, r2, r8
 8004e22:	384c      	subs	r0, #76	; 0x4c
 8004e24:	2200      	movs	r2, #0
 8004e26:	1abc      	subs	r4, r7, r2
 8004e28:	2c00      	cmp	r4, #0
 8004e2a:	dc4a      	bgt.n	8004ec2 <__kernel_rem_pio2f+0x172>
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	9305      	str	r3, [sp, #20]
 8004e30:	f000 fa7e 	bl	8005330 <scalbnf>
 8004e34:	eeb0 8a40 	vmov.f32	s16, s0
 8004e38:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8004e3c:	ee28 0a00 	vmul.f32	s0, s16, s0
 8004e40:	f000 fa34 	bl	80052ac <floorf>
 8004e44:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8004e48:	eea0 8a67 	vfms.f32	s16, s0, s15
 8004e4c:	2d00      	cmp	r5, #0
 8004e4e:	9b05      	ldr	r3, [sp, #20]
 8004e50:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8004e54:	ee17 9a90 	vmov	r9, s15
 8004e58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e5c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8004e60:	dd44      	ble.n	8004eec <__kernel_rem_pio2f+0x19c>
 8004e62:	1e78      	subs	r0, r7, #1
 8004e64:	aa06      	add	r2, sp, #24
 8004e66:	f1c5 0408 	rsb	r4, r5, #8
 8004e6a:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8004e6e:	fa46 f204 	asr.w	r2, r6, r4
 8004e72:	4491      	add	r9, r2
 8004e74:	40a2      	lsls	r2, r4
 8004e76:	1ab6      	subs	r6, r6, r2
 8004e78:	aa06      	add	r2, sp, #24
 8004e7a:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8004e7e:	f1c5 0207 	rsb	r2, r5, #7
 8004e82:	4116      	asrs	r6, r2
 8004e84:	2e00      	cmp	r6, #0
 8004e86:	dd40      	ble.n	8004f0a <__kernel_rem_pio2f+0x1ba>
 8004e88:	2400      	movs	r4, #0
 8004e8a:	f109 0901 	add.w	r9, r9, #1
 8004e8e:	4620      	mov	r0, r4
 8004e90:	42a7      	cmp	r7, r4
 8004e92:	dc75      	bgt.n	8004f80 <__kernel_rem_pio2f+0x230>
 8004e94:	2d00      	cmp	r5, #0
 8004e96:	dd05      	ble.n	8004ea4 <__kernel_rem_pio2f+0x154>
 8004e98:	2d01      	cmp	r5, #1
 8004e9a:	f000 8086 	beq.w	8004faa <__kernel_rem_pio2f+0x25a>
 8004e9e:	2d02      	cmp	r5, #2
 8004ea0:	f000 808d 	beq.w	8004fbe <__kernel_rem_pio2f+0x26e>
 8004ea4:	2e02      	cmp	r6, #2
 8004ea6:	d130      	bne.n	8004f0a <__kernel_rem_pio2f+0x1ba>
 8004ea8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004eac:	ee30 8a48 	vsub.f32	s16, s0, s16
 8004eb0:	b358      	cbz	r0, 8004f0a <__kernel_rem_pio2f+0x1ba>
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	9305      	str	r3, [sp, #20]
 8004eb6:	f000 fa3b 	bl	8005330 <scalbnf>
 8004eba:	9b05      	ldr	r3, [sp, #20]
 8004ebc:	ee38 8a40 	vsub.f32	s16, s16, s0
 8004ec0:	e023      	b.n	8004f0a <__kernel_rem_pio2f+0x1ba>
 8004ec2:	ee60 7a28 	vmul.f32	s15, s0, s17
 8004ec6:	ac06      	add	r4, sp, #24
 8004ec8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ecc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ed0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8004ed4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004ed8:	ee10 1a10 	vmov	r1, s0
 8004edc:	ed30 0a01 	vldmdb	r0!, {s0}
 8004ee0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8004ee4:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004ee8:	3201      	adds	r2, #1
 8004eea:	e79c      	b.n	8004e26 <__kernel_rem_pio2f+0xd6>
 8004eec:	d105      	bne.n	8004efa <__kernel_rem_pio2f+0x1aa>
 8004eee:	1e7a      	subs	r2, r7, #1
 8004ef0:	a906      	add	r1, sp, #24
 8004ef2:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8004ef6:	1236      	asrs	r6, r6, #8
 8004ef8:	e7c4      	b.n	8004e84 <__kernel_rem_pio2f+0x134>
 8004efa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004efe:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f06:	da39      	bge.n	8004f7c <__kernel_rem_pio2f+0x22c>
 8004f08:	2600      	movs	r6, #0
 8004f0a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f12:	f040 808d 	bne.w	8005030 <__kernel_rem_pio2f+0x2e0>
 8004f16:	1e7c      	subs	r4, r7, #1
 8004f18:	4620      	mov	r0, r4
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	4550      	cmp	r0, sl
 8004f1e:	da55      	bge.n	8004fcc <__kernel_rem_pio2f+0x27c>
 8004f20:	2a00      	cmp	r2, #0
 8004f22:	d164      	bne.n	8004fee <__kernel_rem_pio2f+0x29e>
 8004f24:	2401      	movs	r4, #1
 8004f26:	f06f 0003 	mvn.w	r0, #3
 8004f2a:	fb00 f204 	mul.w	r2, r0, r4
 8004f2e:	9904      	ldr	r1, [sp, #16]
 8004f30:	588a      	ldr	r2, [r1, r2]
 8004f32:	2a00      	cmp	r2, #0
 8004f34:	d050      	beq.n	8004fd8 <__kernel_rem_pio2f+0x288>
 8004f36:	aa56      	add	r2, sp, #344	; 0x158
 8004f38:	4490      	add	r8, r2
 8004f3a:	9a01      	ldr	r2, [sp, #4]
 8004f3c:	a91a      	add	r1, sp, #104	; 0x68
 8004f3e:	443a      	add	r2, r7
 8004f40:	1c78      	adds	r0, r7, #1
 8004f42:	f1a8 0848 	sub.w	r8, r8, #72	; 0x48
 8004f46:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8004f4a:	4427      	add	r7, r4
 8004f4c:	42b8      	cmp	r0, r7
 8004f4e:	f73f af5a 	bgt.w	8004e06 <__kernel_rem_pio2f+0xb6>
 8004f52:	9903      	ldr	r1, [sp, #12]
 8004f54:	9e02      	ldr	r6, [sp, #8]
 8004f56:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8004f5a:	9105      	str	r1, [sp, #20]
 8004f5c:	ee07 1a90 	vmov	s15, r1
 8004f60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f64:	2400      	movs	r4, #0
 8004f66:	ece2 7a01 	vstmia	r2!, {s15}
 8004f6a:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80050a0 <__kernel_rem_pio2f+0x350>
 8004f6e:	4696      	mov	lr, r2
 8004f70:	429c      	cmp	r4, r3
 8004f72:	dd33      	ble.n	8004fdc <__kernel_rem_pio2f+0x28c>
 8004f74:	ece8 7a01 	vstmia	r8!, {s15}
 8004f78:	3001      	adds	r0, #1
 8004f7a:	e7e7      	b.n	8004f4c <__kernel_rem_pio2f+0x1fc>
 8004f7c:	2602      	movs	r6, #2
 8004f7e:	e783      	b.n	8004e88 <__kernel_rem_pio2f+0x138>
 8004f80:	aa06      	add	r2, sp, #24
 8004f82:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8004f86:	b948      	cbnz	r0, 8004f9c <__kernel_rem_pio2f+0x24c>
 8004f88:	b12a      	cbz	r2, 8004f96 <__kernel_rem_pio2f+0x246>
 8004f8a:	a906      	add	r1, sp, #24
 8004f8c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8004f90:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8004f94:	2201      	movs	r2, #1
 8004f96:	3401      	adds	r4, #1
 8004f98:	4610      	mov	r0, r2
 8004f9a:	e779      	b.n	8004e90 <__kernel_rem_pio2f+0x140>
 8004f9c:	a906      	add	r1, sp, #24
 8004f9e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8004fa2:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	e7f5      	b.n	8004f96 <__kernel_rem_pio2f+0x246>
 8004faa:	1e7c      	subs	r4, r7, #1
 8004fac:	aa06      	add	r2, sp, #24
 8004fae:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8004fb2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004fb6:	a906      	add	r1, sp, #24
 8004fb8:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8004fbc:	e772      	b.n	8004ea4 <__kernel_rem_pio2f+0x154>
 8004fbe:	1e7c      	subs	r4, r7, #1
 8004fc0:	aa06      	add	r2, sp, #24
 8004fc2:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8004fc6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004fca:	e7f4      	b.n	8004fb6 <__kernel_rem_pio2f+0x266>
 8004fcc:	a906      	add	r1, sp, #24
 8004fce:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8004fd2:	3801      	subs	r0, #1
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	e7a1      	b.n	8004f1c <__kernel_rem_pio2f+0x1cc>
 8004fd8:	3401      	adds	r4, #1
 8004fda:	e7a6      	b.n	8004f2a <__kernel_rem_pio2f+0x1da>
 8004fdc:	ecf6 6a01 	vldmia	r6!, {s13}
 8004fe0:	ed3e 7a01 	vldmdb	lr!, {s14}
 8004fe4:	3401      	adds	r4, #1
 8004fe6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004fea:	e7c1      	b.n	8004f70 <__kernel_rem_pio2f+0x220>
 8004fec:	3c01      	subs	r4, #1
 8004fee:	ab06      	add	r3, sp, #24
 8004ff0:	3d08      	subs	r5, #8
 8004ff2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d0f8      	beq.n	8004fec <__kernel_rem_pio2f+0x29c>
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005000:	f000 f996 	bl	8005330 <scalbnf>
 8005004:	00a3      	lsls	r3, r4, #2
 8005006:	aa42      	add	r2, sp, #264	; 0x108
 8005008:	3304      	adds	r3, #4
 800500a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005094 <__kernel_rem_pio2f+0x344>
 800500e:	18d0      	adds	r0, r2, r3
 8005010:	4622      	mov	r2, r4
 8005012:	2a00      	cmp	r2, #0
 8005014:	da46      	bge.n	80050a4 <__kernel_rem_pio2f+0x354>
 8005016:	f10d 0eb8 	add.w	lr, sp, #184	; 0xb8
 800501a:	2200      	movs	r2, #0
 800501c:	1aa5      	subs	r5, r4, r2
 800501e:	d460      	bmi.n	80050e2 <__kernel_rem_pio2f+0x392>
 8005020:	a942      	add	r1, sp, #264	; 0x108
 8005022:	4f1e      	ldr	r7, [pc, #120]	; (800509c <__kernel_rem_pio2f+0x34c>)
 8005024:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80050a0 <__kernel_rem_pio2f+0x350>
 8005028:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 800502c:	2000      	movs	r0, #0
 800502e:	e050      	b.n	80050d2 <__kernel_rem_pio2f+0x382>
 8005030:	4268      	negs	r0, r5
 8005032:	eeb0 0a48 	vmov.f32	s0, s16
 8005036:	f000 f97b 	bl	8005330 <scalbnf>
 800503a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005098 <__kernel_rem_pio2f+0x348>
 800503e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8005042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005046:	db19      	blt.n	800507c <__kernel_rem_pio2f+0x32c>
 8005048:	eddf 7a12 	vldr	s15, [pc, #72]	; 8005094 <__kernel_rem_pio2f+0x344>
 800504c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005050:	aa06      	add	r2, sp, #24
 8005052:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005056:	1c7c      	adds	r4, r7, #1
 8005058:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800505c:	3508      	adds	r5, #8
 800505e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8005062:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005066:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800506a:	ee10 3a10 	vmov	r3, s0
 800506e:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8005072:	ee17 3a90 	vmov	r3, s15
 8005076:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800507a:	e7be      	b.n	8004ffa <__kernel_rem_pio2f+0x2aa>
 800507c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005080:	aa06      	add	r2, sp, #24
 8005082:	ee10 3a10 	vmov	r3, s0
 8005086:	463c      	mov	r4, r7
 8005088:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 800508c:	e7b5      	b.n	8004ffa <__kernel_rem_pio2f+0x2aa>
 800508e:	bf00      	nop
 8005090:	08005880 	.word	0x08005880
 8005094:	3b800000 	.word	0x3b800000
 8005098:	43800000 	.word	0x43800000
 800509c:	08005854 	.word	0x08005854
 80050a0:	00000000 	.word	0x00000000
 80050a4:	a906      	add	r1, sp, #24
 80050a6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80050aa:	9101      	str	r1, [sp, #4]
 80050ac:	ee07 1a90 	vmov	s15, r1
 80050b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050b4:	3a01      	subs	r2, #1
 80050b6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80050ba:	ee20 0a07 	vmul.f32	s0, s0, s14
 80050be:	ed60 7a01 	vstmdb	r0!, {s15}
 80050c2:	e7a6      	b.n	8005012 <__kernel_rem_pio2f+0x2c2>
 80050c4:	ecf7 6a01 	vldmia	r7!, {s13}
 80050c8:	ecb5 7a01 	vldmia	r5!, {s14}
 80050cc:	eee6 7a87 	vfma.f32	s15, s13, s14
 80050d0:	3001      	adds	r0, #1
 80050d2:	4550      	cmp	r0, sl
 80050d4:	dc01      	bgt.n	80050da <__kernel_rem_pio2f+0x38a>
 80050d6:	4290      	cmp	r0, r2
 80050d8:	ddf4      	ble.n	80050c4 <__kernel_rem_pio2f+0x374>
 80050da:	ecee 7a01 	vstmia	lr!, {s15}
 80050de:	3201      	adds	r2, #1
 80050e0:	e79c      	b.n	800501c <__kernel_rem_pio2f+0x2cc>
 80050e2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80050e4:	2a03      	cmp	r2, #3
 80050e6:	d843      	bhi.n	8005170 <__kernel_rem_pio2f+0x420>
 80050e8:	e8df f002 	tbb	[pc, r2]
 80050ec:	021d1d37 	.word	0x021d1d37
 80050f0:	aa2e      	add	r2, sp, #184	; 0xb8
 80050f2:	4413      	add	r3, r2
 80050f4:	461a      	mov	r2, r3
 80050f6:	4620      	mov	r0, r4
 80050f8:	2800      	cmp	r0, #0
 80050fa:	dc55      	bgt.n	80051a8 <__kernel_rem_pio2f+0x458>
 80050fc:	461a      	mov	r2, r3
 80050fe:	4620      	mov	r0, r4
 8005100:	2801      	cmp	r0, #1
 8005102:	dc61      	bgt.n	80051c8 <__kernel_rem_pio2f+0x478>
 8005104:	ed5f 7a1a 	vldr	s15, [pc, #-104]	; 80050a0 <__kernel_rem_pio2f+0x350>
 8005108:	2c01      	cmp	r4, #1
 800510a:	dc6d      	bgt.n	80051e8 <__kernel_rem_pio2f+0x498>
 800510c:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8005110:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8005114:	2e00      	cmp	r6, #0
 8005116:	d16d      	bne.n	80051f4 <__kernel_rem_pio2f+0x4a4>
 8005118:	edcb 6a00 	vstr	s13, [fp]
 800511c:	ed8b 7a01 	vstr	s14, [fp, #4]
 8005120:	edcb 7a02 	vstr	s15, [fp, #8]
 8005124:	e024      	b.n	8005170 <__kernel_rem_pio2f+0x420>
 8005126:	aa2e      	add	r2, sp, #184	; 0xb8
 8005128:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 80050a0 <__kernel_rem_pio2f+0x350>
 800512c:	4413      	add	r3, r2
 800512e:	4622      	mov	r2, r4
 8005130:	2a00      	cmp	r2, #0
 8005132:	da2a      	bge.n	800518a <__kernel_rem_pio2f+0x43a>
 8005134:	b37e      	cbz	r6, 8005196 <__kernel_rem_pio2f+0x446>
 8005136:	eef1 7a47 	vneg.f32	s15, s14
 800513a:	edcb 7a00 	vstr	s15, [fp]
 800513e:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8005142:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005146:	aa2f      	add	r2, sp, #188	; 0xbc
 8005148:	2301      	movs	r3, #1
 800514a:	429c      	cmp	r4, r3
 800514c:	da26      	bge.n	800519c <__kernel_rem_pio2f+0x44c>
 800514e:	b10e      	cbz	r6, 8005154 <__kernel_rem_pio2f+0x404>
 8005150:	eef1 7a67 	vneg.f32	s15, s15
 8005154:	edcb 7a01 	vstr	s15, [fp, #4]
 8005158:	e00a      	b.n	8005170 <__kernel_rem_pio2f+0x420>
 800515a:	aa2e      	add	r2, sp, #184	; 0xb8
 800515c:	ed5f 7a30 	vldr	s15, [pc, #-192]	; 80050a0 <__kernel_rem_pio2f+0x350>
 8005160:	4413      	add	r3, r2
 8005162:	2c00      	cmp	r4, #0
 8005164:	da0b      	bge.n	800517e <__kernel_rem_pio2f+0x42e>
 8005166:	b10e      	cbz	r6, 800516c <__kernel_rem_pio2f+0x41c>
 8005168:	eef1 7a67 	vneg.f32	s15, s15
 800516c:	edcb 7a00 	vstr	s15, [fp]
 8005170:	f009 0007 	and.w	r0, r9, #7
 8005174:	b057      	add	sp, #348	; 0x15c
 8005176:	ecbd 8b04 	vpop	{d8-d9}
 800517a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800517e:	ed33 7a01 	vldmdb	r3!, {s14}
 8005182:	3c01      	subs	r4, #1
 8005184:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005188:	e7eb      	b.n	8005162 <__kernel_rem_pio2f+0x412>
 800518a:	ed73 7a01 	vldmdb	r3!, {s15}
 800518e:	3a01      	subs	r2, #1
 8005190:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005194:	e7cc      	b.n	8005130 <__kernel_rem_pio2f+0x3e0>
 8005196:	eef0 7a47 	vmov.f32	s15, s14
 800519a:	e7ce      	b.n	800513a <__kernel_rem_pio2f+0x3ea>
 800519c:	ecb2 7a01 	vldmia	r2!, {s14}
 80051a0:	3301      	adds	r3, #1
 80051a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051a6:	e7d0      	b.n	800514a <__kernel_rem_pio2f+0x3fa>
 80051a8:	ed52 6a01 	vldr	s13, [r2, #-4]
 80051ac:	ed52 7a02 	vldr	s15, [r2, #-8]
 80051b0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80051b4:	3801      	subs	r0, #1
 80051b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80051ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051be:	ed62 7a01 	vstmdb	r2!, {s15}
 80051c2:	ed02 7a01 	vstr	s14, [r2, #-4]
 80051c6:	e797      	b.n	80050f8 <__kernel_rem_pio2f+0x3a8>
 80051c8:	ed52 6a01 	vldr	s13, [r2, #-4]
 80051cc:	ed52 7a02 	vldr	s15, [r2, #-8]
 80051d0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80051d4:	3801      	subs	r0, #1
 80051d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80051da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051de:	ed62 7a01 	vstmdb	r2!, {s15}
 80051e2:	ed02 7a01 	vstr	s14, [r2, #-4]
 80051e6:	e78b      	b.n	8005100 <__kernel_rem_pio2f+0x3b0>
 80051e8:	ed33 7a01 	vldmdb	r3!, {s14}
 80051ec:	3c01      	subs	r4, #1
 80051ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051f2:	e789      	b.n	8005108 <__kernel_rem_pio2f+0x3b8>
 80051f4:	eef1 6a66 	vneg.f32	s13, s13
 80051f8:	eeb1 7a47 	vneg.f32	s14, s14
 80051fc:	edcb 6a00 	vstr	s13, [fp]
 8005200:	ed8b 7a01 	vstr	s14, [fp, #4]
 8005204:	eef1 7a67 	vneg.f32	s15, s15
 8005208:	e78a      	b.n	8005120 <__kernel_rem_pio2f+0x3d0>
 800520a:	bf00      	nop

0800520c <__kernel_sinf>:
 800520c:	ee10 3a10 	vmov	r3, s0
 8005210:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005214:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8005218:	da04      	bge.n	8005224 <__kernel_sinf+0x18>
 800521a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800521e:	ee17 3a90 	vmov	r3, s15
 8005222:	b35b      	cbz	r3, 800527c <__kernel_sinf+0x70>
 8005224:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005228:	eddf 7a15 	vldr	s15, [pc, #84]	; 8005280 <__kernel_sinf+0x74>
 800522c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8005284 <__kernel_sinf+0x78>
 8005230:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005234:	eddf 7a14 	vldr	s15, [pc, #80]	; 8005288 <__kernel_sinf+0x7c>
 8005238:	eee7 7a06 	vfma.f32	s15, s14, s12
 800523c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800528c <__kernel_sinf+0x80>
 8005240:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005244:	eddf 7a12 	vldr	s15, [pc, #72]	; 8005290 <__kernel_sinf+0x84>
 8005248:	ee60 6a07 	vmul.f32	s13, s0, s14
 800524c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8005250:	b930      	cbnz	r0, 8005260 <__kernel_sinf+0x54>
 8005252:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8005294 <__kernel_sinf+0x88>
 8005256:	eea7 6a27 	vfma.f32	s12, s14, s15
 800525a:	eea6 0a86 	vfma.f32	s0, s13, s12
 800525e:	4770      	bx	lr
 8005260:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005264:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005268:	eee0 7a86 	vfma.f32	s15, s1, s12
 800526c:	eed7 0a27 	vfnms.f32	s1, s14, s15
 8005270:	eddf 7a09 	vldr	s15, [pc, #36]	; 8005298 <__kernel_sinf+0x8c>
 8005274:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8005278:	ee30 0a60 	vsub.f32	s0, s0, s1
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	2f2ec9d3 	.word	0x2f2ec9d3
 8005284:	b2d72f34 	.word	0xb2d72f34
 8005288:	3638ef1b 	.word	0x3638ef1b
 800528c:	b9500d01 	.word	0xb9500d01
 8005290:	3c088889 	.word	0x3c088889
 8005294:	be2aaaab 	.word	0xbe2aaaab
 8005298:	3e2aaaab 	.word	0x3e2aaaab

0800529c <fabsf>:
 800529c:	ee10 3a10 	vmov	r3, s0
 80052a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052a4:	ee00 3a10 	vmov	s0, r3
 80052a8:	4770      	bx	lr
	...

080052ac <floorf>:
 80052ac:	ee10 3a10 	vmov	r3, s0
 80052b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80052b4:	0dca      	lsrs	r2, r1, #23
 80052b6:	3a7f      	subs	r2, #127	; 0x7f
 80052b8:	2a16      	cmp	r2, #22
 80052ba:	dc2a      	bgt.n	8005312 <floorf+0x66>
 80052bc:	2a00      	cmp	r2, #0
 80052be:	da11      	bge.n	80052e4 <floorf+0x38>
 80052c0:	eddf 7a18 	vldr	s15, [pc, #96]	; 8005324 <floorf+0x78>
 80052c4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80052c8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80052cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052d0:	dd05      	ble.n	80052de <floorf+0x32>
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	da23      	bge.n	800531e <floorf+0x72>
 80052d6:	4a14      	ldr	r2, [pc, #80]	; (8005328 <floorf+0x7c>)
 80052d8:	2900      	cmp	r1, #0
 80052da:	bf18      	it	ne
 80052dc:	4613      	movne	r3, r2
 80052de:	ee00 3a10 	vmov	s0, r3
 80052e2:	4770      	bx	lr
 80052e4:	4911      	ldr	r1, [pc, #68]	; (800532c <floorf+0x80>)
 80052e6:	4111      	asrs	r1, r2
 80052e8:	420b      	tst	r3, r1
 80052ea:	d0fa      	beq.n	80052e2 <floorf+0x36>
 80052ec:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8005324 <floorf+0x78>
 80052f0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80052f4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80052f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052fc:	ddef      	ble.n	80052de <floorf+0x32>
 80052fe:	2b00      	cmp	r3, #0
 8005300:	bfbe      	ittt	lt
 8005302:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8005306:	fa40 f202 	asrlt.w	r2, r0, r2
 800530a:	189b      	addlt	r3, r3, r2
 800530c:	ea23 0301 	bic.w	r3, r3, r1
 8005310:	e7e5      	b.n	80052de <floorf+0x32>
 8005312:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8005316:	d3e4      	bcc.n	80052e2 <floorf+0x36>
 8005318:	ee30 0a00 	vadd.f32	s0, s0, s0
 800531c:	4770      	bx	lr
 800531e:	2300      	movs	r3, #0
 8005320:	e7dd      	b.n	80052de <floorf+0x32>
 8005322:	bf00      	nop
 8005324:	7149f2ca 	.word	0x7149f2ca
 8005328:	bf800000 	.word	0xbf800000
 800532c:	007fffff 	.word	0x007fffff

08005330 <scalbnf>:
 8005330:	b508      	push	{r3, lr}
 8005332:	ee10 2a10 	vmov	r2, s0
 8005336:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800533a:	ed2d 8b02 	vpush	{d8}
 800533e:	eef0 0a40 	vmov.f32	s1, s0
 8005342:	d004      	beq.n	800534e <scalbnf+0x1e>
 8005344:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005348:	d306      	bcc.n	8005358 <scalbnf+0x28>
 800534a:	ee70 0a00 	vadd.f32	s1, s0, s0
 800534e:	ecbd 8b02 	vpop	{d8}
 8005352:	eeb0 0a60 	vmov.f32	s0, s1
 8005356:	bd08      	pop	{r3, pc}
 8005358:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800535c:	d21c      	bcs.n	8005398 <scalbnf+0x68>
 800535e:	4b1f      	ldr	r3, [pc, #124]	; (80053dc <scalbnf+0xac>)
 8005360:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80053e0 <scalbnf+0xb0>
 8005364:	4298      	cmp	r0, r3
 8005366:	ee60 0a27 	vmul.f32	s1, s0, s15
 800536a:	db10      	blt.n	800538e <scalbnf+0x5e>
 800536c:	ee10 2a90 	vmov	r2, s1
 8005370:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8005374:	3b19      	subs	r3, #25
 8005376:	4403      	add	r3, r0
 8005378:	2bfe      	cmp	r3, #254	; 0xfe
 800537a:	dd0f      	ble.n	800539c <scalbnf+0x6c>
 800537c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80053e4 <scalbnf+0xb4>
 8005380:	eeb0 0a48 	vmov.f32	s0, s16
 8005384:	f000 f834 	bl	80053f0 <copysignf>
 8005388:	ee60 0a08 	vmul.f32	s1, s0, s16
 800538c:	e7df      	b.n	800534e <scalbnf+0x1e>
 800538e:	eddf 7a16 	vldr	s15, [pc, #88]	; 80053e8 <scalbnf+0xb8>
 8005392:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8005396:	e7da      	b.n	800534e <scalbnf+0x1e>
 8005398:	0ddb      	lsrs	r3, r3, #23
 800539a:	e7ec      	b.n	8005376 <scalbnf+0x46>
 800539c:	2b00      	cmp	r3, #0
 800539e:	dd06      	ble.n	80053ae <scalbnf+0x7e>
 80053a0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80053a4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80053a8:	ee00 3a90 	vmov	s1, r3
 80053ac:	e7cf      	b.n	800534e <scalbnf+0x1e>
 80053ae:	f113 0f16 	cmn.w	r3, #22
 80053b2:	da06      	bge.n	80053c2 <scalbnf+0x92>
 80053b4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80053b8:	4298      	cmp	r0, r3
 80053ba:	dcdf      	bgt.n	800537c <scalbnf+0x4c>
 80053bc:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80053e8 <scalbnf+0xb8>
 80053c0:	e7de      	b.n	8005380 <scalbnf+0x50>
 80053c2:	3319      	adds	r3, #25
 80053c4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80053c8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80053cc:	eddf 7a07 	vldr	s15, [pc, #28]	; 80053ec <scalbnf+0xbc>
 80053d0:	ee07 3a10 	vmov	s14, r3
 80053d4:	ee67 0a27 	vmul.f32	s1, s14, s15
 80053d8:	e7b9      	b.n	800534e <scalbnf+0x1e>
 80053da:	bf00      	nop
 80053dc:	ffff3cb0 	.word	0xffff3cb0
 80053e0:	4c000000 	.word	0x4c000000
 80053e4:	7149f2ca 	.word	0x7149f2ca
 80053e8:	0da24260 	.word	0x0da24260
 80053ec:	33000000 	.word	0x33000000

080053f0 <copysignf>:
 80053f0:	ee10 3a10 	vmov	r3, s0
 80053f4:	ee10 2a90 	vmov	r2, s1
 80053f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053fc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005400:	4313      	orrs	r3, r2
 8005402:	ee00 3a10 	vmov	s0, r3
 8005406:	4770      	bx	lr

08005408 <_sbrk>:
 8005408:	4b04      	ldr	r3, [pc, #16]	; (800541c <_sbrk+0x14>)
 800540a:	6819      	ldr	r1, [r3, #0]
 800540c:	4602      	mov	r2, r0
 800540e:	b909      	cbnz	r1, 8005414 <_sbrk+0xc>
 8005410:	4903      	ldr	r1, [pc, #12]	; (8005420 <_sbrk+0x18>)
 8005412:	6019      	str	r1, [r3, #0]
 8005414:	6818      	ldr	r0, [r3, #0]
 8005416:	4402      	add	r2, r0
 8005418:	601a      	str	r2, [r3, #0]
 800541a:	4770      	bx	lr
 800541c:	200000a4 	.word	0x200000a4
 8005420:	200004b8 	.word	0x200004b8

08005424 <_init>:
 8005424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005426:	bf00      	nop
 8005428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800542a:	bc08      	pop	{r3}
 800542c:	469e      	mov	lr, r3
 800542e:	4770      	bx	lr

08005430 <_fini>:
 8005430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005432:	bf00      	nop
 8005434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005436:	bc08      	pop	{r3}
 8005438:	469e      	mov	lr, r3
 800543a:	4770      	bx	lr
