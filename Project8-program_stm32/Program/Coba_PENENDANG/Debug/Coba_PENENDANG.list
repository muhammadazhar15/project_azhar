
Coba_PENENDANG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002340  08002340  00012340  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002388  08002388  00012388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002390  08002390  00012390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002394  08002394  00012394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000068  20000000  08002398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
  8 .bss          00000090  20000068  20000068  00020068  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200000f8  200000f8  00020068  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000fb33  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001b5a  00000000  00000000  0002fbcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000490e  00000000  00000000  00031725  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000650  00000000  00000000  00036038  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000828  00000000  00000000  00036688  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00003824  00000000  00000000  00036eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00002b20  00000000  00000000  0003a6d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0003d1f4  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001558  00000000  00000000  0003d270  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002328 	.word	0x08002328

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08002328 	.word	0x08002328

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000580:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <HAL_InitTick+0x24>)
{
 8000584:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000586:	6818      	ldr	r0, [r3, #0]
 8000588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000590:	f000 f894 	bl	80006bc <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000594:	2200      	movs	r2, #0
 8000596:	4621      	mov	r1, r4
 8000598:	f04f 30ff 	mov.w	r0, #4294967295
 800059c:	f000 f84e 	bl	800063c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80005a0:	2000      	movs	r0, #0
 80005a2:	bd10      	pop	{r4, pc}
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_Init>:
{
 80005a8:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005aa:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <HAL_Init+0x30>)
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005b2:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005ba:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005c2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c4:	2003      	movs	r0, #3
 80005c6:	f000 f827 	bl	8000618 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ca:	2000      	movs	r0, #0
 80005cc:	f7ff ffd8 	bl	8000580 <HAL_InitTick>
  HAL_MspInit();
 80005d0:	f001 f996 	bl	8001900 <HAL_MspInit>
}
 80005d4:	2000      	movs	r0, #0
 80005d6:	bd08      	pop	{r3, pc}
 80005d8:	40023c00 	.word	0x40023c00

080005dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80005dc:	4a02      	ldr	r2, [pc, #8]	; (80005e8 <HAL_IncTick+0xc>)
 80005de:	6813      	ldr	r3, [r2, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000090 	.word	0x20000090

080005ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005ec:	4b01      	ldr	r3, [pc, #4]	; (80005f4 <HAL_GetTick+0x8>)
 80005ee:	6818      	ldr	r0, [r3, #0]
}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000090 	.word	0x20000090

080005f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80005f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80005fa:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80005fc:	f7ff fff6 	bl	80005ec <HAL_GetTick>
  uint32_t wait = Delay;
 8000600:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000602:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000604:	4605      	mov	r5, r0
  {
     wait++;
 8000606:	bf18      	it	ne
 8000608:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800060a:	f7ff ffef 	bl	80005ec <HAL_GetTick>
 800060e:	1b40      	subs	r0, r0, r5
 8000610:	42a0      	cmp	r0, r4
 8000612:	d3fa      	bcc.n	800060a <HAL_Delay+0x12>
  {
  }
}
 8000614:	b003      	add	sp, #12
 8000616:	bd30      	pop	{r4, r5, pc}

08000618 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000618:	4a07      	ldr	r2, [pc, #28]	; (8000638 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800061a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800061c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000620:	041b      	lsls	r3, r3, #16
 8000622:	0c1b      	lsrs	r3, r3, #16
 8000624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000628:	0200      	lsls	r0, r0, #8
 800062a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800062e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000632:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000634:	60d3      	str	r3, [r2, #12]
 8000636:	4770      	bx	lr
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b17      	ldr	r3, [pc, #92]	; (800069c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	68dc      	ldr	r4, [r3, #12]
 8000642:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000646:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800064a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800064c:	2b04      	cmp	r3, #4
 800064e:	bf28      	it	cs
 8000650:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000652:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000654:	f04f 0501 	mov.w	r5, #1
 8000658:	fa05 f303 	lsl.w	r3, r5, r3
 800065c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000660:	bf8c      	ite	hi
 8000662:	3c03      	subhi	r4, #3
 8000664:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000666:	4019      	ands	r1, r3
 8000668:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800066a:	fa05 f404 	lsl.w	r4, r5, r4
 800066e:	3c01      	subs	r4, #1
 8000670:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000672:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000674:	ea42 0201 	orr.w	r2, r2, r1
 8000678:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067c:	bfaf      	iteee	ge
 800067e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000682:	f000 000f 	andlt.w	r0, r0, #15
 8000686:	4b06      	ldrlt	r3, [pc, #24]	; (80006a0 <HAL_NVIC_SetPriority+0x64>)
 8000688:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068a:	bfa5      	ittet	ge
 800068c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000690:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000692:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000694:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	bf00      	nop
 800069c:	e000ed00 	.word	0xe000ed00
 80006a0:	e000ed14 	.word	0xe000ed14

080006a4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006a4:	0942      	lsrs	r2, r0, #5
 80006a6:	2301      	movs	r3, #1
 80006a8:	f000 001f 	and.w	r0, r0, #31
 80006ac:	fa03 f000 	lsl.w	r0, r3, r0
 80006b0:	4b01      	ldr	r3, [pc, #4]	; (80006b8 <HAL_NVIC_EnableIRQ+0x14>)
 80006b2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006b6:	4770      	bx	lr
 80006b8:	e000e100 	.word	0xe000e100

080006bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006bc:	3801      	subs	r0, #1
 80006be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006c2:	d20a      	bcs.n	80006da <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c6:	4a07      	ldr	r2, [pc, #28]	; (80006e4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006c8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ca:	21f0      	movs	r1, #240	; 0xf0
 80006cc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006d0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006d2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006d4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006da:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	e000e010 	.word	0xe000e010
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80006e8:	4b04      	ldr	r3, [pc, #16]	; (80006fc <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006ea:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80006ec:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006ee:	bf0c      	ite	eq
 80006f0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80006f4:	f022 0204 	bicne.w	r2, r2, #4
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	4770      	bx	lr
 80006fc:	e000e010 	.word	0xe000e010

08000700 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000700:	4770      	bx	lr

08000702 <HAL_SYSTICK_IRQHandler>:
{
 8000702:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000704:	f7ff fffc 	bl	8000700 <HAL_SYSTICK_Callback>
 8000708:	bd08      	pop	{r3, pc}
	...

0800070c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800070c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000710:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000712:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000714:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80008c4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000718:	4a68      	ldr	r2, [pc, #416]	; (80008bc <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800071a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80008c8 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800071e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000720:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000722:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000726:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000728:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800072c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000730:	45b6      	cmp	lr, r6
 8000732:	f040 80ae 	bne.w	8000892 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000736:	684c      	ldr	r4, [r1, #4]
 8000738:	f024 0710 	bic.w	r7, r4, #16
 800073c:	2f02      	cmp	r7, #2
 800073e:	d116      	bne.n	800076e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000740:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000744:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000748:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800074c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000750:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000754:	f04f 0c0f 	mov.w	ip, #15
 8000758:	fa0c fc0b 	lsl.w	ip, ip, fp
 800075c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000760:	690d      	ldr	r5, [r1, #16]
 8000762:	fa05 f50b 	lsl.w	r5, r5, fp
 8000766:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800076a:	f8ca 5020 	str.w	r5, [sl, #32]
 800076e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000772:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000774:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000778:	fa05 f50a 	lsl.w	r5, r5, sl
 800077c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800077e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000782:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000786:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800078a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800078c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000790:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000792:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000796:	d811      	bhi.n	80007bc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000798:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800079a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800079e:	68cf      	ldr	r7, [r1, #12]
 80007a0:	fa07 fc0a 	lsl.w	ip, r7, sl
 80007a4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80007a8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80007aa:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007ac:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007b0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80007b4:	409f      	lsls	r7, r3
 80007b6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80007ba:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80007bc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007be:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007c0:	688f      	ldr	r7, [r1, #8]
 80007c2:	fa07 f70a 	lsl.w	r7, r7, sl
 80007c6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80007c8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007ca:	00e5      	lsls	r5, r4, #3
 80007cc:	d561      	bpl.n	8000892 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ce:	f04f 0b00 	mov.w	fp, #0
 80007d2:	f8cd b00c 	str.w	fp, [sp, #12]
 80007d6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007da:	4d39      	ldr	r5, [pc, #228]	; (80008c0 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007dc:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80007e0:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80007e4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80007e8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80007ec:	9703      	str	r7, [sp, #12]
 80007ee:	9f03      	ldr	r7, [sp, #12]
 80007f0:	f023 0703 	bic.w	r7, r3, #3
 80007f4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80007f8:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007fc:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000800:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000804:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000808:	f04f 0e0f 	mov.w	lr, #15
 800080c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000810:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000812:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000816:	d043      	beq.n	80008a0 <HAL_GPIO_Init+0x194>
 8000818:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800081c:	42a8      	cmp	r0, r5
 800081e:	d041      	beq.n	80008a4 <HAL_GPIO_Init+0x198>
 8000820:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000824:	42a8      	cmp	r0, r5
 8000826:	d03f      	beq.n	80008a8 <HAL_GPIO_Init+0x19c>
 8000828:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800082c:	42a8      	cmp	r0, r5
 800082e:	d03d      	beq.n	80008ac <HAL_GPIO_Init+0x1a0>
 8000830:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000834:	42a8      	cmp	r0, r5
 8000836:	d03b      	beq.n	80008b0 <HAL_GPIO_Init+0x1a4>
 8000838:	4548      	cmp	r0, r9
 800083a:	d03b      	beq.n	80008b4 <HAL_GPIO_Init+0x1a8>
 800083c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000840:	42a8      	cmp	r0, r5
 8000842:	d039      	beq.n	80008b8 <HAL_GPIO_Init+0x1ac>
 8000844:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000848:	42a8      	cmp	r0, r5
 800084a:	bf14      	ite	ne
 800084c:	2508      	movne	r5, #8
 800084e:	2507      	moveq	r5, #7
 8000850:	fa05 f50c 	lsl.w	r5, r5, ip
 8000854:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000858:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800085a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800085c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800085e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000862:	bf0c      	ite	eq
 8000864:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000866:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000868:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800086a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800086c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000870:	bf0c      	ite	eq
 8000872:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000874:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000876:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000878:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800087a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800087e:	bf0c      	ite	eq
 8000880:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000882:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000884:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000886:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000888:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800088a:	bf54      	ite	pl
 800088c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800088e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000890:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000892:	3301      	adds	r3, #1
 8000894:	2b10      	cmp	r3, #16
 8000896:	f47f af44 	bne.w	8000722 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800089a:	b005      	add	sp, #20
 800089c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008a0:	465d      	mov	r5, fp
 80008a2:	e7d5      	b.n	8000850 <HAL_GPIO_Init+0x144>
 80008a4:	2501      	movs	r5, #1
 80008a6:	e7d3      	b.n	8000850 <HAL_GPIO_Init+0x144>
 80008a8:	2502      	movs	r5, #2
 80008aa:	e7d1      	b.n	8000850 <HAL_GPIO_Init+0x144>
 80008ac:	2503      	movs	r5, #3
 80008ae:	e7cf      	b.n	8000850 <HAL_GPIO_Init+0x144>
 80008b0:	2504      	movs	r5, #4
 80008b2:	e7cd      	b.n	8000850 <HAL_GPIO_Init+0x144>
 80008b4:	2505      	movs	r5, #5
 80008b6:	e7cb      	b.n	8000850 <HAL_GPIO_Init+0x144>
 80008b8:	2506      	movs	r5, #6
 80008ba:	e7c9      	b.n	8000850 <HAL_GPIO_Init+0x144>
 80008bc:	40013c00 	.word	0x40013c00
 80008c0:	40020000 	.word	0x40020000
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40021400 	.word	0x40021400

080008cc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80008cc:	6903      	ldr	r3, [r0, #16]
 80008ce:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80008d0:	bf14      	ite	ne
 80008d2:	2001      	movne	r0, #1
 80008d4:	2000      	moveq	r0, #0
 80008d6:	4770      	bx	lr

080008d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008d8:	b10a      	cbz	r2, 80008de <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80008da:	6181      	str	r1, [r0, #24]
 80008dc:	4770      	bx	lr
 80008de:	0409      	lsls	r1, r1, #16
 80008e0:	e7fb      	b.n	80008da <HAL_GPIO_WritePin+0x2>
	...

080008e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80008e4:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80008e6:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80008e8:	6959      	ldr	r1, [r3, #20]
 80008ea:	4201      	tst	r1, r0
 80008ec:	d002      	beq.n	80008f4 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80008ee:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80008f0:	f000 fed6 	bl	80016a0 <HAL_GPIO_EXTI_Callback>
 80008f4:	bd08      	pop	{r3, pc}
 80008f6:	bf00      	nop
 80008f8:	40013c00 	.word	0x40013c00

080008fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008fe:	4604      	mov	r4, r0
 8000900:	b910      	cbnz	r0, 8000908 <HAL_RCC_OscConfig+0xc>
  {
    return HAL_ERROR;
 8000902:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000904:	b003      	add	sp, #12
 8000906:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000908:	6803      	ldr	r3, [r0, #0]
 800090a:	07d8      	lsls	r0, r3, #31
 800090c:	d43b      	bmi.n	8000986 <HAL_RCC_OscConfig+0x8a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800090e:	6823      	ldr	r3, [r4, #0]
 8000910:	0799      	lsls	r1, r3, #30
 8000912:	f100 8084 	bmi.w	8000a1e <HAL_RCC_OscConfig+0x122>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000916:	6823      	ldr	r3, [r4, #0]
 8000918:	071e      	lsls	r6, r3, #28
 800091a:	f100 80c6 	bmi.w	8000aaa <HAL_RCC_OscConfig+0x1ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800091e:	6823      	ldr	r3, [r4, #0]
 8000920:	075d      	lsls	r5, r3, #29
 8000922:	d52a      	bpl.n	800097a <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_PWR_CLK_ENABLE();
 8000924:	2300      	movs	r3, #0
 8000926:	9301      	str	r3, [sp, #4]
 8000928:	4baa      	ldr	r3, [pc, #680]	; (8000bd4 <HAL_RCC_OscConfig+0x2d8>)
    PWR->CR |= PWR_CR_DBP;
 800092a:	4dab      	ldr	r5, [pc, #684]	; (8000bd8 <HAL_RCC_OscConfig+0x2dc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800092c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800092e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000932:	641a      	str	r2, [r3, #64]	; 0x40
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093a:	9301      	str	r3, [sp, #4]
 800093c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800093e:	682b      	ldr	r3, [r5, #0]
 8000940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000944:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8000946:	f7ff fe51 	bl	80005ec <HAL_GetTick>
 800094a:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800094c:	682b      	ldr	r3, [r5, #0]
 800094e:	05da      	lsls	r2, r3, #23
 8000950:	f140 80cd 	bpl.w	8000aee <HAL_RCC_OscConfig+0x1f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000954:	68a3      	ldr	r3, [r4, #8]
 8000956:	4d9f      	ldr	r5, [pc, #636]	; (8000bd4 <HAL_RCC_OscConfig+0x2d8>)
 8000958:	2b01      	cmp	r3, #1
 800095a:	f040 80cf 	bne.w	8000afc <HAL_RCC_OscConfig+0x200>
 800095e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000966:	f7ff fe41 	bl	80005ec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800096a:	4d9a      	ldr	r5, [pc, #616]	; (8000bd4 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 800096c:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800096e:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000972:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000974:	079b      	lsls	r3, r3, #30
 8000976:	f140 80e2 	bpl.w	8000b3e <HAL_RCC_OscConfig+0x242>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800097a:	69a2      	ldr	r2, [r4, #24]
 800097c:	2a00      	cmp	r2, #0
 800097e:	f040 80e5 	bne.w	8000b4c <HAL_RCC_OscConfig+0x250>
  return HAL_OK;
 8000982:	2000      	movs	r0, #0
 8000984:	e7be      	b.n	8000904 <HAL_RCC_OscConfig+0x8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000986:	4b93      	ldr	r3, [pc, #588]	; (8000bd4 <HAL_RCC_OscConfig+0x2d8>)
 8000988:	689a      	ldr	r2, [r3, #8]
 800098a:	f002 020c 	and.w	r2, r2, #12
 800098e:	2a04      	cmp	r2, #4
 8000990:	d007      	beq.n	80009a2 <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000992:	689a      	ldr	r2, [r3, #8]
 8000994:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000998:	2a08      	cmp	r2, #8
 800099a:	d10a      	bne.n	80009b2 <HAL_RCC_OscConfig+0xb6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	025a      	lsls	r2, r3, #9
 80009a0:	d507      	bpl.n	80009b2 <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009a2:	4b8c      	ldr	r3, [pc, #560]	; (8000bd4 <HAL_RCC_OscConfig+0x2d8>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	039b      	lsls	r3, r3, #14
 80009a8:	d5b1      	bpl.n	800090e <HAL_RCC_OscConfig+0x12>
 80009aa:	6863      	ldr	r3, [r4, #4]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d1ae      	bne.n	800090e <HAL_RCC_OscConfig+0x12>
 80009b0:	e7a7      	b.n	8000902 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009b2:	6863      	ldr	r3, [r4, #4]
 80009b4:	4d87      	ldr	r5, [pc, #540]	; (8000bd4 <HAL_RCC_OscConfig+0x2d8>)
 80009b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009ba:	d111      	bne.n	80009e0 <HAL_RCC_OscConfig+0xe4>
 80009bc:	682b      	ldr	r3, [r5, #0]
 80009be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009c2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80009c4:	f7ff fe12 	bl	80005ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009c8:	4d82      	ldr	r5, [pc, #520]	; (8000bd4 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 80009ca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009cc:	682b      	ldr	r3, [r5, #0]
 80009ce:	039f      	lsls	r7, r3, #14
 80009d0:	d49d      	bmi.n	800090e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009d2:	f7ff fe0b 	bl	80005ec <HAL_GetTick>
 80009d6:	1b80      	subs	r0, r0, r6
 80009d8:	2864      	cmp	r0, #100	; 0x64
 80009da:	d9f7      	bls.n	80009cc <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 80009dc:	2003      	movs	r0, #3
 80009de:	e791      	b.n	8000904 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009e4:	d104      	bne.n	80009f0 <HAL_RCC_OscConfig+0xf4>
 80009e6:	682b      	ldr	r3, [r5, #0]
 80009e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009ec:	602b      	str	r3, [r5, #0]
 80009ee:	e7e5      	b.n	80009bc <HAL_RCC_OscConfig+0xc0>
 80009f0:	682a      	ldr	r2, [r5, #0]
 80009f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80009f6:	602a      	str	r2, [r5, #0]
 80009f8:	682a      	ldr	r2, [r5, #0]
 80009fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80009fe:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d1df      	bne.n	80009c4 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 8000a04:	f7ff fdf2 	bl	80005ec <HAL_GetTick>
 8000a08:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a0a:	682b      	ldr	r3, [r5, #0]
 8000a0c:	0398      	lsls	r0, r3, #14
 8000a0e:	f57f af7e 	bpl.w	800090e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a12:	f7ff fdeb 	bl	80005ec <HAL_GetTick>
 8000a16:	1b80      	subs	r0, r0, r6
 8000a18:	2864      	cmp	r0, #100	; 0x64
 8000a1a:	d9f6      	bls.n	8000a0a <HAL_RCC_OscConfig+0x10e>
 8000a1c:	e7de      	b.n	80009dc <HAL_RCC_OscConfig+0xe0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a1e:	4b6d      	ldr	r3, [pc, #436]	; (8000bd4 <HAL_RCC_OscConfig+0x2d8>)
 8000a20:	689a      	ldr	r2, [r3, #8]
 8000a22:	f012 0f0c 	tst.w	r2, #12
 8000a26:	d007      	beq.n	8000a38 <HAL_RCC_OscConfig+0x13c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a28:	689a      	ldr	r2, [r3, #8]
 8000a2a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a2e:	2a08      	cmp	r2, #8
 8000a30:	d112      	bne.n	8000a58 <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	0259      	lsls	r1, r3, #9
 8000a36:	d40f      	bmi.n	8000a58 <HAL_RCC_OscConfig+0x15c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a38:	4b66      	ldr	r3, [pc, #408]	; (8000bd4 <HAL_RCC_OscConfig+0x2d8>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	0792      	lsls	r2, r2, #30
 8000a3e:	d503      	bpl.n	8000a48 <HAL_RCC_OscConfig+0x14c>
 8000a40:	68e2      	ldr	r2, [r4, #12]
 8000a42:	2a01      	cmp	r2, #1
 8000a44:	f47f af5d 	bne.w	8000902 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	6921      	ldr	r1, [r4, #16]
 8000a4c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000a50:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000a54:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a56:	e75e      	b.n	8000916 <HAL_RCC_OscConfig+0x1a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000a58:	68e2      	ldr	r2, [r4, #12]
 8000a5a:	4b60      	ldr	r3, [pc, #384]	; (8000bdc <HAL_RCC_OscConfig+0x2e0>)
 8000a5c:	b1b2      	cbz	r2, 8000a8c <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 8000a5e:	2201      	movs	r2, #1
 8000a60:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a62:	f7ff fdc3 	bl	80005ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a66:	4d5b      	ldr	r5, [pc, #364]	; (8000bd4 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8000a68:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a6a:	682b      	ldr	r3, [r5, #0]
 8000a6c:	079b      	lsls	r3, r3, #30
 8000a6e:	d507      	bpl.n	8000a80 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a70:	682b      	ldr	r3, [r5, #0]
 8000a72:	6922      	ldr	r2, [r4, #16]
 8000a74:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a78:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a7c:	602b      	str	r3, [r5, #0]
 8000a7e:	e74a      	b.n	8000916 <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a80:	f7ff fdb4 	bl	80005ec <HAL_GetTick>
 8000a84:	1b80      	subs	r0, r0, r6
 8000a86:	2802      	cmp	r0, #2
 8000a88:	d9ef      	bls.n	8000a6a <HAL_RCC_OscConfig+0x16e>
 8000a8a:	e7a7      	b.n	80009dc <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8000a8c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a8e:	f7ff fdad 	bl	80005ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a92:	4d50      	ldr	r5, [pc, #320]	; (8000bd4 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8000a94:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a96:	682b      	ldr	r3, [r5, #0]
 8000a98:	079f      	lsls	r7, r3, #30
 8000a9a:	f57f af3c 	bpl.w	8000916 <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a9e:	f7ff fda5 	bl	80005ec <HAL_GetTick>
 8000aa2:	1b80      	subs	r0, r0, r6
 8000aa4:	2802      	cmp	r0, #2
 8000aa6:	d9f6      	bls.n	8000a96 <HAL_RCC_OscConfig+0x19a>
 8000aa8:	e798      	b.n	80009dc <HAL_RCC_OscConfig+0xe0>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000aaa:	6962      	ldr	r2, [r4, #20]
 8000aac:	4b4c      	ldr	r3, [pc, #304]	; (8000be0 <HAL_RCC_OscConfig+0x2e4>)
 8000aae:	b17a      	cbz	r2, 8000ad0 <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_LSI_ENABLE();
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ab4:	f7ff fd9a 	bl	80005ec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ab8:	4d46      	ldr	r5, [pc, #280]	; (8000bd4 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8000aba:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000abc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000abe:	0798      	lsls	r0, r3, #30
 8000ac0:	f53f af2d 	bmi.w	800091e <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ac4:	f7ff fd92 	bl	80005ec <HAL_GetTick>
 8000ac8:	1b80      	subs	r0, r0, r6
 8000aca:	2802      	cmp	r0, #2
 8000acc:	d9f6      	bls.n	8000abc <HAL_RCC_OscConfig+0x1c0>
 8000ace:	e785      	b.n	80009dc <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_LSI_DISABLE();
 8000ad0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ad2:	f7ff fd8b 	bl	80005ec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ad6:	4d3f      	ldr	r5, [pc, #252]	; (8000bd4 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8000ad8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ada:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000adc:	0799      	lsls	r1, r3, #30
 8000ade:	f57f af1e 	bpl.w	800091e <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ae2:	f7ff fd83 	bl	80005ec <HAL_GetTick>
 8000ae6:	1b80      	subs	r0, r0, r6
 8000ae8:	2802      	cmp	r0, #2
 8000aea:	d9f6      	bls.n	8000ada <HAL_RCC_OscConfig+0x1de>
 8000aec:	e776      	b.n	80009dc <HAL_RCC_OscConfig+0xe0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000aee:	f7ff fd7d 	bl	80005ec <HAL_GetTick>
 8000af2:	1b80      	subs	r0, r0, r6
 8000af4:	2802      	cmp	r0, #2
 8000af6:	f67f af29 	bls.w	800094c <HAL_RCC_OscConfig+0x50>
 8000afa:	e76f      	b.n	80009dc <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000afc:	2b05      	cmp	r3, #5
 8000afe:	d104      	bne.n	8000b0a <HAL_RCC_OscConfig+0x20e>
 8000b00:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b02:	f043 0304 	orr.w	r3, r3, #4
 8000b06:	672b      	str	r3, [r5, #112]	; 0x70
 8000b08:	e729      	b.n	800095e <HAL_RCC_OscConfig+0x62>
 8000b0a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b0c:	f022 0201 	bic.w	r2, r2, #1
 8000b10:	672a      	str	r2, [r5, #112]	; 0x70
 8000b12:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b14:	f022 0204 	bic.w	r2, r2, #4
 8000b18:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f47f af23 	bne.w	8000966 <HAL_RCC_OscConfig+0x6a>
      tickstart = HAL_GetTick();
 8000b20:	f7ff fd64 	bl	80005ec <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b24:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b28:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b2a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b2c:	0798      	lsls	r0, r3, #30
 8000b2e:	f57f af24 	bpl.w	800097a <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b32:	f7ff fd5b 	bl	80005ec <HAL_GetTick>
 8000b36:	1b80      	subs	r0, r0, r6
 8000b38:	42b8      	cmp	r0, r7
 8000b3a:	d9f6      	bls.n	8000b2a <HAL_RCC_OscConfig+0x22e>
 8000b3c:	e74e      	b.n	80009dc <HAL_RCC_OscConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b3e:	f7ff fd55 	bl	80005ec <HAL_GetTick>
 8000b42:	1b80      	subs	r0, r0, r6
 8000b44:	42b8      	cmp	r0, r7
 8000b46:	f67f af14 	bls.w	8000972 <HAL_RCC_OscConfig+0x76>
 8000b4a:	e747      	b.n	80009dc <HAL_RCC_OscConfig+0xe0>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b4c:	4d21      	ldr	r5, [pc, #132]	; (8000bd4 <HAL_RCC_OscConfig+0x2d8>)
 8000b4e:	68ab      	ldr	r3, [r5, #8]
 8000b50:	f003 030c 	and.w	r3, r3, #12
 8000b54:	2b08      	cmp	r3, #8
 8000b56:	f43f aed4 	beq.w	8000902 <HAL_RCC_OscConfig+0x6>
 8000b5a:	4e22      	ldr	r6, [pc, #136]	; (8000be4 <HAL_RCC_OscConfig+0x2e8>)
 8000b5c:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b5e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000b60:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b62:	d12a      	bne.n	8000bba <HAL_RCC_OscConfig+0x2be>
        tickstart = HAL_GetTick();
 8000b64:	f7ff fd42 	bl	80005ec <HAL_GetTick>
 8000b68:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b6a:	682b      	ldr	r3, [r5, #0]
 8000b6c:	0199      	lsls	r1, r3, #6
 8000b6e:	d41e      	bmi.n	8000bae <HAL_RCC_OscConfig+0x2b2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b70:	6a22      	ldr	r2, [r4, #32]
 8000b72:	69e3      	ldr	r3, [r4, #28]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b78:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b7e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b82:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b84:	4c13      	ldr	r4, [pc, #76]	; (8000bd4 <HAL_RCC_OscConfig+0x2d8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b86:	0852      	lsrs	r2, r2, #1
 8000b88:	3a01      	subs	r2, #1
 8000b8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b8e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b90:	2301      	movs	r3, #1
 8000b92:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b94:	f7ff fd2a 	bl	80005ec <HAL_GetTick>
 8000b98:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b9a:	6823      	ldr	r3, [r4, #0]
 8000b9c:	019a      	lsls	r2, r3, #6
 8000b9e:	f53f aef0 	bmi.w	8000982 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ba2:	f7ff fd23 	bl	80005ec <HAL_GetTick>
 8000ba6:	1b40      	subs	r0, r0, r5
 8000ba8:	2802      	cmp	r0, #2
 8000baa:	d9f6      	bls.n	8000b9a <HAL_RCC_OscConfig+0x29e>
 8000bac:	e716      	b.n	80009dc <HAL_RCC_OscConfig+0xe0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bae:	f7ff fd1d 	bl	80005ec <HAL_GetTick>
 8000bb2:	1bc0      	subs	r0, r0, r7
 8000bb4:	2802      	cmp	r0, #2
 8000bb6:	d9d8      	bls.n	8000b6a <HAL_RCC_OscConfig+0x26e>
 8000bb8:	e710      	b.n	80009dc <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 8000bba:	f7ff fd17 	bl	80005ec <HAL_GetTick>
 8000bbe:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bc0:	682b      	ldr	r3, [r5, #0]
 8000bc2:	019b      	lsls	r3, r3, #6
 8000bc4:	f57f aedd 	bpl.w	8000982 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bc8:	f7ff fd10 	bl	80005ec <HAL_GetTick>
 8000bcc:	1b00      	subs	r0, r0, r4
 8000bce:	2802      	cmp	r0, #2
 8000bd0:	d9f6      	bls.n	8000bc0 <HAL_RCC_OscConfig+0x2c4>
 8000bd2:	e703      	b.n	80009dc <HAL_RCC_OscConfig+0xe0>
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40007000 	.word	0x40007000
 8000bdc:	42470000 	.word	0x42470000
 8000be0:	42470e80 	.word	0x42470e80
 8000be4:	42470060 	.word	0x42470060

08000be8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000be8:	4913      	ldr	r1, [pc, #76]	; (8000c38 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000bea:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bec:	688b      	ldr	r3, [r1, #8]
 8000bee:	f003 030c 	and.w	r3, r3, #12
 8000bf2:	2b04      	cmp	r3, #4
 8000bf4:	d003      	beq.n	8000bfe <HAL_RCC_GetSysClockFreq+0x16>
 8000bf6:	2b08      	cmp	r3, #8
 8000bf8:	d003      	beq.n	8000c02 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000bfa:	4810      	ldr	r0, [pc, #64]	; (8000c3c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000bfc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000bfe:	4810      	ldr	r0, [pc, #64]	; (8000c40 <HAL_RCC_GetSysClockFreq+0x58>)
 8000c00:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c02:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c04:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c06:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c08:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c0c:	bf14      	ite	ne
 8000c0e:	480c      	ldrne	r0, [pc, #48]	; (8000c40 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c10:	480a      	ldreq	r0, [pc, #40]	; (8000c3c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c12:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c16:	bf18      	it	ne
 8000c18:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c1a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c1e:	fba1 0100 	umull	r0, r1, r1, r0
 8000c22:	f7ff fb25 	bl	8000270 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c26:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <HAL_RCC_GetSysClockFreq+0x50>)
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c2e:	3301      	adds	r3, #1
 8000c30:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000c32:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c36:	bd08      	pop	{r3, pc}
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	00f42400 	.word	0x00f42400
 8000c40:	007a1200 	.word	0x007a1200

08000c44 <HAL_RCC_ClockConfig>:
{
 8000c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c48:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c4a:	4604      	mov	r4, r0
 8000c4c:	b910      	cbnz	r0, 8000c54 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c4e:	2001      	movs	r0, #1
 8000c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c54:	4b44      	ldr	r3, [pc, #272]	; (8000d68 <HAL_RCC_ClockConfig+0x124>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	f002 020f 	and.w	r2, r2, #15
 8000c5c:	428a      	cmp	r2, r1
 8000c5e:	d328      	bcc.n	8000cb2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c60:	6821      	ldr	r1, [r4, #0]
 8000c62:	078f      	lsls	r7, r1, #30
 8000c64:	d42d      	bmi.n	8000cc2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c66:	07c8      	lsls	r0, r1, #31
 8000c68:	d440      	bmi.n	8000cec <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c6a:	4b3f      	ldr	r3, [pc, #252]	; (8000d68 <HAL_RCC_ClockConfig+0x124>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	f002 020f 	and.w	r2, r2, #15
 8000c72:	4295      	cmp	r5, r2
 8000c74:	d366      	bcc.n	8000d44 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c76:	6822      	ldr	r2, [r4, #0]
 8000c78:	0751      	lsls	r1, r2, #29
 8000c7a:	d46c      	bmi.n	8000d56 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c7c:	0713      	lsls	r3, r2, #28
 8000c7e:	d507      	bpl.n	8000c90 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c80:	4a3a      	ldr	r2, [pc, #232]	; (8000d6c <HAL_RCC_ClockConfig+0x128>)
 8000c82:	6921      	ldr	r1, [r4, #16]
 8000c84:	6893      	ldr	r3, [r2, #8]
 8000c86:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c8a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c8e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c90:	f7ff ffaa 	bl	8000be8 <HAL_RCC_GetSysClockFreq>
 8000c94:	4b35      	ldr	r3, [pc, #212]	; (8000d6c <HAL_RCC_ClockConfig+0x128>)
 8000c96:	4a36      	ldr	r2, [pc, #216]	; (8000d70 <HAL_RCC_ClockConfig+0x12c>)
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c9e:	5cd3      	ldrb	r3, [r2, r3]
 8000ca0:	40d8      	lsrs	r0, r3
 8000ca2:	4b34      	ldr	r3, [pc, #208]	; (8000d74 <HAL_RCC_ClockConfig+0x130>)
 8000ca4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f7ff fc6a 	bl	8000580 <HAL_InitTick>
  return HAL_OK;
 8000cac:	2000      	movs	r0, #0
 8000cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cb2:	b2ca      	uxtb	r2, r1
 8000cb4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f003 030f 	and.w	r3, r3, #15
 8000cbc:	4299      	cmp	r1, r3
 8000cbe:	d1c6      	bne.n	8000c4e <HAL_RCC_ClockConfig+0xa>
 8000cc0:	e7ce      	b.n	8000c60 <HAL_RCC_ClockConfig+0x1c>
 8000cc2:	4b2a      	ldr	r3, [pc, #168]	; (8000d6c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cc4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cc8:	bf1e      	ittt	ne
 8000cca:	689a      	ldrne	r2, [r3, #8]
 8000ccc:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000cd0:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cd2:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cd4:	bf42      	ittt	mi
 8000cd6:	689a      	ldrmi	r2, [r3, #8]
 8000cd8:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000cdc:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cde:	689a      	ldr	r2, [r3, #8]
 8000ce0:	68a0      	ldr	r0, [r4, #8]
 8000ce2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000ce6:	4302      	orrs	r2, r0
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	e7bc      	b.n	8000c66 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cec:	6862      	ldr	r2, [r4, #4]
 8000cee:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <HAL_RCC_ClockConfig+0x128>)
 8000cf0:	2a01      	cmp	r2, #1
 8000cf2:	d11d      	bne.n	8000d30 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cfa:	d0a8      	beq.n	8000c4e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cfc:	4e1b      	ldr	r6, [pc, #108]	; (8000d6c <HAL_RCC_ClockConfig+0x128>)
 8000cfe:	68b3      	ldr	r3, [r6, #8]
 8000d00:	f023 0303 	bic.w	r3, r3, #3
 8000d04:	4313      	orrs	r3, r2
 8000d06:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000d08:	f7ff fc70 	bl	80005ec <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d0c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d10:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d12:	68b3      	ldr	r3, [r6, #8]
 8000d14:	6862      	ldr	r2, [r4, #4]
 8000d16:	f003 030c 	and.w	r3, r3, #12
 8000d1a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d1e:	d0a4      	beq.n	8000c6a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d20:	f7ff fc64 	bl	80005ec <HAL_GetTick>
 8000d24:	1bc0      	subs	r0, r0, r7
 8000d26:	4540      	cmp	r0, r8
 8000d28:	d9f3      	bls.n	8000d12 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000d2a:	2003      	movs	r0, #3
}
 8000d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d30:	1e91      	subs	r1, r2, #2
 8000d32:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d34:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d36:	d802      	bhi.n	8000d3e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d38:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d3c:	e7dd      	b.n	8000cfa <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d3e:	f013 0f02 	tst.w	r3, #2
 8000d42:	e7da      	b.n	8000cfa <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d44:	b2ea      	uxtb	r2, r5
 8000d46:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 030f 	and.w	r3, r3, #15
 8000d4e:	429d      	cmp	r5, r3
 8000d50:	f47f af7d 	bne.w	8000c4e <HAL_RCC_ClockConfig+0xa>
 8000d54:	e78f      	b.n	8000c76 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d56:	4905      	ldr	r1, [pc, #20]	; (8000d6c <HAL_RCC_ClockConfig+0x128>)
 8000d58:	68e0      	ldr	r0, [r4, #12]
 8000d5a:	688b      	ldr	r3, [r1, #8]
 8000d5c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d60:	4303      	orrs	r3, r0
 8000d62:	608b      	str	r3, [r1, #8]
 8000d64:	e78a      	b.n	8000c7c <HAL_RCC_ClockConfig+0x38>
 8000d66:	bf00      	nop
 8000d68:	40023c00 	.word	0x40023c00
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	08002344 	.word	0x08002344
 8000d74:	20000000 	.word	0x20000000

08000d78 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000d78:	4b01      	ldr	r3, [pc, #4]	; (8000d80 <HAL_RCC_GetHCLKFreq+0x8>)
 8000d7a:	6818      	ldr	r0, [r3, #0]
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20000000 	.word	0x20000000

08000d84 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000d84:	6a03      	ldr	r3, [r0, #32]
 8000d86:	f023 0301 	bic.w	r3, r3, #1
 8000d8a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000d8c:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000d8e:	6842      	ldr	r2, [r0, #4]
{
 8000d90:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000d92:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000d94:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000d96:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000d9a:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000d9c:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8000d9e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8000da2:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000da4:	4c0c      	ldr	r4, [pc, #48]	; (8000dd8 <TIM_OC1_SetConfig+0x54>)
 8000da6:	42a0      	cmp	r0, r4
 8000da8:	d009      	beq.n	8000dbe <TIM_OC1_SetConfig+0x3a>
 8000daa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000dae:	42a0      	cmp	r0, r4
 8000db0:	d005      	beq.n	8000dbe <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000db2:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000db4:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8000db6:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8000db8:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8000dba:	6203      	str	r3, [r0, #32]
} 
 8000dbc:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8000dbe:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8000dc0:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8000dc2:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8000dc6:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000dc8:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000dca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8000dce:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8000dd0:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000dd4:	4322      	orrs	r2, r4
 8000dd6:	e7ec      	b.n	8000db2 <TIM_OC1_SetConfig+0x2e>
 8000dd8:	40010000 	.word	0x40010000

08000ddc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000ddc:	6a03      	ldr	r3, [r0, #32]
 8000dde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000de2:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000de4:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000de6:	6842      	ldr	r2, [r0, #4]
{
 8000de8:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000dea:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000dec:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8000dee:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000df2:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000df4:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8000df6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000dfa:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000dfe:	4c0e      	ldr	r4, [pc, #56]	; (8000e38 <TIM_OC3_SetConfig+0x5c>)
 8000e00:	42a0      	cmp	r0, r4
 8000e02:	d009      	beq.n	8000e18 <TIM_OC3_SetConfig+0x3c>
 8000e04:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e08:	42a0      	cmp	r0, r4
 8000e0a:	d005      	beq.n	8000e18 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000e0c:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000e0e:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8000e10:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8000e12:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000e14:	6203      	str	r3, [r0, #32]
}
 8000e16:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000e18:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000e1a:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8000e1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000e20:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8000e24:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000e26:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000e2a:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8000e2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000e30:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8000e34:	e7ea      	b.n	8000e0c <TIM_OC3_SetConfig+0x30>
 8000e36:	bf00      	nop
 8000e38:	40010000 	.word	0x40010000

08000e3c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000e3c:	6a03      	ldr	r3, [r0, #32]
 8000e3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e42:	6203      	str	r3, [r0, #32]
{
 8000e44:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000e46:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000e48:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000e4a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000e4c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000e4e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000e52:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000e56:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8000e58:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000e5c:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000e60:	4d09      	ldr	r5, [pc, #36]	; (8000e88 <TIM_OC4_SetConfig+0x4c>)
 8000e62:	42a8      	cmp	r0, r5
 8000e64:	d009      	beq.n	8000e7a <TIM_OC4_SetConfig+0x3e>
 8000e66:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e6a:	42a8      	cmp	r0, r5
 8000e6c:	d005      	beq.n	8000e7a <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000e6e:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000e70:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8000e72:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8000e74:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000e76:	6204      	str	r4, [r0, #32]
}
 8000e78:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000e7a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000e7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000e80:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8000e84:	e7f3      	b.n	8000e6e <TIM_OC4_SetConfig+0x32>
 8000e86:	bf00      	nop
 8000e88:	40010000 	.word	0x40010000

08000e8c <HAL_TIM_PWM_MspInit>:
 8000e8c:	4770      	bx	lr
	...

08000e90 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000e90:	4a2e      	ldr	r2, [pc, #184]	; (8000f4c <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8000e92:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000e94:	4290      	cmp	r0, r2
 8000e96:	d012      	beq.n	8000ebe <TIM_Base_SetConfig+0x2e>
 8000e98:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000e9c:	d00f      	beq.n	8000ebe <TIM_Base_SetConfig+0x2e>
 8000e9e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000ea2:	4290      	cmp	r0, r2
 8000ea4:	d00b      	beq.n	8000ebe <TIM_Base_SetConfig+0x2e>
 8000ea6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000eaa:	4290      	cmp	r0, r2
 8000eac:	d007      	beq.n	8000ebe <TIM_Base_SetConfig+0x2e>
 8000eae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000eb2:	4290      	cmp	r0, r2
 8000eb4:	d003      	beq.n	8000ebe <TIM_Base_SetConfig+0x2e>
 8000eb6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000eba:	4290      	cmp	r0, r2
 8000ebc:	d11d      	bne.n	8000efa <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8000ebe:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000ec4:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000ec6:	4a21      	ldr	r2, [pc, #132]	; (8000f4c <TIM_Base_SetConfig+0xbc>)
 8000ec8:	4290      	cmp	r0, r2
 8000eca:	d104      	bne.n	8000ed6 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000ecc:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	e028      	b.n	8000f28 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000ed6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000eda:	d0f7      	beq.n	8000ecc <TIM_Base_SetConfig+0x3c>
 8000edc:	4a1c      	ldr	r2, [pc, #112]	; (8000f50 <TIM_Base_SetConfig+0xc0>)
 8000ede:	4290      	cmp	r0, r2
 8000ee0:	d0f4      	beq.n	8000ecc <TIM_Base_SetConfig+0x3c>
 8000ee2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ee6:	4290      	cmp	r0, r2
 8000ee8:	d0f0      	beq.n	8000ecc <TIM_Base_SetConfig+0x3c>
 8000eea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000eee:	4290      	cmp	r0, r2
 8000ef0:	d0ec      	beq.n	8000ecc <TIM_Base_SetConfig+0x3c>
 8000ef2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000ef6:	4290      	cmp	r0, r2
 8000ef8:	d0e8      	beq.n	8000ecc <TIM_Base_SetConfig+0x3c>
 8000efa:	4a16      	ldr	r2, [pc, #88]	; (8000f54 <TIM_Base_SetConfig+0xc4>)
 8000efc:	4290      	cmp	r0, r2
 8000efe:	d0e5      	beq.n	8000ecc <TIM_Base_SetConfig+0x3c>
 8000f00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f04:	4290      	cmp	r0, r2
 8000f06:	d0e1      	beq.n	8000ecc <TIM_Base_SetConfig+0x3c>
 8000f08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f0c:	4290      	cmp	r0, r2
 8000f0e:	d0dd      	beq.n	8000ecc <TIM_Base_SetConfig+0x3c>
 8000f10:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8000f14:	4290      	cmp	r0, r2
 8000f16:	d0d9      	beq.n	8000ecc <TIM_Base_SetConfig+0x3c>
 8000f18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f1c:	4290      	cmp	r0, r2
 8000f1e:	d0d5      	beq.n	8000ecc <TIM_Base_SetConfig+0x3c>
 8000f20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f24:	4290      	cmp	r0, r2
 8000f26:	d0d1      	beq.n	8000ecc <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8000f28:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000f2a:	688b      	ldr	r3, [r1, #8]
 8000f2c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000f2e:	680b      	ldr	r3, [r1, #0]
 8000f30:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <TIM_Base_SetConfig+0xbc>)
 8000f34:	4298      	cmp	r0, r3
 8000f36:	d006      	beq.n	8000f46 <TIM_Base_SetConfig+0xb6>
 8000f38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f3c:	4298      	cmp	r0, r3
 8000f3e:	d002      	beq.n	8000f46 <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8000f40:	2301      	movs	r3, #1
 8000f42:	6143      	str	r3, [r0, #20]
}
 8000f44:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8000f46:	690b      	ldr	r3, [r1, #16]
 8000f48:	6303      	str	r3, [r0, #48]	; 0x30
 8000f4a:	e7f9      	b.n	8000f40 <TIM_Base_SetConfig+0xb0>
 8000f4c:	40010000 	.word	0x40010000
 8000f50:	40000400 	.word	0x40000400
 8000f54:	40014000 	.word	0x40014000

08000f58 <HAL_TIM_Base_Init>:
{ 
 8000f58:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000f5a:	4604      	mov	r4, r0
 8000f5c:	b1a0      	cbz	r0, 8000f88 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000f5e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000f62:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f66:	b91b      	cbnz	r3, 8000f70 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000f68:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8000f6c:	f000 fcf8 	bl	8001960 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000f70:	2302      	movs	r3, #2
 8000f72:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000f76:	6820      	ldr	r0, [r4, #0]
 8000f78:	1d21      	adds	r1, r4, #4
 8000f7a:	f7ff ff89 	bl	8000e90 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8000f84:	2000      	movs	r0, #0
 8000f86:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f88:	2001      	movs	r0, #1
}
 8000f8a:	bd10      	pop	{r4, pc}

08000f8c <HAL_TIM_PWM_Init>:
{
 8000f8c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000f8e:	4604      	mov	r4, r0
 8000f90:	b1a0      	cbz	r0, 8000fbc <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000f92:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000f96:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f9a:	b91b      	cbnz	r3, 8000fa4 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000f9c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8000fa0:	f7ff ff74 	bl	8000e8c <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000faa:	6820      	ldr	r0, [r4, #0]
 8000fac:	1d21      	adds	r1, r4, #4
 8000fae:	f7ff ff6f 	bl	8000e90 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8000fb8:	2000      	movs	r0, #0
 8000fba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000fbc:	2001      	movs	r0, #1
}  
 8000fbe:	bd10      	pop	{r4, pc}

08000fc0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000fc0:	6a03      	ldr	r3, [r0, #32]
 8000fc2:	f023 0310 	bic.w	r3, r3, #16
 8000fc6:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8000fc8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8000fca:	6842      	ldr	r2, [r0, #4]
{
 8000fcc:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 8000fce:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000fd0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8000fd2:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000fd6:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000fda:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8000fdc:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000fe0:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000fe4:	4c0d      	ldr	r4, [pc, #52]	; (800101c <TIM_OC2_SetConfig+0x5c>)
 8000fe6:	42a0      	cmp	r0, r4
 8000fe8:	d009      	beq.n	8000ffe <TIM_OC2_SetConfig+0x3e>
 8000fea:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000fee:	42a0      	cmp	r0, r4
 8000ff0:	d005      	beq.n	8000ffe <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 8000ff2:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8000ff4:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8000ff6:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8000ff8:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8000ffa:	6203      	str	r3, [r0, #32]
}
 8000ffc:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8000ffe:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001000:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001002:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001006:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800100a:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800100c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001010:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001012:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001016:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 800101a:	e7ea      	b.n	8000ff2 <TIM_OC2_SetConfig+0x32>
 800101c:	40010000 	.word	0x40010000

08001020 <HAL_TIM_PWM_ConfigChannel>:
{
 8001020:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001022:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001026:	2b01      	cmp	r3, #1
{
 8001028:	4604      	mov	r4, r0
 800102a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800102e:	d025      	beq.n	800107c <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001030:	2301      	movs	r3, #1
 8001032:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8001036:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 800103a:	2a0c      	cmp	r2, #12
 800103c:	d818      	bhi.n	8001070 <HAL_TIM_PWM_ConfigChannel+0x50>
 800103e:	e8df f002 	tbb	[pc, r2]
 8001042:	1707      	.short	0x1707
 8001044:	171e1717 	.word	0x171e1717
 8001048:	172f1717 	.word	0x172f1717
 800104c:	1717      	.short	0x1717
 800104e:	40          	.byte	0x40
 800104f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001050:	6820      	ldr	r0, [r4, #0]
 8001052:	f7ff fe97 	bl	8000d84 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001056:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001058:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800105a:	699a      	ldr	r2, [r3, #24]
 800105c:	f042 0208 	orr.w	r2, r2, #8
 8001060:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001062:	699a      	ldr	r2, [r3, #24]
 8001064:	f022 0204 	bic.w	r2, r2, #4
 8001068:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800106a:	699a      	ldr	r2, [r3, #24]
 800106c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800106e:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001070:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001072:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001074:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001078:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 800107c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800107e:	6820      	ldr	r0, [r4, #0]
 8001080:	f7ff ff9e 	bl	8000fc0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001084:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001086:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001088:	699a      	ldr	r2, [r3, #24]
 800108a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800108e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001090:	699a      	ldr	r2, [r3, #24]
 8001092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001098:	699a      	ldr	r2, [r3, #24]
 800109a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800109e:	e7e6      	b.n	800106e <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80010a0:	6820      	ldr	r0, [r4, #0]
 80010a2:	f7ff fe9b 	bl	8000ddc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80010a6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80010a8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80010aa:	69da      	ldr	r2, [r3, #28]
 80010ac:	f042 0208 	orr.w	r2, r2, #8
 80010b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80010b2:	69da      	ldr	r2, [r3, #28]
 80010b4:	f022 0204 	bic.w	r2, r2, #4
 80010b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80010ba:	69da      	ldr	r2, [r3, #28]
 80010bc:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80010be:	61da      	str	r2, [r3, #28]
    break;
 80010c0:	e7d6      	b.n	8001070 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80010c2:	6820      	ldr	r0, [r4, #0]
 80010c4:	f7ff feba 	bl	8000e3c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80010c8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80010ca:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80010cc:	69da      	ldr	r2, [r3, #28]
 80010ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80010d2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80010d4:	69da      	ldr	r2, [r3, #28]
 80010d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80010dc:	69da      	ldr	r2, [r3, #28]
 80010de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80010e2:	e7ec      	b.n	80010be <HAL_TIM_PWM_ConfigChannel+0x9e>

080010e4 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 80010e4:	6a03      	ldr	r3, [r0, #32]
{
 80010e6:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 80010e8:	2401      	movs	r4, #1
 80010ea:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80010ec:	ea23 0304 	bic.w	r3, r3, r4
 80010f0:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80010f2:	6a03      	ldr	r3, [r0, #32]
 80010f4:	408a      	lsls	r2, r1
 80010f6:	431a      	orrs	r2, r3
 80010f8:	6202      	str	r2, [r0, #32]
 80010fa:	bd10      	pop	{r4, pc}

080010fc <HAL_TIM_PWM_Start>:
{
 80010fc:	b510      	push	{r4, lr}
 80010fe:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001100:	2201      	movs	r2, #1
 8001102:	6800      	ldr	r0, [r0, #0]
 8001104:	f7ff ffee 	bl	80010e4 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001108:	6823      	ldr	r3, [r4, #0]
 800110a:	4a08      	ldr	r2, [pc, #32]	; (800112c <HAL_TIM_PWM_Start+0x30>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d003      	beq.n	8001118 <HAL_TIM_PWM_Start+0x1c>
 8001110:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001114:	4293      	cmp	r3, r2
 8001116:	d103      	bne.n	8001120 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8001118:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800111a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800111e:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	f042 0201 	orr.w	r2, r2, #1
 8001126:	601a      	str	r2, [r3, #0]
} 
 8001128:	2000      	movs	r0, #0
 800112a:	bd10      	pop	{r4, pc}
 800112c:	40010000 	.word	0x40010000

08001130 <lcd_4bit>:
		}
	}
}

void lcd_4bit(uint8_t data)
{
 8001130:	b538      	push	{r3, r4, r5, lr}
/*	GPIO_WriteBit(lcd_db7_port, lcd_db7_pin, (data & 0x08) >> 3);
	GPIO_WriteBit(lcd_db6_port, lcd_db6_pin, (data & 0x04) >> 2);
	GPIO_WriteBit(lcd_db5_port, lcd_db5_pin, (data & 0x02) >> 1);
	GPIO_WriteBit(lcd_db4_port, lcd_db4_pin, (data & 0x01) >> 0);*/

	HAL_GPIO_WritePin(lcd_db7_GPIO_Port,lcd_db7_Pin,(data & 0x08)>>3);
 8001132:	4c1e      	ldr	r4, [pc, #120]	; (80011ac <lcd_4bit+0x7c>)
{
 8001134:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(lcd_db7_GPIO_Port,lcd_db7_Pin,(data & 0x08)>>3);
 8001136:	f3c0 02c0 	ubfx	r2, r0, #3, #1
 800113a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800113e:	4620      	mov	r0, r4
 8001140:	f7ff fbca 	bl	80008d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_db6_GPIO_Port,lcd_db6_Pin,(data & 0x04)>>2);
 8001144:	f3c5 0280 	ubfx	r2, r5, #2, #1
 8001148:	4620      	mov	r0, r4
 800114a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800114e:	f7ff fbc3 	bl	80008d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_db5_GPIO_Port,lcd_db5_Pin,(data & 0x02)>>1);
 8001152:	f3c5 0240 	ubfx	r2, r5, #1, #1
 8001156:	4620      	mov	r0, r4
 8001158:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800115c:	f7ff fbbc 	bl	80008d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_db4_GPIO_Port,lcd_db4_Pin,(data & 0x01)>>0);
 8001160:	f005 0201 	and.w	r2, r5, #1
 8001164:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001168:	4620      	mov	r0, r4
 800116a:	f7ff fbb5 	bl	80008d8 <HAL_GPIO_WritePin>



	//delay_us(37);
	HAL_Delay(0.037);
	lcd_e_set;
 800116e:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
	HAL_Delay(0.037);
 8001172:	2000      	movs	r0, #0
 8001174:	f7ff fa40 	bl	80005f8 <HAL_Delay>
	lcd_e_set;
 8001178:	2201      	movs	r2, #1
 800117a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800117e:	4620      	mov	r0, r4
 8001180:	f7ff fbaa 	bl	80008d8 <HAL_GPIO_WritePin>
	//delay_us(37);
	HAL_Delay(0.037);
 8001184:	2000      	movs	r0, #0
 8001186:	f7ff fa37 	bl	80005f8 <HAL_Delay>
	lcd_e_reset;
 800118a:	2200      	movs	r2, #0
 800118c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001190:	4620      	mov	r0, r4
 8001192:	f7ff fba1 	bl	80008d8 <HAL_GPIO_WritePin>
	//delay_us(37);
	HAL_Delay(0.037);
 8001196:	2000      	movs	r0, #0
 8001198:	f7ff fa2e 	bl	80005f8 <HAL_Delay>
	lcd_e_set;
 800119c:	4620      	mov	r0, r4
 800119e:	2201      	movs	r2, #1
 80011a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
}
 80011a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lcd_e_set;
 80011a8:	f7ff bb96 	b.w	80008d8 <HAL_GPIO_WritePin>
 80011ac:	40020c00 	.word	0x40020c00

080011b0 <lcd_8bit>:

void lcd_8bit(uint8_t data)
{
 80011b0:	b570      	push	{r4, r5, r6, lr}
/*	GPIO_WriteBit(lcd_db7_port, lcd_db7_pin, (data & 0x80) >> 7);
	GPIO_WriteBit(lcd_db6_port, lcd_db6_pin, (data & 0x40) >> 6);
	GPIO_WriteBit(lcd_db5_port, lcd_db5_pin, (data & 0x20) >> 5);
	GPIO_WriteBit(lcd_db4_port, lcd_db4_pin, (data & 0x10) >> 4);*/

	HAL_GPIO_WritePin(lcd_db7_GPIO_Port,lcd_db7_Pin,(data & 0x80)>>7);
 80011b2:	4c39      	ldr	r4, [pc, #228]	; (8001298 <lcd_8bit+0xe8>)
	HAL_GPIO_WritePin(lcd_db5_GPIO_Port,lcd_db5_Pin,(data & 0x20)>>5);
	HAL_GPIO_WritePin(lcd_db4_GPIO_Port,lcd_db4_Pin,(data & 0x10)>>4);

	//delay_us(37);
	HAL_Delay(0.037);
	lcd_e_set;
 80011b4:	4e39      	ldr	r6, [pc, #228]	; (800129c <lcd_8bit+0xec>)
{
 80011b6:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(lcd_db7_GPIO_Port,lcd_db7_Pin,(data & 0x80)>>7);
 80011b8:	09c2      	lsrs	r2, r0, #7
 80011ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011be:	4620      	mov	r0, r4
 80011c0:	f7ff fb8a 	bl	80008d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_db6_GPIO_Port,lcd_db6_Pin,(data & 0x40)>>6);
 80011c4:	f3c5 1280 	ubfx	r2, r5, #6, #1
 80011c8:	4620      	mov	r0, r4
 80011ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ce:	f7ff fb83 	bl	80008d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_db5_GPIO_Port,lcd_db5_Pin,(data & 0x20)>>5);
 80011d2:	f3c5 1240 	ubfx	r2, r5, #5, #1
 80011d6:	4620      	mov	r0, r4
 80011d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011dc:	f7ff fb7c 	bl	80008d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_db4_GPIO_Port,lcd_db4_Pin,(data & 0x10)>>4);
 80011e0:	f3c5 1200 	ubfx	r2, r5, #4, #1
 80011e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011e8:	4620      	mov	r0, r4
 80011ea:	f7ff fb75 	bl	80008d8 <HAL_GPIO_WritePin>
	HAL_Delay(0.037);
 80011ee:	2000      	movs	r0, #0
 80011f0:	f7ff fa02 	bl	80005f8 <HAL_Delay>
	lcd_e_set;
 80011f4:	2201      	movs	r2, #1
 80011f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011fa:	4630      	mov	r0, r6
 80011fc:	f7ff fb6c 	bl	80008d8 <HAL_GPIO_WritePin>
	//delay_us(37);
	HAL_Delay(0.037);
 8001200:	2000      	movs	r0, #0
 8001202:	f7ff f9f9 	bl	80005f8 <HAL_Delay>
	lcd_e_reset;
 8001206:	2200      	movs	r2, #0
 8001208:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800120c:	4630      	mov	r0, r6
 800120e:	f7ff fb63 	bl	80008d8 <HAL_GPIO_WritePin>
	//delay_us(37);
	HAL_Delay(0.037);
 8001212:	2000      	movs	r0, #0
 8001214:	f7ff f9f0 	bl	80005f8 <HAL_Delay>
	lcd_e_set;
 8001218:	4630      	mov	r0, r6
 800121a:	2201      	movs	r2, #1
 800121c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001220:	f7ff fb5a 	bl	80008d8 <HAL_GPIO_WritePin>
/*	GPIO_WriteBit(lcd_db7_port, lcd_db7_pin, (data & 0x08) >> 3);
	GPIO_WriteBit(lcd_db6_port, lcd_db6_pin, (data & 0x04) >> 2);
	GPIO_WriteBit(lcd_db5_port, lcd_db5_pin, (data & 0x02) >> 1);
	GPIO_WriteBit(lcd_db4_port, lcd_db4_pin, (data & 0x01) >> 0);*/

	HAL_GPIO_WritePin(lcd_db7_GPIO_Port,lcd_db7_Pin,(data & 0x08)>>3);
 8001224:	f3c5 02c0 	ubfx	r2, r5, #3, #1
 8001228:	4620      	mov	r0, r4
 800122a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800122e:	f7ff fb53 	bl	80008d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_db6_GPIO_Port,lcd_db6_Pin,(data & 0x04)>>2);
 8001232:	f3c5 0280 	ubfx	r2, r5, #2, #1
 8001236:	4620      	mov	r0, r4
 8001238:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800123c:	f7ff fb4c 	bl	80008d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_db5_GPIO_Port,lcd_db5_Pin,(data & 0x02)>>1);
 8001240:	f3c5 0240 	ubfx	r2, r5, #1, #1
 8001244:	4620      	mov	r0, r4
 8001246:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800124a:	f7ff fb45 	bl	80008d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_db4_GPIO_Port,lcd_db4_Pin,(data & 0x01)>>0);
 800124e:	f005 0201 	and.w	r2, r5, #1
 8001252:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001256:	4620      	mov	r0, r4
 8001258:	f7ff fb3e 	bl	80008d8 <HAL_GPIO_WritePin>

	//delay_us(37);
	HAL_Delay(0.037);
 800125c:	2000      	movs	r0, #0
 800125e:	f7ff f9cb 	bl	80005f8 <HAL_Delay>
	lcd_e_set;
 8001262:	2201      	movs	r2, #1
 8001264:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001268:	4630      	mov	r0, r6
 800126a:	f7ff fb35 	bl	80008d8 <HAL_GPIO_WritePin>
	//delay_us(37);
	HAL_Delay(0.037);
 800126e:	2000      	movs	r0, #0
 8001270:	f7ff f9c2 	bl	80005f8 <HAL_Delay>
	lcd_e_reset;
 8001274:	2200      	movs	r2, #0
 8001276:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800127a:	4630      	mov	r0, r6
 800127c:	f7ff fb2c 	bl	80008d8 <HAL_GPIO_WritePin>
	//delay_us(37);
	HAL_Delay(0.037);
 8001280:	2000      	movs	r0, #0
 8001282:	f7ff f9b9 	bl	80005f8 <HAL_Delay>
	lcd_e_set;
 8001286:	4630      	mov	r0, r6
 8001288:	2201      	movs	r2, #1
 800128a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
}
 800128e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	lcd_e_set;
 8001292:	f7ff bb21 	b.w	80008d8 <HAL_GPIO_WritePin>
 8001296:	bf00      	nop
 8001298:	40020c00 	.word	0x40020c00
 800129c:	40020400 	.word	0x40020400

080012a0 <lcd_init>:
{
 80012a0:	b570      	push	{r4, r5, r6, lr}
	lcd_address[0] = 0x00;
 80012a2:	4bc1      	ldr	r3, [pc, #772]	; (80015a8 <lcd_init+0x308>)
	lcd_rs_reset;
 80012a4:	4dc1      	ldr	r5, [pc, #772]	; (80015ac <lcd_init+0x30c>)
	lcd_address[2] = 0x00 + column;
 80012a6:	7098      	strb	r0, [r3, #2]
	lcd_address[1] = 0x40;
 80012a8:	2640      	movs	r6, #64	; 0x40
	lcd_address[0] = 0x00;
 80012aa:	2400      	movs	r4, #0
	lcd_address[3] = 0x40 + column;
 80012ac:	1982      	adds	r2, r0, r6
	lcd_address[0] = 0x00;
 80012ae:	701c      	strb	r4, [r3, #0]
	lcd_address[1] = 0x40;
 80012b0:	705e      	strb	r6, [r3, #1]
	lcd_address[3] = 0x40 + column;
 80012b2:	70da      	strb	r2, [r3, #3]
	lcd_max_column = column;
 80012b4:	4bbe      	ldr	r3, [pc, #760]	; (80015b0 <lcd_init+0x310>)
 80012b6:	7018      	strb	r0, [r3, #0]
	lcd_max_row = row;
 80012b8:	4bbe      	ldr	r3, [pc, #760]	; (80015b4 <lcd_init+0x314>)
	lcd_rs_reset;
 80012ba:	4622      	mov	r2, r4
	lcd_max_row = row;
 80012bc:	7019      	strb	r1, [r3, #0]
	lcd_rs_reset;
 80012be:	4628      	mov	r0, r5
 80012c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012c4:	f7ff fb08 	bl	80008d8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80012c8:	2064      	movs	r0, #100	; 0x64
 80012ca:	f7ff f995 	bl	80005f8 <HAL_Delay>
	lcd_4bit(0b0011);
 80012ce:	2003      	movs	r0, #3
 80012d0:	f7ff ff2e 	bl	8001130 <lcd_4bit>
	HAL_Delay(5);
 80012d4:	2005      	movs	r0, #5
 80012d6:	f7ff f98f 	bl	80005f8 <HAL_Delay>
	lcd_4bit(0b0011);
 80012da:	2003      	movs	r0, #3
 80012dc:	f7ff ff28 	bl	8001130 <lcd_4bit>
	HAL_Delay(1);
 80012e0:	2001      	movs	r0, #1
 80012e2:	f7ff f989 	bl	80005f8 <HAL_Delay>
	lcd_4bit(0b0011);
 80012e6:	2003      	movs	r0, #3
 80012e8:	f7ff ff22 	bl	8001130 <lcd_4bit>
	HAL_Delay(1);
 80012ec:	2001      	movs	r0, #1
 80012ee:	f7ff f983 	bl	80005f8 <HAL_Delay>
	lcd_4bit(0b0010);
 80012f2:	2002      	movs	r0, #2
 80012f4:	f7ff ff1c 	bl	8001130 <lcd_4bit>
	HAL_Delay(1);
 80012f8:	2001      	movs	r0, #1
 80012fa:	f7ff f97d 	bl	80005f8 <HAL_Delay>
	lcd_8bit(0b00101000);
 80012fe:	2028      	movs	r0, #40	; 0x28
 8001300:	f7ff ff56 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b00001000);
 8001304:	2008      	movs	r0, #8
 8001306:	f7ff ff53 	bl	80011b0 <lcd_8bit>
	HAL_Delay(1);
 800130a:	2001      	movs	r0, #1
 800130c:	f7ff f974 	bl	80005f8 <HAL_Delay>
	lcd_8bit(0b00000001);
 8001310:	2001      	movs	r0, #1
 8001312:	f7ff ff4d 	bl	80011b0 <lcd_8bit>
	HAL_Delay(3);
 8001316:	2003      	movs	r0, #3
 8001318:	f7ff f96e 	bl	80005f8 <HAL_Delay>
	lcd_8bit(0b00000110);
 800131c:	2006      	movs	r0, #6
 800131e:	f7ff ff47 	bl	80011b0 <lcd_8bit>
	HAL_Delay(1);
 8001322:	2001      	movs	r0, #1
 8001324:	f7ff f968 	bl	80005f8 <HAL_Delay>
	lcd_8bit(0b00001100);
 8001328:	200c      	movs	r0, #12
 800132a:	f7ff ff41 	bl	80011b0 <lcd_8bit>
	HAL_Delay(1);
 800132e:	2001      	movs	r0, #1
 8001330:	f7ff f962 	bl	80005f8 <HAL_Delay>
	lcd_rs_reset;
 8001334:	4622      	mov	r2, r4
 8001336:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800133a:	4628      	mov	r0, r5
 800133c:	f7ff facc 	bl	80008d8 <HAL_GPIO_WritePin>
	lcd_8bit(0x40);
 8001340:	4630      	mov	r0, r6
 8001342:	f7ff ff35 	bl	80011b0 <lcd_8bit>
	lcd_rs_set;
 8001346:	2201      	movs	r2, #1
 8001348:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800134c:	4628      	mov	r0, r5
 800134e:	f7ff fac3 	bl	80008d8 <HAL_GPIO_WritePin>
	lcd_8bit(0b00111);
 8001352:	2007      	movs	r0, #7
 8001354:	f7ff ff2c 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b01111);
 8001358:	200f      	movs	r0, #15
 800135a:	f7ff ff29 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 800135e:	201f      	movs	r0, #31
 8001360:	f7ff ff26 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 8001364:	201f      	movs	r0, #31
 8001366:	f7ff ff23 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 800136a:	201f      	movs	r0, #31
 800136c:	f7ff ff20 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 8001370:	201f      	movs	r0, #31
 8001372:	f7ff ff1d 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 8001376:	201f      	movs	r0, #31
 8001378:	f7ff ff1a 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 800137c:	201f      	movs	r0, #31
 800137e:	f7ff ff17 	bl	80011b0 <lcd_8bit>
	lcd_rs_reset;
 8001382:	4622      	mov	r2, r4
 8001384:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001388:	4628      	mov	r0, r5
 800138a:	f7ff faa5 	bl	80008d8 <HAL_GPIO_WritePin>
	lcd_8bit(0x48);
 800138e:	2048      	movs	r0, #72	; 0x48
 8001390:	f7ff ff0e 	bl	80011b0 <lcd_8bit>
	lcd_rs_set;
 8001394:	2201      	movs	r2, #1
 8001396:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800139a:	4628      	mov	r0, r5
 800139c:	f7ff fa9c 	bl	80008d8 <HAL_GPIO_WritePin>
	lcd_8bit(0b11111);
 80013a0:	201f      	movs	r0, #31
 80013a2:	f7ff ff05 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 80013a6:	201f      	movs	r0, #31
 80013a8:	f7ff ff02 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 80013ac:	201f      	movs	r0, #31
 80013ae:	f7ff feff 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 80013b2:	201f      	movs	r0, #31
 80013b4:	f7ff fefc 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 80013b8:	201f      	movs	r0, #31
 80013ba:	f7ff fef9 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 80013be:	201f      	movs	r0, #31
 80013c0:	f7ff fef6 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b01111);
 80013c4:	200f      	movs	r0, #15
 80013c6:	f7ff fef3 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b00111);
 80013ca:	2007      	movs	r0, #7
 80013cc:	f7ff fef0 	bl	80011b0 <lcd_8bit>
	lcd_rs_reset;
 80013d0:	4622      	mov	r2, r4
 80013d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013d6:	4628      	mov	r0, r5
 80013d8:	f7ff fa7e 	bl	80008d8 <HAL_GPIO_WritePin>
	lcd_8bit(0x50);
 80013dc:	2050      	movs	r0, #80	; 0x50
 80013de:	f7ff fee7 	bl	80011b0 <lcd_8bit>
	lcd_rs_set;
 80013e2:	2201      	movs	r2, #1
 80013e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013e8:	4628      	mov	r0, r5
 80013ea:	f7ff fa75 	bl	80008d8 <HAL_GPIO_WritePin>
	lcd_8bit(0b11100);
 80013ee:	201c      	movs	r0, #28
 80013f0:	f7ff fede 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11110);
 80013f4:	201e      	movs	r0, #30
 80013f6:	f7ff fedb 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 80013fa:	201f      	movs	r0, #31
 80013fc:	f7ff fed8 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 8001400:	201f      	movs	r0, #31
 8001402:	f7ff fed5 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 8001406:	201f      	movs	r0, #31
 8001408:	f7ff fed2 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 800140c:	201f      	movs	r0, #31
 800140e:	f7ff fecf 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 8001412:	201f      	movs	r0, #31
 8001414:	f7ff fecc 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 8001418:	201f      	movs	r0, #31
 800141a:	f7ff fec9 	bl	80011b0 <lcd_8bit>
	lcd_rs_reset;
 800141e:	4622      	mov	r2, r4
 8001420:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001424:	4628      	mov	r0, r5
 8001426:	f7ff fa57 	bl	80008d8 <HAL_GPIO_WritePin>
	lcd_8bit(0x58);
 800142a:	2058      	movs	r0, #88	; 0x58
 800142c:	f7ff fec0 	bl	80011b0 <lcd_8bit>
	lcd_rs_set;
 8001430:	2201      	movs	r2, #1
 8001432:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001436:	4628      	mov	r0, r5
 8001438:	f7ff fa4e 	bl	80008d8 <HAL_GPIO_WritePin>
	lcd_8bit(0b11111);
 800143c:	201f      	movs	r0, #31
 800143e:	f7ff feb7 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 8001442:	201f      	movs	r0, #31
 8001444:	f7ff feb4 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 8001448:	201f      	movs	r0, #31
 800144a:	f7ff feb1 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 800144e:	201f      	movs	r0, #31
 8001450:	f7ff feae 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 8001454:	201f      	movs	r0, #31
 8001456:	f7ff feab 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 800145a:	201f      	movs	r0, #31
 800145c:	f7ff fea8 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11110);
 8001460:	201e      	movs	r0, #30
 8001462:	f7ff fea5 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11100);
 8001466:	201c      	movs	r0, #28
 8001468:	f7ff fea2 	bl	80011b0 <lcd_8bit>
	lcd_rs_reset;
 800146c:	4622      	mov	r2, r4
 800146e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001472:	4628      	mov	r0, r5
 8001474:	f7ff fa30 	bl	80008d8 <HAL_GPIO_WritePin>
	lcd_8bit(0x60);
 8001478:	2060      	movs	r0, #96	; 0x60
 800147a:	f7ff fe99 	bl	80011b0 <lcd_8bit>
	lcd_rs_set;
 800147e:	2201      	movs	r2, #1
 8001480:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001484:	4628      	mov	r0, r5
 8001486:	f7ff fa27 	bl	80008d8 <HAL_GPIO_WritePin>
	lcd_8bit(0b11111);
 800148a:	201f      	movs	r0, #31
 800148c:	f7ff fe90 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 8001490:	201f      	movs	r0, #31
 8001492:	f7ff fe8d 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 8001496:	201f      	movs	r0, #31
 8001498:	f7ff fe8a 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b00000);
 800149c:	4620      	mov	r0, r4
 800149e:	f7ff fe87 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b00000);
 80014a2:	4620      	mov	r0, r4
 80014a4:	f7ff fe84 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b00000);
 80014a8:	4620      	mov	r0, r4
 80014aa:	f7ff fe81 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b00000);
 80014ae:	4620      	mov	r0, r4
 80014b0:	f7ff fe7e 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b00000);
 80014b4:	4620      	mov	r0, r4
 80014b6:	f7ff fe7b 	bl	80011b0 <lcd_8bit>
	lcd_rs_reset;
 80014ba:	4622      	mov	r2, r4
 80014bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014c0:	4628      	mov	r0, r5
 80014c2:	f7ff fa09 	bl	80008d8 <HAL_GPIO_WritePin>
	lcd_8bit(0x68);
 80014c6:	2068      	movs	r0, #104	; 0x68
 80014c8:	f7ff fe72 	bl	80011b0 <lcd_8bit>
	lcd_rs_set;
 80014cc:	2201      	movs	r2, #1
 80014ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014d2:	4628      	mov	r0, r5
 80014d4:	f7ff fa00 	bl	80008d8 <HAL_GPIO_WritePin>
	lcd_8bit(0b11111);
 80014d8:	201f      	movs	r0, #31
 80014da:	f7ff fe69 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 80014de:	201f      	movs	r0, #31
 80014e0:	f7ff fe66 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 80014e4:	201f      	movs	r0, #31
 80014e6:	f7ff fe63 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b00000);
 80014ea:	4620      	mov	r0, r4
 80014ec:	f7ff fe60 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b00000);
 80014f0:	4620      	mov	r0, r4
 80014f2:	f7ff fe5d 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b00000);
 80014f6:	4620      	mov	r0, r4
 80014f8:	f7ff fe5a 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 80014fc:	201f      	movs	r0, #31
 80014fe:	f7ff fe57 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 8001502:	201f      	movs	r0, #31
 8001504:	f7ff fe54 	bl	80011b0 <lcd_8bit>
	lcd_rs_reset;
 8001508:	4622      	mov	r2, r4
 800150a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800150e:	4628      	mov	r0, r5
 8001510:	f7ff f9e2 	bl	80008d8 <HAL_GPIO_WritePin>
	lcd_8bit(0x70);
 8001514:	2070      	movs	r0, #112	; 0x70
 8001516:	f7ff fe4b 	bl	80011b0 <lcd_8bit>
	lcd_rs_set;
 800151a:	2201      	movs	r2, #1
 800151c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001520:	4628      	mov	r0, r5
 8001522:	f7ff f9d9 	bl	80008d8 <HAL_GPIO_WritePin>
	lcd_8bit(0b00000);
 8001526:	4620      	mov	r0, r4
 8001528:	f7ff fe42 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b00000);
 800152c:	4620      	mov	r0, r4
 800152e:	f7ff fe3f 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b00000);
 8001532:	4620      	mov	r0, r4
 8001534:	f7ff fe3c 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b00000);
 8001538:	4620      	mov	r0, r4
 800153a:	f7ff fe39 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b00000);
 800153e:	4620      	mov	r0, r4
 8001540:	f7ff fe36 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 8001544:	201f      	movs	r0, #31
 8001546:	f7ff fe33 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 800154a:	201f      	movs	r0, #31
 800154c:	f7ff fe30 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 8001550:	201f      	movs	r0, #31
 8001552:	f7ff fe2d 	bl	80011b0 <lcd_8bit>
	lcd_rs_reset;
 8001556:	4622      	mov	r2, r4
 8001558:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800155c:	4628      	mov	r0, r5
 800155e:	f7ff f9bb 	bl	80008d8 <HAL_GPIO_WritePin>
	lcd_8bit(0x78);
 8001562:	2078      	movs	r0, #120	; 0x78
 8001564:	f7ff fe24 	bl	80011b0 <lcd_8bit>
	lcd_rs_set;
 8001568:	2201      	movs	r2, #1
 800156a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800156e:	4628      	mov	r0, r5
 8001570:	f7ff f9b2 	bl	80008d8 <HAL_GPIO_WritePin>
	lcd_8bit(0b11111);
 8001574:	201f      	movs	r0, #31
 8001576:	f7ff fe1b 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 800157a:	201f      	movs	r0, #31
 800157c:	f7ff fe18 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 8001580:	201f      	movs	r0, #31
 8001582:	f7ff fe15 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 8001586:	201f      	movs	r0, #31
 8001588:	f7ff fe12 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 800158c:	201f      	movs	r0, #31
 800158e:	f7ff fe0f 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 8001592:	201f      	movs	r0, #31
 8001594:	f7ff fe0c 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 8001598:	201f      	movs	r0, #31
 800159a:	f7ff fe09 	bl	80011b0 <lcd_8bit>
	lcd_8bit(0b11111);
 800159e:	201f      	movs	r0, #31
}
 80015a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	lcd_8bit(0b11111);
 80015a4:	f7ff be04 	b.w	80011b0 <lcd_8bit>
 80015a8:	20000096 	.word	0x20000096
 80015ac:	40020400 	.word	0x40020400
 80015b0:	2000009f 	.word	0x2000009f
 80015b4:	20000094 	.word	0x20000094

080015b8 <lcd_gotoxy>:
{
 80015b8:	b538      	push	{r3, r4, r5, lr}
	if(column >= lcd_max_column) column = 0;
 80015ba:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <lcd_gotoxy+0x40>)
 80015bc:	781c      	ldrb	r4, [r3, #0]
	if(row >= lcd_max_row) row = 0;
 80015be:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <lcd_gotoxy+0x44>)
 80015c0:	781d      	ldrb	r5, [r3, #0]
	if(column >= lcd_max_column) column = 0;
 80015c2:	4284      	cmp	r4, r0
 80015c4:	bf8c      	ite	hi
 80015c6:	4604      	movhi	r4, r0
 80015c8:	2400      	movls	r4, #0
	if(row >= lcd_max_row) row = 0;
 80015ca:	428d      	cmp	r5, r1
 80015cc:	bf8c      	ite	hi
 80015ce:	460d      	movhi	r5, r1
 80015d0:	2500      	movls	r5, #0
	lcd_rs_reset;
 80015d2:	2200      	movs	r2, #0
 80015d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015d8:	4809      	ldr	r0, [pc, #36]	; (8001600 <lcd_gotoxy+0x48>)
 80015da:	f7ff f97d 	bl	80008d8 <HAL_GPIO_WritePin>
	lcd_8bit(0x80 | (lcd_address[row] + column));
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <lcd_gotoxy+0x4c>)
 80015e0:	5d58      	ldrb	r0, [r3, r5]
 80015e2:	4420      	add	r0, r4
 80015e4:	f060 007f 	orn	r0, r0, #127	; 0x7f
 80015e8:	b2c0      	uxtb	r0, r0
 80015ea:	f7ff fde1 	bl	80011b0 <lcd_8bit>
	HAL_Delay(0.037);
 80015ee:	2000      	movs	r0, #0
}
 80015f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_Delay(0.037);
 80015f4:	f7ff b800 	b.w	80005f8 <HAL_Delay>
 80015f8:	2000009f 	.word	0x2000009f
 80015fc:	20000094 	.word	0x20000094
 8001600:	40020400 	.word	0x40020400
 8001604:	20000096 	.word	0x20000096

08001608 <lcd_putc>:
{
 8001608:	b510      	push	{r4, lr}
	lcd_rs_set;
 800160a:	2201      	movs	r2, #1
{
 800160c:	4604      	mov	r4, r0
	lcd_rs_set;
 800160e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001612:	4805      	ldr	r0, [pc, #20]	; (8001628 <lcd_putc+0x20>)
 8001614:	f7ff f960 	bl	80008d8 <HAL_GPIO_WritePin>
	lcd_8bit(data);
 8001618:	4620      	mov	r0, r4
 800161a:	f7ff fdc9 	bl	80011b0 <lcd_8bit>
	HAL_Delay(0.037);
 800161e:	2000      	movs	r0, #0
}
 8001620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(0.037);
 8001624:	f7fe bfe8 	b.w	80005f8 <HAL_Delay>
 8001628:	40020400 	.word	0x40020400

0800162c <lcd_print>:
{
 800162c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if(current_column >= lcd_max_column && current_row >= lcd_max_row)
 8001630:	4f19      	ldr	r7, [pc, #100]	; (8001698 <lcd_print+0x6c>)
 8001632:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800169c <lcd_print+0x70>
{
 8001636:	4604      	mov	r4, r0
 8001638:	460d      	mov	r5, r1
 800163a:	1c56      	adds	r6, r2, #1
	while(*data)
 800163c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8001640:	b90b      	cbnz	r3, 8001646 <lcd_print+0x1a>
}
 8001642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(current_column >= lcd_max_column && current_row >= lcd_max_row)
 8001646:	783b      	ldrb	r3, [r7, #0]
 8001648:	42a3      	cmp	r3, r4
 800164a:	d81a      	bhi.n	8001682 <lcd_print+0x56>
 800164c:	f898 3000 	ldrb.w	r3, [r8]
 8001650:	42ab      	cmp	r3, r5
 8001652:	d80b      	bhi.n	800166c <lcd_print+0x40>
			lcd_gotoxy(current_column,current_row);
 8001654:	2100      	movs	r1, #0
 8001656:	4608      	mov	r0, r1
 8001658:	f7ff ffae 	bl	80015b8 <lcd_gotoxy>
			lcd_putc(*data++);
 800165c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8001660:	f7ff ffd2 	bl	8001608 <lcd_putc>
			current_row = 0;
 8001664:	2500      	movs	r5, #0
			current_column++;
 8001666:	2401      	movs	r4, #1
 8001668:	3601      	adds	r6, #1
 800166a:	e7e7      	b.n	800163c <lcd_print+0x10>
			current_row++;
 800166c:	3501      	adds	r5, #1
 800166e:	b2ed      	uxtb	r5, r5
			lcd_gotoxy(current_column,current_row);
 8001670:	4629      	mov	r1, r5
 8001672:	2000      	movs	r0, #0
 8001674:	f7ff ffa0 	bl	80015b8 <lcd_gotoxy>
			lcd_putc(*data++);
 8001678:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800167c:	f7ff ffc4 	bl	8001608 <lcd_putc>
 8001680:	e7f1      	b.n	8001666 <lcd_print+0x3a>
			lcd_gotoxy(current_column,current_row);
 8001682:	4620      	mov	r0, r4
 8001684:	4629      	mov	r1, r5
 8001686:	f7ff ff97 	bl	80015b8 <lcd_gotoxy>
			current_column++;
 800168a:	3401      	adds	r4, #1
			lcd_putc(*data++);
 800168c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8001690:	f7ff ffba 	bl	8001608 <lcd_putc>
			current_column++;
 8001694:	b2e4      	uxtb	r4, r4
 8001696:	e7e7      	b.n	8001668 <lcd_print+0x3c>
 8001698:	2000009f 	.word	0x2000009f
 800169c:	20000094 	.word	0x20000094

080016a0 <HAL_GPIO_EXTI_Callback>:
  /* USER CODE END 3 */

}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016a0:	b508      	push	{r3, lr}
  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_2))
 80016a2:	2104      	movs	r1, #4
 80016a4:	4804      	ldr	r0, [pc, #16]	; (80016b8 <HAL_GPIO_EXTI_Callback+0x18>)
 80016a6:	f7ff f911 	bl	80008cc <HAL_GPIO_ReadPin>
 80016aa:	b118      	cbz	r0, 80016b4 <HAL_GPIO_EXTI_Callback+0x14>
  {
	  hitung++;
 80016ac:	4a03      	ldr	r2, [pc, #12]	; (80016bc <HAL_GPIO_EXTI_Callback+0x1c>)
 80016ae:	6813      	ldr	r3, [r2, #0]
 80016b0:	3301      	adds	r3, #1
 80016b2:	6013      	str	r3, [r2, #0]
 80016b4:	bd08      	pop	{r3, pc}
 80016b6:	bf00      	nop
 80016b8:	40020800 	.word	0x40020800
 80016bc:	200000dc 	.word	0x200000dc

080016c0 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80016c0:	b530      	push	{r4, r5, lr}
 80016c2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c4:	4b27      	ldr	r3, [pc, #156]	; (8001764 <SystemClock_Config+0xa4>)
 80016c6:	2100      	movs	r1, #0
 80016c8:	9101      	str	r1, [sp, #4]
 80016ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016d0:	641a      	str	r2, [r3, #64]	; 0x40
 80016d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d8:	9301      	str	r3, [sp, #4]
 80016da:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016dc:	4b22      	ldr	r3, [pc, #136]	; (8001768 <SystemClock_Config+0xa8>)
 80016de:	9102      	str	r1, [sp, #8]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ee:	9302      	str	r3, [sp, #8]
 80016f0:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016f2:	2301      	movs	r3, #1
 80016f4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016fa:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001700:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001702:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001704:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001706:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001708:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800170a:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800170c:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800170e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001710:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001712:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001714:	f7ff f8f2 	bl	80008fc <HAL_RCC_OscConfig>
 8001718:	b100      	cbz	r0, 800171c <SystemClock_Config+0x5c>
 800171a:	e7fe      	b.n	800171a <SystemClock_Config+0x5a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800171c:	230f      	movs	r3, #15
 800171e:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001720:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001724:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001726:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001728:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800172a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800172e:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001730:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001732:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001734:	f7ff fa86 	bl	8000c44 <HAL_RCC_ClockConfig>
 8001738:	4605      	mov	r5, r0
 800173a:	b100      	cbz	r0, 800173e <SystemClock_Config+0x7e>
 800173c:	e7fe      	b.n	800173c <SystemClock_Config+0x7c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800173e:	f7ff fb1b 	bl	8000d78 <HAL_RCC_GetHCLKFreq>
 8001742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001746:	fbb0 f0f3 	udiv	r0, r0, r3
 800174a:	f7fe ffb7 	bl	80006bc <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800174e:	4620      	mov	r0, r4
 8001750:	f7fe ffca 	bl	80006e8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001754:	462a      	mov	r2, r5
 8001756:	4629      	mov	r1, r5
 8001758:	f04f 30ff 	mov.w	r0, #4294967295
 800175c:	f7fe ff6e 	bl	800063c <HAL_NVIC_SetPriority>
}
 8001760:	b015      	add	sp, #84	; 0x54
 8001762:	bd30      	pop	{r4, r5, pc}
 8001764:	40023800 	.word	0x40023800
 8001768:	40007000 	.word	0x40007000

0800176c <main>:
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	; 0x30
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001770:	2400      	movs	r4, #0
  HAL_Init();
 8001772:	f7fe ff19 	bl	80005a8 <HAL_Init>
  SystemClock_Config();
 8001776:	f7ff ffa3 	bl	80016c0 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800177a:	4b57      	ldr	r3, [pc, #348]	; (80018d8 <main+0x16c>)
 800177c:	9401      	str	r4, [sp, #4]
 800177e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8001780:	4856      	ldr	r0, [pc, #344]	; (80018dc <main+0x170>)
  htim11.Instance = TIM11;
 8001782:	4e57      	ldr	r6, [pc, #348]	; (80018e0 <main+0x174>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001784:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001788:	631a      	str	r2, [r3, #48]	; 0x30
 800178a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800178c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001790:	9201      	str	r2, [sp, #4]
 8001792:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001794:	9402      	str	r4, [sp, #8]
 8001796:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001798:	f042 0204 	orr.w	r2, r2, #4
 800179c:	631a      	str	r2, [r3, #48]	; 0x30
 800179e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017a0:	f002 0204 	and.w	r2, r2, #4
 80017a4:	9202      	str	r2, [sp, #8]
 80017a6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a8:	9403      	str	r4, [sp, #12]
 80017aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017ac:	f042 0202 	orr.w	r2, r2, #2
 80017b0:	631a      	str	r2, [r3, #48]	; 0x30
 80017b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017b4:	f002 0202 	and.w	r2, r2, #2
 80017b8:	9203      	str	r2, [sp, #12]
 80017ba:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017bc:	9404      	str	r4, [sp, #16]
 80017be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017c0:	f042 0208 	orr.w	r2, r2, #8
 80017c4:	631a      	str	r2, [r3, #48]	; 0x30
 80017c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c8:	f003 0308 	and.w	r3, r3, #8
 80017cc:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 80017ce:	4622      	mov	r2, r4
 80017d0:	f44f 4120 	mov.w	r1, #40960	; 0xa000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017d4:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 80017d6:	f7ff f87f 	bl	80008d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13 
 80017da:	4622      	mov	r2, r4
 80017dc:	f44f 412b 	mov.w	r1, #43776	; 0xab00
 80017e0:	4840      	ldr	r0, [pc, #256]	; (80018e4 <main+0x178>)
 80017e2:	f7ff f879 	bl	80008d8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017e6:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017e8:	4b3f      	ldr	r3, [pc, #252]	; (80018e8 <main+0x17c>)
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ea:	4840      	ldr	r0, [pc, #256]	; (80018ec <main+0x180>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017ec:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ee:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017f0:	2704      	movs	r7, #4
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017f2:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017f4:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f6:	f7fe ff89 	bl	800070c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80017fa:	f44f 4320 	mov.w	r3, #40960	; 0xa000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fe:	a905      	add	r1, sp, #20
 8001800:	4836      	ldr	r0, [pc, #216]	; (80018dc <main+0x170>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001802:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001804:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180a:	f7fe ff7f 	bl	800070c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD11 PD13 
                           PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13 
 800180e:	f44f 432b 	mov.w	r3, #43776	; 0xab00
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001812:	a905      	add	r1, sp, #20
 8001814:	4833      	ldr	r0, [pc, #204]	; (80018e4 <main+0x178>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13 
 8001816:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001818:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800181e:	f7fe ff75 	bl	800070c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001822:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001826:	a905      	add	r1, sp, #20
 8001828:	4830      	ldr	r0, [pc, #192]	; (80018ec <main+0x180>)
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800182a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800182c:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800182e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001830:	f7fe ff6c 	bl	800070c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8001834:	4629      	mov	r1, r5
 8001836:	4622      	mov	r2, r4
 8001838:	2008      	movs	r0, #8
  htim11.Instance = TIM11;
 800183a:	4d2d      	ldr	r5, [pc, #180]	; (80018f0 <main+0x184>)
  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 800183c:	f7fe fefe 	bl	800063c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001840:	2008      	movs	r0, #8
 8001842:	f7fe ff2f 	bl	80006a4 <HAL_NVIC_EnableIRQ>
  htim11.Init.Prescaler = 168;
 8001846:	23a8      	movs	r3, #168	; 0xa8
 8001848:	606b      	str	r3, [r5, #4]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800184a:	4628      	mov	r0, r5
  htim11.Init.Period = 20000;
 800184c:	f644 6320 	movw	r3, #20000	; 0x4e20
  htim11.Instance = TIM11;
 8001850:	602e      	str	r6, [r5, #0]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001852:	60ac      	str	r4, [r5, #8]
  htim11.Init.Period = 20000;
 8001854:	60eb      	str	r3, [r5, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001856:	612c      	str	r4, [r5, #16]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001858:	f7ff fb7e 	bl	8000f58 <HAL_TIM_Base_Init>
 800185c:	b100      	cbz	r0, 8001860 <main+0xf4>
 800185e:	e7fe      	b.n	800185e <main+0xf2>
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001860:	4628      	mov	r0, r5
 8001862:	f7ff fb93 	bl	8000f8c <HAL_TIM_PWM_Init>
 8001866:	4602      	mov	r2, r0
 8001868:	b100      	cbz	r0, 800186c <main+0x100>
 800186a:	e7fe      	b.n	800186a <main+0xfe>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800186c:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 800186e:	9006      	str	r0, [sp, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001870:	9007      	str	r0, [sp, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001872:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001874:	a905      	add	r1, sp, #20
 8001876:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001878:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800187a:	f7ff fbd1 	bl	8001020 <HAL_TIM_PWM_ConfigChannel>
 800187e:	4604      	mov	r4, r0
 8001880:	b100      	cbz	r0, 8001884 <main+0x118>
 8001882:	e7fe      	b.n	8001882 <main+0x116>
  HAL_TIM_MspPostInit(&htim11);
 8001884:	4628      	mov	r0, r5
 8001886:	f000 f883 	bl	8001990 <HAL_TIM_MspPostInit>
  lcd_init(20,4);
 800188a:	4639      	mov	r1, r7
 800188c:	2014      	movs	r0, #20
 800188e:	f7ff fd07 	bl	80012a0 <lcd_init>
  HAL_TIM_PWM_Start(&htim11,TIM_CHANNEL_1);
 8001892:	4621      	mov	r1, r4
 8001894:	4628      	mov	r0, r5
 8001896:	f7ff fc31 	bl	80010fc <HAL_TIM_PWM_Start>
  penendang = 1500;
 800189a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800189e:	6373      	str	r3, [r6, #52]	; 0x34
	  sprintf(tampil,"%4d",hitung); lcd_print(0,0,tampil);
 80018a0:	4d14      	ldr	r5, [pc, #80]	; (80018f4 <main+0x188>)
 80018a2:	4c15      	ldr	r4, [pc, #84]	; (80018f8 <main+0x18c>)
	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_8)==0)
 80018a4:	4e11      	ldr	r6, [pc, #68]	; (80018ec <main+0x180>)
	  sprintf(tampil,"%4d",hitung); lcd_print(0,0,tampil);
 80018a6:	682a      	ldr	r2, [r5, #0]
 80018a8:	4914      	ldr	r1, [pc, #80]	; (80018fc <main+0x190>)
 80018aa:	4620      	mov	r0, r4
 80018ac:	f000 f910 	bl	8001ad0 <siprintf>
 80018b0:	2100      	movs	r1, #0
 80018b2:	4608      	mov	r0, r1
 80018b4:	4622      	mov	r2, r4
 80018b6:	f7ff feb9 	bl	800162c <lcd_print>
	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_8)==0)
 80018ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018be:	4630      	mov	r0, r6
 80018c0:	f7ff f804 	bl	80008cc <HAL_GPIO_ReadPin>
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <main+0x174>)
 80018c6:	b918      	cbnz	r0, 80018d0 <main+0x164>
		  penendang = 1550;
 80018c8:	f240 620e 	movw	r2, #1550	; 0x60e
		  penendang = 1500;
 80018cc:	635a      	str	r2, [r3, #52]	; 0x34
 80018ce:	e7ea      	b.n	80018a6 <main+0x13a>
 80018d0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80018d4:	e7fa      	b.n	80018cc <main+0x160>
 80018d6:	bf00      	nop
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40020400 	.word	0x40020400
 80018e0:	40014800 	.word	0x40014800
 80018e4:	40020c00 	.word	0x40020c00
 80018e8:	10110000 	.word	0x10110000
 80018ec:	40020800 	.word	0x40020800
 80018f0:	200000a0 	.word	0x200000a0
 80018f4:	200000dc 	.word	0x200000dc
 80018f8:	200000e0 	.word	0x200000e0
 80018fc:	08002340 	.word	0x08002340

08001900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001900:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001902:	2003      	movs	r0, #3
 8001904:	f7fe fe88 	bl	8000618 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001908:	2200      	movs	r2, #0
 800190a:	4611      	mov	r1, r2
 800190c:	f06f 000b 	mvn.w	r0, #11
 8001910:	f7fe fe94 	bl	800063c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001914:	2200      	movs	r2, #0
 8001916:	4611      	mov	r1, r2
 8001918:	f06f 000a 	mvn.w	r0, #10
 800191c:	f7fe fe8e 	bl	800063c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001920:	2200      	movs	r2, #0
 8001922:	4611      	mov	r1, r2
 8001924:	f06f 0009 	mvn.w	r0, #9
 8001928:	f7fe fe88 	bl	800063c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800192c:	2200      	movs	r2, #0
 800192e:	4611      	mov	r1, r2
 8001930:	f06f 0004 	mvn.w	r0, #4
 8001934:	f7fe fe82 	bl	800063c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001938:	2200      	movs	r2, #0
 800193a:	4611      	mov	r1, r2
 800193c:	f06f 0003 	mvn.w	r0, #3
 8001940:	f7fe fe7c 	bl	800063c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001944:	2200      	movs	r2, #0
 8001946:	4611      	mov	r1, r2
 8001948:	f06f 0001 	mvn.w	r0, #1
 800194c:	f7fe fe76 	bl	800063c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001950:	2200      	movs	r2, #0
 8001952:	4611      	mov	r1, r2
 8001954:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001958:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800195c:	f7fe be6e 	b.w	800063c <HAL_NVIC_SetPriority>

08001960 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM11)
 8001960:	6802      	ldr	r2, [r0, #0]
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <HAL_TIM_Base_MspInit+0x28>)
 8001964:	429a      	cmp	r2, r3
{
 8001966:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM11)
 8001968:	d10b      	bne.n	8001982 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	9301      	str	r3, [sp, #4]
 800196e:	4b07      	ldr	r3, [pc, #28]	; (800198c <HAL_TIM_Base_MspInit+0x2c>)
 8001970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001972:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001976:	645a      	str	r2, [r3, #68]	; 0x44
 8001978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800197e:	9301      	str	r3, [sp, #4]
 8001980:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001982:	b002      	add	sp, #8
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	40014800 	.word	0x40014800
 800198c:	40023800 	.word	0x40023800

08001990 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001990:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM11)
 8001992:	6802      	ldr	r2, [r0, #0]
 8001994:	4b09      	ldr	r3, [pc, #36]	; (80019bc <HAL_TIM_MspPostInit+0x2c>)
 8001996:	429a      	cmp	r2, r3
 8001998:	d10d      	bne.n	80019b6 <HAL_TIM_MspPostInit+0x26>
  /* USER CODE END TIM11_MspPostInit 0 */
  
    /**TIM11 GPIO Configuration    
    PB9     ------> TIM11_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800199a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800199e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a0:	2302      	movs	r3, #2
 80019a2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019aa:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80019ac:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ae:	4804      	ldr	r0, [pc, #16]	; (80019c0 <HAL_TIM_MspPostInit+0x30>)
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80019b0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b2:	f7fe feab 	bl	800070c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80019b6:	b007      	add	sp, #28
 80019b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80019bc:	40014800 	.word	0x40014800
 80019c0:	40020400 	.word	0x40020400

080019c4 <NMI_Handler>:
 80019c4:	4770      	bx	lr

080019c6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80019c6:	e7fe      	b.n	80019c6 <HardFault_Handler>

080019c8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80019c8:	e7fe      	b.n	80019c8 <MemManage_Handler>

080019ca <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80019ca:	e7fe      	b.n	80019ca <BusFault_Handler>

080019cc <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80019cc:	e7fe      	b.n	80019cc <UsageFault_Handler>

080019ce <SVC_Handler>:
 80019ce:	4770      	bx	lr

080019d0 <DebugMon_Handler>:
 80019d0:	4770      	bx	lr

080019d2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80019d2:	4770      	bx	lr

080019d4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80019d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d6:	f7fe fe01 	bl	80005dc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80019de:	f7fe be90 	b.w	8000702 <HAL_SYSTICK_IRQHandler>

080019e2 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80019e2:	2004      	movs	r0, #4
 80019e4:	f7fe bf7e 	b.w	80008e4 <HAL_GPIO_EXTI_IRQHandler>

080019e8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019e8:	490f      	ldr	r1, [pc, #60]	; (8001a28 <SystemInit+0x40>)
 80019ea:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80019ee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80019f6:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <SystemInit+0x44>)
 80019f8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019fa:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80019fc:	f042 0201 	orr.w	r2, r2, #1
 8001a00:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001a02:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001a0a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a0e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001a10:	4a07      	ldr	r2, [pc, #28]	; (8001a30 <SystemInit+0x48>)
 8001a12:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a1a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001a1c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001a22:	608b      	str	r3, [r1, #8]
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	e000ed00 	.word	0xe000ed00
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	24003010 	.word	0x24003010

08001a34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a6c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a3a:	e003      	b.n	8001a44 <LoopCopyDataInit>

08001a3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a42:	3104      	adds	r1, #4

08001a44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a44:	480b      	ldr	r0, [pc, #44]	; (8001a74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a46:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a4c:	d3f6      	bcc.n	8001a3c <CopyDataInit>
  ldr  r2, =_sbss
 8001a4e:	4a0b      	ldr	r2, [pc, #44]	; (8001a7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a50:	e002      	b.n	8001a58 <LoopFillZerobss>

08001a52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a54:	f842 3b04 	str.w	r3, [r2], #4

08001a58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a58:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a5c:	d3f9      	bcc.n	8001a52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a5e:	f7ff ffc3 	bl	80019e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a62:	f000 f811 	bl	8001a88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a66:	f7ff fe81 	bl	800176c <main>
  bx  lr    
 8001a6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a6c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001a70:	08002398 	.word	0x08002398
  ldr  r0, =_sdata
 8001a74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a78:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 8001a7c:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 8001a80:	200000f8 	.word	0x200000f8

08001a84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a84:	e7fe      	b.n	8001a84 <ADC_IRQHandler>
	...

08001a88 <__libc_init_array>:
 8001a88:	b570      	push	{r4, r5, r6, lr}
 8001a8a:	4e0d      	ldr	r6, [pc, #52]	; (8001ac0 <__libc_init_array+0x38>)
 8001a8c:	4c0d      	ldr	r4, [pc, #52]	; (8001ac4 <__libc_init_array+0x3c>)
 8001a8e:	1ba4      	subs	r4, r4, r6
 8001a90:	10a4      	asrs	r4, r4, #2
 8001a92:	2500      	movs	r5, #0
 8001a94:	42a5      	cmp	r5, r4
 8001a96:	d109      	bne.n	8001aac <__libc_init_array+0x24>
 8001a98:	4e0b      	ldr	r6, [pc, #44]	; (8001ac8 <__libc_init_array+0x40>)
 8001a9a:	4c0c      	ldr	r4, [pc, #48]	; (8001acc <__libc_init_array+0x44>)
 8001a9c:	f000 fc44 	bl	8002328 <_init>
 8001aa0:	1ba4      	subs	r4, r4, r6
 8001aa2:	10a4      	asrs	r4, r4, #2
 8001aa4:	2500      	movs	r5, #0
 8001aa6:	42a5      	cmp	r5, r4
 8001aa8:	d105      	bne.n	8001ab6 <__libc_init_array+0x2e>
 8001aaa:	bd70      	pop	{r4, r5, r6, pc}
 8001aac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ab0:	4798      	blx	r3
 8001ab2:	3501      	adds	r5, #1
 8001ab4:	e7ee      	b.n	8001a94 <__libc_init_array+0xc>
 8001ab6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001aba:	4798      	blx	r3
 8001abc:	3501      	adds	r5, #1
 8001abe:	e7f2      	b.n	8001aa6 <__libc_init_array+0x1e>
 8001ac0:	08002390 	.word	0x08002390
 8001ac4:	08002390 	.word	0x08002390
 8001ac8:	08002390 	.word	0x08002390
 8001acc:	08002394 	.word	0x08002394

08001ad0 <siprintf>:
 8001ad0:	b40e      	push	{r1, r2, r3}
 8001ad2:	b500      	push	{lr}
 8001ad4:	b09c      	sub	sp, #112	; 0x70
 8001ad6:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001ada:	ab1d      	add	r3, sp, #116	; 0x74
 8001adc:	f8ad 1014 	strh.w	r1, [sp, #20]
 8001ae0:	9002      	str	r0, [sp, #8]
 8001ae2:	9006      	str	r0, [sp, #24]
 8001ae4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001ae8:	480a      	ldr	r0, [pc, #40]	; (8001b14 <siprintf+0x44>)
 8001aea:	9104      	str	r1, [sp, #16]
 8001aec:	9107      	str	r1, [sp, #28]
 8001aee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001af2:	f853 2b04 	ldr.w	r2, [r3], #4
 8001af6:	f8ad 1016 	strh.w	r1, [sp, #22]
 8001afa:	6800      	ldr	r0, [r0, #0]
 8001afc:	9301      	str	r3, [sp, #4]
 8001afe:	a902      	add	r1, sp, #8
 8001b00:	f000 f866 	bl	8001bd0 <_svfiprintf_r>
 8001b04:	9b02      	ldr	r3, [sp, #8]
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]
 8001b0a:	b01c      	add	sp, #112	; 0x70
 8001b0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001b10:	b003      	add	sp, #12
 8001b12:	4770      	bx	lr
 8001b14:	20000004 	.word	0x20000004

08001b18 <__ssputs_r>:
 8001b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b1c:	688e      	ldr	r6, [r1, #8]
 8001b1e:	429e      	cmp	r6, r3
 8001b20:	4682      	mov	sl, r0
 8001b22:	460c      	mov	r4, r1
 8001b24:	4691      	mov	r9, r2
 8001b26:	4698      	mov	r8, r3
 8001b28:	d835      	bhi.n	8001b96 <__ssputs_r+0x7e>
 8001b2a:	898a      	ldrh	r2, [r1, #12]
 8001b2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001b30:	d031      	beq.n	8001b96 <__ssputs_r+0x7e>
 8001b32:	6825      	ldr	r5, [r4, #0]
 8001b34:	6909      	ldr	r1, [r1, #16]
 8001b36:	1a6f      	subs	r7, r5, r1
 8001b38:	6965      	ldr	r5, [r4, #20]
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001b40:	fb95 f5f3 	sdiv	r5, r5, r3
 8001b44:	f108 0301 	add.w	r3, r8, #1
 8001b48:	443b      	add	r3, r7
 8001b4a:	429d      	cmp	r5, r3
 8001b4c:	bf38      	it	cc
 8001b4e:	461d      	movcc	r5, r3
 8001b50:	0553      	lsls	r3, r2, #21
 8001b52:	d531      	bpl.n	8001bb8 <__ssputs_r+0xa0>
 8001b54:	4629      	mov	r1, r5
 8001b56:	f000 fb39 	bl	80021cc <_malloc_r>
 8001b5a:	4606      	mov	r6, r0
 8001b5c:	b950      	cbnz	r0, 8001b74 <__ssputs_r+0x5c>
 8001b5e:	230c      	movs	r3, #12
 8001b60:	f8ca 3000 	str.w	r3, [sl]
 8001b64:	89a3      	ldrh	r3, [r4, #12]
 8001b66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b6a:	81a3      	strh	r3, [r4, #12]
 8001b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b74:	463a      	mov	r2, r7
 8001b76:	6921      	ldr	r1, [r4, #16]
 8001b78:	f000 fab4 	bl	80020e4 <memcpy>
 8001b7c:	89a3      	ldrh	r3, [r4, #12]
 8001b7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b86:	81a3      	strh	r3, [r4, #12]
 8001b88:	6126      	str	r6, [r4, #16]
 8001b8a:	6165      	str	r5, [r4, #20]
 8001b8c:	443e      	add	r6, r7
 8001b8e:	1bed      	subs	r5, r5, r7
 8001b90:	6026      	str	r6, [r4, #0]
 8001b92:	60a5      	str	r5, [r4, #8]
 8001b94:	4646      	mov	r6, r8
 8001b96:	4546      	cmp	r6, r8
 8001b98:	bf28      	it	cs
 8001b9a:	4646      	movcs	r6, r8
 8001b9c:	4632      	mov	r2, r6
 8001b9e:	4649      	mov	r1, r9
 8001ba0:	6820      	ldr	r0, [r4, #0]
 8001ba2:	f000 faaa 	bl	80020fa <memmove>
 8001ba6:	68a3      	ldr	r3, [r4, #8]
 8001ba8:	1b9b      	subs	r3, r3, r6
 8001baa:	60a3      	str	r3, [r4, #8]
 8001bac:	6823      	ldr	r3, [r4, #0]
 8001bae:	441e      	add	r6, r3
 8001bb0:	6026      	str	r6, [r4, #0]
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bb8:	462a      	mov	r2, r5
 8001bba:	f000 fb65 	bl	8002288 <_realloc_r>
 8001bbe:	4606      	mov	r6, r0
 8001bc0:	2800      	cmp	r0, #0
 8001bc2:	d1e1      	bne.n	8001b88 <__ssputs_r+0x70>
 8001bc4:	6921      	ldr	r1, [r4, #16]
 8001bc6:	4650      	mov	r0, sl
 8001bc8:	f000 fab2 	bl	8002130 <_free_r>
 8001bcc:	e7c7      	b.n	8001b5e <__ssputs_r+0x46>
	...

08001bd0 <_svfiprintf_r>:
 8001bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bd4:	b09d      	sub	sp, #116	; 0x74
 8001bd6:	4680      	mov	r8, r0
 8001bd8:	9303      	str	r3, [sp, #12]
 8001bda:	898b      	ldrh	r3, [r1, #12]
 8001bdc:	061c      	lsls	r4, r3, #24
 8001bde:	460d      	mov	r5, r1
 8001be0:	4616      	mov	r6, r2
 8001be2:	d50f      	bpl.n	8001c04 <_svfiprintf_r+0x34>
 8001be4:	690b      	ldr	r3, [r1, #16]
 8001be6:	b96b      	cbnz	r3, 8001c04 <_svfiprintf_r+0x34>
 8001be8:	2140      	movs	r1, #64	; 0x40
 8001bea:	f000 faef 	bl	80021cc <_malloc_r>
 8001bee:	6028      	str	r0, [r5, #0]
 8001bf0:	6128      	str	r0, [r5, #16]
 8001bf2:	b928      	cbnz	r0, 8001c00 <_svfiprintf_r+0x30>
 8001bf4:	230c      	movs	r3, #12
 8001bf6:	f8c8 3000 	str.w	r3, [r8]
 8001bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8001bfe:	e0c5      	b.n	8001d8c <_svfiprintf_r+0x1bc>
 8001c00:	2340      	movs	r3, #64	; 0x40
 8001c02:	616b      	str	r3, [r5, #20]
 8001c04:	2300      	movs	r3, #0
 8001c06:	9309      	str	r3, [sp, #36]	; 0x24
 8001c08:	2320      	movs	r3, #32
 8001c0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001c0e:	2330      	movs	r3, #48	; 0x30
 8001c10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001c14:	f04f 0b01 	mov.w	fp, #1
 8001c18:	4637      	mov	r7, r6
 8001c1a:	463c      	mov	r4, r7
 8001c1c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d13c      	bne.n	8001c9e <_svfiprintf_r+0xce>
 8001c24:	ebb7 0a06 	subs.w	sl, r7, r6
 8001c28:	d00b      	beq.n	8001c42 <_svfiprintf_r+0x72>
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	4632      	mov	r2, r6
 8001c2e:	4629      	mov	r1, r5
 8001c30:	4640      	mov	r0, r8
 8001c32:	f7ff ff71 	bl	8001b18 <__ssputs_r>
 8001c36:	3001      	adds	r0, #1
 8001c38:	f000 80a3 	beq.w	8001d82 <_svfiprintf_r+0x1b2>
 8001c3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c3e:	4453      	add	r3, sl
 8001c40:	9309      	str	r3, [sp, #36]	; 0x24
 8001c42:	783b      	ldrb	r3, [r7, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f000 809c 	beq.w	8001d82 <_svfiprintf_r+0x1b2>
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c50:	9304      	str	r3, [sp, #16]
 8001c52:	9307      	str	r3, [sp, #28]
 8001c54:	9205      	str	r2, [sp, #20]
 8001c56:	9306      	str	r3, [sp, #24]
 8001c58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001c5c:	931a      	str	r3, [sp, #104]	; 0x68
 8001c5e:	2205      	movs	r2, #5
 8001c60:	7821      	ldrb	r1, [r4, #0]
 8001c62:	4850      	ldr	r0, [pc, #320]	; (8001da4 <_svfiprintf_r+0x1d4>)
 8001c64:	f7fe fab4 	bl	80001d0 <memchr>
 8001c68:	1c67      	adds	r7, r4, #1
 8001c6a:	9b04      	ldr	r3, [sp, #16]
 8001c6c:	b9d8      	cbnz	r0, 8001ca6 <_svfiprintf_r+0xd6>
 8001c6e:	06d9      	lsls	r1, r3, #27
 8001c70:	bf44      	itt	mi
 8001c72:	2220      	movmi	r2, #32
 8001c74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001c78:	071a      	lsls	r2, r3, #28
 8001c7a:	bf44      	itt	mi
 8001c7c:	222b      	movmi	r2, #43	; 0x2b
 8001c7e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001c82:	7822      	ldrb	r2, [r4, #0]
 8001c84:	2a2a      	cmp	r2, #42	; 0x2a
 8001c86:	d016      	beq.n	8001cb6 <_svfiprintf_r+0xe6>
 8001c88:	9a07      	ldr	r2, [sp, #28]
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	200a      	movs	r0, #10
 8001c8e:	4627      	mov	r7, r4
 8001c90:	3401      	adds	r4, #1
 8001c92:	783b      	ldrb	r3, [r7, #0]
 8001c94:	3b30      	subs	r3, #48	; 0x30
 8001c96:	2b09      	cmp	r3, #9
 8001c98:	d951      	bls.n	8001d3e <_svfiprintf_r+0x16e>
 8001c9a:	b1c9      	cbz	r1, 8001cd0 <_svfiprintf_r+0x100>
 8001c9c:	e011      	b.n	8001cc2 <_svfiprintf_r+0xf2>
 8001c9e:	2b25      	cmp	r3, #37	; 0x25
 8001ca0:	d0c0      	beq.n	8001c24 <_svfiprintf_r+0x54>
 8001ca2:	4627      	mov	r7, r4
 8001ca4:	e7b9      	b.n	8001c1a <_svfiprintf_r+0x4a>
 8001ca6:	4a3f      	ldr	r2, [pc, #252]	; (8001da4 <_svfiprintf_r+0x1d4>)
 8001ca8:	1a80      	subs	r0, r0, r2
 8001caa:	fa0b f000 	lsl.w	r0, fp, r0
 8001cae:	4318      	orrs	r0, r3
 8001cb0:	9004      	str	r0, [sp, #16]
 8001cb2:	463c      	mov	r4, r7
 8001cb4:	e7d3      	b.n	8001c5e <_svfiprintf_r+0x8e>
 8001cb6:	9a03      	ldr	r2, [sp, #12]
 8001cb8:	1d11      	adds	r1, r2, #4
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	9103      	str	r1, [sp, #12]
 8001cbe:	2a00      	cmp	r2, #0
 8001cc0:	db01      	blt.n	8001cc6 <_svfiprintf_r+0xf6>
 8001cc2:	9207      	str	r2, [sp, #28]
 8001cc4:	e004      	b.n	8001cd0 <_svfiprintf_r+0x100>
 8001cc6:	4252      	negs	r2, r2
 8001cc8:	f043 0302 	orr.w	r3, r3, #2
 8001ccc:	9207      	str	r2, [sp, #28]
 8001cce:	9304      	str	r3, [sp, #16]
 8001cd0:	783b      	ldrb	r3, [r7, #0]
 8001cd2:	2b2e      	cmp	r3, #46	; 0x2e
 8001cd4:	d10e      	bne.n	8001cf4 <_svfiprintf_r+0x124>
 8001cd6:	787b      	ldrb	r3, [r7, #1]
 8001cd8:	2b2a      	cmp	r3, #42	; 0x2a
 8001cda:	f107 0101 	add.w	r1, r7, #1
 8001cde:	d132      	bne.n	8001d46 <_svfiprintf_r+0x176>
 8001ce0:	9b03      	ldr	r3, [sp, #12]
 8001ce2:	1d1a      	adds	r2, r3, #4
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	9203      	str	r2, [sp, #12]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	bfb8      	it	lt
 8001cec:	f04f 33ff 	movlt.w	r3, #4294967295
 8001cf0:	3702      	adds	r7, #2
 8001cf2:	9305      	str	r3, [sp, #20]
 8001cf4:	4c2c      	ldr	r4, [pc, #176]	; (8001da8 <_svfiprintf_r+0x1d8>)
 8001cf6:	7839      	ldrb	r1, [r7, #0]
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	f7fe fa68 	bl	80001d0 <memchr>
 8001d00:	b138      	cbz	r0, 8001d12 <_svfiprintf_r+0x142>
 8001d02:	2340      	movs	r3, #64	; 0x40
 8001d04:	1b00      	subs	r0, r0, r4
 8001d06:	fa03 f000 	lsl.w	r0, r3, r0
 8001d0a:	9b04      	ldr	r3, [sp, #16]
 8001d0c:	4303      	orrs	r3, r0
 8001d0e:	9304      	str	r3, [sp, #16]
 8001d10:	3701      	adds	r7, #1
 8001d12:	7839      	ldrb	r1, [r7, #0]
 8001d14:	4825      	ldr	r0, [pc, #148]	; (8001dac <_svfiprintf_r+0x1dc>)
 8001d16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001d1a:	2206      	movs	r2, #6
 8001d1c:	1c7e      	adds	r6, r7, #1
 8001d1e:	f7fe fa57 	bl	80001d0 <memchr>
 8001d22:	2800      	cmp	r0, #0
 8001d24:	d035      	beq.n	8001d92 <_svfiprintf_r+0x1c2>
 8001d26:	4b22      	ldr	r3, [pc, #136]	; (8001db0 <_svfiprintf_r+0x1e0>)
 8001d28:	b9fb      	cbnz	r3, 8001d6a <_svfiprintf_r+0x19a>
 8001d2a:	9b03      	ldr	r3, [sp, #12]
 8001d2c:	3307      	adds	r3, #7
 8001d2e:	f023 0307 	bic.w	r3, r3, #7
 8001d32:	3308      	adds	r3, #8
 8001d34:	9303      	str	r3, [sp, #12]
 8001d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d38:	444b      	add	r3, r9
 8001d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8001d3c:	e76c      	b.n	8001c18 <_svfiprintf_r+0x48>
 8001d3e:	fb00 3202 	mla	r2, r0, r2, r3
 8001d42:	2101      	movs	r1, #1
 8001d44:	e7a3      	b.n	8001c8e <_svfiprintf_r+0xbe>
 8001d46:	2300      	movs	r3, #0
 8001d48:	9305      	str	r3, [sp, #20]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	240a      	movs	r4, #10
 8001d4e:	460f      	mov	r7, r1
 8001d50:	3101      	adds	r1, #1
 8001d52:	783a      	ldrb	r2, [r7, #0]
 8001d54:	3a30      	subs	r2, #48	; 0x30
 8001d56:	2a09      	cmp	r2, #9
 8001d58:	d903      	bls.n	8001d62 <_svfiprintf_r+0x192>
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0ca      	beq.n	8001cf4 <_svfiprintf_r+0x124>
 8001d5e:	9005      	str	r0, [sp, #20]
 8001d60:	e7c8      	b.n	8001cf4 <_svfiprintf_r+0x124>
 8001d62:	fb04 2000 	mla	r0, r4, r0, r2
 8001d66:	2301      	movs	r3, #1
 8001d68:	e7f1      	b.n	8001d4e <_svfiprintf_r+0x17e>
 8001d6a:	ab03      	add	r3, sp, #12
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	462a      	mov	r2, r5
 8001d70:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <_svfiprintf_r+0x1e4>)
 8001d72:	a904      	add	r1, sp, #16
 8001d74:	4640      	mov	r0, r8
 8001d76:	f3af 8000 	nop.w
 8001d7a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001d7e:	4681      	mov	r9, r0
 8001d80:	d1d9      	bne.n	8001d36 <_svfiprintf_r+0x166>
 8001d82:	89ab      	ldrh	r3, [r5, #12]
 8001d84:	065b      	lsls	r3, r3, #25
 8001d86:	f53f af38 	bmi.w	8001bfa <_svfiprintf_r+0x2a>
 8001d8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001d8c:	b01d      	add	sp, #116	; 0x74
 8001d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d92:	ab03      	add	r3, sp, #12
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	462a      	mov	r2, r5
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <_svfiprintf_r+0x1e4>)
 8001d9a:	a904      	add	r1, sp, #16
 8001d9c:	4640      	mov	r0, r8
 8001d9e:	f000 f881 	bl	8001ea4 <_printf_i>
 8001da2:	e7ea      	b.n	8001d7a <_svfiprintf_r+0x1aa>
 8001da4:	08002354 	.word	0x08002354
 8001da8:	0800235a 	.word	0x0800235a
 8001dac:	0800235e 	.word	0x0800235e
 8001db0:	00000000 	.word	0x00000000
 8001db4:	08001b19 	.word	0x08001b19

08001db8 <_printf_common>:
 8001db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001dbc:	4691      	mov	r9, r2
 8001dbe:	461f      	mov	r7, r3
 8001dc0:	688a      	ldr	r2, [r1, #8]
 8001dc2:	690b      	ldr	r3, [r1, #16]
 8001dc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	bfb8      	it	lt
 8001dcc:	4613      	movlt	r3, r2
 8001dce:	f8c9 3000 	str.w	r3, [r9]
 8001dd2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001dd6:	4606      	mov	r6, r0
 8001dd8:	460c      	mov	r4, r1
 8001dda:	b112      	cbz	r2, 8001de2 <_printf_common+0x2a>
 8001ddc:	3301      	adds	r3, #1
 8001dde:	f8c9 3000 	str.w	r3, [r9]
 8001de2:	6823      	ldr	r3, [r4, #0]
 8001de4:	0699      	lsls	r1, r3, #26
 8001de6:	bf42      	ittt	mi
 8001de8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001dec:	3302      	addmi	r3, #2
 8001dee:	f8c9 3000 	strmi.w	r3, [r9]
 8001df2:	6825      	ldr	r5, [r4, #0]
 8001df4:	f015 0506 	ands.w	r5, r5, #6
 8001df8:	d107      	bne.n	8001e0a <_printf_common+0x52>
 8001dfa:	f104 0a19 	add.w	sl, r4, #25
 8001dfe:	68e3      	ldr	r3, [r4, #12]
 8001e00:	f8d9 2000 	ldr.w	r2, [r9]
 8001e04:	1a9b      	subs	r3, r3, r2
 8001e06:	429d      	cmp	r5, r3
 8001e08:	db29      	blt.n	8001e5e <_printf_common+0xa6>
 8001e0a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001e0e:	6822      	ldr	r2, [r4, #0]
 8001e10:	3300      	adds	r3, #0
 8001e12:	bf18      	it	ne
 8001e14:	2301      	movne	r3, #1
 8001e16:	0692      	lsls	r2, r2, #26
 8001e18:	d42e      	bmi.n	8001e78 <_printf_common+0xc0>
 8001e1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001e1e:	4639      	mov	r1, r7
 8001e20:	4630      	mov	r0, r6
 8001e22:	47c0      	blx	r8
 8001e24:	3001      	adds	r0, #1
 8001e26:	d021      	beq.n	8001e6c <_printf_common+0xb4>
 8001e28:	6823      	ldr	r3, [r4, #0]
 8001e2a:	68e5      	ldr	r5, [r4, #12]
 8001e2c:	f8d9 2000 	ldr.w	r2, [r9]
 8001e30:	f003 0306 	and.w	r3, r3, #6
 8001e34:	2b04      	cmp	r3, #4
 8001e36:	bf08      	it	eq
 8001e38:	1aad      	subeq	r5, r5, r2
 8001e3a:	68a3      	ldr	r3, [r4, #8]
 8001e3c:	6922      	ldr	r2, [r4, #16]
 8001e3e:	bf0c      	ite	eq
 8001e40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e44:	2500      	movne	r5, #0
 8001e46:	4293      	cmp	r3, r2
 8001e48:	bfc4      	itt	gt
 8001e4a:	1a9b      	subgt	r3, r3, r2
 8001e4c:	18ed      	addgt	r5, r5, r3
 8001e4e:	f04f 0900 	mov.w	r9, #0
 8001e52:	341a      	adds	r4, #26
 8001e54:	454d      	cmp	r5, r9
 8001e56:	d11b      	bne.n	8001e90 <_printf_common+0xd8>
 8001e58:	2000      	movs	r0, #0
 8001e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e5e:	2301      	movs	r3, #1
 8001e60:	4652      	mov	r2, sl
 8001e62:	4639      	mov	r1, r7
 8001e64:	4630      	mov	r0, r6
 8001e66:	47c0      	blx	r8
 8001e68:	3001      	adds	r0, #1
 8001e6a:	d103      	bne.n	8001e74 <_printf_common+0xbc>
 8001e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e74:	3501      	adds	r5, #1
 8001e76:	e7c2      	b.n	8001dfe <_printf_common+0x46>
 8001e78:	18e1      	adds	r1, r4, r3
 8001e7a:	1c5a      	adds	r2, r3, #1
 8001e7c:	2030      	movs	r0, #48	; 0x30
 8001e7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001e82:	4422      	add	r2, r4
 8001e84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001e88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001e8c:	3302      	adds	r3, #2
 8001e8e:	e7c4      	b.n	8001e1a <_printf_common+0x62>
 8001e90:	2301      	movs	r3, #1
 8001e92:	4622      	mov	r2, r4
 8001e94:	4639      	mov	r1, r7
 8001e96:	4630      	mov	r0, r6
 8001e98:	47c0      	blx	r8
 8001e9a:	3001      	adds	r0, #1
 8001e9c:	d0e6      	beq.n	8001e6c <_printf_common+0xb4>
 8001e9e:	f109 0901 	add.w	r9, r9, #1
 8001ea2:	e7d7      	b.n	8001e54 <_printf_common+0x9c>

08001ea4 <_printf_i>:
 8001ea4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ea8:	4617      	mov	r7, r2
 8001eaa:	7e0a      	ldrb	r2, [r1, #24]
 8001eac:	b085      	sub	sp, #20
 8001eae:	2a6e      	cmp	r2, #110	; 0x6e
 8001eb0:	4698      	mov	r8, r3
 8001eb2:	4606      	mov	r6, r0
 8001eb4:	460c      	mov	r4, r1
 8001eb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001eb8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001ebc:	f000 80bc 	beq.w	8002038 <_printf_i+0x194>
 8001ec0:	d81a      	bhi.n	8001ef8 <_printf_i+0x54>
 8001ec2:	2a63      	cmp	r2, #99	; 0x63
 8001ec4:	d02e      	beq.n	8001f24 <_printf_i+0x80>
 8001ec6:	d80a      	bhi.n	8001ede <_printf_i+0x3a>
 8001ec8:	2a00      	cmp	r2, #0
 8001eca:	f000 80c8 	beq.w	800205e <_printf_i+0x1ba>
 8001ece:	2a58      	cmp	r2, #88	; 0x58
 8001ed0:	f000 808a 	beq.w	8001fe8 <_printf_i+0x144>
 8001ed4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ed8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001edc:	e02a      	b.n	8001f34 <_printf_i+0x90>
 8001ede:	2a64      	cmp	r2, #100	; 0x64
 8001ee0:	d001      	beq.n	8001ee6 <_printf_i+0x42>
 8001ee2:	2a69      	cmp	r2, #105	; 0x69
 8001ee4:	d1f6      	bne.n	8001ed4 <_printf_i+0x30>
 8001ee6:	6821      	ldr	r1, [r4, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001eee:	d023      	beq.n	8001f38 <_printf_i+0x94>
 8001ef0:	1d11      	adds	r1, r2, #4
 8001ef2:	6019      	str	r1, [r3, #0]
 8001ef4:	6813      	ldr	r3, [r2, #0]
 8001ef6:	e027      	b.n	8001f48 <_printf_i+0xa4>
 8001ef8:	2a73      	cmp	r2, #115	; 0x73
 8001efa:	f000 80b4 	beq.w	8002066 <_printf_i+0x1c2>
 8001efe:	d808      	bhi.n	8001f12 <_printf_i+0x6e>
 8001f00:	2a6f      	cmp	r2, #111	; 0x6f
 8001f02:	d02a      	beq.n	8001f5a <_printf_i+0xb6>
 8001f04:	2a70      	cmp	r2, #112	; 0x70
 8001f06:	d1e5      	bne.n	8001ed4 <_printf_i+0x30>
 8001f08:	680a      	ldr	r2, [r1, #0]
 8001f0a:	f042 0220 	orr.w	r2, r2, #32
 8001f0e:	600a      	str	r2, [r1, #0]
 8001f10:	e003      	b.n	8001f1a <_printf_i+0x76>
 8001f12:	2a75      	cmp	r2, #117	; 0x75
 8001f14:	d021      	beq.n	8001f5a <_printf_i+0xb6>
 8001f16:	2a78      	cmp	r2, #120	; 0x78
 8001f18:	d1dc      	bne.n	8001ed4 <_printf_i+0x30>
 8001f1a:	2278      	movs	r2, #120	; 0x78
 8001f1c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001f20:	496e      	ldr	r1, [pc, #440]	; (80020dc <_printf_i+0x238>)
 8001f22:	e064      	b.n	8001fee <_printf_i+0x14a>
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001f2a:	1d11      	adds	r1, r2, #4
 8001f2c:	6019      	str	r1, [r3, #0]
 8001f2e:	6813      	ldr	r3, [r2, #0]
 8001f30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0a3      	b.n	8002080 <_printf_i+0x1dc>
 8001f38:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001f3c:	f102 0104 	add.w	r1, r2, #4
 8001f40:	6019      	str	r1, [r3, #0]
 8001f42:	d0d7      	beq.n	8001ef4 <_printf_i+0x50>
 8001f44:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	da03      	bge.n	8001f54 <_printf_i+0xb0>
 8001f4c:	222d      	movs	r2, #45	; 0x2d
 8001f4e:	425b      	negs	r3, r3
 8001f50:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001f54:	4962      	ldr	r1, [pc, #392]	; (80020e0 <_printf_i+0x23c>)
 8001f56:	220a      	movs	r2, #10
 8001f58:	e017      	b.n	8001f8a <_printf_i+0xe6>
 8001f5a:	6820      	ldr	r0, [r4, #0]
 8001f5c:	6819      	ldr	r1, [r3, #0]
 8001f5e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001f62:	d003      	beq.n	8001f6c <_printf_i+0xc8>
 8001f64:	1d08      	adds	r0, r1, #4
 8001f66:	6018      	str	r0, [r3, #0]
 8001f68:	680b      	ldr	r3, [r1, #0]
 8001f6a:	e006      	b.n	8001f7a <_printf_i+0xd6>
 8001f6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001f70:	f101 0004 	add.w	r0, r1, #4
 8001f74:	6018      	str	r0, [r3, #0]
 8001f76:	d0f7      	beq.n	8001f68 <_printf_i+0xc4>
 8001f78:	880b      	ldrh	r3, [r1, #0]
 8001f7a:	4959      	ldr	r1, [pc, #356]	; (80020e0 <_printf_i+0x23c>)
 8001f7c:	2a6f      	cmp	r2, #111	; 0x6f
 8001f7e:	bf14      	ite	ne
 8001f80:	220a      	movne	r2, #10
 8001f82:	2208      	moveq	r2, #8
 8001f84:	2000      	movs	r0, #0
 8001f86:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001f8a:	6865      	ldr	r5, [r4, #4]
 8001f8c:	60a5      	str	r5, [r4, #8]
 8001f8e:	2d00      	cmp	r5, #0
 8001f90:	f2c0 809c 	blt.w	80020cc <_printf_i+0x228>
 8001f94:	6820      	ldr	r0, [r4, #0]
 8001f96:	f020 0004 	bic.w	r0, r0, #4
 8001f9a:	6020      	str	r0, [r4, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d13f      	bne.n	8002020 <_printf_i+0x17c>
 8001fa0:	2d00      	cmp	r5, #0
 8001fa2:	f040 8095 	bne.w	80020d0 <_printf_i+0x22c>
 8001fa6:	4675      	mov	r5, lr
 8001fa8:	2a08      	cmp	r2, #8
 8001faa:	d10b      	bne.n	8001fc4 <_printf_i+0x120>
 8001fac:	6823      	ldr	r3, [r4, #0]
 8001fae:	07da      	lsls	r2, r3, #31
 8001fb0:	d508      	bpl.n	8001fc4 <_printf_i+0x120>
 8001fb2:	6923      	ldr	r3, [r4, #16]
 8001fb4:	6862      	ldr	r2, [r4, #4]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	bfde      	ittt	le
 8001fba:	2330      	movle	r3, #48	; 0x30
 8001fbc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001fc0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001fc4:	ebae 0305 	sub.w	r3, lr, r5
 8001fc8:	6123      	str	r3, [r4, #16]
 8001fca:	f8cd 8000 	str.w	r8, [sp]
 8001fce:	463b      	mov	r3, r7
 8001fd0:	aa03      	add	r2, sp, #12
 8001fd2:	4621      	mov	r1, r4
 8001fd4:	4630      	mov	r0, r6
 8001fd6:	f7ff feef 	bl	8001db8 <_printf_common>
 8001fda:	3001      	adds	r0, #1
 8001fdc:	d155      	bne.n	800208a <_printf_i+0x1e6>
 8001fde:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe2:	b005      	add	sp, #20
 8001fe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001fe8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001fec:	493c      	ldr	r1, [pc, #240]	; (80020e0 <_printf_i+0x23c>)
 8001fee:	6822      	ldr	r2, [r4, #0]
 8001ff0:	6818      	ldr	r0, [r3, #0]
 8001ff2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001ff6:	f100 0504 	add.w	r5, r0, #4
 8001ffa:	601d      	str	r5, [r3, #0]
 8001ffc:	d001      	beq.n	8002002 <_printf_i+0x15e>
 8001ffe:	6803      	ldr	r3, [r0, #0]
 8002000:	e002      	b.n	8002008 <_printf_i+0x164>
 8002002:	0655      	lsls	r5, r2, #25
 8002004:	d5fb      	bpl.n	8001ffe <_printf_i+0x15a>
 8002006:	8803      	ldrh	r3, [r0, #0]
 8002008:	07d0      	lsls	r0, r2, #31
 800200a:	bf44      	itt	mi
 800200c:	f042 0220 	orrmi.w	r2, r2, #32
 8002010:	6022      	strmi	r2, [r4, #0]
 8002012:	b91b      	cbnz	r3, 800201c <_printf_i+0x178>
 8002014:	6822      	ldr	r2, [r4, #0]
 8002016:	f022 0220 	bic.w	r2, r2, #32
 800201a:	6022      	str	r2, [r4, #0]
 800201c:	2210      	movs	r2, #16
 800201e:	e7b1      	b.n	8001f84 <_printf_i+0xe0>
 8002020:	4675      	mov	r5, lr
 8002022:	fbb3 f0f2 	udiv	r0, r3, r2
 8002026:	fb02 3310 	mls	r3, r2, r0, r3
 800202a:	5ccb      	ldrb	r3, [r1, r3]
 800202c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002030:	4603      	mov	r3, r0
 8002032:	2800      	cmp	r0, #0
 8002034:	d1f5      	bne.n	8002022 <_printf_i+0x17e>
 8002036:	e7b7      	b.n	8001fa8 <_printf_i+0x104>
 8002038:	6808      	ldr	r0, [r1, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	6949      	ldr	r1, [r1, #20]
 800203e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002042:	d004      	beq.n	800204e <_printf_i+0x1aa>
 8002044:	1d10      	adds	r0, r2, #4
 8002046:	6018      	str	r0, [r3, #0]
 8002048:	6813      	ldr	r3, [r2, #0]
 800204a:	6019      	str	r1, [r3, #0]
 800204c:	e007      	b.n	800205e <_printf_i+0x1ba>
 800204e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002052:	f102 0004 	add.w	r0, r2, #4
 8002056:	6018      	str	r0, [r3, #0]
 8002058:	6813      	ldr	r3, [r2, #0]
 800205a:	d0f6      	beq.n	800204a <_printf_i+0x1a6>
 800205c:	8019      	strh	r1, [r3, #0]
 800205e:	2300      	movs	r3, #0
 8002060:	6123      	str	r3, [r4, #16]
 8002062:	4675      	mov	r5, lr
 8002064:	e7b1      	b.n	8001fca <_printf_i+0x126>
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	1d11      	adds	r1, r2, #4
 800206a:	6019      	str	r1, [r3, #0]
 800206c:	6815      	ldr	r5, [r2, #0]
 800206e:	6862      	ldr	r2, [r4, #4]
 8002070:	2100      	movs	r1, #0
 8002072:	4628      	mov	r0, r5
 8002074:	f7fe f8ac 	bl	80001d0 <memchr>
 8002078:	b108      	cbz	r0, 800207e <_printf_i+0x1da>
 800207a:	1b40      	subs	r0, r0, r5
 800207c:	6060      	str	r0, [r4, #4]
 800207e:	6863      	ldr	r3, [r4, #4]
 8002080:	6123      	str	r3, [r4, #16]
 8002082:	2300      	movs	r3, #0
 8002084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002088:	e79f      	b.n	8001fca <_printf_i+0x126>
 800208a:	6923      	ldr	r3, [r4, #16]
 800208c:	462a      	mov	r2, r5
 800208e:	4639      	mov	r1, r7
 8002090:	4630      	mov	r0, r6
 8002092:	47c0      	blx	r8
 8002094:	3001      	adds	r0, #1
 8002096:	d0a2      	beq.n	8001fde <_printf_i+0x13a>
 8002098:	6823      	ldr	r3, [r4, #0]
 800209a:	079b      	lsls	r3, r3, #30
 800209c:	d507      	bpl.n	80020ae <_printf_i+0x20a>
 800209e:	2500      	movs	r5, #0
 80020a0:	f104 0919 	add.w	r9, r4, #25
 80020a4:	68e3      	ldr	r3, [r4, #12]
 80020a6:	9a03      	ldr	r2, [sp, #12]
 80020a8:	1a9b      	subs	r3, r3, r2
 80020aa:	429d      	cmp	r5, r3
 80020ac:	db05      	blt.n	80020ba <_printf_i+0x216>
 80020ae:	68e0      	ldr	r0, [r4, #12]
 80020b0:	9b03      	ldr	r3, [sp, #12]
 80020b2:	4298      	cmp	r0, r3
 80020b4:	bfb8      	it	lt
 80020b6:	4618      	movlt	r0, r3
 80020b8:	e793      	b.n	8001fe2 <_printf_i+0x13e>
 80020ba:	2301      	movs	r3, #1
 80020bc:	464a      	mov	r2, r9
 80020be:	4639      	mov	r1, r7
 80020c0:	4630      	mov	r0, r6
 80020c2:	47c0      	blx	r8
 80020c4:	3001      	adds	r0, #1
 80020c6:	d08a      	beq.n	8001fde <_printf_i+0x13a>
 80020c8:	3501      	adds	r5, #1
 80020ca:	e7eb      	b.n	80020a4 <_printf_i+0x200>
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1a7      	bne.n	8002020 <_printf_i+0x17c>
 80020d0:	780b      	ldrb	r3, [r1, #0]
 80020d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80020d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80020da:	e765      	b.n	8001fa8 <_printf_i+0x104>
 80020dc:	08002376 	.word	0x08002376
 80020e0:	08002365 	.word	0x08002365

080020e4 <memcpy>:
 80020e4:	b510      	push	{r4, lr}
 80020e6:	1e43      	subs	r3, r0, #1
 80020e8:	440a      	add	r2, r1
 80020ea:	4291      	cmp	r1, r2
 80020ec:	d100      	bne.n	80020f0 <memcpy+0xc>
 80020ee:	bd10      	pop	{r4, pc}
 80020f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80020f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80020f8:	e7f7      	b.n	80020ea <memcpy+0x6>

080020fa <memmove>:
 80020fa:	4288      	cmp	r0, r1
 80020fc:	b510      	push	{r4, lr}
 80020fe:	eb01 0302 	add.w	r3, r1, r2
 8002102:	d803      	bhi.n	800210c <memmove+0x12>
 8002104:	1e42      	subs	r2, r0, #1
 8002106:	4299      	cmp	r1, r3
 8002108:	d10c      	bne.n	8002124 <memmove+0x2a>
 800210a:	bd10      	pop	{r4, pc}
 800210c:	4298      	cmp	r0, r3
 800210e:	d2f9      	bcs.n	8002104 <memmove+0xa>
 8002110:	1881      	adds	r1, r0, r2
 8002112:	1ad2      	subs	r2, r2, r3
 8002114:	42d3      	cmn	r3, r2
 8002116:	d100      	bne.n	800211a <memmove+0x20>
 8002118:	bd10      	pop	{r4, pc}
 800211a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800211e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002122:	e7f7      	b.n	8002114 <memmove+0x1a>
 8002124:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002128:	f802 4f01 	strb.w	r4, [r2, #1]!
 800212c:	e7eb      	b.n	8002106 <memmove+0xc>
	...

08002130 <_free_r>:
 8002130:	b538      	push	{r3, r4, r5, lr}
 8002132:	4605      	mov	r5, r0
 8002134:	2900      	cmp	r1, #0
 8002136:	d045      	beq.n	80021c4 <_free_r+0x94>
 8002138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800213c:	1f0c      	subs	r4, r1, #4
 800213e:	2b00      	cmp	r3, #0
 8002140:	bfb8      	it	lt
 8002142:	18e4      	addlt	r4, r4, r3
 8002144:	f000 f8d6 	bl	80022f4 <__malloc_lock>
 8002148:	4a1f      	ldr	r2, [pc, #124]	; (80021c8 <_free_r+0x98>)
 800214a:	6813      	ldr	r3, [r2, #0]
 800214c:	4610      	mov	r0, r2
 800214e:	b933      	cbnz	r3, 800215e <_free_r+0x2e>
 8002150:	6063      	str	r3, [r4, #4]
 8002152:	6014      	str	r4, [r2, #0]
 8002154:	4628      	mov	r0, r5
 8002156:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800215a:	f000 b8cc 	b.w	80022f6 <__malloc_unlock>
 800215e:	42a3      	cmp	r3, r4
 8002160:	d90c      	bls.n	800217c <_free_r+0x4c>
 8002162:	6821      	ldr	r1, [r4, #0]
 8002164:	1862      	adds	r2, r4, r1
 8002166:	4293      	cmp	r3, r2
 8002168:	bf04      	itt	eq
 800216a:	681a      	ldreq	r2, [r3, #0]
 800216c:	685b      	ldreq	r3, [r3, #4]
 800216e:	6063      	str	r3, [r4, #4]
 8002170:	bf04      	itt	eq
 8002172:	1852      	addeq	r2, r2, r1
 8002174:	6022      	streq	r2, [r4, #0]
 8002176:	6004      	str	r4, [r0, #0]
 8002178:	e7ec      	b.n	8002154 <_free_r+0x24>
 800217a:	4613      	mov	r3, r2
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	b10a      	cbz	r2, 8002184 <_free_r+0x54>
 8002180:	42a2      	cmp	r2, r4
 8002182:	d9fa      	bls.n	800217a <_free_r+0x4a>
 8002184:	6819      	ldr	r1, [r3, #0]
 8002186:	1858      	adds	r0, r3, r1
 8002188:	42a0      	cmp	r0, r4
 800218a:	d10b      	bne.n	80021a4 <_free_r+0x74>
 800218c:	6820      	ldr	r0, [r4, #0]
 800218e:	4401      	add	r1, r0
 8002190:	1858      	adds	r0, r3, r1
 8002192:	4282      	cmp	r2, r0
 8002194:	6019      	str	r1, [r3, #0]
 8002196:	d1dd      	bne.n	8002154 <_free_r+0x24>
 8002198:	6810      	ldr	r0, [r2, #0]
 800219a:	6852      	ldr	r2, [r2, #4]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	4401      	add	r1, r0
 80021a0:	6019      	str	r1, [r3, #0]
 80021a2:	e7d7      	b.n	8002154 <_free_r+0x24>
 80021a4:	d902      	bls.n	80021ac <_free_r+0x7c>
 80021a6:	230c      	movs	r3, #12
 80021a8:	602b      	str	r3, [r5, #0]
 80021aa:	e7d3      	b.n	8002154 <_free_r+0x24>
 80021ac:	6820      	ldr	r0, [r4, #0]
 80021ae:	1821      	adds	r1, r4, r0
 80021b0:	428a      	cmp	r2, r1
 80021b2:	bf04      	itt	eq
 80021b4:	6811      	ldreq	r1, [r2, #0]
 80021b6:	6852      	ldreq	r2, [r2, #4]
 80021b8:	6062      	str	r2, [r4, #4]
 80021ba:	bf04      	itt	eq
 80021bc:	1809      	addeq	r1, r1, r0
 80021be:	6021      	streq	r1, [r4, #0]
 80021c0:	605c      	str	r4, [r3, #4]
 80021c2:	e7c7      	b.n	8002154 <_free_r+0x24>
 80021c4:	bd38      	pop	{r3, r4, r5, pc}
 80021c6:	bf00      	nop
 80021c8:	20000084 	.word	0x20000084

080021cc <_malloc_r>:
 80021cc:	b570      	push	{r4, r5, r6, lr}
 80021ce:	1ccd      	adds	r5, r1, #3
 80021d0:	f025 0503 	bic.w	r5, r5, #3
 80021d4:	3508      	adds	r5, #8
 80021d6:	2d0c      	cmp	r5, #12
 80021d8:	bf38      	it	cc
 80021da:	250c      	movcc	r5, #12
 80021dc:	2d00      	cmp	r5, #0
 80021de:	4606      	mov	r6, r0
 80021e0:	db01      	blt.n	80021e6 <_malloc_r+0x1a>
 80021e2:	42a9      	cmp	r1, r5
 80021e4:	d903      	bls.n	80021ee <_malloc_r+0x22>
 80021e6:	230c      	movs	r3, #12
 80021e8:	6033      	str	r3, [r6, #0]
 80021ea:	2000      	movs	r0, #0
 80021ec:	bd70      	pop	{r4, r5, r6, pc}
 80021ee:	f000 f881 	bl	80022f4 <__malloc_lock>
 80021f2:	4a23      	ldr	r2, [pc, #140]	; (8002280 <_malloc_r+0xb4>)
 80021f4:	6814      	ldr	r4, [r2, #0]
 80021f6:	4621      	mov	r1, r4
 80021f8:	b991      	cbnz	r1, 8002220 <_malloc_r+0x54>
 80021fa:	4c22      	ldr	r4, [pc, #136]	; (8002284 <_malloc_r+0xb8>)
 80021fc:	6823      	ldr	r3, [r4, #0]
 80021fe:	b91b      	cbnz	r3, 8002208 <_malloc_r+0x3c>
 8002200:	4630      	mov	r0, r6
 8002202:	f000 f867 	bl	80022d4 <_sbrk_r>
 8002206:	6020      	str	r0, [r4, #0]
 8002208:	4629      	mov	r1, r5
 800220a:	4630      	mov	r0, r6
 800220c:	f000 f862 	bl	80022d4 <_sbrk_r>
 8002210:	1c43      	adds	r3, r0, #1
 8002212:	d126      	bne.n	8002262 <_malloc_r+0x96>
 8002214:	230c      	movs	r3, #12
 8002216:	6033      	str	r3, [r6, #0]
 8002218:	4630      	mov	r0, r6
 800221a:	f000 f86c 	bl	80022f6 <__malloc_unlock>
 800221e:	e7e4      	b.n	80021ea <_malloc_r+0x1e>
 8002220:	680b      	ldr	r3, [r1, #0]
 8002222:	1b5b      	subs	r3, r3, r5
 8002224:	d41a      	bmi.n	800225c <_malloc_r+0x90>
 8002226:	2b0b      	cmp	r3, #11
 8002228:	d90f      	bls.n	800224a <_malloc_r+0x7e>
 800222a:	600b      	str	r3, [r1, #0]
 800222c:	50cd      	str	r5, [r1, r3]
 800222e:	18cc      	adds	r4, r1, r3
 8002230:	4630      	mov	r0, r6
 8002232:	f000 f860 	bl	80022f6 <__malloc_unlock>
 8002236:	f104 000b 	add.w	r0, r4, #11
 800223a:	1d23      	adds	r3, r4, #4
 800223c:	f020 0007 	bic.w	r0, r0, #7
 8002240:	1ac3      	subs	r3, r0, r3
 8002242:	d01b      	beq.n	800227c <_malloc_r+0xb0>
 8002244:	425a      	negs	r2, r3
 8002246:	50e2      	str	r2, [r4, r3]
 8002248:	bd70      	pop	{r4, r5, r6, pc}
 800224a:	428c      	cmp	r4, r1
 800224c:	bf0d      	iteet	eq
 800224e:	6863      	ldreq	r3, [r4, #4]
 8002250:	684b      	ldrne	r3, [r1, #4]
 8002252:	6063      	strne	r3, [r4, #4]
 8002254:	6013      	streq	r3, [r2, #0]
 8002256:	bf18      	it	ne
 8002258:	460c      	movne	r4, r1
 800225a:	e7e9      	b.n	8002230 <_malloc_r+0x64>
 800225c:	460c      	mov	r4, r1
 800225e:	6849      	ldr	r1, [r1, #4]
 8002260:	e7ca      	b.n	80021f8 <_malloc_r+0x2c>
 8002262:	1cc4      	adds	r4, r0, #3
 8002264:	f024 0403 	bic.w	r4, r4, #3
 8002268:	42a0      	cmp	r0, r4
 800226a:	d005      	beq.n	8002278 <_malloc_r+0xac>
 800226c:	1a21      	subs	r1, r4, r0
 800226e:	4630      	mov	r0, r6
 8002270:	f000 f830 	bl	80022d4 <_sbrk_r>
 8002274:	3001      	adds	r0, #1
 8002276:	d0cd      	beq.n	8002214 <_malloc_r+0x48>
 8002278:	6025      	str	r5, [r4, #0]
 800227a:	e7d9      	b.n	8002230 <_malloc_r+0x64>
 800227c:	bd70      	pop	{r4, r5, r6, pc}
 800227e:	bf00      	nop
 8002280:	20000084 	.word	0x20000084
 8002284:	20000088 	.word	0x20000088

08002288 <_realloc_r>:
 8002288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800228a:	4607      	mov	r7, r0
 800228c:	4614      	mov	r4, r2
 800228e:	460e      	mov	r6, r1
 8002290:	b921      	cbnz	r1, 800229c <_realloc_r+0x14>
 8002292:	4611      	mov	r1, r2
 8002294:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002298:	f7ff bf98 	b.w	80021cc <_malloc_r>
 800229c:	b922      	cbnz	r2, 80022a8 <_realloc_r+0x20>
 800229e:	f7ff ff47 	bl	8002130 <_free_r>
 80022a2:	4625      	mov	r5, r4
 80022a4:	4628      	mov	r0, r5
 80022a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022a8:	f000 f826 	bl	80022f8 <_malloc_usable_size_r>
 80022ac:	4284      	cmp	r4, r0
 80022ae:	d90f      	bls.n	80022d0 <_realloc_r+0x48>
 80022b0:	4621      	mov	r1, r4
 80022b2:	4638      	mov	r0, r7
 80022b4:	f7ff ff8a 	bl	80021cc <_malloc_r>
 80022b8:	4605      	mov	r5, r0
 80022ba:	2800      	cmp	r0, #0
 80022bc:	d0f2      	beq.n	80022a4 <_realloc_r+0x1c>
 80022be:	4631      	mov	r1, r6
 80022c0:	4622      	mov	r2, r4
 80022c2:	f7ff ff0f 	bl	80020e4 <memcpy>
 80022c6:	4631      	mov	r1, r6
 80022c8:	4638      	mov	r0, r7
 80022ca:	f7ff ff31 	bl	8002130 <_free_r>
 80022ce:	e7e9      	b.n	80022a4 <_realloc_r+0x1c>
 80022d0:	4635      	mov	r5, r6
 80022d2:	e7e7      	b.n	80022a4 <_realloc_r+0x1c>

080022d4 <_sbrk_r>:
 80022d4:	b538      	push	{r3, r4, r5, lr}
 80022d6:	4c06      	ldr	r4, [pc, #24]	; (80022f0 <_sbrk_r+0x1c>)
 80022d8:	2300      	movs	r3, #0
 80022da:	4605      	mov	r5, r0
 80022dc:	4608      	mov	r0, r1
 80022de:	6023      	str	r3, [r4, #0]
 80022e0:	f000 f814 	bl	800230c <_sbrk>
 80022e4:	1c43      	adds	r3, r0, #1
 80022e6:	d102      	bne.n	80022ee <_sbrk_r+0x1a>
 80022e8:	6823      	ldr	r3, [r4, #0]
 80022ea:	b103      	cbz	r3, 80022ee <_sbrk_r+0x1a>
 80022ec:	602b      	str	r3, [r5, #0]
 80022ee:	bd38      	pop	{r3, r4, r5, pc}
 80022f0:	200000f4 	.word	0x200000f4

080022f4 <__malloc_lock>:
 80022f4:	4770      	bx	lr

080022f6 <__malloc_unlock>:
 80022f6:	4770      	bx	lr

080022f8 <_malloc_usable_size_r>:
 80022f8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80022fc:	2800      	cmp	r0, #0
 80022fe:	f1a0 0004 	sub.w	r0, r0, #4
 8002302:	bfbc      	itt	lt
 8002304:	580b      	ldrlt	r3, [r1, r0]
 8002306:	18c0      	addlt	r0, r0, r3
 8002308:	4770      	bx	lr
	...

0800230c <_sbrk>:
 800230c:	4b04      	ldr	r3, [pc, #16]	; (8002320 <_sbrk+0x14>)
 800230e:	6819      	ldr	r1, [r3, #0]
 8002310:	4602      	mov	r2, r0
 8002312:	b909      	cbnz	r1, 8002318 <_sbrk+0xc>
 8002314:	4903      	ldr	r1, [pc, #12]	; (8002324 <_sbrk+0x18>)
 8002316:	6019      	str	r1, [r3, #0]
 8002318:	6818      	ldr	r0, [r3, #0]
 800231a:	4402      	add	r2, r0
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	4770      	bx	lr
 8002320:	2000008c 	.word	0x2000008c
 8002324:	200000f8 	.word	0x200000f8

08002328 <_init>:
 8002328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800232a:	bf00      	nop
 800232c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800232e:	bc08      	pop	{r3}
 8002330:	469e      	mov	lr, r3
 8002332:	4770      	bx	lr

08002334 <_fini>:
 8002334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002336:	bf00      	nop
 8002338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800233a:	bc08      	pop	{r3}
 800233c:	469e      	mov	lr, r3
 800233e:	4770      	bx	lr
