
Coba_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017d8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001960  08001960  00011960  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001970  08001970  00011970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001978  08001978  00011978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800197c  0800197c  0001197c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  08001980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  8 .bss          00000148  20000004  20000004  00020004  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000014c  2000014c  00020004  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000d3de  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001b20  00000000  00000000  0002d412  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002183  00000000  00000000  0002ef32  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000470  00000000  00000000  000310b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000580  00000000  00000000  00031528  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00002ee1  00000000  00000000  00031aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00001eec  00000000  00000000  00034989  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00036875  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000b40  00000000  00000000  000368f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001948 	.word	0x08001948

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001948 	.word	0x08001948

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80004da:	4b08      	ldr	r3, [pc, #32]	; (80004fc <HAL_InitTick+0x24>)
{
 80004dc:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80004de:	6818      	ldr	r0, [r3, #0]
 80004e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80004e8:	f000 fa6e 	bl	80009c8 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004ec:	2200      	movs	r2, #0
 80004ee:	4621      	mov	r1, r4
 80004f0:	f04f 30ff 	mov.w	r0, #4294967295
 80004f4:	f000 fa34 	bl	8000960 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80004f8:	2000      	movs	r0, #0
 80004fa:	bd10      	pop	{r4, pc}
 80004fc:	20000000 	.word	0x20000000

08000500 <HAL_Init>:
{
 8000500:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <HAL_Init+0x30>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800050a:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000512:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800051a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051c:	2003      	movs	r0, #3
 800051e:	f000 fa0d 	bl	800093c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000522:	2000      	movs	r0, #0
 8000524:	f7ff ffd8 	bl	80004d8 <HAL_InitTick>
  HAL_MspInit();
 8000528:	f001 f904 	bl	8001734 <HAL_MspInit>
}
 800052c:	2000      	movs	r0, #0
 800052e:	bd08      	pop	{r3, pc}
 8000530:	40023c00 	.word	0x40023c00

08000534 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000534:	4a02      	ldr	r2, [pc, #8]	; (8000540 <HAL_IncTick+0xc>)
 8000536:	6813      	ldr	r3, [r2, #0]
 8000538:	3301      	adds	r3, #1
 800053a:	6013      	str	r3, [r2, #0]
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	20000064 	.word	0x20000064

08000544 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000544:	4b01      	ldr	r3, [pc, #4]	; (800054c <HAL_GetTick+0x8>)
 8000546:	6818      	ldr	r0, [r3, #0]
}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	20000064 	.word	0x20000064

08000550 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000550:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000552:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000554:	f7ff fff6 	bl	8000544 <HAL_GetTick>
  uint32_t wait = Delay;
 8000558:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800055a:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800055c:	4605      	mov	r5, r0
  {
     wait++;
 800055e:	bf18      	it	ne
 8000560:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000562:	f7ff ffef 	bl	8000544 <HAL_GetTick>
 8000566:	1b40      	subs	r0, r0, r5
 8000568:	42a0      	cmp	r0, r4
 800056a:	d3fa      	bcc.n	8000562 <HAL_Delay+0x12>
  {
  }
}
 800056c:	b003      	add	sp, #12
 800056e:	bd30      	pop	{r4, r5, pc}

08000570 <HAL_CAN_ConfigFilter>:
  assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
  assert_param(IS_CAN_BANKNUMBER(sFilterConfig->BankNumber));
  
  filternbrbitpos = 1U << sFilterConfig->FilterNumber;
 8000570:	694a      	ldr	r2, [r1, #20]
 8000572:	2301      	movs	r3, #1
{
 8000574:	b530      	push	{r4, r5, lr}
  filternbrbitpos = 1U << sFilterConfig->FilterNumber;
 8000576:	fa03 f502 	lsl.w	r5, r3, r2
#else
  can_ip = CAN1;
#endif
  
  /* Initialisation mode for the filter */
  can_ip->FMR |= (uint32_t)CAN_FMR_FINIT;
 800057a:	4b3c      	ldr	r3, [pc, #240]	; (800066c <HAL_CAN_ConfigFilter+0xfc>)
 800057c:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
 8000580:	f040 0001 	orr.w	r0, r0, #1
 8000584:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200

#if defined (CAN2)  
  /* Select the start slave bank */
  can_ip->FMR &= ~((uint32_t)CAN_FMR_CAN2SB);
 8000588:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
 800058c:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8000590:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
  can_ip->FMR |= (uint32_t)(sFilterConfig->BankNumber << 8U);
 8000594:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
 8000598:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800059a:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 800059e:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
#endif
     
  /* Filter Deactivation */
  can_ip->FA1R &= ~(uint32_t)filternbrbitpos;
 80005a2:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
 80005a6:	43ec      	mvns	r4, r5
 80005a8:	4020      	ands	r0, r4
 80005aa:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c

  /* Filter Scale */
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80005ae:	69c8      	ldr	r0, [r1, #28]
 80005b0:	2800      	cmp	r0, #0
 80005b2:	d136      	bne.n	8000622 <HAL_CAN_ConfigFilter+0xb2>
  {
    /* 16-bit scale for the filter */
    can_ip->FS1R &= ~(uint32_t)filternbrbitpos;
 80005b4:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 80005b8:	4020      	ands	r0, r4
 80005ba:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
 80005be:	00d2      	lsls	r2, r2, #3

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    can_ip->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80005c0:	68c8      	ldr	r0, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80005c2:	888b      	ldrh	r3, [r1, #4]
 80005c4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80005c8:	f502 42c8 	add.w	r2, r2, #25600	; 0x6400
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80005cc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    can_ip->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 80005d0:	f8c2 3240 	str.w	r3, [r2, #576]	; 0x240

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    can_ip->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80005d4:	6888      	ldr	r0, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80005d6:	880b      	ldrh	r3, [r1, #0]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80005d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    can_ip->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 80005dc:	f8c2 3244 	str.w	r3, [r2, #580]	; 0x244
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
  }

  /* Filter Mode */
  if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80005e0:	698b      	ldr	r3, [r1, #24]
 80005e2:	4822      	ldr	r0, [pc, #136]	; (800066c <HAL_CAN_ConfigFilter+0xfc>)
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d135      	bne.n	8000654 <HAL_CAN_ConfigFilter+0xe4>
  {
    /*Id/Mask mode for the filter*/
    can_ip->FM1R &= ~(uint32_t)filternbrbitpos;
 80005e8:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 80005ec:	4023      	ands	r3, r4
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    can_ip->FM1R |= (uint32_t)filternbrbitpos;
 80005ee:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80005f2:	690b      	ldr	r3, [r1, #16]
 80005f4:	4a1d      	ldr	r2, [pc, #116]	; (800066c <HAL_CAN_ConfigFilter+0xfc>)
 80005f6:	bb8b      	cbnz	r3, 800065c <HAL_CAN_ConfigFilter+0xec>
  {
    /* FIFO 0 assignation for the filter */
    can_ip->FFA1R &= ~(uint32_t)filternbrbitpos;
 80005f8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80005fc:	401c      	ands	r4, r3
 80005fe:	f8c0 4214 	str.w	r4, [r0, #532]	; 0x214
    /* FIFO 1 assignation for the filter */
    can_ip->FFA1R |= (uint32_t)filternbrbitpos;
  }
  
  /* Filter activation */
  if (sFilterConfig->FilterActivation == ENABLE)
 8000602:	6a0b      	ldr	r3, [r1, #32]
 8000604:	2b01      	cmp	r3, #1
  {
    can_ip->FA1R |= filternbrbitpos;
 8000606:	bf02      	ittt	eq
 8000608:	f8d2 321c 	ldreq.w	r3, [r2, #540]	; 0x21c
 800060c:	432b      	orreq	r3, r5
 800060e:	f8c2 321c 	streq.w	r3, [r2, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  can_ip->FMR &= ~((uint32_t)CAN_FMR_FINIT);
 8000612:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8000616:	f023 0301 	bic.w	r3, r3, #1
 800061a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  
  /* Return function status */
  return HAL_OK;
}
 800061e:	2000      	movs	r0, #0
 8000620:	bd30      	pop	{r4, r5, pc}
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000622:	2801      	cmp	r0, #1
 8000624:	d1dc      	bne.n	80005e0 <HAL_CAN_ConfigFilter+0x70>
    can_ip->FS1R |= filternbrbitpos;
 8000626:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 800062a:	4328      	orrs	r0, r5
 800062c:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000630:	680b      	ldr	r3, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000632:	8888      	ldrh	r0, [r1, #4]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000634:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000638:	00d3      	lsls	r3, r2, #3
 800063a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800063e:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000642:	898a      	ldrh	r2, [r1, #12]
    can_ip->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8000644:	f8c3 0240 	str.w	r0, [r3, #576]	; 0x240
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000648:	6888      	ldr	r0, [r1, #8]
 800064a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    can_ip->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 800064e:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 8000652:	e7c5      	b.n	80005e0 <HAL_CAN_ConfigFilter+0x70>
    can_ip->FM1R |= (uint32_t)filternbrbitpos;
 8000654:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8000658:	432b      	orrs	r3, r5
 800065a:	e7c8      	b.n	80005ee <HAL_CAN_ConfigFilter+0x7e>
  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO1)
 800065c:	2b01      	cmp	r3, #1
    can_ip->FFA1R |= (uint32_t)filternbrbitpos;
 800065e:	bf02      	ittt	eq
 8000660:	f8d2 3214 	ldreq.w	r3, [r2, #532]	; 0x214
 8000664:	432b      	orreq	r3, r5
 8000666:	f8c2 3214 	streq.w	r3, [r2, #532]	; 0x214
 800066a:	e7ca      	b.n	8000602 <HAL_CAN_ConfigFilter+0x92>
 800066c:	40006400 	.word	0x40006400

08000670 <HAL_CAN_Init>:
{
 8000670:	b570      	push	{r4, r5, r6, lr}
  if(hcan == NULL)
 8000672:	4604      	mov	r4, r0
 8000674:	2800      	cmp	r0, #0
 8000676:	d072      	beq.n	800075e <HAL_CAN_Init+0xee>
  if(hcan->State == HAL_CAN_STATE_RESET)
 8000678:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800067c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000680:	b91b      	cbnz	r3, 800068a <HAL_CAN_Init+0x1a>
    hcan->Lock = HAL_UNLOCKED;
 8000682:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    HAL_CAN_MspInit(hcan);
 8000686:	f001 f885 	bl	8001794 <HAL_CAN_MspInit>
  hcan->State = HAL_CAN_STATE_BUSY;
 800068a:	2302      	movs	r3, #2
 800068c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  hcan->Instance->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 8000690:	6823      	ldr	r3, [r4, #0]
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	f022 0202 	bic.w	r2, r2, #2
 8000698:	601a      	str	r2, [r3, #0]
  hcan->Instance->MCR |= CAN_MCR_INRQ ;
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	f042 0201 	orr.w	r2, r2, #1
 80006a0:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80006a2:	f7ff ff4f 	bl	8000544 <HAL_GetTick>
 80006a6:	4606      	mov	r6, r0
  while((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 80006a8:	6823      	ldr	r3, [r4, #0]
 80006aa:	685d      	ldr	r5, [r3, #4]
 80006ac:	f015 0501 	ands.w	r5, r5, #1
 80006b0:	d057      	beq.n	8000762 <HAL_CAN_Init+0xf2>
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 80006b2:	685a      	ldr	r2, [r3, #4]
 80006b4:	07d1      	lsls	r1, r2, #31
 80006b6:	d54f      	bpl.n	8000758 <HAL_CAN_Init+0xe8>
    if (hcan->Init.TTCM == ENABLE)
 80006b8:	69a2      	ldr	r2, [r4, #24]
 80006ba:	2a01      	cmp	r2, #1
      hcan->Instance->MCR |= CAN_MCR_TTCM;
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	bf0c      	ite	eq
 80006c0:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 80006c4:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80006c8:	601a      	str	r2, [r3, #0]
    if (hcan->Init.ABOM == ENABLE)
 80006ca:	69e2      	ldr	r2, [r4, #28]
 80006cc:	2a01      	cmp	r2, #1
      hcan->Instance->MCR |= CAN_MCR_ABOM;
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	bf0c      	ite	eq
 80006d2:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 80006d6:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80006da:	601a      	str	r2, [r3, #0]
    if (hcan->Init.AWUM == ENABLE)
 80006dc:	6a22      	ldr	r2, [r4, #32]
 80006de:	2a01      	cmp	r2, #1
      hcan->Instance->MCR |= CAN_MCR_AWUM;
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	bf0c      	ite	eq
 80006e4:	f042 0220 	orreq.w	r2, r2, #32
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 80006e8:	f022 0220 	bicne.w	r2, r2, #32
 80006ec:	601a      	str	r2, [r3, #0]
    if (hcan->Init.NART == ENABLE)
 80006ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80006f0:	2a01      	cmp	r2, #1
      hcan->Instance->MCR |= CAN_MCR_NART;
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	bf0c      	ite	eq
 80006f6:	f042 0210 	orreq.w	r2, r2, #16
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_NART;
 80006fa:	f022 0210 	bicne.w	r2, r2, #16
 80006fe:	601a      	str	r2, [r3, #0]
    if (hcan->Init.RFLM == ENABLE)
 8000700:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000702:	2a01      	cmp	r2, #1
      hcan->Instance->MCR |= CAN_MCR_RFLM;
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	bf0c      	ite	eq
 8000708:	f042 0208 	orreq.w	r2, r2, #8
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 800070c:	f022 0208 	bicne.w	r2, r2, #8
 8000710:	601a      	str	r2, [r3, #0]
    if (hcan->Init.TXFP == ENABLE)
 8000712:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000714:	2a01      	cmp	r2, #1
      hcan->Instance->MCR |= CAN_MCR_TXFP;
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	bf0c      	ite	eq
 800071a:	f042 0204 	orreq.w	r2, r2, #4
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 800071e:	f022 0204 	bicne.w	r2, r2, #4
 8000722:	601a      	str	r2, [r3, #0]
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 8000724:	68e1      	ldr	r1, [r4, #12]
 8000726:	68a2      	ldr	r2, [r4, #8]
 8000728:	430a      	orrs	r2, r1
                ((uint32_t)hcan->Init.SJW) | \
 800072a:	6921      	ldr	r1, [r4, #16]
 800072c:	430a      	orrs	r2, r1
                ((uint32_t)hcan->Init.BS1) | \
 800072e:	6961      	ldr	r1, [r4, #20]
 8000730:	430a      	orrs	r2, r1
               ((uint32_t)hcan->Init.Prescaler - 1U);
 8000732:	6861      	ldr	r1, [r4, #4]
 8000734:	3901      	subs	r1, #1
                ((uint32_t)hcan->Init.BS2) | \
 8000736:	430a      	orrs	r2, r1
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 8000738:	61da      	str	r2, [r3, #28]
    hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	f022 0201 	bic.w	r2, r2, #1
 8000740:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000742:	f7ff feff 	bl	8000544 <HAL_GetTick>
 8000746:	4605      	mov	r5, r0
   while((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000748:	6823      	ldr	r3, [r4, #0]
 800074a:	685a      	ldr	r2, [r3, #4]
 800074c:	07d2      	lsls	r2, r2, #31
 800074e:	d413      	bmi.n	8000778 <HAL_CAN_Init+0x108>
    if ((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8000750:	6858      	ldr	r0, [r3, #4]
 8000752:	f010 0001 	ands.w	r0, r0, #1
 8000756:	d01b      	beq.n	8000790 <HAL_CAN_Init+0x120>
    hcan->State = HAL_CAN_STATE_ERROR;
 8000758:	2304      	movs	r3, #4
 800075a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800075e:	2001      	movs	r0, #1
}
 8000760:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
 8000762:	f7ff feef 	bl	8000544 <HAL_GetTick>
 8000766:	1b80      	subs	r0, r0, r6
 8000768:	280a      	cmp	r0, #10
 800076a:	d99d      	bls.n	80006a8 <HAL_CAN_Init+0x38>
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 800076c:	2003      	movs	r0, #3
 800076e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hcan);
 8000772:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      return HAL_TIMEOUT;
 8000776:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
 8000778:	f7ff fee4 	bl	8000544 <HAL_GetTick>
 800077c:	1b40      	subs	r0, r0, r5
 800077e:	280a      	cmp	r0, #10
 8000780:	d9e2      	bls.n	8000748 <HAL_CAN_Init+0xd8>
       hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000782:	2003      	movs	r0, #3
       __HAL_UNLOCK(hcan);
 8000784:	2300      	movs	r3, #0
       hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000786:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
       __HAL_UNLOCK(hcan);
 800078a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
       return HAL_TIMEOUT;
 800078e:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_READY;
 8000790:	2301      	movs	r3, #1
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000792:	6420      	str	r0, [r4, #64]	; 0x40
    hcan->State = HAL_CAN_STATE_READY;
 8000794:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8000798:	bd70      	pop	{r4, r5, r6, pc}
	...

0800079c <HAL_CAN_Transmit>:
  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
  assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
  assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));

  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 800079c:	6802      	ldr	r2, [r0, #0]
{
 800079e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 80007a2:	6893      	ldr	r3, [r2, #8]
 80007a4:	015b      	lsls	r3, r3, #5
{
 80007a6:	4604      	mov	r4, r0
 80007a8:	460f      	mov	r7, r1
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 80007aa:	d406      	bmi.n	80007ba <HAL_CAN_Transmit+0x1e>
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 80007ac:	6893      	ldr	r3, [r2, #8]
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 80007ae:	011d      	lsls	r5, r3, #4
 80007b0:	d403      	bmi.n	80007ba <HAL_CAN_Transmit+0x1e>
     ((hcan->Instance->TSR&CAN_TSR_TME2) == CAN_TSR_TME2))
 80007b2:	6893      	ldr	r3, [r2, #8]
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 80007b4:	00d8      	lsls	r0, r3, #3
 80007b6:	f140 80b1 	bpl.w	800091c <HAL_CAN_Transmit+0x180>
  {  
    /* Process locked */
    __HAL_LOCK(hcan);
 80007ba:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80007be:	2b01      	cmp	r3, #1
 80007c0:	f000 80b2 	beq.w	8000928 <HAL_CAN_Transmit+0x18c>
 80007c4:	2301      	movs	r3, #1
 80007c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  
    /* Change CAN state */
    switch(hcan->State)
 80007ca:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	2b32      	cmp	r3, #50	; 0x32
 80007d2:	d066      	beq.n	80008a2 <HAL_CAN_Transmit+0x106>
 80007d4:	2b62      	cmp	r3, #98	; 0x62
 80007d6:	d066      	beq.n	80008a6 <HAL_CAN_Transmit+0x10a>
 80007d8:	2b22      	cmp	r3, #34	; 0x22
 80007da:	d166      	bne.n	80008aa <HAL_CAN_Transmit+0x10e>
    {
      case(HAL_CAN_STATE_BUSY_RX0):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 80007dc:	2342      	movs	r3, #66	; 0x42
          break;
      case(HAL_CAN_STATE_BUSY_RX0_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
          break;
      default: /* HAL_CAN_STATE_READY */
          hcan->State = HAL_CAN_STATE_BUSY_TX;
 80007de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          break;
    }
  
    /* Select one empty transmit mailbox */
    if ((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 80007e2:	6893      	ldr	r3, [r2, #8]
 80007e4:	0159      	lsls	r1, r3, #5
 80007e6:	d462      	bmi.n	80008ae <HAL_CAN_Transmit+0x112>
    {
      transmitmailbox = CAN_TXMAILBOX_0;
    }
    else if ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 80007e8:	6893      	ldr	r3, [r2, #8]
    {
      transmitmailbox = CAN_TXMAILBOX_1;
    }
    else
    {
      transmitmailbox = CAN_TXMAILBOX_2;
 80007ea:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80007ee:	bf14      	ite	ne
 80007f0:	2601      	movne	r6, #1
 80007f2:	2602      	moveq	r6, #2
 80007f4:	ea4f 1e06 	mov.w	lr, r6, lsl #4
 80007f8:	eb02 030e 	add.w	r3, r2, lr
    }

    /* Set up the Id */
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 80007fc:	6b20      	ldr	r0, [r4, #48]	; 0x30
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 80007fe:	f8d3 1180 	ldr.w	r1, [r3, #384]	; 0x180
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 8000802:	6885      	ldr	r5, [r0, #8]
 8000804:	f8d0 c00c 	ldr.w	ip, [r0, #12]
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 8000808:	f001 0101 	and.w	r1, r1, #1
 800080c:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 8000810:	2d00      	cmp	r5, #0
 8000812:	d14e      	bne.n	80008b2 <HAL_CAN_Transmit+0x116>
    {
      assert_param(IS_CAN_STDID(hcan->pTxMsg->StdId));  
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << 21U) | \
 8000814:	6805      	ldr	r5, [r0, #0]
 8000816:	f8d3 1180 	ldr.w	r1, [r3, #384]	; 0x180
 800081a:	ea4c 5545 	orr.w	r5, ip, r5, lsl #21
 800081e:	430d      	orrs	r5, r1
                                                  hcan->pTxMsg->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(hcan->pTxMsg->ExtId));
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << 3U) | \
 8000820:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
                                                  hcan->pTxMsg->RTR);
    }
    
    /* Set up the DLC */
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= (uint32_t)0xFFFFFFF0U;
 8000824:	f8d3 5184 	ldr.w	r5, [r3, #388]	; 0x184
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
 8000828:	6901      	ldr	r1, [r0, #16]
  
    /* Get tick */
    tickstart = HAL_GetTick();
  
    /* Check End of transmission flag */
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 800082a:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8000934 <HAL_CAN_Transmit+0x198>
 800082e:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8000938 <HAL_CAN_Transmit+0x19c>
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
 8000832:	f001 010f 	and.w	r1, r1, #15
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= (uint32_t)0xFFFFFFF0U;
 8000836:	f025 050f 	bic.w	r5, r5, #15
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
 800083a:	6101      	str	r1, [r0, #16]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= (uint32_t)0xFFFFFFF0U;
 800083c:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 8000840:	f8d3 5184 	ldr.w	r5, [r3, #388]	; 0x184
 8000844:	4329      	orrs	r1, r5
 8000846:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
    hcan->Instance->sTxMailBox[transmitmailbox].TDLR = (((uint32_t)hcan->pTxMsg->Data[3U] << 24U) | 
 800084a:	4472      	add	r2, lr
                                             ((uint32_t)hcan->pTxMsg->Data[1U] << 8U) | 
 800084c:	6941      	ldr	r1, [r0, #20]
    hcan->Instance->sTxMailBox[transmitmailbox].TDLR = (((uint32_t)hcan->pTxMsg->Data[3U] << 24U) | 
 800084e:	f8c2 1188 	str.w	r1, [r2, #392]	; 0x188
                                             ((uint32_t)hcan->pTxMsg->Data[5U] << 8U) |
 8000852:	6981      	ldr	r1, [r0, #24]
    hcan->Instance->sTxMailBox[transmitmailbox].TDHR = (((uint32_t)hcan->pTxMsg->Data[7U] << 24U) | 
 8000854:	f8c2 118c 	str.w	r1, [r2, #396]	; 0x18c
    hcan->Instance->sTxMailBox[transmitmailbox].TIR |= CAN_TI0R_TXRQ;
 8000858:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800085c:	f042 0201 	orr.w	r2, r2, #1
 8000860:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    tickstart = HAL_GetTick();
 8000864:	f7ff fe6e 	bl	8000544 <HAL_GetTick>
 8000868:	4605      	mov	r5, r0
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 800086a:	4a31      	ldr	r2, [pc, #196]	; (8000930 <HAL_CAN_Transmit+0x194>)
 800086c:	6823      	ldr	r3, [r4, #0]
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	2e00      	cmp	r6, #0
 8000872:	d145      	bne.n	8000900 <HAL_CAN_Transmit+0x164>
 8000874:	ea32 0303 	bics.w	r3, r2, r3
 8000878:	bf14      	ite	ne
 800087a:	2301      	movne	r3, #1
 800087c:	2300      	moveq	r3, #0
 800087e:	bb13      	cbnz	r3, 80008c6 <HAL_CAN_Transmit+0x12a>
        }
      }
    }

    /* Change CAN state */
    switch(hcan->State)
 8000880:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b52      	cmp	r3, #82	; 0x52
 8000888:	d042      	beq.n	8000910 <HAL_CAN_Transmit+0x174>
 800088a:	2b72      	cmp	r3, #114	; 0x72
 800088c:	d042      	beq.n	8000914 <HAL_CAN_Transmit+0x178>
 800088e:	2b42      	cmp	r3, #66	; 0x42
 8000890:	d142      	bne.n	8000918 <HAL_CAN_Transmit+0x17c>
    {
      case(HAL_CAN_STATE_BUSY_TX_RX0):
          hcan->State = HAL_CAN_STATE_BUSY_RX0;
 8000892:	2322      	movs	r3, #34	; 0x22
          hcan->State = HAL_CAN_STATE_READY;
          break;
    }

    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 8000894:	2000      	movs	r0, #0
          hcan->State = HAL_CAN_STATE_READY;
 8000896:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hcan);
 800089a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    
    /* Return function status */
    return HAL_OK;
 800089e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 80008a2:	2352      	movs	r3, #82	; 0x52
 80008a4:	e79b      	b.n	80007de <HAL_CAN_Transmit+0x42>
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 80008a6:	2372      	movs	r3, #114	; 0x72
 80008a8:	e799      	b.n	80007de <HAL_CAN_Transmit+0x42>
          hcan->State = HAL_CAN_STATE_BUSY_TX;
 80008aa:	2312      	movs	r3, #18
 80008ac:	e797      	b.n	80007de <HAL_CAN_Transmit+0x42>
      transmitmailbox = CAN_TXMAILBOX_0;
 80008ae:	2600      	movs	r6, #0
 80008b0:	e7a0      	b.n	80007f4 <HAL_CAN_Transmit+0x58>
                                                  hcan->pTxMsg->IDE | \
 80008b2:	6841      	ldr	r1, [r0, #4]
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << 3U) | \
 80008b4:	f8d3 8180 	ldr.w	r8, [r3, #384]	; 0x180
                                                  hcan->pTxMsg->IDE | \
 80008b8:	ea45 050c 	orr.w	r5, r5, ip
 80008bc:	ea45 05c1 	orr.w	r5, r5, r1, lsl #3
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << 3U) | \
 80008c0:	ea45 0508 	orr.w	r5, r5, r8
 80008c4:	e7ac      	b.n	8000820 <HAL_CAN_Transmit+0x84>
      if(Timeout != HAL_MAX_DELAY)
 80008c6:	1c7b      	adds	r3, r7, #1
 80008c8:	d0d0      	beq.n	800086c <HAL_CAN_Transmit+0xd0>
       if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80008ca:	b95f      	cbnz	r7, 80008e4 <HAL_CAN_Transmit+0x148>
         hcan->State = HAL_CAN_STATE_TIMEOUT;
 80008cc:	2303      	movs	r3, #3
 80008ce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80008d2:	6823      	ldr	r3, [r4, #0]
         __HAL_CAN_CANCEL_TRANSMIT(hcan, transmitmailbox);
 80008d4:	b166      	cbz	r6, 80008f0 <HAL_CAN_Transmit+0x154>
 80008d6:	2e01      	cmp	r6, #1
 80008d8:	bf0c      	ite	eq
 80008da:	f44f 4200 	moveq.w	r2, #32768	; 0x8000
 80008de:	f44f 0200 	movne.w	r2, #8388608	; 0x800000
 80008e2:	e006      	b.n	80008f2 <HAL_CAN_Transmit+0x156>
       if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80008e4:	f7ff fe2e 	bl	8000544 <HAL_GetTick>
 80008e8:	1b40      	subs	r0, r0, r5
 80008ea:	4287      	cmp	r7, r0
 80008ec:	d2bd      	bcs.n	800086a <HAL_CAN_Transmit+0xce>
 80008ee:	e7ed      	b.n	80008cc <HAL_CAN_Transmit+0x130>
         __HAL_CAN_CANCEL_TRANSMIT(hcan, transmitmailbox);
 80008f0:	2280      	movs	r2, #128	; 0x80
 80008f2:	609a      	str	r2, [r3, #8]
         __HAL_UNLOCK(hcan);
 80008f4:	2300      	movs	r3, #0
 80008f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
         return HAL_TIMEOUT;
 80008fa:	2003      	movs	r0, #3
 80008fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 8000900:	2e01      	cmp	r6, #1
 8000902:	d102      	bne.n	800090a <HAL_CAN_Transmit+0x16e>
 8000904:	ea39 0303 	bics.w	r3, r9, r3
 8000908:	e7b6      	b.n	8000878 <HAL_CAN_Transmit+0xdc>
 800090a:	ea38 0303 	bics.w	r3, r8, r3
 800090e:	e7b3      	b.n	8000878 <HAL_CAN_Transmit+0xdc>
          hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8000910:	2332      	movs	r3, #50	; 0x32
 8000912:	e7bf      	b.n	8000894 <HAL_CAN_Transmit+0xf8>
          hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 8000914:	2362      	movs	r3, #98	; 0x62
 8000916:	e7bd      	b.n	8000894 <HAL_CAN_Transmit+0xf8>
          hcan->State = HAL_CAN_STATE_READY;
 8000918:	2301      	movs	r3, #1
 800091a:	e7bb      	b.n	8000894 <HAL_CAN_Transmit+0xf8>
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_ERROR; 
 800091c:	2304      	movs	r3, #4
 800091e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

    /* Return function status */
    return HAL_ERROR;
 8000922:	2001      	movs	r0, #1
 8000924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hcan);
 8000928:	2002      	movs	r0, #2
  }
}
 800092a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800092e:	bf00      	nop
 8000930:	04000003 	.word	0x04000003
 8000934:	10030000 	.word	0x10030000
 8000938:	08000300 	.word	0x08000300

0800093c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800093c:	4a07      	ldr	r2, [pc, #28]	; (800095c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800093e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000940:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000944:	041b      	lsls	r3, r3, #16
 8000946:	0c1b      	lsrs	r3, r3, #16
 8000948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800094c:	0200      	lsls	r0, r0, #8
 800094e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000952:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000956:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000958:	60d3      	str	r3, [r2, #12]
 800095a:	4770      	bx	lr
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000960:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000962:	b530      	push	{r4, r5, lr}
 8000964:	68dc      	ldr	r4, [r3, #12]
 8000966:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800096a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800096e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000970:	2b04      	cmp	r3, #4
 8000972:	bf28      	it	cs
 8000974:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000976:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000978:	f04f 0501 	mov.w	r5, #1
 800097c:	fa05 f303 	lsl.w	r3, r5, r3
 8000980:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000984:	bf8c      	ite	hi
 8000986:	3c03      	subhi	r4, #3
 8000988:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800098a:	4019      	ands	r1, r3
 800098c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800098e:	fa05 f404 	lsl.w	r4, r5, r4
 8000992:	3c01      	subs	r4, #1
 8000994:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000996:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000998:	ea42 0201 	orr.w	r2, r2, r1
 800099c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a0:	bfaf      	iteee	ge
 80009a2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a6:	f000 000f 	andlt.w	r0, r0, #15
 80009aa:	4b06      	ldrlt	r3, [pc, #24]	; (80009c4 <HAL_NVIC_SetPriority+0x64>)
 80009ac:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ae:	bfa5      	ittet	ge
 80009b0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80009b4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80009bc:	bd30      	pop	{r4, r5, pc}
 80009be:	bf00      	nop
 80009c0:	e000ed00 	.word	0xe000ed00
 80009c4:	e000ed14 	.word	0xe000ed14

080009c8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009c8:	3801      	subs	r0, #1
 80009ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ce:	d20a      	bcs.n	80009e6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d2:	4a07      	ldr	r2, [pc, #28]	; (80009f0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009d4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d6:	21f0      	movs	r1, #240	; 0xf0
 80009d8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009dc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009de:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009e0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80009e6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	e000e010 	.word	0xe000e010
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80009f4:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80009f6:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80009f8:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80009fa:	bf0c      	ite	eq
 80009fc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000a00:	f022 0204 	bicne.w	r2, r2, #4
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	4770      	bx	lr
 8000a08:	e000e010 	.word	0xe000e010

08000a0c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000a0c:	4770      	bx	lr

08000a0e <HAL_SYSTICK_IRQHandler>:
{
 8000a0e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000a10:	f7ff fffc 	bl	8000a0c <HAL_SYSTICK_Callback>
 8000a14:	bd08      	pop	{r3, pc}
	...

08000a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a1c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a1e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a20:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000bd0 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a24:	4a68      	ldr	r2, [pc, #416]	; (8000bc8 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a26:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000bd4 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a2a:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a2c:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000a2e:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a32:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000a34:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a38:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000a3c:	45b6      	cmp	lr, r6
 8000a3e:	f040 80ae 	bne.w	8000b9e <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a42:	684c      	ldr	r4, [r1, #4]
 8000a44:	f024 0710 	bic.w	r7, r4, #16
 8000a48:	2f02      	cmp	r7, #2
 8000a4a:	d116      	bne.n	8000a7a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000a4c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000a50:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a54:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000a58:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a5c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000a60:	f04f 0c0f 	mov.w	ip, #15
 8000a64:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000a68:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a6c:	690d      	ldr	r5, [r1, #16]
 8000a6e:	fa05 f50b 	lsl.w	r5, r5, fp
 8000a72:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000a76:	f8ca 5020 	str.w	r5, [sl, #32]
 8000a7a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a7e:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000a80:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a84:	fa05 f50a 	lsl.w	r5, r5, sl
 8000a88:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a8a:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a8e:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a92:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a96:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a98:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a9c:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000a9e:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000aa2:	d811      	bhi.n	8000ac8 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000aa4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000aa6:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000aaa:	68cf      	ldr	r7, [r1, #12]
 8000aac:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000ab0:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000ab4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000ab6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ab8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000abc:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000ac0:	409f      	lsls	r7, r3
 8000ac2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000ac6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000ac8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000aca:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000acc:	688f      	ldr	r7, [r1, #8]
 8000ace:	fa07 f70a 	lsl.w	r7, r7, sl
 8000ad2:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000ad4:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ad6:	00e5      	lsls	r5, r4, #3
 8000ad8:	d561      	bpl.n	8000b9e <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ada:	f04f 0b00 	mov.w	fp, #0
 8000ade:	f8cd b00c 	str.w	fp, [sp, #12]
 8000ae2:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ae6:	4d39      	ldr	r5, [pc, #228]	; (8000bcc <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae8:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000aec:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000af0:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000af4:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000af8:	9703      	str	r7, [sp, #12]
 8000afa:	9f03      	ldr	r7, [sp, #12]
 8000afc:	f023 0703 	bic.w	r7, r3, #3
 8000b00:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000b04:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b08:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000b0c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b10:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000b14:	f04f 0e0f 	mov.w	lr, #15
 8000b18:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b1c:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b1e:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b22:	d043      	beq.n	8000bac <HAL_GPIO_Init+0x194>
 8000b24:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b28:	42a8      	cmp	r0, r5
 8000b2a:	d041      	beq.n	8000bb0 <HAL_GPIO_Init+0x198>
 8000b2c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b30:	42a8      	cmp	r0, r5
 8000b32:	d03f      	beq.n	8000bb4 <HAL_GPIO_Init+0x19c>
 8000b34:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b38:	42a8      	cmp	r0, r5
 8000b3a:	d03d      	beq.n	8000bb8 <HAL_GPIO_Init+0x1a0>
 8000b3c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b40:	42a8      	cmp	r0, r5
 8000b42:	d03b      	beq.n	8000bbc <HAL_GPIO_Init+0x1a4>
 8000b44:	4548      	cmp	r0, r9
 8000b46:	d03b      	beq.n	8000bc0 <HAL_GPIO_Init+0x1a8>
 8000b48:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000b4c:	42a8      	cmp	r0, r5
 8000b4e:	d039      	beq.n	8000bc4 <HAL_GPIO_Init+0x1ac>
 8000b50:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b54:	42a8      	cmp	r0, r5
 8000b56:	bf14      	ite	ne
 8000b58:	2508      	movne	r5, #8
 8000b5a:	2507      	moveq	r5, #7
 8000b5c:	fa05 f50c 	lsl.w	r5, r5, ip
 8000b60:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b64:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000b66:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000b68:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b6a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000b6e:	bf0c      	ite	eq
 8000b70:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000b72:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000b74:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000b76:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b78:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000b7c:	bf0c      	ite	eq
 8000b7e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000b80:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000b82:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b84:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b86:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000b8a:	bf0c      	ite	eq
 8000b8c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000b8e:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000b90:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000b92:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b94:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000b96:	bf54      	ite	pl
 8000b98:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000b9a:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000b9c:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	2b10      	cmp	r3, #16
 8000ba2:	f47f af44 	bne.w	8000a2e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000ba6:	b005      	add	sp, #20
 8000ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bac:	465d      	mov	r5, fp
 8000bae:	e7d5      	b.n	8000b5c <HAL_GPIO_Init+0x144>
 8000bb0:	2501      	movs	r5, #1
 8000bb2:	e7d3      	b.n	8000b5c <HAL_GPIO_Init+0x144>
 8000bb4:	2502      	movs	r5, #2
 8000bb6:	e7d1      	b.n	8000b5c <HAL_GPIO_Init+0x144>
 8000bb8:	2503      	movs	r5, #3
 8000bba:	e7cf      	b.n	8000b5c <HAL_GPIO_Init+0x144>
 8000bbc:	2504      	movs	r5, #4
 8000bbe:	e7cd      	b.n	8000b5c <HAL_GPIO_Init+0x144>
 8000bc0:	2505      	movs	r5, #5
 8000bc2:	e7cb      	b.n	8000b5c <HAL_GPIO_Init+0x144>
 8000bc4:	2506      	movs	r5, #6
 8000bc6:	e7c9      	b.n	8000b5c <HAL_GPIO_Init+0x144>
 8000bc8:	40013c00 	.word	0x40013c00
 8000bcc:	40020000 	.word	0x40020000
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40021400 	.word	0x40021400

08000bd8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bd8:	b10a      	cbz	r2, 8000bde <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bda:	6181      	str	r1, [r0, #24]
 8000bdc:	4770      	bx	lr
 8000bde:	0409      	lsls	r1, r1, #16
 8000be0:	e7fb      	b.n	8000bda <HAL_GPIO_WritePin+0x2>
	...

08000be4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000be4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000be6:	4604      	mov	r4, r0
 8000be8:	b910      	cbnz	r0, 8000bf0 <HAL_RCC_OscConfig+0xc>
  {
    return HAL_ERROR;
 8000bea:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000bec:	b003      	add	sp, #12
 8000bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bf0:	6803      	ldr	r3, [r0, #0]
 8000bf2:	07d8      	lsls	r0, r3, #31
 8000bf4:	d43b      	bmi.n	8000c6e <HAL_RCC_OscConfig+0x8a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bf6:	6823      	ldr	r3, [r4, #0]
 8000bf8:	0799      	lsls	r1, r3, #30
 8000bfa:	f100 8084 	bmi.w	8000d06 <HAL_RCC_OscConfig+0x122>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bfe:	6823      	ldr	r3, [r4, #0]
 8000c00:	071e      	lsls	r6, r3, #28
 8000c02:	f100 80c6 	bmi.w	8000d92 <HAL_RCC_OscConfig+0x1ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c06:	6823      	ldr	r3, [r4, #0]
 8000c08:	075d      	lsls	r5, r3, #29
 8000c0a:	d52a      	bpl.n	8000c62 <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_PWR_CLK_ENABLE();
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	9301      	str	r3, [sp, #4]
 8000c10:	4baa      	ldr	r3, [pc, #680]	; (8000ebc <HAL_RCC_OscConfig+0x2d8>)
    PWR->CR |= PWR_CR_DBP;
 8000c12:	4dab      	ldr	r5, [pc, #684]	; (8000ec0 <HAL_RCC_OscConfig+0x2dc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000c14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c16:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c1a:	641a      	str	r2, [r3, #64]	; 0x40
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c22:	9301      	str	r3, [sp, #4]
 8000c24:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8000c26:	682b      	ldr	r3, [r5, #0]
 8000c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c2c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8000c2e:	f7ff fc89 	bl	8000544 <HAL_GetTick>
 8000c32:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000c34:	682b      	ldr	r3, [r5, #0]
 8000c36:	05da      	lsls	r2, r3, #23
 8000c38:	f140 80cd 	bpl.w	8000dd6 <HAL_RCC_OscConfig+0x1f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c3c:	68a3      	ldr	r3, [r4, #8]
 8000c3e:	4d9f      	ldr	r5, [pc, #636]	; (8000ebc <HAL_RCC_OscConfig+0x2d8>)
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	f040 80cf 	bne.w	8000de4 <HAL_RCC_OscConfig+0x200>
 8000c46:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000c4e:	f7ff fc79 	bl	8000544 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c52:	4d9a      	ldr	r5, [pc, #616]	; (8000ebc <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8000c54:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c56:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c5a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c5c:	079b      	lsls	r3, r3, #30
 8000c5e:	f140 80e2 	bpl.w	8000e26 <HAL_RCC_OscConfig+0x242>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c62:	69a2      	ldr	r2, [r4, #24]
 8000c64:	2a00      	cmp	r2, #0
 8000c66:	f040 80e5 	bne.w	8000e34 <HAL_RCC_OscConfig+0x250>
  return HAL_OK;
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	e7be      	b.n	8000bec <HAL_RCC_OscConfig+0x8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c6e:	4b93      	ldr	r3, [pc, #588]	; (8000ebc <HAL_RCC_OscConfig+0x2d8>)
 8000c70:	689a      	ldr	r2, [r3, #8]
 8000c72:	f002 020c 	and.w	r2, r2, #12
 8000c76:	2a04      	cmp	r2, #4
 8000c78:	d007      	beq.n	8000c8a <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c7a:	689a      	ldr	r2, [r3, #8]
 8000c7c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c80:	2a08      	cmp	r2, #8
 8000c82:	d10a      	bne.n	8000c9a <HAL_RCC_OscConfig+0xb6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	025a      	lsls	r2, r3, #9
 8000c88:	d507      	bpl.n	8000c9a <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c8a:	4b8c      	ldr	r3, [pc, #560]	; (8000ebc <HAL_RCC_OscConfig+0x2d8>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	039b      	lsls	r3, r3, #14
 8000c90:	d5b1      	bpl.n	8000bf6 <HAL_RCC_OscConfig+0x12>
 8000c92:	6863      	ldr	r3, [r4, #4]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d1ae      	bne.n	8000bf6 <HAL_RCC_OscConfig+0x12>
 8000c98:	e7a7      	b.n	8000bea <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c9a:	6863      	ldr	r3, [r4, #4]
 8000c9c:	4d87      	ldr	r5, [pc, #540]	; (8000ebc <HAL_RCC_OscConfig+0x2d8>)
 8000c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ca2:	d111      	bne.n	8000cc8 <HAL_RCC_OscConfig+0xe4>
 8000ca4:	682b      	ldr	r3, [r5, #0]
 8000ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000caa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000cac:	f7ff fc4a 	bl	8000544 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cb0:	4d82      	ldr	r5, [pc, #520]	; (8000ebc <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8000cb2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cb4:	682b      	ldr	r3, [r5, #0]
 8000cb6:	039f      	lsls	r7, r3, #14
 8000cb8:	d49d      	bmi.n	8000bf6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cba:	f7ff fc43 	bl	8000544 <HAL_GetTick>
 8000cbe:	1b80      	subs	r0, r0, r6
 8000cc0:	2864      	cmp	r0, #100	; 0x64
 8000cc2:	d9f7      	bls.n	8000cb4 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	e791      	b.n	8000bec <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ccc:	d104      	bne.n	8000cd8 <HAL_RCC_OscConfig+0xf4>
 8000cce:	682b      	ldr	r3, [r5, #0]
 8000cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cd4:	602b      	str	r3, [r5, #0]
 8000cd6:	e7e5      	b.n	8000ca4 <HAL_RCC_OscConfig+0xc0>
 8000cd8:	682a      	ldr	r2, [r5, #0]
 8000cda:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000cde:	602a      	str	r2, [r5, #0]
 8000ce0:	682a      	ldr	r2, [r5, #0]
 8000ce2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ce6:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d1df      	bne.n	8000cac <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 8000cec:	f7ff fc2a 	bl	8000544 <HAL_GetTick>
 8000cf0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cf2:	682b      	ldr	r3, [r5, #0]
 8000cf4:	0398      	lsls	r0, r3, #14
 8000cf6:	f57f af7e 	bpl.w	8000bf6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cfa:	f7ff fc23 	bl	8000544 <HAL_GetTick>
 8000cfe:	1b80      	subs	r0, r0, r6
 8000d00:	2864      	cmp	r0, #100	; 0x64
 8000d02:	d9f6      	bls.n	8000cf2 <HAL_RCC_OscConfig+0x10e>
 8000d04:	e7de      	b.n	8000cc4 <HAL_RCC_OscConfig+0xe0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d06:	4b6d      	ldr	r3, [pc, #436]	; (8000ebc <HAL_RCC_OscConfig+0x2d8>)
 8000d08:	689a      	ldr	r2, [r3, #8]
 8000d0a:	f012 0f0c 	tst.w	r2, #12
 8000d0e:	d007      	beq.n	8000d20 <HAL_RCC_OscConfig+0x13c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d10:	689a      	ldr	r2, [r3, #8]
 8000d12:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d16:	2a08      	cmp	r2, #8
 8000d18:	d112      	bne.n	8000d40 <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	0259      	lsls	r1, r3, #9
 8000d1e:	d40f      	bmi.n	8000d40 <HAL_RCC_OscConfig+0x15c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d20:	4b66      	ldr	r3, [pc, #408]	; (8000ebc <HAL_RCC_OscConfig+0x2d8>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	0792      	lsls	r2, r2, #30
 8000d26:	d503      	bpl.n	8000d30 <HAL_RCC_OscConfig+0x14c>
 8000d28:	68e2      	ldr	r2, [r4, #12]
 8000d2a:	2a01      	cmp	r2, #1
 8000d2c:	f47f af5d 	bne.w	8000bea <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	6921      	ldr	r1, [r4, #16]
 8000d34:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000d38:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000d3c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d3e:	e75e      	b.n	8000bfe <HAL_RCC_OscConfig+0x1a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d40:	68e2      	ldr	r2, [r4, #12]
 8000d42:	4b60      	ldr	r3, [pc, #384]	; (8000ec4 <HAL_RCC_OscConfig+0x2e0>)
 8000d44:	b1b2      	cbz	r2, 8000d74 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 8000d46:	2201      	movs	r2, #1
 8000d48:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d4a:	f7ff fbfb 	bl	8000544 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d4e:	4d5b      	ldr	r5, [pc, #364]	; (8000ebc <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8000d50:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d52:	682b      	ldr	r3, [r5, #0]
 8000d54:	079b      	lsls	r3, r3, #30
 8000d56:	d507      	bpl.n	8000d68 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d58:	682b      	ldr	r3, [r5, #0]
 8000d5a:	6922      	ldr	r2, [r4, #16]
 8000d5c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d60:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d64:	602b      	str	r3, [r5, #0]
 8000d66:	e74a      	b.n	8000bfe <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d68:	f7ff fbec 	bl	8000544 <HAL_GetTick>
 8000d6c:	1b80      	subs	r0, r0, r6
 8000d6e:	2802      	cmp	r0, #2
 8000d70:	d9ef      	bls.n	8000d52 <HAL_RCC_OscConfig+0x16e>
 8000d72:	e7a7      	b.n	8000cc4 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8000d74:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d76:	f7ff fbe5 	bl	8000544 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d7a:	4d50      	ldr	r5, [pc, #320]	; (8000ebc <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8000d7c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d7e:	682b      	ldr	r3, [r5, #0]
 8000d80:	079f      	lsls	r7, r3, #30
 8000d82:	f57f af3c 	bpl.w	8000bfe <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d86:	f7ff fbdd 	bl	8000544 <HAL_GetTick>
 8000d8a:	1b80      	subs	r0, r0, r6
 8000d8c:	2802      	cmp	r0, #2
 8000d8e:	d9f6      	bls.n	8000d7e <HAL_RCC_OscConfig+0x19a>
 8000d90:	e798      	b.n	8000cc4 <HAL_RCC_OscConfig+0xe0>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d92:	6962      	ldr	r2, [r4, #20]
 8000d94:	4b4c      	ldr	r3, [pc, #304]	; (8000ec8 <HAL_RCC_OscConfig+0x2e4>)
 8000d96:	b17a      	cbz	r2, 8000db8 <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_LSI_ENABLE();
 8000d98:	2201      	movs	r2, #1
 8000d9a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000d9c:	f7ff fbd2 	bl	8000544 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000da0:	4d46      	ldr	r5, [pc, #280]	; (8000ebc <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8000da2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000da4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000da6:	0798      	lsls	r0, r3, #30
 8000da8:	f53f af2d 	bmi.w	8000c06 <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dac:	f7ff fbca 	bl	8000544 <HAL_GetTick>
 8000db0:	1b80      	subs	r0, r0, r6
 8000db2:	2802      	cmp	r0, #2
 8000db4:	d9f6      	bls.n	8000da4 <HAL_RCC_OscConfig+0x1c0>
 8000db6:	e785      	b.n	8000cc4 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_LSI_DISABLE();
 8000db8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000dba:	f7ff fbc3 	bl	8000544 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dbe:	4d3f      	ldr	r5, [pc, #252]	; (8000ebc <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8000dc0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dc2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000dc4:	0799      	lsls	r1, r3, #30
 8000dc6:	f57f af1e 	bpl.w	8000c06 <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dca:	f7ff fbbb 	bl	8000544 <HAL_GetTick>
 8000dce:	1b80      	subs	r0, r0, r6
 8000dd0:	2802      	cmp	r0, #2
 8000dd2:	d9f6      	bls.n	8000dc2 <HAL_RCC_OscConfig+0x1de>
 8000dd4:	e776      	b.n	8000cc4 <HAL_RCC_OscConfig+0xe0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000dd6:	f7ff fbb5 	bl	8000544 <HAL_GetTick>
 8000dda:	1b80      	subs	r0, r0, r6
 8000ddc:	2802      	cmp	r0, #2
 8000dde:	f67f af29 	bls.w	8000c34 <HAL_RCC_OscConfig+0x50>
 8000de2:	e76f      	b.n	8000cc4 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000de4:	2b05      	cmp	r3, #5
 8000de6:	d104      	bne.n	8000df2 <HAL_RCC_OscConfig+0x20e>
 8000de8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000dea:	f043 0304 	orr.w	r3, r3, #4
 8000dee:	672b      	str	r3, [r5, #112]	; 0x70
 8000df0:	e729      	b.n	8000c46 <HAL_RCC_OscConfig+0x62>
 8000df2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000df4:	f022 0201 	bic.w	r2, r2, #1
 8000df8:	672a      	str	r2, [r5, #112]	; 0x70
 8000dfa:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000dfc:	f022 0204 	bic.w	r2, r2, #4
 8000e00:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f47f af23 	bne.w	8000c4e <HAL_RCC_OscConfig+0x6a>
      tickstart = HAL_GetTick();
 8000e08:	f7ff fb9c 	bl	8000544 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e0c:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000e10:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e12:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e14:	0798      	lsls	r0, r3, #30
 8000e16:	f57f af24 	bpl.w	8000c62 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e1a:	f7ff fb93 	bl	8000544 <HAL_GetTick>
 8000e1e:	1b80      	subs	r0, r0, r6
 8000e20:	42b8      	cmp	r0, r7
 8000e22:	d9f6      	bls.n	8000e12 <HAL_RCC_OscConfig+0x22e>
 8000e24:	e74e      	b.n	8000cc4 <HAL_RCC_OscConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e26:	f7ff fb8d 	bl	8000544 <HAL_GetTick>
 8000e2a:	1b80      	subs	r0, r0, r6
 8000e2c:	42b8      	cmp	r0, r7
 8000e2e:	f67f af14 	bls.w	8000c5a <HAL_RCC_OscConfig+0x76>
 8000e32:	e747      	b.n	8000cc4 <HAL_RCC_OscConfig+0xe0>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e34:	4d21      	ldr	r5, [pc, #132]	; (8000ebc <HAL_RCC_OscConfig+0x2d8>)
 8000e36:	68ab      	ldr	r3, [r5, #8]
 8000e38:	f003 030c 	and.w	r3, r3, #12
 8000e3c:	2b08      	cmp	r3, #8
 8000e3e:	f43f aed4 	beq.w	8000bea <HAL_RCC_OscConfig+0x6>
 8000e42:	4e22      	ldr	r6, [pc, #136]	; (8000ecc <HAL_RCC_OscConfig+0x2e8>)
 8000e44:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e46:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000e48:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e4a:	d12a      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x2be>
        tickstart = HAL_GetTick();
 8000e4c:	f7ff fb7a 	bl	8000544 <HAL_GetTick>
 8000e50:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e52:	682b      	ldr	r3, [r5, #0]
 8000e54:	0199      	lsls	r1, r3, #6
 8000e56:	d41e      	bmi.n	8000e96 <HAL_RCC_OscConfig+0x2b2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000e58:	6a22      	ldr	r2, [r4, #32]
 8000e5a:	69e3      	ldr	r3, [r4, #28]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000e60:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000e64:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000e66:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000e6a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e6c:	4c13      	ldr	r4, [pc, #76]	; (8000ebc <HAL_RCC_OscConfig+0x2d8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000e6e:	0852      	lsrs	r2, r2, #1
 8000e70:	3a01      	subs	r2, #1
 8000e72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e76:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000e78:	2301      	movs	r3, #1
 8000e7a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000e7c:	f7ff fb62 	bl	8000544 <HAL_GetTick>
 8000e80:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e82:	6823      	ldr	r3, [r4, #0]
 8000e84:	019a      	lsls	r2, r3, #6
 8000e86:	f53f aef0 	bmi.w	8000c6a <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e8a:	f7ff fb5b 	bl	8000544 <HAL_GetTick>
 8000e8e:	1b40      	subs	r0, r0, r5
 8000e90:	2802      	cmp	r0, #2
 8000e92:	d9f6      	bls.n	8000e82 <HAL_RCC_OscConfig+0x29e>
 8000e94:	e716      	b.n	8000cc4 <HAL_RCC_OscConfig+0xe0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e96:	f7ff fb55 	bl	8000544 <HAL_GetTick>
 8000e9a:	1bc0      	subs	r0, r0, r7
 8000e9c:	2802      	cmp	r0, #2
 8000e9e:	d9d8      	bls.n	8000e52 <HAL_RCC_OscConfig+0x26e>
 8000ea0:	e710      	b.n	8000cc4 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 8000ea2:	f7ff fb4f 	bl	8000544 <HAL_GetTick>
 8000ea6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ea8:	682b      	ldr	r3, [r5, #0]
 8000eaa:	019b      	lsls	r3, r3, #6
 8000eac:	f57f aedd 	bpl.w	8000c6a <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000eb0:	f7ff fb48 	bl	8000544 <HAL_GetTick>
 8000eb4:	1b00      	subs	r0, r0, r4
 8000eb6:	2802      	cmp	r0, #2
 8000eb8:	d9f6      	bls.n	8000ea8 <HAL_RCC_OscConfig+0x2c4>
 8000eba:	e703      	b.n	8000cc4 <HAL_RCC_OscConfig+0xe0>
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40007000 	.word	0x40007000
 8000ec4:	42470000 	.word	0x42470000
 8000ec8:	42470e80 	.word	0x42470e80
 8000ecc:	42470060 	.word	0x42470060

08000ed0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ed0:	4913      	ldr	r1, [pc, #76]	; (8000f20 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000ed2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ed4:	688b      	ldr	r3, [r1, #8]
 8000ed6:	f003 030c 	and.w	r3, r3, #12
 8000eda:	2b04      	cmp	r3, #4
 8000edc:	d003      	beq.n	8000ee6 <HAL_RCC_GetSysClockFreq+0x16>
 8000ede:	2b08      	cmp	r3, #8
 8000ee0:	d003      	beq.n	8000eea <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000ee2:	4810      	ldr	r0, [pc, #64]	; (8000f24 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000ee4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000ee6:	4810      	ldr	r0, [pc, #64]	; (8000f28 <HAL_RCC_GetSysClockFreq+0x58>)
 8000ee8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000eea:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000eec:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000eee:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ef0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ef4:	bf14      	ite	ne
 8000ef6:	480c      	ldrne	r0, [pc, #48]	; (8000f28 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ef8:	480a      	ldreq	r0, [pc, #40]	; (8000f24 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000efa:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000efe:	bf18      	it	ne
 8000f00:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f02:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f06:	fba1 0100 	umull	r0, r1, r1, r0
 8000f0a:	f7ff f95d 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000f0e:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <HAL_RCC_GetSysClockFreq+0x50>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000f16:	3301      	adds	r3, #1
 8000f18:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000f1a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f1e:	bd08      	pop	{r3, pc}
 8000f20:	40023800 	.word	0x40023800
 8000f24:	00f42400 	.word	0x00f42400
 8000f28:	007a1200 	.word	0x007a1200

08000f2c <HAL_RCC_ClockConfig>:
{
 8000f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f30:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000f32:	4604      	mov	r4, r0
 8000f34:	b910      	cbnz	r0, 8000f3c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000f36:	2001      	movs	r0, #1
 8000f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f3c:	4b44      	ldr	r3, [pc, #272]	; (8001050 <HAL_RCC_ClockConfig+0x124>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	f002 020f 	and.w	r2, r2, #15
 8000f44:	428a      	cmp	r2, r1
 8000f46:	d328      	bcc.n	8000f9a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f48:	6821      	ldr	r1, [r4, #0]
 8000f4a:	078f      	lsls	r7, r1, #30
 8000f4c:	d42d      	bmi.n	8000faa <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f4e:	07c8      	lsls	r0, r1, #31
 8000f50:	d440      	bmi.n	8000fd4 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000f52:	4b3f      	ldr	r3, [pc, #252]	; (8001050 <HAL_RCC_ClockConfig+0x124>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	f002 020f 	and.w	r2, r2, #15
 8000f5a:	4295      	cmp	r5, r2
 8000f5c:	d366      	bcc.n	800102c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f5e:	6822      	ldr	r2, [r4, #0]
 8000f60:	0751      	lsls	r1, r2, #29
 8000f62:	d46c      	bmi.n	800103e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f64:	0713      	lsls	r3, r2, #28
 8000f66:	d507      	bpl.n	8000f78 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000f68:	4a3a      	ldr	r2, [pc, #232]	; (8001054 <HAL_RCC_ClockConfig+0x128>)
 8000f6a:	6921      	ldr	r1, [r4, #16]
 8000f6c:	6893      	ldr	r3, [r2, #8]
 8000f6e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000f72:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f76:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000f78:	f7ff ffaa 	bl	8000ed0 <HAL_RCC_GetSysClockFreq>
 8000f7c:	4b35      	ldr	r3, [pc, #212]	; (8001054 <HAL_RCC_ClockConfig+0x128>)
 8000f7e:	4a36      	ldr	r2, [pc, #216]	; (8001058 <HAL_RCC_ClockConfig+0x12c>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000f86:	5cd3      	ldrb	r3, [r2, r3]
 8000f88:	40d8      	lsrs	r0, r3
 8000f8a:	4b34      	ldr	r3, [pc, #208]	; (800105c <HAL_RCC_ClockConfig+0x130>)
 8000f8c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f7ff faa2 	bl	80004d8 <HAL_InitTick>
  return HAL_OK;
 8000f94:	2000      	movs	r0, #0
 8000f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f9a:	b2ca      	uxtb	r2, r1
 8000f9c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 030f 	and.w	r3, r3, #15
 8000fa4:	4299      	cmp	r1, r3
 8000fa6:	d1c6      	bne.n	8000f36 <HAL_RCC_ClockConfig+0xa>
 8000fa8:	e7ce      	b.n	8000f48 <HAL_RCC_ClockConfig+0x1c>
 8000faa:	4b2a      	ldr	r3, [pc, #168]	; (8001054 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fac:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fb0:	bf1e      	ittt	ne
 8000fb2:	689a      	ldrne	r2, [r3, #8]
 8000fb4:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000fb8:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fba:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fbc:	bf42      	ittt	mi
 8000fbe:	689a      	ldrmi	r2, [r3, #8]
 8000fc0:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000fc4:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	68a0      	ldr	r0, [r4, #8]
 8000fca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000fce:	4302      	orrs	r2, r0
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	e7bc      	b.n	8000f4e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fd4:	6862      	ldr	r2, [r4, #4]
 8000fd6:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <HAL_RCC_ClockConfig+0x128>)
 8000fd8:	2a01      	cmp	r2, #1
 8000fda:	d11d      	bne.n	8001018 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe2:	d0a8      	beq.n	8000f36 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fe4:	4e1b      	ldr	r6, [pc, #108]	; (8001054 <HAL_RCC_ClockConfig+0x128>)
 8000fe6:	68b3      	ldr	r3, [r6, #8]
 8000fe8:	f023 0303 	bic.w	r3, r3, #3
 8000fec:	4313      	orrs	r3, r2
 8000fee:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000ff0:	f7ff faa8 	bl	8000544 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ff4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000ff8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ffa:	68b3      	ldr	r3, [r6, #8]
 8000ffc:	6862      	ldr	r2, [r4, #4]
 8000ffe:	f003 030c 	and.w	r3, r3, #12
 8001002:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001006:	d0a4      	beq.n	8000f52 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001008:	f7ff fa9c 	bl	8000544 <HAL_GetTick>
 800100c:	1bc0      	subs	r0, r0, r7
 800100e:	4540      	cmp	r0, r8
 8001010:	d9f3      	bls.n	8000ffa <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001012:	2003      	movs	r0, #3
}
 8001014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001018:	1e91      	subs	r1, r2, #2
 800101a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800101c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800101e:	d802      	bhi.n	8001026 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001020:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001024:	e7dd      	b.n	8000fe2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001026:	f013 0f02 	tst.w	r3, #2
 800102a:	e7da      	b.n	8000fe2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800102c:	b2ea      	uxtb	r2, r5
 800102e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	429d      	cmp	r5, r3
 8001038:	f47f af7d 	bne.w	8000f36 <HAL_RCC_ClockConfig+0xa>
 800103c:	e78f      	b.n	8000f5e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800103e:	4905      	ldr	r1, [pc, #20]	; (8001054 <HAL_RCC_ClockConfig+0x128>)
 8001040:	68e0      	ldr	r0, [r4, #12]
 8001042:	688b      	ldr	r3, [r1, #8]
 8001044:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001048:	4303      	orrs	r3, r0
 800104a:	608b      	str	r3, [r1, #8]
 800104c:	e78a      	b.n	8000f64 <HAL_RCC_ClockConfig+0x38>
 800104e:	bf00      	nop
 8001050:	40023c00 	.word	0x40023c00
 8001054:	40023800 	.word	0x40023800
 8001058:	08001960 	.word	0x08001960
 800105c:	20000000 	.word	0x20000000

08001060 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001060:	4b01      	ldr	r3, [pc, #4]	; (8001068 <HAL_RCC_GetHCLKFreq+0x8>)
 8001062:	6818      	ldr	r0, [r3, #0]
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000000 	.word	0x20000000

0800106c <lcd_4bit>:
		}
	}
}

void lcd_4bit(uint8_t data)
{
 800106c:	b538      	push	{r3, r4, r5, lr}
/*	GPIO_WriteBit(lcd_db7_port, lcd_db7_pin, (data & 0x08) >> 3);
	GPIO_WriteBit(lcd_db6_port, lcd_db6_pin, (data & 0x04) >> 2);
	GPIO_WriteBit(lcd_db5_port, lcd_db5_pin, (data & 0x02) >> 1);
	GPIO_WriteBit(lcd_db4_port, lcd_db4_pin, (data & 0x01) >> 0);*/

	HAL_GPIO_WritePin(lcd_db7_GPIO_Port,lcd_db7_Pin,(data & 0x08)>>3);
 800106e:	4c1e      	ldr	r4, [pc, #120]	; (80010e8 <lcd_4bit+0x7c>)
{
 8001070:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(lcd_db7_GPIO_Port,lcd_db7_Pin,(data & 0x08)>>3);
 8001072:	f3c0 02c0 	ubfx	r2, r0, #3, #1
 8001076:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800107a:	4620      	mov	r0, r4
 800107c:	f7ff fdac 	bl	8000bd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_db6_GPIO_Port,lcd_db6_Pin,(data & 0x04)>>2);
 8001080:	f3c5 0280 	ubfx	r2, r5, #2, #1
 8001084:	4620      	mov	r0, r4
 8001086:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800108a:	f7ff fda5 	bl	8000bd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_db5_GPIO_Port,lcd_db5_Pin,(data & 0x02)>>1);
 800108e:	f3c5 0240 	ubfx	r2, r5, #1, #1
 8001092:	4620      	mov	r0, r4
 8001094:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001098:	f7ff fd9e 	bl	8000bd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_db4_GPIO_Port,lcd_db4_Pin,(data & 0x01)>>0);
 800109c:	f005 0201 	and.w	r2, r5, #1
 80010a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010a4:	4620      	mov	r0, r4
 80010a6:	f7ff fd97 	bl	8000bd8 <HAL_GPIO_WritePin>



	//delay_us(37);
	HAL_Delay(0.037);
	lcd_e_set;
 80010aa:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
	HAL_Delay(0.037);
 80010ae:	2000      	movs	r0, #0
 80010b0:	f7ff fa4e 	bl	8000550 <HAL_Delay>
	lcd_e_set;
 80010b4:	2201      	movs	r2, #1
 80010b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ba:	4620      	mov	r0, r4
 80010bc:	f7ff fd8c 	bl	8000bd8 <HAL_GPIO_WritePin>
	//delay_us(37);
	HAL_Delay(0.037);
 80010c0:	2000      	movs	r0, #0
 80010c2:	f7ff fa45 	bl	8000550 <HAL_Delay>
	lcd_e_reset;
 80010c6:	2200      	movs	r2, #0
 80010c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010cc:	4620      	mov	r0, r4
 80010ce:	f7ff fd83 	bl	8000bd8 <HAL_GPIO_WritePin>
	//delay_us(37);
	HAL_Delay(0.037);
 80010d2:	2000      	movs	r0, #0
 80010d4:	f7ff fa3c 	bl	8000550 <HAL_Delay>
	lcd_e_set;
 80010d8:	4620      	mov	r0, r4
 80010da:	2201      	movs	r2, #1
 80010dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
}
 80010e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lcd_e_set;
 80010e4:	f7ff bd78 	b.w	8000bd8 <HAL_GPIO_WritePin>
 80010e8:	40020c00 	.word	0x40020c00

080010ec <lcd_8bit>:

void lcd_8bit(uint8_t data)
{
 80010ec:	b570      	push	{r4, r5, r6, lr}
/*	GPIO_WriteBit(lcd_db7_port, lcd_db7_pin, (data & 0x80) >> 7);
	GPIO_WriteBit(lcd_db6_port, lcd_db6_pin, (data & 0x40) >> 6);
	GPIO_WriteBit(lcd_db5_port, lcd_db5_pin, (data & 0x20) >> 5);
	GPIO_WriteBit(lcd_db4_port, lcd_db4_pin, (data & 0x10) >> 4);*/

	HAL_GPIO_WritePin(lcd_db7_GPIO_Port,lcd_db7_Pin,(data & 0x80)>>7);
 80010ee:	4c39      	ldr	r4, [pc, #228]	; (80011d4 <lcd_8bit+0xe8>)
	HAL_GPIO_WritePin(lcd_db5_GPIO_Port,lcd_db5_Pin,(data & 0x20)>>5);
	HAL_GPIO_WritePin(lcd_db4_GPIO_Port,lcd_db4_Pin,(data & 0x10)>>4);

	//delay_us(37);
	HAL_Delay(0.037);
	lcd_e_set;
 80010f0:	4e39      	ldr	r6, [pc, #228]	; (80011d8 <lcd_8bit+0xec>)
{
 80010f2:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(lcd_db7_GPIO_Port,lcd_db7_Pin,(data & 0x80)>>7);
 80010f4:	09c2      	lsrs	r2, r0, #7
 80010f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010fa:	4620      	mov	r0, r4
 80010fc:	f7ff fd6c 	bl	8000bd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_db6_GPIO_Port,lcd_db6_Pin,(data & 0x40)>>6);
 8001100:	f3c5 1280 	ubfx	r2, r5, #6, #1
 8001104:	4620      	mov	r0, r4
 8001106:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800110a:	f7ff fd65 	bl	8000bd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_db5_GPIO_Port,lcd_db5_Pin,(data & 0x20)>>5);
 800110e:	f3c5 1240 	ubfx	r2, r5, #5, #1
 8001112:	4620      	mov	r0, r4
 8001114:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001118:	f7ff fd5e 	bl	8000bd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_db4_GPIO_Port,lcd_db4_Pin,(data & 0x10)>>4);
 800111c:	f3c5 1200 	ubfx	r2, r5, #4, #1
 8001120:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001124:	4620      	mov	r0, r4
 8001126:	f7ff fd57 	bl	8000bd8 <HAL_GPIO_WritePin>
	HAL_Delay(0.037);
 800112a:	2000      	movs	r0, #0
 800112c:	f7ff fa10 	bl	8000550 <HAL_Delay>
	lcd_e_set;
 8001130:	2201      	movs	r2, #1
 8001132:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001136:	4630      	mov	r0, r6
 8001138:	f7ff fd4e 	bl	8000bd8 <HAL_GPIO_WritePin>
	//delay_us(37);
	HAL_Delay(0.037);
 800113c:	2000      	movs	r0, #0
 800113e:	f7ff fa07 	bl	8000550 <HAL_Delay>
	lcd_e_reset;
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001148:	4630      	mov	r0, r6
 800114a:	f7ff fd45 	bl	8000bd8 <HAL_GPIO_WritePin>
	//delay_us(37);
	HAL_Delay(0.037);
 800114e:	2000      	movs	r0, #0
 8001150:	f7ff f9fe 	bl	8000550 <HAL_Delay>
	lcd_e_set;
 8001154:	4630      	mov	r0, r6
 8001156:	2201      	movs	r2, #1
 8001158:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800115c:	f7ff fd3c 	bl	8000bd8 <HAL_GPIO_WritePin>
/*	GPIO_WriteBit(lcd_db7_port, lcd_db7_pin, (data & 0x08) >> 3);
	GPIO_WriteBit(lcd_db6_port, lcd_db6_pin, (data & 0x04) >> 2);
	GPIO_WriteBit(lcd_db5_port, lcd_db5_pin, (data & 0x02) >> 1);
	GPIO_WriteBit(lcd_db4_port, lcd_db4_pin, (data & 0x01) >> 0);*/

	HAL_GPIO_WritePin(lcd_db7_GPIO_Port,lcd_db7_Pin,(data & 0x08)>>3);
 8001160:	f3c5 02c0 	ubfx	r2, r5, #3, #1
 8001164:	4620      	mov	r0, r4
 8001166:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800116a:	f7ff fd35 	bl	8000bd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_db6_GPIO_Port,lcd_db6_Pin,(data & 0x04)>>2);
 800116e:	f3c5 0280 	ubfx	r2, r5, #2, #1
 8001172:	4620      	mov	r0, r4
 8001174:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001178:	f7ff fd2e 	bl	8000bd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_db5_GPIO_Port,lcd_db5_Pin,(data & 0x02)>>1);
 800117c:	f3c5 0240 	ubfx	r2, r5, #1, #1
 8001180:	4620      	mov	r0, r4
 8001182:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001186:	f7ff fd27 	bl	8000bd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_db4_GPIO_Port,lcd_db4_Pin,(data & 0x01)>>0);
 800118a:	f005 0201 	and.w	r2, r5, #1
 800118e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001192:	4620      	mov	r0, r4
 8001194:	f7ff fd20 	bl	8000bd8 <HAL_GPIO_WritePin>

	//delay_us(37);
	HAL_Delay(0.037);
 8001198:	2000      	movs	r0, #0
 800119a:	f7ff f9d9 	bl	8000550 <HAL_Delay>
	lcd_e_set;
 800119e:	2201      	movs	r2, #1
 80011a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011a4:	4630      	mov	r0, r6
 80011a6:	f7ff fd17 	bl	8000bd8 <HAL_GPIO_WritePin>
	//delay_us(37);
	HAL_Delay(0.037);
 80011aa:	2000      	movs	r0, #0
 80011ac:	f7ff f9d0 	bl	8000550 <HAL_Delay>
	lcd_e_reset;
 80011b0:	2200      	movs	r2, #0
 80011b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011b6:	4630      	mov	r0, r6
 80011b8:	f7ff fd0e 	bl	8000bd8 <HAL_GPIO_WritePin>
	//delay_us(37);
	HAL_Delay(0.037);
 80011bc:	2000      	movs	r0, #0
 80011be:	f7ff f9c7 	bl	8000550 <HAL_Delay>
	lcd_e_set;
 80011c2:	4630      	mov	r0, r6
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
}
 80011ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	lcd_e_set;
 80011ce:	f7ff bd03 	b.w	8000bd8 <HAL_GPIO_WritePin>
 80011d2:	bf00      	nop
 80011d4:	40020c00 	.word	0x40020c00
 80011d8:	40020400 	.word	0x40020400

080011dc <lcd_init>:
{
 80011dc:	b570      	push	{r4, r5, r6, lr}
	lcd_address[0] = 0x00;
 80011de:	4bc1      	ldr	r3, [pc, #772]	; (80014e4 <lcd_init+0x308>)
	lcd_rs_reset;
 80011e0:	4dc1      	ldr	r5, [pc, #772]	; (80014e8 <lcd_init+0x30c>)
	lcd_address[2] = 0x00 + column;
 80011e2:	7098      	strb	r0, [r3, #2]
	lcd_address[1] = 0x40;
 80011e4:	2640      	movs	r6, #64	; 0x40
	lcd_address[0] = 0x00;
 80011e6:	2400      	movs	r4, #0
	lcd_address[3] = 0x40 + column;
 80011e8:	1982      	adds	r2, r0, r6
	lcd_address[0] = 0x00;
 80011ea:	701c      	strb	r4, [r3, #0]
	lcd_address[1] = 0x40;
 80011ec:	705e      	strb	r6, [r3, #1]
	lcd_address[3] = 0x40 + column;
 80011ee:	70da      	strb	r2, [r3, #3]
	lcd_max_column = column;
 80011f0:	4bbe      	ldr	r3, [pc, #760]	; (80014ec <lcd_init+0x310>)
 80011f2:	7018      	strb	r0, [r3, #0]
	lcd_max_row = row;
 80011f4:	4bbe      	ldr	r3, [pc, #760]	; (80014f0 <lcd_init+0x314>)
	lcd_rs_reset;
 80011f6:	4622      	mov	r2, r4
	lcd_max_row = row;
 80011f8:	7019      	strb	r1, [r3, #0]
	lcd_rs_reset;
 80011fa:	4628      	mov	r0, r5
 80011fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001200:	f7ff fcea 	bl	8000bd8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001204:	2064      	movs	r0, #100	; 0x64
 8001206:	f7ff f9a3 	bl	8000550 <HAL_Delay>
	lcd_4bit(0b0011);
 800120a:	2003      	movs	r0, #3
 800120c:	f7ff ff2e 	bl	800106c <lcd_4bit>
	HAL_Delay(5);
 8001210:	2005      	movs	r0, #5
 8001212:	f7ff f99d 	bl	8000550 <HAL_Delay>
	lcd_4bit(0b0011);
 8001216:	2003      	movs	r0, #3
 8001218:	f7ff ff28 	bl	800106c <lcd_4bit>
	HAL_Delay(1);
 800121c:	2001      	movs	r0, #1
 800121e:	f7ff f997 	bl	8000550 <HAL_Delay>
	lcd_4bit(0b0011);
 8001222:	2003      	movs	r0, #3
 8001224:	f7ff ff22 	bl	800106c <lcd_4bit>
	HAL_Delay(1);
 8001228:	2001      	movs	r0, #1
 800122a:	f7ff f991 	bl	8000550 <HAL_Delay>
	lcd_4bit(0b0010);
 800122e:	2002      	movs	r0, #2
 8001230:	f7ff ff1c 	bl	800106c <lcd_4bit>
	HAL_Delay(1);
 8001234:	2001      	movs	r0, #1
 8001236:	f7ff f98b 	bl	8000550 <HAL_Delay>
	lcd_8bit(0b00101000);
 800123a:	2028      	movs	r0, #40	; 0x28
 800123c:	f7ff ff56 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b00001000);
 8001240:	2008      	movs	r0, #8
 8001242:	f7ff ff53 	bl	80010ec <lcd_8bit>
	HAL_Delay(1);
 8001246:	2001      	movs	r0, #1
 8001248:	f7ff f982 	bl	8000550 <HAL_Delay>
	lcd_8bit(0b00000001);
 800124c:	2001      	movs	r0, #1
 800124e:	f7ff ff4d 	bl	80010ec <lcd_8bit>
	HAL_Delay(3);
 8001252:	2003      	movs	r0, #3
 8001254:	f7ff f97c 	bl	8000550 <HAL_Delay>
	lcd_8bit(0b00000110);
 8001258:	2006      	movs	r0, #6
 800125a:	f7ff ff47 	bl	80010ec <lcd_8bit>
	HAL_Delay(1);
 800125e:	2001      	movs	r0, #1
 8001260:	f7ff f976 	bl	8000550 <HAL_Delay>
	lcd_8bit(0b00001100);
 8001264:	200c      	movs	r0, #12
 8001266:	f7ff ff41 	bl	80010ec <lcd_8bit>
	HAL_Delay(1);
 800126a:	2001      	movs	r0, #1
 800126c:	f7ff f970 	bl	8000550 <HAL_Delay>
	lcd_rs_reset;
 8001270:	4622      	mov	r2, r4
 8001272:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001276:	4628      	mov	r0, r5
 8001278:	f7ff fcae 	bl	8000bd8 <HAL_GPIO_WritePin>
	lcd_8bit(0x40);
 800127c:	4630      	mov	r0, r6
 800127e:	f7ff ff35 	bl	80010ec <lcd_8bit>
	lcd_rs_set;
 8001282:	2201      	movs	r2, #1
 8001284:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001288:	4628      	mov	r0, r5
 800128a:	f7ff fca5 	bl	8000bd8 <HAL_GPIO_WritePin>
	lcd_8bit(0b00111);
 800128e:	2007      	movs	r0, #7
 8001290:	f7ff ff2c 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b01111);
 8001294:	200f      	movs	r0, #15
 8001296:	f7ff ff29 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 800129a:	201f      	movs	r0, #31
 800129c:	f7ff ff26 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 80012a0:	201f      	movs	r0, #31
 80012a2:	f7ff ff23 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 80012a6:	201f      	movs	r0, #31
 80012a8:	f7ff ff20 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 80012ac:	201f      	movs	r0, #31
 80012ae:	f7ff ff1d 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 80012b2:	201f      	movs	r0, #31
 80012b4:	f7ff ff1a 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 80012b8:	201f      	movs	r0, #31
 80012ba:	f7ff ff17 	bl	80010ec <lcd_8bit>
	lcd_rs_reset;
 80012be:	4622      	mov	r2, r4
 80012c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012c4:	4628      	mov	r0, r5
 80012c6:	f7ff fc87 	bl	8000bd8 <HAL_GPIO_WritePin>
	lcd_8bit(0x48);
 80012ca:	2048      	movs	r0, #72	; 0x48
 80012cc:	f7ff ff0e 	bl	80010ec <lcd_8bit>
	lcd_rs_set;
 80012d0:	2201      	movs	r2, #1
 80012d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d6:	4628      	mov	r0, r5
 80012d8:	f7ff fc7e 	bl	8000bd8 <HAL_GPIO_WritePin>
	lcd_8bit(0b11111);
 80012dc:	201f      	movs	r0, #31
 80012de:	f7ff ff05 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 80012e2:	201f      	movs	r0, #31
 80012e4:	f7ff ff02 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 80012e8:	201f      	movs	r0, #31
 80012ea:	f7ff feff 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 80012ee:	201f      	movs	r0, #31
 80012f0:	f7ff fefc 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 80012f4:	201f      	movs	r0, #31
 80012f6:	f7ff fef9 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 80012fa:	201f      	movs	r0, #31
 80012fc:	f7ff fef6 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b01111);
 8001300:	200f      	movs	r0, #15
 8001302:	f7ff fef3 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b00111);
 8001306:	2007      	movs	r0, #7
 8001308:	f7ff fef0 	bl	80010ec <lcd_8bit>
	lcd_rs_reset;
 800130c:	4622      	mov	r2, r4
 800130e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001312:	4628      	mov	r0, r5
 8001314:	f7ff fc60 	bl	8000bd8 <HAL_GPIO_WritePin>
	lcd_8bit(0x50);
 8001318:	2050      	movs	r0, #80	; 0x50
 800131a:	f7ff fee7 	bl	80010ec <lcd_8bit>
	lcd_rs_set;
 800131e:	2201      	movs	r2, #1
 8001320:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001324:	4628      	mov	r0, r5
 8001326:	f7ff fc57 	bl	8000bd8 <HAL_GPIO_WritePin>
	lcd_8bit(0b11100);
 800132a:	201c      	movs	r0, #28
 800132c:	f7ff fede 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11110);
 8001330:	201e      	movs	r0, #30
 8001332:	f7ff fedb 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 8001336:	201f      	movs	r0, #31
 8001338:	f7ff fed8 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 800133c:	201f      	movs	r0, #31
 800133e:	f7ff fed5 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 8001342:	201f      	movs	r0, #31
 8001344:	f7ff fed2 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 8001348:	201f      	movs	r0, #31
 800134a:	f7ff fecf 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 800134e:	201f      	movs	r0, #31
 8001350:	f7ff fecc 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 8001354:	201f      	movs	r0, #31
 8001356:	f7ff fec9 	bl	80010ec <lcd_8bit>
	lcd_rs_reset;
 800135a:	4622      	mov	r2, r4
 800135c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001360:	4628      	mov	r0, r5
 8001362:	f7ff fc39 	bl	8000bd8 <HAL_GPIO_WritePin>
	lcd_8bit(0x58);
 8001366:	2058      	movs	r0, #88	; 0x58
 8001368:	f7ff fec0 	bl	80010ec <lcd_8bit>
	lcd_rs_set;
 800136c:	2201      	movs	r2, #1
 800136e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001372:	4628      	mov	r0, r5
 8001374:	f7ff fc30 	bl	8000bd8 <HAL_GPIO_WritePin>
	lcd_8bit(0b11111);
 8001378:	201f      	movs	r0, #31
 800137a:	f7ff feb7 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 800137e:	201f      	movs	r0, #31
 8001380:	f7ff feb4 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 8001384:	201f      	movs	r0, #31
 8001386:	f7ff feb1 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 800138a:	201f      	movs	r0, #31
 800138c:	f7ff feae 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 8001390:	201f      	movs	r0, #31
 8001392:	f7ff feab 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 8001396:	201f      	movs	r0, #31
 8001398:	f7ff fea8 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11110);
 800139c:	201e      	movs	r0, #30
 800139e:	f7ff fea5 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11100);
 80013a2:	201c      	movs	r0, #28
 80013a4:	f7ff fea2 	bl	80010ec <lcd_8bit>
	lcd_rs_reset;
 80013a8:	4622      	mov	r2, r4
 80013aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ae:	4628      	mov	r0, r5
 80013b0:	f7ff fc12 	bl	8000bd8 <HAL_GPIO_WritePin>
	lcd_8bit(0x60);
 80013b4:	2060      	movs	r0, #96	; 0x60
 80013b6:	f7ff fe99 	bl	80010ec <lcd_8bit>
	lcd_rs_set;
 80013ba:	2201      	movs	r2, #1
 80013bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013c0:	4628      	mov	r0, r5
 80013c2:	f7ff fc09 	bl	8000bd8 <HAL_GPIO_WritePin>
	lcd_8bit(0b11111);
 80013c6:	201f      	movs	r0, #31
 80013c8:	f7ff fe90 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 80013cc:	201f      	movs	r0, #31
 80013ce:	f7ff fe8d 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 80013d2:	201f      	movs	r0, #31
 80013d4:	f7ff fe8a 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b00000);
 80013d8:	4620      	mov	r0, r4
 80013da:	f7ff fe87 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b00000);
 80013de:	4620      	mov	r0, r4
 80013e0:	f7ff fe84 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b00000);
 80013e4:	4620      	mov	r0, r4
 80013e6:	f7ff fe81 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b00000);
 80013ea:	4620      	mov	r0, r4
 80013ec:	f7ff fe7e 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b00000);
 80013f0:	4620      	mov	r0, r4
 80013f2:	f7ff fe7b 	bl	80010ec <lcd_8bit>
	lcd_rs_reset;
 80013f6:	4622      	mov	r2, r4
 80013f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013fc:	4628      	mov	r0, r5
 80013fe:	f7ff fbeb 	bl	8000bd8 <HAL_GPIO_WritePin>
	lcd_8bit(0x68);
 8001402:	2068      	movs	r0, #104	; 0x68
 8001404:	f7ff fe72 	bl	80010ec <lcd_8bit>
	lcd_rs_set;
 8001408:	2201      	movs	r2, #1
 800140a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800140e:	4628      	mov	r0, r5
 8001410:	f7ff fbe2 	bl	8000bd8 <HAL_GPIO_WritePin>
	lcd_8bit(0b11111);
 8001414:	201f      	movs	r0, #31
 8001416:	f7ff fe69 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 800141a:	201f      	movs	r0, #31
 800141c:	f7ff fe66 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 8001420:	201f      	movs	r0, #31
 8001422:	f7ff fe63 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b00000);
 8001426:	4620      	mov	r0, r4
 8001428:	f7ff fe60 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b00000);
 800142c:	4620      	mov	r0, r4
 800142e:	f7ff fe5d 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b00000);
 8001432:	4620      	mov	r0, r4
 8001434:	f7ff fe5a 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 8001438:	201f      	movs	r0, #31
 800143a:	f7ff fe57 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 800143e:	201f      	movs	r0, #31
 8001440:	f7ff fe54 	bl	80010ec <lcd_8bit>
	lcd_rs_reset;
 8001444:	4622      	mov	r2, r4
 8001446:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800144a:	4628      	mov	r0, r5
 800144c:	f7ff fbc4 	bl	8000bd8 <HAL_GPIO_WritePin>
	lcd_8bit(0x70);
 8001450:	2070      	movs	r0, #112	; 0x70
 8001452:	f7ff fe4b 	bl	80010ec <lcd_8bit>
	lcd_rs_set;
 8001456:	2201      	movs	r2, #1
 8001458:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800145c:	4628      	mov	r0, r5
 800145e:	f7ff fbbb 	bl	8000bd8 <HAL_GPIO_WritePin>
	lcd_8bit(0b00000);
 8001462:	4620      	mov	r0, r4
 8001464:	f7ff fe42 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b00000);
 8001468:	4620      	mov	r0, r4
 800146a:	f7ff fe3f 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b00000);
 800146e:	4620      	mov	r0, r4
 8001470:	f7ff fe3c 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b00000);
 8001474:	4620      	mov	r0, r4
 8001476:	f7ff fe39 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b00000);
 800147a:	4620      	mov	r0, r4
 800147c:	f7ff fe36 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 8001480:	201f      	movs	r0, #31
 8001482:	f7ff fe33 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 8001486:	201f      	movs	r0, #31
 8001488:	f7ff fe30 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 800148c:	201f      	movs	r0, #31
 800148e:	f7ff fe2d 	bl	80010ec <lcd_8bit>
	lcd_rs_reset;
 8001492:	4622      	mov	r2, r4
 8001494:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001498:	4628      	mov	r0, r5
 800149a:	f7ff fb9d 	bl	8000bd8 <HAL_GPIO_WritePin>
	lcd_8bit(0x78);
 800149e:	2078      	movs	r0, #120	; 0x78
 80014a0:	f7ff fe24 	bl	80010ec <lcd_8bit>
	lcd_rs_set;
 80014a4:	2201      	movs	r2, #1
 80014a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014aa:	4628      	mov	r0, r5
 80014ac:	f7ff fb94 	bl	8000bd8 <HAL_GPIO_WritePin>
	lcd_8bit(0b11111);
 80014b0:	201f      	movs	r0, #31
 80014b2:	f7ff fe1b 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 80014b6:	201f      	movs	r0, #31
 80014b8:	f7ff fe18 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 80014bc:	201f      	movs	r0, #31
 80014be:	f7ff fe15 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 80014c2:	201f      	movs	r0, #31
 80014c4:	f7ff fe12 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 80014c8:	201f      	movs	r0, #31
 80014ca:	f7ff fe0f 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 80014ce:	201f      	movs	r0, #31
 80014d0:	f7ff fe0c 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 80014d4:	201f      	movs	r0, #31
 80014d6:	f7ff fe09 	bl	80010ec <lcd_8bit>
	lcd_8bit(0b11111);
 80014da:	201f      	movs	r0, #31
}
 80014dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	lcd_8bit(0b11111);
 80014e0:	f7ff be04 	b.w	80010ec <lcd_8bit>
 80014e4:	2000006a 	.word	0x2000006a
 80014e8:	40020400 	.word	0x40020400
 80014ec:	20000073 	.word	0x20000073
 80014f0:	20000068 	.word	0x20000068

080014f4 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80014f4:	b530      	push	{r4, r5, lr}
 80014f6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f8:	4b27      	ldr	r3, [pc, #156]	; (8001598 <SystemClock_Config+0xa4>)
 80014fa:	2100      	movs	r1, #0
 80014fc:	9101      	str	r1, [sp, #4]
 80014fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001500:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001504:	641a      	str	r2, [r3, #64]	; 0x40
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150c:	9301      	str	r3, [sp, #4]
 800150e:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001510:	4b22      	ldr	r3, [pc, #136]	; (800159c <SystemClock_Config+0xa8>)
 8001512:	9102      	str	r1, [sp, #8]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001522:	9302      	str	r3, [sp, #8]
 8001524:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001526:	2301      	movs	r3, #1
 8001528:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800152a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800152e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001530:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001534:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001536:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001538:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800153a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 168;
 800153c:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800153e:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001540:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001542:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001544:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001546:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001548:	f7ff fb4c 	bl	8000be4 <HAL_RCC_OscConfig>
 800154c:	b100      	cbz	r0, 8001550 <SystemClock_Config+0x5c>
 800154e:	e7fe      	b.n	800154e <SystemClock_Config+0x5a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001550:	230f      	movs	r3, #15
 8001552:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001554:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001558:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800155a:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800155c:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800155e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001562:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001564:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001566:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001568:	f7ff fce0 	bl	8000f2c <HAL_RCC_ClockConfig>
 800156c:	4605      	mov	r5, r0
 800156e:	b100      	cbz	r0, 8001572 <SystemClock_Config+0x7e>
 8001570:	e7fe      	b.n	8001570 <SystemClock_Config+0x7c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001572:	f7ff fd75 	bl	8001060 <HAL_RCC_GetHCLKFreq>
 8001576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157a:	fbb0 f0f3 	udiv	r0, r0, r3
 800157e:	f7ff fa23 	bl	80009c8 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001582:	4620      	mov	r0, r4
 8001584:	f7ff fa36 	bl	80009f4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001588:	462a      	mov	r2, r5
 800158a:	4629      	mov	r1, r5
 800158c:	f04f 30ff 	mov.w	r0, #4294967295
 8001590:	f7ff f9e6 	bl	8000960 <HAL_NVIC_SetPriority>
}
 8001594:	b015      	add	sp, #84	; 0x54
 8001596:	bd30      	pop	{r4, r5, pc}
 8001598:	40023800 	.word	0x40023800
 800159c:	40007000 	.word	0x40007000

080015a0 <main>:
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08a      	sub	sp, #40	; 0x28
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015a4:	2400      	movs	r4, #0
  HAL_Init();
 80015a6:	f7fe ffab 	bl	8000500 <HAL_Init>
  SystemClock_Config();
 80015aa:	f7ff ffa3 	bl	80014f4 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ae:	4b57      	ldr	r3, [pc, #348]	; (800170c <main+0x16c>)
 80015b0:	9401      	str	r4, [sp, #4]
 80015b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13 
 80015b4:	4856      	ldr	r0, [pc, #344]	; (8001710 <main+0x170>)
  hcan1.Instance = CAN1;
 80015b6:	4d57      	ldr	r5, [pc, #348]	; (8001714 <main+0x174>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015bc:	631a      	str	r2, [r3, #48]	; 0x30
 80015be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015c0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80015c4:	9201      	str	r2, [sp, #4]
 80015c6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c8:	9402      	str	r4, [sp, #8]
 80015ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015cc:	f042 0202 	orr.w	r2, r2, #2
 80015d0:	631a      	str	r2, [r3, #48]	; 0x30
 80015d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015d4:	f002 0202 	and.w	r2, r2, #2
 80015d8:	9202      	str	r2, [sp, #8]
 80015da:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015dc:	9403      	str	r4, [sp, #12]
 80015de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015e0:	f042 0210 	orr.w	r2, r2, #16
 80015e4:	631a      	str	r2, [r3, #48]	; 0x30
 80015e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015e8:	f002 0210 	and.w	r2, r2, #16
 80015ec:	9203      	str	r2, [sp, #12]
 80015ee:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f0:	9404      	str	r4, [sp, #16]
 80015f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015f4:	f042 0208 	orr.w	r2, r2, #8
 80015f8:	631a      	str	r2, [r3, #48]	; 0x30
 80015fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fc:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13 
 8001600:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001602:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13 
 8001604:	f24a 0107 	movw	r1, #40967	; 0xa007
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001608:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13 
 800160a:	f7ff fae5 	bl	8000bd8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 800160e:	4622      	mov	r2, r4
 8001610:	f44f 51ac 	mov.w	r1, #5504	; 0x1580
 8001614:	4840      	ldr	r0, [pc, #256]	; (8001718 <main+0x178>)
 8001616:	f7ff fadf 	bl	8000bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13 
 800161a:	4622      	mov	r2, r4
 800161c:	f44f 412b 	mov.w	r1, #43776	; 0xab00
 8001620:	483e      	ldr	r0, [pc, #248]	; (800171c <main+0x17c>)
 8001622:	f7ff fad9 	bl	8000bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB2 PB13 
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001626:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13 
 8001628:	f24a 0307 	movw	r3, #40967	; 0xa007
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162c:	a905      	add	r1, sp, #20
 800162e:	4838      	ldr	r0, [pc, #224]	; (8001710 <main+0x170>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13 
 8001630:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001636:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001638:	f7ff f9ee 	bl	8000a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12;
 800163c:	f44f 53ac 	mov.w	r3, #5504	; 0x1580
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001640:	a905      	add	r1, sp, #20
 8001642:	4835      	ldr	r0, [pc, #212]	; (8001718 <main+0x178>)
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12;
 8001644:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164a:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800164c:	f7ff f9e4 	bl	8000a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD11 PD13 
                           PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13 
 8001650:	f44f 432b 	mov.w	r3, #43776	; 0xab00
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001654:	a905      	add	r1, sp, #20
 8001656:	4831      	ldr	r0, [pc, #196]	; (800171c <main+0x17c>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13 
 8001658:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165e:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001660:	f7ff f9da 	bl	8000a18 <HAL_GPIO_Init>
  hcan1.Init.Prescaler = 16;
 8001664:	4a2e      	ldr	r2, [pc, #184]	; (8001720 <main+0x180>)
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001666:	60ac      	str	r4, [r5, #8]
  hcan1.Init.Prescaler = 16;
 8001668:	2310      	movs	r3, #16
 800166a:	e885 000c 	stmia.w	r5, {r2, r3}
  hcan1.Init.BS1 = CAN_BS1_3TQ;
 800166e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001672:	612b      	str	r3, [r5, #16]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001674:	4628      	mov	r0, r5
  hcan1.Init.BS2 = CAN_BS2_5TQ;
 8001676:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  hcan1.Init.SJW = CAN_SJW_1TQ;
 800167a:	60ec      	str	r4, [r5, #12]
  hcan1.Init.TTCM = DISABLE;
 800167c:	61ac      	str	r4, [r5, #24]
  hcan1.Init.ABOM = DISABLE;
 800167e:	61ec      	str	r4, [r5, #28]
  hcan1.Init.AWUM = DISABLE;
 8001680:	622c      	str	r4, [r5, #32]
  hcan1.Init.NART = DISABLE;
 8001682:	626c      	str	r4, [r5, #36]	; 0x24
  hcan1.Init.RFLM = DISABLE;
 8001684:	62ac      	str	r4, [r5, #40]	; 0x28
  hcan1.Init.TXFP = DISABLE;
 8001686:	62ec      	str	r4, [r5, #44]	; 0x2c
  hcan1.Init.BS2 = CAN_BS2_5TQ;
 8001688:	616b      	str	r3, [r5, #20]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800168a:	f7fe fff1 	bl	8000670 <HAL_CAN_Init>
 800168e:	4604      	mov	r4, r0
 8001690:	b100      	cbz	r0, 8001694 <main+0xf4>
 8001692:	e7fe      	b.n	8001692 <main+0xf2>
  lcd_init(20,4);
 8001694:	2104      	movs	r1, #4
 8001696:	2014      	movs	r0, #20
 8001698:	f7ff fda0 	bl	80011dc <lcd_init>
  hcan1.pTxMsg = &TxM;
 800169c:	4b21      	ldr	r3, [pc, #132]	; (8001724 <main+0x184>)
  sFilterConfig.FilterNumber = 0;
 800169e:	4922      	ldr	r1, [pc, #136]	; (8001728 <main+0x188>)
  hcan1.pTxMsg = &TxM;
 80016a0:	632b      	str	r3, [r5, #48]	; 0x30
  hcan1.pRxMsg = &RxM;
 80016a2:	4b22      	ldr	r3, [pc, #136]	; (800172c <main+0x18c>)
 80016a4:	636b      	str	r3, [r5, #52]	; 0x34
  HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig);
 80016a6:	4628      	mov	r0, r5
  sFilterConfig.BankNumber = 14;
 80016a8:	230e      	movs	r3, #14
  sFilterConfig.FilterNumber = 0;
 80016aa:	614c      	str	r4, [r1, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80016ac:	618c      	str	r4, [r1, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80016ae:	61ce      	str	r6, [r1, #28]
  sFilterConfig.FilterIdHigh = 0x00;
 80016b0:	600c      	str	r4, [r1, #0]
  sFilterConfig.FilterIdLow = 0x00;
 80016b2:	604c      	str	r4, [r1, #4]
  sFilterConfig.FilterMaskIdHigh = 0x00;
 80016b4:	608c      	str	r4, [r1, #8]
  sFilterConfig.FilterMaskIdLow = 0x00;
 80016b6:	60cc      	str	r4, [r1, #12]
  sFilterConfig.FilterFIFOAssignment = 0;
 80016b8:	610c      	str	r4, [r1, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80016ba:	620e      	str	r6, [r1, #32]
  sFilterConfig.BankNumber = 14;
 80016bc:	624b      	str	r3, [r1, #36]	; 0x24
  HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig);
 80016be:	f7fe ff57 	bl	8000570 <HAL_CAN_ConfigFilter>
	   hcan1.pTxMsg->Data[0] = a;
 80016c2:	4c1b      	ldr	r4, [pc, #108]	; (8001730 <main+0x190>)
	  hcan1.pTxMsg->StdId = 0x244;
 80016c4:	f44f 7711 	mov.w	r7, #580	; 0x244
	  HAL_CAN_Transmit(&hcan1,10);
 80016c8:	462e      	mov	r6, r5
	  hcan1.pTxMsg->StdId = 0x244;
 80016ca:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	   hcan1.pTxMsg->RTR = CAN_RTR_DATA;
 80016cc:	2200      	movs	r2, #0
 80016ce:	60da      	str	r2, [r3, #12]
	   hcan1.pTxMsg->IDE = CAN_ID_STD;
 80016d0:	609a      	str	r2, [r3, #8]
	   hcan1.pTxMsg->Data[1] = 0;
 80016d2:	755a      	strb	r2, [r3, #21]
	   hcan1.pTxMsg->Data[2] = 1;
 80016d4:	2201      	movs	r2, #1
 80016d6:	759a      	strb	r2, [r3, #22]
	   hcan1.pTxMsg->Data[3] = 13;
 80016d8:	220d      	movs	r2, #13
	  hcan1.pTxMsg->StdId = 0x244;
 80016da:	601f      	str	r7, [r3, #0]
	   hcan1.pTxMsg->Data[3] = 13;
 80016dc:	75da      	strb	r2, [r3, #23]
	   hcan1.pTxMsg->DLC = 8;
 80016de:	2108      	movs	r1, #8
	   hcan1.pTxMsg->Data[4] = 12;
 80016e0:	220c      	movs	r2, #12
	   hcan1.pTxMsg->DLC = 8;
 80016e2:	6119      	str	r1, [r3, #16]
	   hcan1.pTxMsg->Data[4] = 12;
 80016e4:	761a      	strb	r2, [r3, #24]
	   hcan1.pTxMsg->Data[0] = a;
 80016e6:	7821      	ldrb	r1, [r4, #0]
 80016e8:	7519      	strb	r1, [r3, #20]
	   hcan1.pTxMsg->Data[6] = 119;
 80016ea:	2277      	movs	r2, #119	; 0x77
	   hcan1.pTxMsg->Data[5] = 10;
 80016ec:	210a      	movs	r1, #10
	   hcan1.pTxMsg->Data[6] = 119;
 80016ee:	769a      	strb	r2, [r3, #26]
	   hcan1.pTxMsg->Data[7] = 87;
 80016f0:	2257      	movs	r2, #87	; 0x57
	   hcan1.pTxMsg->Data[5] = 10;
 80016f2:	7659      	strb	r1, [r3, #25]
	   hcan1.pTxMsg->Data[7] = 87;
 80016f4:	76da      	strb	r2, [r3, #27]
	  HAL_CAN_Transmit(&hcan1,10);
 80016f6:	4630      	mov	r0, r6
 80016f8:	f7ff f850 	bl	800079c <HAL_CAN_Transmit>
	  a++;
 80016fc:	7823      	ldrb	r3, [r4, #0]
	  HAL_Delay(1000);
 80016fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	  a++;
 8001702:	3301      	adds	r3, #1
 8001704:	7023      	strb	r3, [r4, #0]
	  HAL_Delay(1000);
 8001706:	f7fe ff23 	bl	8000550 <HAL_Delay>
 800170a:	e7de      	b.n	80016ca <main+0x12a>
 800170c:	40023800 	.word	0x40023800
 8001710:	40020400 	.word	0x40020400
 8001714:	200000f0 	.word	0x200000f0
 8001718:	40021000 	.word	0x40021000
 800171c:	40020c00 	.word	0x40020c00
 8001720:	40006400 	.word	0x40006400
 8001724:	20000044 	.word	0x20000044
 8001728:	20000074 	.word	0x20000074
 800172c:	20000020 	.word	0x20000020
 8001730:	20000134 	.word	0x20000134

08001734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001734:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001736:	2003      	movs	r0, #3
 8001738:	f7ff f900 	bl	800093c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800173c:	2200      	movs	r2, #0
 800173e:	4611      	mov	r1, r2
 8001740:	f06f 000b 	mvn.w	r0, #11
 8001744:	f7ff f90c 	bl	8000960 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001748:	2200      	movs	r2, #0
 800174a:	4611      	mov	r1, r2
 800174c:	f06f 000a 	mvn.w	r0, #10
 8001750:	f7ff f906 	bl	8000960 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001754:	2200      	movs	r2, #0
 8001756:	4611      	mov	r1, r2
 8001758:	f06f 0009 	mvn.w	r0, #9
 800175c:	f7ff f900 	bl	8000960 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001760:	2200      	movs	r2, #0
 8001762:	4611      	mov	r1, r2
 8001764:	f06f 0004 	mvn.w	r0, #4
 8001768:	f7ff f8fa 	bl	8000960 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800176c:	2200      	movs	r2, #0
 800176e:	4611      	mov	r1, r2
 8001770:	f06f 0003 	mvn.w	r0, #3
 8001774:	f7ff f8f4 	bl	8000960 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001778:	2200      	movs	r2, #0
 800177a:	4611      	mov	r1, r2
 800177c:	f06f 0001 	mvn.w	r0, #1
 8001780:	f7ff f8ee 	bl	8000960 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001784:	2200      	movs	r2, #0
 8001786:	4611      	mov	r1, r2
 8001788:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800178c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001790:	f7ff b8e6 	b.w	8000960 <HAL_NVIC_SetPriority>

08001794 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001794:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcan->Instance==CAN1)
 8001796:	6803      	ldr	r3, [r0, #0]
 8001798:	4a24      	ldr	r2, [pc, #144]	; (800182c <HAL_CAN_MspInit+0x98>)
 800179a:	4293      	cmp	r3, r2
{
 800179c:	b089      	sub	sp, #36	; 0x24
  if(hcan->Instance==CAN1)
 800179e:	d123      	bne.n	80017e8 <HAL_CAN_MspInit+0x54>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80017a0:	4a23      	ldr	r2, [pc, #140]	; (8001830 <HAL_CAN_MspInit+0x9c>)
 80017a2:	6813      	ldr	r3, [r2, #0]
 80017a4:	3301      	adds	r3, #1
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80017a6:	2b01      	cmp	r3, #1
    HAL_RCC_CAN1_CLK_ENABLED++;
 80017a8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80017aa:	d10b      	bne.n	80017c4 <HAL_CAN_MspInit+0x30>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80017ac:	2300      	movs	r3, #0
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	4b20      	ldr	r3, [pc, #128]	; (8001834 <HAL_CAN_MspInit+0xa0>)
 80017b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017b4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80017b8:	641a      	str	r2, [r3, #64]	; 0x40
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	9b00      	ldr	r3, [sp, #0]
  
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017c4:	f44f 7340 	mov.w	r3, #768	; 0x300
  
    /**CAN2 GPIO Configuration    
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80017c8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ca:	2302      	movs	r3, #2
 80017cc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d2:	2303      	movs	r3, #3
 80017d4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80017d8:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017da:	4817      	ldr	r0, [pc, #92]	; (8001838 <HAL_CAN_MspInit+0xa4>)
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80017dc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017de:	f7ff f91b 	bl	8000a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80017e2:	b009      	add	sp, #36	; 0x24
 80017e4:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(hcan->Instance==CAN2)
 80017e8:	4a14      	ldr	r2, [pc, #80]	; (800183c <HAL_CAN_MspInit+0xa8>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d1f9      	bne.n	80017e2 <HAL_CAN_MspInit+0x4e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <HAL_CAN_MspInit+0xa0>)
    HAL_RCC_CAN1_CLK_ENABLED++;
 80017f0:	480f      	ldr	r0, [pc, #60]	; (8001830 <HAL_CAN_MspInit+0x9c>)
    __HAL_RCC_CAN2_CLK_ENABLE();
 80017f2:	2100      	movs	r1, #0
 80017f4:	9101      	str	r1, [sp, #4]
 80017f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017f8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80017fc:	641a      	str	r2, [r3, #64]	; 0x40
 80017fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001800:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8001804:	9201      	str	r2, [sp, #4]
 8001806:	9a01      	ldr	r2, [sp, #4]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001808:	6802      	ldr	r2, [r0, #0]
 800180a:	3201      	adds	r2, #1
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800180c:	2a01      	cmp	r2, #1
    HAL_RCC_CAN1_CLK_ENABLED++;
 800180e:	6002      	str	r2, [r0, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001810:	d109      	bne.n	8001826 <HAL_CAN_MspInit+0x92>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001812:	9102      	str	r1, [sp, #8]
 8001814:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001816:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800181a:	641a      	str	r2, [r3, #64]	; 0x40
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001822:	9302      	str	r3, [sp, #8]
 8001824:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001826:	2360      	movs	r3, #96	; 0x60
 8001828:	e7ce      	b.n	80017c8 <HAL_CAN_MspInit+0x34>
 800182a:	bf00      	nop
 800182c:	40006400 	.word	0x40006400
 8001830:	20000060 	.word	0x20000060
 8001834:	40023800 	.word	0x40023800
 8001838:	40020400 	.word	0x40020400
 800183c:	40006800 	.word	0x40006800

08001840 <NMI_Handler>:
 8001840:	4770      	bx	lr

08001842 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001842:	e7fe      	b.n	8001842 <HardFault_Handler>

08001844 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001844:	e7fe      	b.n	8001844 <MemManage_Handler>

08001846 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001846:	e7fe      	b.n	8001846 <BusFault_Handler>

08001848 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001848:	e7fe      	b.n	8001848 <UsageFault_Handler>

0800184a <SVC_Handler>:
 800184a:	4770      	bx	lr

0800184c <DebugMon_Handler>:
 800184c:	4770      	bx	lr

0800184e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800184e:	4770      	bx	lr

08001850 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001850:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001852:	f7fe fe6f 	bl	8000534 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001856:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800185a:	f7ff b8d8 	b.w	8000a0e <HAL_SYSTICK_IRQHandler>
	...

08001860 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001860:	490f      	ldr	r1, [pc, #60]	; (80018a0 <SystemInit+0x40>)
 8001862:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001866:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800186a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800186e:	4b0d      	ldr	r3, [pc, #52]	; (80018a4 <SystemInit+0x44>)
 8001870:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001872:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001874:	f042 0201 	orr.w	r2, r2, #1
 8001878:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800187a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001882:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001886:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001888:	4a07      	ldr	r2, [pc, #28]	; (80018a8 <SystemInit+0x48>)
 800188a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001892:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001894:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001896:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800189a:	608b      	str	r3, [r1, #8]
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000ed00 	.word	0xe000ed00
 80018a4:	40023800 	.word	0x40023800
 80018a8:	24003010 	.word	0x24003010

080018ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018b2:	e003      	b.n	80018bc <LoopCopyDataInit>

080018b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018ba:	3104      	adds	r1, #4

080018bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018bc:	480b      	ldr	r0, [pc, #44]	; (80018ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018be:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018c4:	d3f6      	bcc.n	80018b4 <CopyDataInit>
  ldr  r2, =_sbss
 80018c6:	4a0b      	ldr	r2, [pc, #44]	; (80018f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018c8:	e002      	b.n	80018d0 <LoopFillZerobss>

080018ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018cc:	f842 3b04 	str.w	r3, [r2], #4

080018d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018d0:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018d4:	d3f9      	bcc.n	80018ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018d6:	f7ff ffc3 	bl	8001860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018da:	f000 f811 	bl	8001900 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018de:	f7ff fe5f 	bl	80015a0 <main>
  bx  lr    
 80018e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018e4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80018e8:	08001980 	.word	0x08001980
  ldr  r0, =_sdata
 80018ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018f0:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 80018f4:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 80018f8:	2000014c 	.word	0x2000014c

080018fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018fc:	e7fe      	b.n	80018fc <ADC_IRQHandler>
	...

08001900 <__libc_init_array>:
 8001900:	b570      	push	{r4, r5, r6, lr}
 8001902:	4e0d      	ldr	r6, [pc, #52]	; (8001938 <__libc_init_array+0x38>)
 8001904:	4c0d      	ldr	r4, [pc, #52]	; (800193c <__libc_init_array+0x3c>)
 8001906:	1ba4      	subs	r4, r4, r6
 8001908:	10a4      	asrs	r4, r4, #2
 800190a:	2500      	movs	r5, #0
 800190c:	42a5      	cmp	r5, r4
 800190e:	d109      	bne.n	8001924 <__libc_init_array+0x24>
 8001910:	4e0b      	ldr	r6, [pc, #44]	; (8001940 <__libc_init_array+0x40>)
 8001912:	4c0c      	ldr	r4, [pc, #48]	; (8001944 <__libc_init_array+0x44>)
 8001914:	f000 f818 	bl	8001948 <_init>
 8001918:	1ba4      	subs	r4, r4, r6
 800191a:	10a4      	asrs	r4, r4, #2
 800191c:	2500      	movs	r5, #0
 800191e:	42a5      	cmp	r5, r4
 8001920:	d105      	bne.n	800192e <__libc_init_array+0x2e>
 8001922:	bd70      	pop	{r4, r5, r6, pc}
 8001924:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001928:	4798      	blx	r3
 800192a:	3501      	adds	r5, #1
 800192c:	e7ee      	b.n	800190c <__libc_init_array+0xc>
 800192e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001932:	4798      	blx	r3
 8001934:	3501      	adds	r5, #1
 8001936:	e7f2      	b.n	800191e <__libc_init_array+0x1e>
 8001938:	08001978 	.word	0x08001978
 800193c:	08001978 	.word	0x08001978
 8001940:	08001978 	.word	0x08001978
 8001944:	0800197c 	.word	0x0800197c

08001948 <_init>:
 8001948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800194a:	bf00      	nop
 800194c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800194e:	bc08      	pop	{r3}
 8001950:	469e      	mov	lr, r3
 8001952:	4770      	bx	lr

08001954 <_fini>:
 8001954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001956:	bf00      	nop
 8001958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800195a:	bc08      	pop	{r3}
 800195c:	469e      	mov	lr, r3
 800195e:	4770      	bx	lr
