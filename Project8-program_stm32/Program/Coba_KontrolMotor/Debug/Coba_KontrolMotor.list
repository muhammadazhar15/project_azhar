
Coba_KontrolMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fe4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08003174  08003174  00013174  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080031c4  080031c4  000131c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080031cc  080031cc  000131cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080031d0  080031d0  000131d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  20000000  080031d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
  8 .bss          00000124  2000006c  2000006c  0002006c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000190  20000190  0002006c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 11 .debug_info   000109e2  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000202b  00000000  00000000  00030a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00004dcd  00000000  00000000  00032aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000788  00000000  00000000  00037878  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a30  00000000  00000000  00038000  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00003fde  00000000  00000000  00038a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000032d4  00000000  00000000  0003ca0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0003fce2  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001a50  00000000  00000000  0003fd60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800315c 	.word	0x0800315c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800315c 	.word	0x0800315c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f092 0f00 	teq	r2, #0
 800055a:	bf14      	ite	ne
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800056c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000570:	e720      	b.n	80003b4 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_ul2d>:
 8000574:	ea50 0201 	orrs.w	r2, r0, r1
 8000578:	bf08      	it	eq
 800057a:	4770      	bxeq	lr
 800057c:	b530      	push	{r4, r5, lr}
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	e00a      	b.n	800059a <__aeabi_l2d+0x16>

08000584 <__aeabi_l2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000592:	d502      	bpl.n	800059a <__aeabi_l2d+0x16>
 8000594:	4240      	negs	r0, r0
 8000596:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800059a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a6:	f43f aedc 	beq.w	8000362 <__adddf3+0xe6>
 80005aa:	f04f 0203 	mov.w	r2, #3
 80005ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b2:	bf18      	it	ne
 80005b4:	3203      	addne	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005c2:	f1c2 0320 	rsb	r3, r2, #32
 80005c6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ca:	fa20 f002 	lsr.w	r0, r0, r2
 80005ce:	fa01 fe03 	lsl.w	lr, r1, r3
 80005d2:	ea40 000e 	orr.w	r0, r0, lr
 80005d6:	fa21 f102 	lsr.w	r1, r1, r2
 80005da:	4414      	add	r4, r2
 80005dc:	e6c1      	b.n	8000362 <__adddf3+0xe6>
 80005de:	bf00      	nop

080005e0 <__aeabi_dmul>:
 80005e0:	b570      	push	{r4, r5, r6, lr}
 80005e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ee:	bf1d      	ittte	ne
 80005f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f4:	ea94 0f0c 	teqne	r4, ip
 80005f8:	ea95 0f0c 	teqne	r5, ip
 80005fc:	f000 f8de 	bleq	80007bc <__aeabi_dmul+0x1dc>
 8000600:	442c      	add	r4, r5
 8000602:	ea81 0603 	eor.w	r6, r1, r3
 8000606:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800060a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000612:	bf18      	it	ne
 8000614:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000620:	d038      	beq.n	8000694 <__aeabi_dmul+0xb4>
 8000622:	fba0 ce02 	umull	ip, lr, r0, r2
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000632:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000636:	f04f 0600 	mov.w	r6, #0
 800063a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063e:	f09c 0f00 	teq	ip, #0
 8000642:	bf18      	it	ne
 8000644:	f04e 0e01 	orrne.w	lr, lr, #1
 8000648:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800064c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000650:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000654:	d204      	bcs.n	8000660 <__aeabi_dmul+0x80>
 8000656:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800065a:	416d      	adcs	r5, r5
 800065c:	eb46 0606 	adc.w	r6, r6, r6
 8000660:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000664:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000668:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800066c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000670:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000674:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000678:	bf88      	it	hi
 800067a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067e:	d81e      	bhi.n	80006be <__aeabi_dmul+0xde>
 8000680:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000684:	bf08      	it	eq
 8000686:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800068a:	f150 0000 	adcs.w	r0, r0, #0
 800068e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000698:	ea46 0101 	orr.w	r1, r6, r1
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	ea81 0103 	eor.w	r1, r1, r3
 80006a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a8:	bfc2      	ittt	gt
 80006aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	popgt	{r4, r5, r6, pc}
 80006b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b8:	f04f 0e00 	mov.w	lr, #0
 80006bc:	3c01      	subs	r4, #1
 80006be:	f300 80ab 	bgt.w	8000818 <__aeabi_dmul+0x238>
 80006c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c6:	bfde      	ittt	le
 80006c8:	2000      	movle	r0, #0
 80006ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ce:	bd70      	pople	{r4, r5, r6, pc}
 80006d0:	f1c4 0400 	rsb	r4, r4, #0
 80006d4:	3c20      	subs	r4, #32
 80006d6:	da35      	bge.n	8000744 <__aeabi_dmul+0x164>
 80006d8:	340c      	adds	r4, #12
 80006da:	dc1b      	bgt.n	8000714 <__aeabi_dmul+0x134>
 80006dc:	f104 0414 	add.w	r4, r4, #20
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f305 	lsl.w	r3, r0, r5
 80006e8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000700:	fa21 f604 	lsr.w	r6, r1, r4
 8000704:	eb42 0106 	adc.w	r1, r2, r6
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 040c 	rsb	r4, r4, #12
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f304 	lsl.w	r3, r0, r4
 8000720:	fa20 f005 	lsr.w	r0, r0, r5
 8000724:	fa01 f204 	lsl.w	r2, r1, r4
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000730:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000734:	f141 0100 	adc.w	r1, r1, #0
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f205 	lsl.w	r2, r0, r5
 800074c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000750:	fa20 f304 	lsr.w	r3, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea43 0302 	orr.w	r3, r3, r2
 800075c:	fa21 f004 	lsr.w	r0, r1, r4
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	fa21 f204 	lsr.w	r2, r1, r4
 8000768:	ea20 0002 	bic.w	r0, r0, r2
 800076c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f094 0f00 	teq	r4, #0
 8000780:	d10f      	bne.n	80007a2 <__aeabi_dmul+0x1c2>
 8000782:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000786:	0040      	lsls	r0, r0, #1
 8000788:	eb41 0101 	adc.w	r1, r1, r1
 800078c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000790:	bf08      	it	eq
 8000792:	3c01      	subeq	r4, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1a6>
 8000796:	ea41 0106 	orr.w	r1, r1, r6
 800079a:	f095 0f00 	teq	r5, #0
 800079e:	bf18      	it	ne
 80007a0:	4770      	bxne	lr
 80007a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a6:	0052      	lsls	r2, r2, #1
 80007a8:	eb43 0303 	adc.w	r3, r3, r3
 80007ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3d01      	subeq	r5, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1c6>
 80007b6:	ea43 0306 	orr.w	r3, r3, r6
 80007ba:	4770      	bx	lr
 80007bc:	ea94 0f0c 	teq	r4, ip
 80007c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c4:	bf18      	it	ne
 80007c6:	ea95 0f0c 	teqne	r5, ip
 80007ca:	d00c      	beq.n	80007e6 <__aeabi_dmul+0x206>
 80007cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d0:	bf18      	it	ne
 80007d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d6:	d1d1      	bne.n	800077c <__aeabi_dmul+0x19c>
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	f04f 0000 	mov.w	r0, #0
 80007e4:	bd70      	pop	{r4, r5, r6, pc}
 80007e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ea:	bf06      	itte	eq
 80007ec:	4610      	moveq	r0, r2
 80007ee:	4619      	moveq	r1, r3
 80007f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f4:	d019      	beq.n	800082a <__aeabi_dmul+0x24a>
 80007f6:	ea94 0f0c 	teq	r4, ip
 80007fa:	d102      	bne.n	8000802 <__aeabi_dmul+0x222>
 80007fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000800:	d113      	bne.n	800082a <__aeabi_dmul+0x24a>
 8000802:	ea95 0f0c 	teq	r5, ip
 8000806:	d105      	bne.n	8000814 <__aeabi_dmul+0x234>
 8000808:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800080c:	bf1c      	itt	ne
 800080e:	4610      	movne	r0, r2
 8000810:	4619      	movne	r1, r3
 8000812:	d10a      	bne.n	800082a <__aeabi_dmul+0x24a>
 8000814:	ea81 0103 	eor.w	r1, r1, r3
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800081c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000820:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000824:	f04f 0000 	mov.w	r0, #0
 8000828:	bd70      	pop	{r4, r5, r6, pc}
 800082a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000832:	bd70      	pop	{r4, r5, r6, pc}

08000834 <__aeabi_ddiv>:
 8000834:	b570      	push	{r4, r5, r6, lr}
 8000836:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800083a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000842:	bf1d      	ittte	ne
 8000844:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000848:	ea94 0f0c 	teqne	r4, ip
 800084c:	ea95 0f0c 	teqne	r5, ip
 8000850:	f000 f8a7 	bleq	80009a2 <__aeabi_ddiv+0x16e>
 8000854:	eba4 0405 	sub.w	r4, r4, r5
 8000858:	ea81 0e03 	eor.w	lr, r1, r3
 800085c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000860:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000864:	f000 8088 	beq.w	8000978 <__aeabi_ddiv+0x144>
 8000868:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800086c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000870:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000874:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000878:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800087c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000880:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000884:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000888:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800088c:	429d      	cmp	r5, r3
 800088e:	bf08      	it	eq
 8000890:	4296      	cmpeq	r6, r2
 8000892:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000896:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800089a:	d202      	bcs.n	80008a2 <__aeabi_ddiv+0x6e>
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a2:	1ab6      	subs	r6, r6, r2
 80008a4:	eb65 0503 	sbc.w	r5, r5, r3
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000910:	ea55 0e06 	orrs.w	lr, r5, r6
 8000914:	d018      	beq.n	8000948 <__aeabi_ddiv+0x114>
 8000916:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800091a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000922:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000926:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800092a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000932:	d1c0      	bne.n	80008b6 <__aeabi_ddiv+0x82>
 8000934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000938:	d10b      	bne.n	8000952 <__aeabi_ddiv+0x11e>
 800093a:	ea41 0100 	orr.w	r1, r1, r0
 800093e:	f04f 0000 	mov.w	r0, #0
 8000942:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000946:	e7b6      	b.n	80008b6 <__aeabi_ddiv+0x82>
 8000948:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800094c:	bf04      	itt	eq
 800094e:	4301      	orreq	r1, r0
 8000950:	2000      	moveq	r0, #0
 8000952:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000956:	bf88      	it	hi
 8000958:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800095c:	f63f aeaf 	bhi.w	80006be <__aeabi_dmul+0xde>
 8000960:	ebb5 0c03 	subs.w	ip, r5, r3
 8000964:	bf04      	itt	eq
 8000966:	ebb6 0c02 	subseq.w	ip, r6, r2
 800096a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096e:	f150 0000 	adcs.w	r0, r0, #0
 8000972:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000976:	bd70      	pop	{r4, r5, r6, pc}
 8000978:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800097c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000980:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000984:	bfc2      	ittt	gt
 8000986:	ebd4 050c 	rsbsgt	r5, r4, ip
 800098a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098e:	bd70      	popgt	{r4, r5, r6, pc}
 8000990:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000994:	f04f 0e00 	mov.w	lr, #0
 8000998:	3c01      	subs	r4, #1
 800099a:	e690      	b.n	80006be <__aeabi_dmul+0xde>
 800099c:	ea45 0e06 	orr.w	lr, r5, r6
 80009a0:	e68d      	b.n	80006be <__aeabi_dmul+0xde>
 80009a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a6:	ea94 0f0c 	teq	r4, ip
 80009aa:	bf08      	it	eq
 80009ac:	ea95 0f0c 	teqeq	r5, ip
 80009b0:	f43f af3b 	beq.w	800082a <__aeabi_dmul+0x24a>
 80009b4:	ea94 0f0c 	teq	r4, ip
 80009b8:	d10a      	bne.n	80009d0 <__aeabi_ddiv+0x19c>
 80009ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009be:	f47f af34 	bne.w	800082a <__aeabi_dmul+0x24a>
 80009c2:	ea95 0f0c 	teq	r5, ip
 80009c6:	f47f af25 	bne.w	8000814 <__aeabi_dmul+0x234>
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	e72c      	b.n	800082a <__aeabi_dmul+0x24a>
 80009d0:	ea95 0f0c 	teq	r5, ip
 80009d4:	d106      	bne.n	80009e4 <__aeabi_ddiv+0x1b0>
 80009d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009da:	f43f aefd 	beq.w	80007d8 <__aeabi_dmul+0x1f8>
 80009de:	4610      	mov	r0, r2
 80009e0:	4619      	mov	r1, r3
 80009e2:	e722      	b.n	800082a <__aeabi_dmul+0x24a>
 80009e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ee:	f47f aec5 	bne.w	800077c <__aeabi_dmul+0x19c>
 80009f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f6:	f47f af0d 	bne.w	8000814 <__aeabi_dmul+0x234>
 80009fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fe:	f47f aeeb 	bne.w	80007d8 <__aeabi_dmul+0x1f8>
 8000a02:	e712      	b.n	800082a <__aeabi_dmul+0x24a>

08000a04 <__aeabi_d2uiz>:
 8000a04:	004a      	lsls	r2, r1, #1
 8000a06:	d211      	bcs.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a0c:	d211      	bcs.n	8000a32 <__aeabi_d2uiz+0x2e>
 8000a0e:	d50d      	bpl.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a18:	d40e      	bmi.n	8000a38 <__aeabi_d2uiz+0x34>
 8000a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a26:	fa23 f002 	lsr.w	r0, r3, r2
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d102      	bne.n	8000a3e <__aeabi_d2uiz+0x3a>
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	4770      	bx	lr
 8000a3e:	f04f 0000 	mov.w	r0, #0
 8000a42:	4770      	bx	lr

08000a44 <__aeabi_d2f>:
 8000a44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a4c:	bf24      	itt	cs
 8000a4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a56:	d90d      	bls.n	8000a74 <__aeabi_d2f+0x30>
 8000a58:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a64:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a6c:	bf08      	it	eq
 8000a6e:	f020 0001 	biceq.w	r0, r0, #1
 8000a72:	4770      	bx	lr
 8000a74:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a78:	d121      	bne.n	8000abe <__aeabi_d2f+0x7a>
 8000a7a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a7e:	bfbc      	itt	lt
 8000a80:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a84:	4770      	bxlt	lr
 8000a86:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a8e:	f1c2 0218 	rsb	r2, r2, #24
 8000a92:	f1c2 0c20 	rsb	ip, r2, #32
 8000a96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	f040 0001 	orrne.w	r0, r0, #1
 8000aa4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab0:	ea40 000c 	orr.w	r0, r0, ip
 8000ab4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000abc:	e7cc      	b.n	8000a58 <__aeabi_d2f+0x14>
 8000abe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ac2:	d107      	bne.n	8000ad4 <__aeabi_d2f+0x90>
 8000ac4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac8:	bf1e      	ittt	ne
 8000aca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ace:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ad2:	4770      	bxne	lr
 8000ad4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ad8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000adc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_uldivmod>:
 8000ae4:	b953      	cbnz	r3, 8000afc <__aeabi_uldivmod+0x18>
 8000ae6:	b94a      	cbnz	r2, 8000afc <__aeabi_uldivmod+0x18>
 8000ae8:	2900      	cmp	r1, #0
 8000aea:	bf08      	it	eq
 8000aec:	2800      	cmpeq	r0, #0
 8000aee:	bf1c      	itt	ne
 8000af0:	f04f 31ff 	movne.w	r1, #4294967295
 8000af4:	f04f 30ff 	movne.w	r0, #4294967295
 8000af8:	f000 b97a 	b.w	8000df0 <__aeabi_idiv0>
 8000afc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b04:	f000 f806 	bl	8000b14 <__udivmoddi4>
 8000b08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b10:	b004      	add	sp, #16
 8000b12:	4770      	bx	lr

08000b14 <__udivmoddi4>:
 8000b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b18:	468c      	mov	ip, r1
 8000b1a:	460d      	mov	r5, r1
 8000b1c:	4604      	mov	r4, r0
 8000b1e:	9e08      	ldr	r6, [sp, #32]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d151      	bne.n	8000bc8 <__udivmoddi4+0xb4>
 8000b24:	428a      	cmp	r2, r1
 8000b26:	4617      	mov	r7, r2
 8000b28:	d96d      	bls.n	8000c06 <__udivmoddi4+0xf2>
 8000b2a:	fab2 fe82 	clz	lr, r2
 8000b2e:	f1be 0f00 	cmp.w	lr, #0
 8000b32:	d00b      	beq.n	8000b4c <__udivmoddi4+0x38>
 8000b34:	f1ce 0c20 	rsb	ip, lr, #32
 8000b38:	fa01 f50e 	lsl.w	r5, r1, lr
 8000b3c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000b40:	fa02 f70e 	lsl.w	r7, r2, lr
 8000b44:	ea4c 0c05 	orr.w	ip, ip, r5
 8000b48:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b4c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000b50:	0c25      	lsrs	r5, r4, #16
 8000b52:	fbbc f8fa 	udiv	r8, ip, sl
 8000b56:	fa1f f987 	uxth.w	r9, r7
 8000b5a:	fb0a cc18 	mls	ip, sl, r8, ip
 8000b5e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000b62:	fb08 f309 	mul.w	r3, r8, r9
 8000b66:	42ab      	cmp	r3, r5
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x6c>
 8000b6a:	19ed      	adds	r5, r5, r7
 8000b6c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000b70:	f080 8123 	bcs.w	8000dba <__udivmoddi4+0x2a6>
 8000b74:	42ab      	cmp	r3, r5
 8000b76:	f240 8120 	bls.w	8000dba <__udivmoddi4+0x2a6>
 8000b7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000b7e:	443d      	add	r5, r7
 8000b80:	1aed      	subs	r5, r5, r3
 8000b82:	b2a4      	uxth	r4, r4
 8000b84:	fbb5 f0fa 	udiv	r0, r5, sl
 8000b88:	fb0a 5510 	mls	r5, sl, r0, r5
 8000b8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b90:	fb00 f909 	mul.w	r9, r0, r9
 8000b94:	45a1      	cmp	r9, r4
 8000b96:	d909      	bls.n	8000bac <__udivmoddi4+0x98>
 8000b98:	19e4      	adds	r4, r4, r7
 8000b9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9e:	f080 810a 	bcs.w	8000db6 <__udivmoddi4+0x2a2>
 8000ba2:	45a1      	cmp	r9, r4
 8000ba4:	f240 8107 	bls.w	8000db6 <__udivmoddi4+0x2a2>
 8000ba8:	3802      	subs	r0, #2
 8000baa:	443c      	add	r4, r7
 8000bac:	eba4 0409 	sub.w	r4, r4, r9
 8000bb0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	2e00      	cmp	r6, #0
 8000bb8:	d061      	beq.n	8000c7e <__udivmoddi4+0x16a>
 8000bba:	fa24 f40e 	lsr.w	r4, r4, lr
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	6034      	str	r4, [r6, #0]
 8000bc2:	6073      	str	r3, [r6, #4]
 8000bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc8:	428b      	cmp	r3, r1
 8000bca:	d907      	bls.n	8000bdc <__udivmoddi4+0xc8>
 8000bcc:	2e00      	cmp	r6, #0
 8000bce:	d054      	beq.n	8000c7a <__udivmoddi4+0x166>
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	e886 0021 	stmia.w	r6, {r0, r5}
 8000bd6:	4608      	mov	r0, r1
 8000bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bdc:	fab3 f183 	clz	r1, r3
 8000be0:	2900      	cmp	r1, #0
 8000be2:	f040 808e 	bne.w	8000d02 <__udivmoddi4+0x1ee>
 8000be6:	42ab      	cmp	r3, r5
 8000be8:	d302      	bcc.n	8000bf0 <__udivmoddi4+0xdc>
 8000bea:	4282      	cmp	r2, r0
 8000bec:	f200 80fa 	bhi.w	8000de4 <__udivmoddi4+0x2d0>
 8000bf0:	1a84      	subs	r4, r0, r2
 8000bf2:	eb65 0503 	sbc.w	r5, r5, r3
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	46ac      	mov	ip, r5
 8000bfa:	2e00      	cmp	r6, #0
 8000bfc:	d03f      	beq.n	8000c7e <__udivmoddi4+0x16a>
 8000bfe:	e886 1010 	stmia.w	r6, {r4, ip}
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	b912      	cbnz	r2, 8000c0e <__udivmoddi4+0xfa>
 8000c08:	2701      	movs	r7, #1
 8000c0a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000c0e:	fab7 fe87 	clz	lr, r7
 8000c12:	f1be 0f00 	cmp.w	lr, #0
 8000c16:	d134      	bne.n	8000c82 <__udivmoddi4+0x16e>
 8000c18:	1beb      	subs	r3, r5, r7
 8000c1a:	0c3a      	lsrs	r2, r7, #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	2101      	movs	r1, #1
 8000c22:	fbb3 f8f2 	udiv	r8, r3, r2
 8000c26:	0c25      	lsrs	r5, r4, #16
 8000c28:	fb02 3318 	mls	r3, r2, r8, r3
 8000c2c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c30:	fb0c f308 	mul.w	r3, ip, r8
 8000c34:	42ab      	cmp	r3, r5
 8000c36:	d907      	bls.n	8000c48 <__udivmoddi4+0x134>
 8000c38:	19ed      	adds	r5, r5, r7
 8000c3a:	f108 30ff 	add.w	r0, r8, #4294967295
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x132>
 8000c40:	42ab      	cmp	r3, r5
 8000c42:	f200 80d1 	bhi.w	8000de8 <__udivmoddi4+0x2d4>
 8000c46:	4680      	mov	r8, r0
 8000c48:	1aed      	subs	r5, r5, r3
 8000c4a:	b2a3      	uxth	r3, r4
 8000c4c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000c50:	fb02 5510 	mls	r5, r2, r0, r5
 8000c54:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c58:	fb0c fc00 	mul.w	ip, ip, r0
 8000c5c:	45a4      	cmp	ip, r4
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0x15c>
 8000c60:	19e4      	adds	r4, r4, r7
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0x15a>
 8000c68:	45a4      	cmp	ip, r4
 8000c6a:	f200 80b8 	bhi.w	8000dde <__udivmoddi4+0x2ca>
 8000c6e:	4618      	mov	r0, r3
 8000c70:	eba4 040c 	sub.w	r4, r4, ip
 8000c74:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c78:	e79d      	b.n	8000bb6 <__udivmoddi4+0xa2>
 8000c7a:	4631      	mov	r1, r6
 8000c7c:	4630      	mov	r0, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	f1ce 0420 	rsb	r4, lr, #32
 8000c86:	fa05 f30e 	lsl.w	r3, r5, lr
 8000c8a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c8e:	fa20 f804 	lsr.w	r8, r0, r4
 8000c92:	0c3a      	lsrs	r2, r7, #16
 8000c94:	fa25 f404 	lsr.w	r4, r5, r4
 8000c98:	ea48 0803 	orr.w	r8, r8, r3
 8000c9c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000ca0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000ca4:	fb02 4411 	mls	r4, r2, r1, r4
 8000ca8:	fa1f fc87 	uxth.w	ip, r7
 8000cac:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000cb0:	fb01 f30c 	mul.w	r3, r1, ip
 8000cb4:	42ab      	cmp	r3, r5
 8000cb6:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cba:	d909      	bls.n	8000cd0 <__udivmoddi4+0x1bc>
 8000cbc:	19ed      	adds	r5, r5, r7
 8000cbe:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cc2:	f080 808a 	bcs.w	8000dda <__udivmoddi4+0x2c6>
 8000cc6:	42ab      	cmp	r3, r5
 8000cc8:	f240 8087 	bls.w	8000dda <__udivmoddi4+0x2c6>
 8000ccc:	3902      	subs	r1, #2
 8000cce:	443d      	add	r5, r7
 8000cd0:	1aeb      	subs	r3, r5, r3
 8000cd2:	fa1f f588 	uxth.w	r5, r8
 8000cd6:	fbb3 f0f2 	udiv	r0, r3, r2
 8000cda:	fb02 3310 	mls	r3, r2, r0, r3
 8000cde:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ce2:	fb00 f30c 	mul.w	r3, r0, ip
 8000ce6:	42ab      	cmp	r3, r5
 8000ce8:	d907      	bls.n	8000cfa <__udivmoddi4+0x1e6>
 8000cea:	19ed      	adds	r5, r5, r7
 8000cec:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf0:	d26f      	bcs.n	8000dd2 <__udivmoddi4+0x2be>
 8000cf2:	42ab      	cmp	r3, r5
 8000cf4:	d96d      	bls.n	8000dd2 <__udivmoddi4+0x2be>
 8000cf6:	3802      	subs	r0, #2
 8000cf8:	443d      	add	r5, r7
 8000cfa:	1aeb      	subs	r3, r5, r3
 8000cfc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d00:	e78f      	b.n	8000c22 <__udivmoddi4+0x10e>
 8000d02:	f1c1 0720 	rsb	r7, r1, #32
 8000d06:	fa22 f807 	lsr.w	r8, r2, r7
 8000d0a:	408b      	lsls	r3, r1
 8000d0c:	fa05 f401 	lsl.w	r4, r5, r1
 8000d10:	ea48 0303 	orr.w	r3, r8, r3
 8000d14:	fa20 fe07 	lsr.w	lr, r0, r7
 8000d18:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000d1c:	40fd      	lsrs	r5, r7
 8000d1e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000d22:	fbb5 f9fc 	udiv	r9, r5, ip
 8000d26:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000d2a:	fb0c 5519 	mls	r5, ip, r9, r5
 8000d2e:	fa1f f883 	uxth.w	r8, r3
 8000d32:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000d36:	fb09 f408 	mul.w	r4, r9, r8
 8000d3a:	42ac      	cmp	r4, r5
 8000d3c:	fa02 f201 	lsl.w	r2, r2, r1
 8000d40:	fa00 fa01 	lsl.w	sl, r0, r1
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x244>
 8000d46:	18ed      	adds	r5, r5, r3
 8000d48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d4c:	d243      	bcs.n	8000dd6 <__udivmoddi4+0x2c2>
 8000d4e:	42ac      	cmp	r4, r5
 8000d50:	d941      	bls.n	8000dd6 <__udivmoddi4+0x2c2>
 8000d52:	f1a9 0902 	sub.w	r9, r9, #2
 8000d56:	441d      	add	r5, r3
 8000d58:	1b2d      	subs	r5, r5, r4
 8000d5a:	fa1f fe8e 	uxth.w	lr, lr
 8000d5e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000d62:	fb0c 5510 	mls	r5, ip, r0, r5
 8000d66:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000d6a:	fb00 f808 	mul.w	r8, r0, r8
 8000d6e:	45a0      	cmp	r8, r4
 8000d70:	d907      	bls.n	8000d82 <__udivmoddi4+0x26e>
 8000d72:	18e4      	adds	r4, r4, r3
 8000d74:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d78:	d229      	bcs.n	8000dce <__udivmoddi4+0x2ba>
 8000d7a:	45a0      	cmp	r8, r4
 8000d7c:	d927      	bls.n	8000dce <__udivmoddi4+0x2ba>
 8000d7e:	3802      	subs	r0, #2
 8000d80:	441c      	add	r4, r3
 8000d82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d86:	eba4 0408 	sub.w	r4, r4, r8
 8000d8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d8e:	454c      	cmp	r4, r9
 8000d90:	46c6      	mov	lr, r8
 8000d92:	464d      	mov	r5, r9
 8000d94:	d315      	bcc.n	8000dc2 <__udivmoddi4+0x2ae>
 8000d96:	d012      	beq.n	8000dbe <__udivmoddi4+0x2aa>
 8000d98:	b156      	cbz	r6, 8000db0 <__udivmoddi4+0x29c>
 8000d9a:	ebba 030e 	subs.w	r3, sl, lr
 8000d9e:	eb64 0405 	sbc.w	r4, r4, r5
 8000da2:	fa04 f707 	lsl.w	r7, r4, r7
 8000da6:	40cb      	lsrs	r3, r1
 8000da8:	431f      	orrs	r7, r3
 8000daa:	40cc      	lsrs	r4, r1
 8000dac:	6037      	str	r7, [r6, #0]
 8000dae:	6074      	str	r4, [r6, #4]
 8000db0:	2100      	movs	r1, #0
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	4618      	mov	r0, r3
 8000db8:	e6f8      	b.n	8000bac <__udivmoddi4+0x98>
 8000dba:	4690      	mov	r8, r2
 8000dbc:	e6e0      	b.n	8000b80 <__udivmoddi4+0x6c>
 8000dbe:	45c2      	cmp	sl, r8
 8000dc0:	d2ea      	bcs.n	8000d98 <__udivmoddi4+0x284>
 8000dc2:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dc6:	eb69 0503 	sbc.w	r5, r9, r3
 8000dca:	3801      	subs	r0, #1
 8000dcc:	e7e4      	b.n	8000d98 <__udivmoddi4+0x284>
 8000dce:	4628      	mov	r0, r5
 8000dd0:	e7d7      	b.n	8000d82 <__udivmoddi4+0x26e>
 8000dd2:	4640      	mov	r0, r8
 8000dd4:	e791      	b.n	8000cfa <__udivmoddi4+0x1e6>
 8000dd6:	4681      	mov	r9, r0
 8000dd8:	e7be      	b.n	8000d58 <__udivmoddi4+0x244>
 8000dda:	4601      	mov	r1, r0
 8000ddc:	e778      	b.n	8000cd0 <__udivmoddi4+0x1bc>
 8000dde:	3802      	subs	r0, #2
 8000de0:	443c      	add	r4, r7
 8000de2:	e745      	b.n	8000c70 <__udivmoddi4+0x15c>
 8000de4:	4608      	mov	r0, r1
 8000de6:	e708      	b.n	8000bfa <__udivmoddi4+0xe6>
 8000de8:	f1a8 0802 	sub.w	r8, r8, #2
 8000dec:	443d      	add	r5, r7
 8000dee:	e72b      	b.n	8000c48 <__udivmoddi4+0x134>

08000df0 <__aeabi_idiv0>:
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df4:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000df6:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <HAL_InitTick+0x24>)
{
 8000df8:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000dfa:	6818      	ldr	r0, [r3, #0]
 8000dfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e00:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e04:	f000 f894 	bl	8000f30 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	4621      	mov	r1, r4
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e10:	f000 f84e 	bl	8000eb0 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000e14:	2000      	movs	r0, #0
 8000e16:	bd10      	pop	{r4, pc}
 8000e18:	20000004 	.word	0x20000004

08000e1c <HAL_Init>:
{
 8000e1c:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <HAL_Init+0x30>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e26:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e2e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e36:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e38:	2003      	movs	r0, #3
 8000e3a:	f000 f827 	bl	8000e8c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f7ff ffd8 	bl	8000df4 <HAL_InitTick>
  HAL_MspInit();
 8000e44:	f001 fc30 	bl	80026a8 <HAL_MspInit>
}
 8000e48:	2000      	movs	r0, #0
 8000e4a:	bd08      	pop	{r3, pc}
 8000e4c:	40023c00 	.word	0x40023c00

08000e50 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000e50:	4a02      	ldr	r2, [pc, #8]	; (8000e5c <HAL_IncTick+0xc>)
 8000e52:	6813      	ldr	r3, [r2, #0]
 8000e54:	3301      	adds	r3, #1
 8000e56:	6013      	str	r3, [r2, #0]
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	200000b4 	.word	0x200000b4

08000e60 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e60:	4b01      	ldr	r3, [pc, #4]	; (8000e68 <HAL_GetTick+0x8>)
 8000e62:	6818      	ldr	r0, [r3, #0]
}
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	200000b4 	.word	0x200000b4

08000e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000e6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000e6e:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e70:	f7ff fff6 	bl	8000e60 <HAL_GetTick>
  uint32_t wait = Delay;
 8000e74:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e76:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000e78:	4605      	mov	r5, r0
  {
     wait++;
 8000e7a:	bf18      	it	ne
 8000e7c:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e7e:	f7ff ffef 	bl	8000e60 <HAL_GetTick>
 8000e82:	1b40      	subs	r0, r0, r5
 8000e84:	42a0      	cmp	r0, r4
 8000e86:	d3fa      	bcc.n	8000e7e <HAL_Delay+0x12>
  {
  }
}
 8000e88:	b003      	add	sp, #12
 8000e8a:	bd30      	pop	{r4, r5, pc}

08000e8c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e8c:	4a07      	ldr	r2, [pc, #28]	; (8000eac <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e8e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e90:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e94:	041b      	lsls	r3, r3, #16
 8000e96:	0c1b      	lsrs	r3, r3, #16
 8000e98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000e9c:	0200      	lsls	r0, r0, #8
 8000e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000ea6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000ea8:	60d3      	str	r3, [r2, #12]
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb0:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb2:	b530      	push	{r4, r5, lr}
 8000eb4:	68dc      	ldr	r4, [r3, #12]
 8000eb6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eba:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ebe:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec0:	2b04      	cmp	r3, #4
 8000ec2:	bf28      	it	cs
 8000ec4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	f04f 0501 	mov.w	r5, #1
 8000ecc:	fa05 f303 	lsl.w	r3, r5, r3
 8000ed0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed4:	bf8c      	ite	hi
 8000ed6:	3c03      	subhi	r4, #3
 8000ed8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eda:	4019      	ands	r1, r3
 8000edc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ede:	fa05 f404 	lsl.w	r4, r5, r4
 8000ee2:	3c01      	subs	r4, #1
 8000ee4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000ee6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	ea42 0201 	orr.w	r2, r2, r1
 8000eec:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef0:	bfaf      	iteee	ge
 8000ef2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef6:	f000 000f 	andlt.w	r0, r0, #15
 8000efa:	4b06      	ldrlt	r3, [pc, #24]	; (8000f14 <HAL_NVIC_SetPriority+0x64>)
 8000efc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efe:	bfa5      	ittet	ge
 8000f00:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000f04:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f06:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f08:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000f0c:	bd30      	pop	{r4, r5, pc}
 8000f0e:	bf00      	nop
 8000f10:	e000ed00 	.word	0xe000ed00
 8000f14:	e000ed14 	.word	0xe000ed14

08000f18 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000f18:	0942      	lsrs	r2, r0, #5
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	f000 001f 	and.w	r0, r0, #31
 8000f20:	fa03 f000 	lsl.w	r0, r3, r0
 8000f24:	4b01      	ldr	r3, [pc, #4]	; (8000f2c <HAL_NVIC_EnableIRQ+0x14>)
 8000f26:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000f2a:	4770      	bx	lr
 8000f2c:	e000e100 	.word	0xe000e100

08000f30 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f30:	3801      	subs	r0, #1
 8000f32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000f36:	d20a      	bcs.n	8000f4e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3a:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3e:	21f0      	movs	r1, #240	; 0xf0
 8000f40:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f44:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f46:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f48:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f4e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000e010 	.word	0xe000e010
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000f5e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000f60:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000f62:	bf0c      	ite	eq
 8000f64:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000f68:	f022 0204 	bicne.w	r2, r2, #4
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	4770      	bx	lr
 8000f70:	e000e010 	.word	0xe000e010

08000f74 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000f74:	4770      	bx	lr

08000f76 <HAL_SYSTICK_IRQHandler>:
{
 8000f76:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000f78:	f7ff fffc 	bl	8000f74 <HAL_SYSTICK_Callback>
 8000f7c:	bd08      	pop	{r3, pc}
	...

08000f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f84:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f86:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f88:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001138 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f8c:	4a68      	ldr	r2, [pc, #416]	; (8001130 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f8e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 800113c <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f92:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f94:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000f96:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f9a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000f9c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fa0:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000fa4:	45b6      	cmp	lr, r6
 8000fa6:	f040 80ae 	bne.w	8001106 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000faa:	684c      	ldr	r4, [r1, #4]
 8000fac:	f024 0710 	bic.w	r7, r4, #16
 8000fb0:	2f02      	cmp	r7, #2
 8000fb2:	d116      	bne.n	8000fe2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000fb4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000fb8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fbc:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000fc0:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fc4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000fc8:	f04f 0c0f 	mov.w	ip, #15
 8000fcc:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000fd0:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fd4:	690d      	ldr	r5, [r1, #16]
 8000fd6:	fa05 f50b 	lsl.w	r5, r5, fp
 8000fda:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000fde:	f8ca 5020 	str.w	r5, [sl, #32]
 8000fe2:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fe6:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000fe8:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fec:	fa05 f50a 	lsl.w	r5, r5, sl
 8000ff0:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff2:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ff6:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ffa:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ffe:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001000:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001004:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001006:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800100a:	d811      	bhi.n	8001030 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 800100c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800100e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001012:	68cf      	ldr	r7, [r1, #12]
 8001014:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001018:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800101c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800101e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001020:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001024:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001028:	409f      	lsls	r7, r3
 800102a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800102e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001030:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001032:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001034:	688f      	ldr	r7, [r1, #8]
 8001036:	fa07 f70a 	lsl.w	r7, r7, sl
 800103a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800103c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800103e:	00e5      	lsls	r5, r4, #3
 8001040:	d561      	bpl.n	8001106 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001042:	f04f 0b00 	mov.w	fp, #0
 8001046:	f8cd b00c 	str.w	fp, [sp, #12]
 800104a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800104e:	4d39      	ldr	r5, [pc, #228]	; (8001134 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001050:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001054:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001058:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800105c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001060:	9703      	str	r7, [sp, #12]
 8001062:	9f03      	ldr	r7, [sp, #12]
 8001064:	f023 0703 	bic.w	r7, r3, #3
 8001068:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800106c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001070:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001074:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001078:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800107c:	f04f 0e0f 	mov.w	lr, #15
 8001080:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001084:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001086:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800108a:	d043      	beq.n	8001114 <HAL_GPIO_Init+0x194>
 800108c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001090:	42a8      	cmp	r0, r5
 8001092:	d041      	beq.n	8001118 <HAL_GPIO_Init+0x198>
 8001094:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001098:	42a8      	cmp	r0, r5
 800109a:	d03f      	beq.n	800111c <HAL_GPIO_Init+0x19c>
 800109c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010a0:	42a8      	cmp	r0, r5
 80010a2:	d03d      	beq.n	8001120 <HAL_GPIO_Init+0x1a0>
 80010a4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010a8:	42a8      	cmp	r0, r5
 80010aa:	d03b      	beq.n	8001124 <HAL_GPIO_Init+0x1a4>
 80010ac:	4548      	cmp	r0, r9
 80010ae:	d03b      	beq.n	8001128 <HAL_GPIO_Init+0x1a8>
 80010b0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80010b4:	42a8      	cmp	r0, r5
 80010b6:	d039      	beq.n	800112c <HAL_GPIO_Init+0x1ac>
 80010b8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010bc:	42a8      	cmp	r0, r5
 80010be:	bf14      	ite	ne
 80010c0:	2508      	movne	r5, #8
 80010c2:	2507      	moveq	r5, #7
 80010c4:	fa05 f50c 	lsl.w	r5, r5, ip
 80010c8:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010cc:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80010ce:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80010d0:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010d2:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80010d6:	bf0c      	ite	eq
 80010d8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80010da:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80010dc:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80010de:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010e0:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80010e4:	bf0c      	ite	eq
 80010e6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80010e8:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80010ea:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ec:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010ee:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80010f2:	bf0c      	ite	eq
 80010f4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80010f6:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80010f8:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80010fa:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010fc:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80010fe:	bf54      	ite	pl
 8001100:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001102:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001104:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001106:	3301      	adds	r3, #1
 8001108:	2b10      	cmp	r3, #16
 800110a:	f47f af44 	bne.w	8000f96 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800110e:	b005      	add	sp, #20
 8001110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001114:	465d      	mov	r5, fp
 8001116:	e7d5      	b.n	80010c4 <HAL_GPIO_Init+0x144>
 8001118:	2501      	movs	r5, #1
 800111a:	e7d3      	b.n	80010c4 <HAL_GPIO_Init+0x144>
 800111c:	2502      	movs	r5, #2
 800111e:	e7d1      	b.n	80010c4 <HAL_GPIO_Init+0x144>
 8001120:	2503      	movs	r5, #3
 8001122:	e7cf      	b.n	80010c4 <HAL_GPIO_Init+0x144>
 8001124:	2504      	movs	r5, #4
 8001126:	e7cd      	b.n	80010c4 <HAL_GPIO_Init+0x144>
 8001128:	2505      	movs	r5, #5
 800112a:	e7cb      	b.n	80010c4 <HAL_GPIO_Init+0x144>
 800112c:	2506      	movs	r5, #6
 800112e:	e7c9      	b.n	80010c4 <HAL_GPIO_Init+0x144>
 8001130:	40013c00 	.word	0x40013c00
 8001134:	40020000 	.word	0x40020000
 8001138:	40023800 	.word	0x40023800
 800113c:	40021400 	.word	0x40021400

08001140 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001140:	b10a      	cbz	r2, 8001146 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001142:	6181      	str	r1, [r0, #24]
 8001144:	4770      	bx	lr
 8001146:	0409      	lsls	r1, r1, #16
 8001148:	e7fb      	b.n	8001142 <HAL_GPIO_WritePin+0x2>
	...

0800114c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800114c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800114e:	4604      	mov	r4, r0
 8001150:	b910      	cbnz	r0, 8001158 <HAL_RCC_OscConfig+0xc>
  {
    return HAL_ERROR;
 8001152:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001154:	b003      	add	sp, #12
 8001156:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001158:	6803      	ldr	r3, [r0, #0]
 800115a:	07d8      	lsls	r0, r3, #31
 800115c:	d43b      	bmi.n	80011d6 <HAL_RCC_OscConfig+0x8a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800115e:	6823      	ldr	r3, [r4, #0]
 8001160:	0799      	lsls	r1, r3, #30
 8001162:	f100 8084 	bmi.w	800126e <HAL_RCC_OscConfig+0x122>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001166:	6823      	ldr	r3, [r4, #0]
 8001168:	071e      	lsls	r6, r3, #28
 800116a:	f100 80c6 	bmi.w	80012fa <HAL_RCC_OscConfig+0x1ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800116e:	6823      	ldr	r3, [r4, #0]
 8001170:	075d      	lsls	r5, r3, #29
 8001172:	d52a      	bpl.n	80011ca <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001174:	2300      	movs	r3, #0
 8001176:	9301      	str	r3, [sp, #4]
 8001178:	4baa      	ldr	r3, [pc, #680]	; (8001424 <HAL_RCC_OscConfig+0x2d8>)
    PWR->CR |= PWR_CR_DBP;
 800117a:	4dab      	ldr	r5, [pc, #684]	; (8001428 <HAL_RCC_OscConfig+0x2dc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800117c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800117e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001182:	641a      	str	r2, [r3, #64]	; 0x40
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118a:	9301      	str	r3, [sp, #4]
 800118c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800118e:	682b      	ldr	r3, [r5, #0]
 8001190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001194:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001196:	f7ff fe63 	bl	8000e60 <HAL_GetTick>
 800119a:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800119c:	682b      	ldr	r3, [r5, #0]
 800119e:	05da      	lsls	r2, r3, #23
 80011a0:	f140 80cd 	bpl.w	800133e <HAL_RCC_OscConfig+0x1f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011a4:	68a3      	ldr	r3, [r4, #8]
 80011a6:	4d9f      	ldr	r5, [pc, #636]	; (8001424 <HAL_RCC_OscConfig+0x2d8>)
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	f040 80cf 	bne.w	800134c <HAL_RCC_OscConfig+0x200>
 80011ae:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80011b6:	f7ff fe53 	bl	8000e60 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ba:	4d9a      	ldr	r5, [pc, #616]	; (8001424 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 80011bc:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011be:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011c2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80011c4:	079b      	lsls	r3, r3, #30
 80011c6:	f140 80e2 	bpl.w	800138e <HAL_RCC_OscConfig+0x242>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011ca:	69a2      	ldr	r2, [r4, #24]
 80011cc:	2a00      	cmp	r2, #0
 80011ce:	f040 80e5 	bne.w	800139c <HAL_RCC_OscConfig+0x250>
  return HAL_OK;
 80011d2:	2000      	movs	r0, #0
 80011d4:	e7be      	b.n	8001154 <HAL_RCC_OscConfig+0x8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011d6:	4b93      	ldr	r3, [pc, #588]	; (8001424 <HAL_RCC_OscConfig+0x2d8>)
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	f002 020c 	and.w	r2, r2, #12
 80011de:	2a04      	cmp	r2, #4
 80011e0:	d007      	beq.n	80011f2 <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011e8:	2a08      	cmp	r2, #8
 80011ea:	d10a      	bne.n	8001202 <HAL_RCC_OscConfig+0xb6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	025a      	lsls	r2, r3, #9
 80011f0:	d507      	bpl.n	8001202 <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f2:	4b8c      	ldr	r3, [pc, #560]	; (8001424 <HAL_RCC_OscConfig+0x2d8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	039b      	lsls	r3, r3, #14
 80011f8:	d5b1      	bpl.n	800115e <HAL_RCC_OscConfig+0x12>
 80011fa:	6863      	ldr	r3, [r4, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1ae      	bne.n	800115e <HAL_RCC_OscConfig+0x12>
 8001200:	e7a7      	b.n	8001152 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001202:	6863      	ldr	r3, [r4, #4]
 8001204:	4d87      	ldr	r5, [pc, #540]	; (8001424 <HAL_RCC_OscConfig+0x2d8>)
 8001206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800120a:	d111      	bne.n	8001230 <HAL_RCC_OscConfig+0xe4>
 800120c:	682b      	ldr	r3, [r5, #0]
 800120e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001212:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001214:	f7ff fe24 	bl	8000e60 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001218:	4d82      	ldr	r5, [pc, #520]	; (8001424 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 800121a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121c:	682b      	ldr	r3, [r5, #0]
 800121e:	039f      	lsls	r7, r3, #14
 8001220:	d49d      	bmi.n	800115e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001222:	f7ff fe1d 	bl	8000e60 <HAL_GetTick>
 8001226:	1b80      	subs	r0, r0, r6
 8001228:	2864      	cmp	r0, #100	; 0x64
 800122a:	d9f7      	bls.n	800121c <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 800122c:	2003      	movs	r0, #3
 800122e:	e791      	b.n	8001154 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001230:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001234:	d104      	bne.n	8001240 <HAL_RCC_OscConfig+0xf4>
 8001236:	682b      	ldr	r3, [r5, #0]
 8001238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800123c:	602b      	str	r3, [r5, #0]
 800123e:	e7e5      	b.n	800120c <HAL_RCC_OscConfig+0xc0>
 8001240:	682a      	ldr	r2, [r5, #0]
 8001242:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001246:	602a      	str	r2, [r5, #0]
 8001248:	682a      	ldr	r2, [r5, #0]
 800124a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800124e:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1df      	bne.n	8001214 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 8001254:	f7ff fe04 	bl	8000e60 <HAL_GetTick>
 8001258:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800125a:	682b      	ldr	r3, [r5, #0]
 800125c:	0398      	lsls	r0, r3, #14
 800125e:	f57f af7e 	bpl.w	800115e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001262:	f7ff fdfd 	bl	8000e60 <HAL_GetTick>
 8001266:	1b80      	subs	r0, r0, r6
 8001268:	2864      	cmp	r0, #100	; 0x64
 800126a:	d9f6      	bls.n	800125a <HAL_RCC_OscConfig+0x10e>
 800126c:	e7de      	b.n	800122c <HAL_RCC_OscConfig+0xe0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800126e:	4b6d      	ldr	r3, [pc, #436]	; (8001424 <HAL_RCC_OscConfig+0x2d8>)
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	f012 0f0c 	tst.w	r2, #12
 8001276:	d007      	beq.n	8001288 <HAL_RCC_OscConfig+0x13c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001278:	689a      	ldr	r2, [r3, #8]
 800127a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800127e:	2a08      	cmp	r2, #8
 8001280:	d112      	bne.n	80012a8 <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	0259      	lsls	r1, r3, #9
 8001286:	d40f      	bmi.n	80012a8 <HAL_RCC_OscConfig+0x15c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001288:	4b66      	ldr	r3, [pc, #408]	; (8001424 <HAL_RCC_OscConfig+0x2d8>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	0792      	lsls	r2, r2, #30
 800128e:	d503      	bpl.n	8001298 <HAL_RCC_OscConfig+0x14c>
 8001290:	68e2      	ldr	r2, [r4, #12]
 8001292:	2a01      	cmp	r2, #1
 8001294:	f47f af5d 	bne.w	8001152 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	6921      	ldr	r1, [r4, #16]
 800129c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80012a0:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80012a4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a6:	e75e      	b.n	8001166 <HAL_RCC_OscConfig+0x1a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012a8:	68e2      	ldr	r2, [r4, #12]
 80012aa:	4b60      	ldr	r3, [pc, #384]	; (800142c <HAL_RCC_OscConfig+0x2e0>)
 80012ac:	b1b2      	cbz	r2, 80012dc <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 80012ae:	2201      	movs	r2, #1
 80012b0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012b2:	f7ff fdd5 	bl	8000e60 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b6:	4d5b      	ldr	r5, [pc, #364]	; (8001424 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 80012b8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ba:	682b      	ldr	r3, [r5, #0]
 80012bc:	079b      	lsls	r3, r3, #30
 80012be:	d507      	bpl.n	80012d0 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c0:	682b      	ldr	r3, [r5, #0]
 80012c2:	6922      	ldr	r2, [r4, #16]
 80012c4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80012c8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80012cc:	602b      	str	r3, [r5, #0]
 80012ce:	e74a      	b.n	8001166 <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d0:	f7ff fdc6 	bl	8000e60 <HAL_GetTick>
 80012d4:	1b80      	subs	r0, r0, r6
 80012d6:	2802      	cmp	r0, #2
 80012d8:	d9ef      	bls.n	80012ba <HAL_RCC_OscConfig+0x16e>
 80012da:	e7a7      	b.n	800122c <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 80012dc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012de:	f7ff fdbf 	bl	8000e60 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e2:	4d50      	ldr	r5, [pc, #320]	; (8001424 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 80012e4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e6:	682b      	ldr	r3, [r5, #0]
 80012e8:	079f      	lsls	r7, r3, #30
 80012ea:	f57f af3c 	bpl.w	8001166 <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ee:	f7ff fdb7 	bl	8000e60 <HAL_GetTick>
 80012f2:	1b80      	subs	r0, r0, r6
 80012f4:	2802      	cmp	r0, #2
 80012f6:	d9f6      	bls.n	80012e6 <HAL_RCC_OscConfig+0x19a>
 80012f8:	e798      	b.n	800122c <HAL_RCC_OscConfig+0xe0>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012fa:	6962      	ldr	r2, [r4, #20]
 80012fc:	4b4c      	ldr	r3, [pc, #304]	; (8001430 <HAL_RCC_OscConfig+0x2e4>)
 80012fe:	b17a      	cbz	r2, 8001320 <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_LSI_ENABLE();
 8001300:	2201      	movs	r2, #1
 8001302:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001304:	f7ff fdac 	bl	8000e60 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001308:	4d46      	ldr	r5, [pc, #280]	; (8001424 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 800130a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800130c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800130e:	0798      	lsls	r0, r3, #30
 8001310:	f53f af2d 	bmi.w	800116e <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001314:	f7ff fda4 	bl	8000e60 <HAL_GetTick>
 8001318:	1b80      	subs	r0, r0, r6
 800131a:	2802      	cmp	r0, #2
 800131c:	d9f6      	bls.n	800130c <HAL_RCC_OscConfig+0x1c0>
 800131e:	e785      	b.n	800122c <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_LSI_DISABLE();
 8001320:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001322:	f7ff fd9d 	bl	8000e60 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001326:	4d3f      	ldr	r5, [pc, #252]	; (8001424 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8001328:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800132a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800132c:	0799      	lsls	r1, r3, #30
 800132e:	f57f af1e 	bpl.w	800116e <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001332:	f7ff fd95 	bl	8000e60 <HAL_GetTick>
 8001336:	1b80      	subs	r0, r0, r6
 8001338:	2802      	cmp	r0, #2
 800133a:	d9f6      	bls.n	800132a <HAL_RCC_OscConfig+0x1de>
 800133c:	e776      	b.n	800122c <HAL_RCC_OscConfig+0xe0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800133e:	f7ff fd8f 	bl	8000e60 <HAL_GetTick>
 8001342:	1b80      	subs	r0, r0, r6
 8001344:	2802      	cmp	r0, #2
 8001346:	f67f af29 	bls.w	800119c <HAL_RCC_OscConfig+0x50>
 800134a:	e76f      	b.n	800122c <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800134c:	2b05      	cmp	r3, #5
 800134e:	d104      	bne.n	800135a <HAL_RCC_OscConfig+0x20e>
 8001350:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001352:	f043 0304 	orr.w	r3, r3, #4
 8001356:	672b      	str	r3, [r5, #112]	; 0x70
 8001358:	e729      	b.n	80011ae <HAL_RCC_OscConfig+0x62>
 800135a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800135c:	f022 0201 	bic.w	r2, r2, #1
 8001360:	672a      	str	r2, [r5, #112]	; 0x70
 8001362:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001364:	f022 0204 	bic.w	r2, r2, #4
 8001368:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800136a:	2b00      	cmp	r3, #0
 800136c:	f47f af23 	bne.w	80011b6 <HAL_RCC_OscConfig+0x6a>
      tickstart = HAL_GetTick();
 8001370:	f7ff fd76 	bl	8000e60 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001374:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001378:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800137a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800137c:	0798      	lsls	r0, r3, #30
 800137e:	f57f af24 	bpl.w	80011ca <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001382:	f7ff fd6d 	bl	8000e60 <HAL_GetTick>
 8001386:	1b80      	subs	r0, r0, r6
 8001388:	42b8      	cmp	r0, r7
 800138a:	d9f6      	bls.n	800137a <HAL_RCC_OscConfig+0x22e>
 800138c:	e74e      	b.n	800122c <HAL_RCC_OscConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800138e:	f7ff fd67 	bl	8000e60 <HAL_GetTick>
 8001392:	1b80      	subs	r0, r0, r6
 8001394:	42b8      	cmp	r0, r7
 8001396:	f67f af14 	bls.w	80011c2 <HAL_RCC_OscConfig+0x76>
 800139a:	e747      	b.n	800122c <HAL_RCC_OscConfig+0xe0>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800139c:	4d21      	ldr	r5, [pc, #132]	; (8001424 <HAL_RCC_OscConfig+0x2d8>)
 800139e:	68ab      	ldr	r3, [r5, #8]
 80013a0:	f003 030c 	and.w	r3, r3, #12
 80013a4:	2b08      	cmp	r3, #8
 80013a6:	f43f aed4 	beq.w	8001152 <HAL_RCC_OscConfig+0x6>
 80013aa:	4e22      	ldr	r6, [pc, #136]	; (8001434 <HAL_RCC_OscConfig+0x2e8>)
 80013ac:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013ae:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80013b0:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013b2:	d12a      	bne.n	800140a <HAL_RCC_OscConfig+0x2be>
        tickstart = HAL_GetTick();
 80013b4:	f7ff fd54 	bl	8000e60 <HAL_GetTick>
 80013b8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ba:	682b      	ldr	r3, [r5, #0]
 80013bc:	0199      	lsls	r1, r3, #6
 80013be:	d41e      	bmi.n	80013fe <HAL_RCC_OscConfig+0x2b2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013c0:	6a22      	ldr	r2, [r4, #32]
 80013c2:	69e3      	ldr	r3, [r4, #28]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80013c8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80013cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80013ce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80013d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013d4:	4c13      	ldr	r4, [pc, #76]	; (8001424 <HAL_RCC_OscConfig+0x2d8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013d6:	0852      	lsrs	r2, r2, #1
 80013d8:	3a01      	subs	r2, #1
 80013da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80013de:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80013e0:	2301      	movs	r3, #1
 80013e2:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80013e4:	f7ff fd3c 	bl	8000e60 <HAL_GetTick>
 80013e8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ea:	6823      	ldr	r3, [r4, #0]
 80013ec:	019a      	lsls	r2, r3, #6
 80013ee:	f53f aef0 	bmi.w	80011d2 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f2:	f7ff fd35 	bl	8000e60 <HAL_GetTick>
 80013f6:	1b40      	subs	r0, r0, r5
 80013f8:	2802      	cmp	r0, #2
 80013fa:	d9f6      	bls.n	80013ea <HAL_RCC_OscConfig+0x29e>
 80013fc:	e716      	b.n	800122c <HAL_RCC_OscConfig+0xe0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013fe:	f7ff fd2f 	bl	8000e60 <HAL_GetTick>
 8001402:	1bc0      	subs	r0, r0, r7
 8001404:	2802      	cmp	r0, #2
 8001406:	d9d8      	bls.n	80013ba <HAL_RCC_OscConfig+0x26e>
 8001408:	e710      	b.n	800122c <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 800140a:	f7ff fd29 	bl	8000e60 <HAL_GetTick>
 800140e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001410:	682b      	ldr	r3, [r5, #0]
 8001412:	019b      	lsls	r3, r3, #6
 8001414:	f57f aedd 	bpl.w	80011d2 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001418:	f7ff fd22 	bl	8000e60 <HAL_GetTick>
 800141c:	1b00      	subs	r0, r0, r4
 800141e:	2802      	cmp	r0, #2
 8001420:	d9f6      	bls.n	8001410 <HAL_RCC_OscConfig+0x2c4>
 8001422:	e703      	b.n	800122c <HAL_RCC_OscConfig+0xe0>
 8001424:	40023800 	.word	0x40023800
 8001428:	40007000 	.word	0x40007000
 800142c:	42470000 	.word	0x42470000
 8001430:	42470e80 	.word	0x42470e80
 8001434:	42470060 	.word	0x42470060

08001438 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001438:	4913      	ldr	r1, [pc, #76]	; (8001488 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800143a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800143c:	688b      	ldr	r3, [r1, #8]
 800143e:	f003 030c 	and.w	r3, r3, #12
 8001442:	2b04      	cmp	r3, #4
 8001444:	d003      	beq.n	800144e <HAL_RCC_GetSysClockFreq+0x16>
 8001446:	2b08      	cmp	r3, #8
 8001448:	d003      	beq.n	8001452 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800144a:	4810      	ldr	r0, [pc, #64]	; (800148c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800144c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800144e:	4810      	ldr	r0, [pc, #64]	; (8001490 <HAL_RCC_GetSysClockFreq+0x58>)
 8001450:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001452:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001454:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001456:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001458:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800145c:	bf14      	ite	ne
 800145e:	480c      	ldrne	r0, [pc, #48]	; (8001490 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001460:	480a      	ldreq	r0, [pc, #40]	; (800148c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001462:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001466:	bf18      	it	ne
 8001468:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800146a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800146e:	fba1 0100 	umull	r0, r1, r1, r0
 8001472:	f7ff fb37 	bl	8000ae4 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001476:	4b04      	ldr	r3, [pc, #16]	; (8001488 <HAL_RCC_GetSysClockFreq+0x50>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800147e:	3301      	adds	r3, #1
 8001480:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001482:	fbb0 f0f3 	udiv	r0, r0, r3
 8001486:	bd08      	pop	{r3, pc}
 8001488:	40023800 	.word	0x40023800
 800148c:	00f42400 	.word	0x00f42400
 8001490:	007a1200 	.word	0x007a1200

08001494 <HAL_RCC_ClockConfig>:
{
 8001494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001498:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800149a:	4604      	mov	r4, r0
 800149c:	b910      	cbnz	r0, 80014a4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800149e:	2001      	movs	r0, #1
 80014a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014a4:	4b44      	ldr	r3, [pc, #272]	; (80015b8 <HAL_RCC_ClockConfig+0x124>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	f002 020f 	and.w	r2, r2, #15
 80014ac:	428a      	cmp	r2, r1
 80014ae:	d328      	bcc.n	8001502 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014b0:	6821      	ldr	r1, [r4, #0]
 80014b2:	078f      	lsls	r7, r1, #30
 80014b4:	d42d      	bmi.n	8001512 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014b6:	07c8      	lsls	r0, r1, #31
 80014b8:	d440      	bmi.n	800153c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014ba:	4b3f      	ldr	r3, [pc, #252]	; (80015b8 <HAL_RCC_ClockConfig+0x124>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	f002 020f 	and.w	r2, r2, #15
 80014c2:	4295      	cmp	r5, r2
 80014c4:	d366      	bcc.n	8001594 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c6:	6822      	ldr	r2, [r4, #0]
 80014c8:	0751      	lsls	r1, r2, #29
 80014ca:	d46c      	bmi.n	80015a6 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014cc:	0713      	lsls	r3, r2, #28
 80014ce:	d507      	bpl.n	80014e0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014d0:	4a3a      	ldr	r2, [pc, #232]	; (80015bc <HAL_RCC_ClockConfig+0x128>)
 80014d2:	6921      	ldr	r1, [r4, #16]
 80014d4:	6893      	ldr	r3, [r2, #8]
 80014d6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80014da:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80014de:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014e0:	f7ff ffaa 	bl	8001438 <HAL_RCC_GetSysClockFreq>
 80014e4:	4b35      	ldr	r3, [pc, #212]	; (80015bc <HAL_RCC_ClockConfig+0x128>)
 80014e6:	4a36      	ldr	r2, [pc, #216]	; (80015c0 <HAL_RCC_ClockConfig+0x12c>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80014ee:	5cd3      	ldrb	r3, [r2, r3]
 80014f0:	40d8      	lsrs	r0, r3
 80014f2:	4b34      	ldr	r3, [pc, #208]	; (80015c4 <HAL_RCC_ClockConfig+0x130>)
 80014f4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80014f6:	2000      	movs	r0, #0
 80014f8:	f7ff fc7c 	bl	8000df4 <HAL_InitTick>
  return HAL_OK;
 80014fc:	2000      	movs	r0, #0
 80014fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001502:	b2ca      	uxtb	r2, r1
 8001504:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 030f 	and.w	r3, r3, #15
 800150c:	4299      	cmp	r1, r3
 800150e:	d1c6      	bne.n	800149e <HAL_RCC_ClockConfig+0xa>
 8001510:	e7ce      	b.n	80014b0 <HAL_RCC_ClockConfig+0x1c>
 8001512:	4b2a      	ldr	r3, [pc, #168]	; (80015bc <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001514:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001518:	bf1e      	ittt	ne
 800151a:	689a      	ldrne	r2, [r3, #8]
 800151c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001520:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001522:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001524:	bf42      	ittt	mi
 8001526:	689a      	ldrmi	r2, [r3, #8]
 8001528:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 800152c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	68a0      	ldr	r0, [r4, #8]
 8001532:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001536:	4302      	orrs	r2, r0
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	e7bc      	b.n	80014b6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800153c:	6862      	ldr	r2, [r4, #4]
 800153e:	4b1f      	ldr	r3, [pc, #124]	; (80015bc <HAL_RCC_ClockConfig+0x128>)
 8001540:	2a01      	cmp	r2, #1
 8001542:	d11d      	bne.n	8001580 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154a:	d0a8      	beq.n	800149e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800154c:	4e1b      	ldr	r6, [pc, #108]	; (80015bc <HAL_RCC_ClockConfig+0x128>)
 800154e:	68b3      	ldr	r3, [r6, #8]
 8001550:	f023 0303 	bic.w	r3, r3, #3
 8001554:	4313      	orrs	r3, r2
 8001556:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001558:	f7ff fc82 	bl	8000e60 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800155c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001560:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001562:	68b3      	ldr	r3, [r6, #8]
 8001564:	6862      	ldr	r2, [r4, #4]
 8001566:	f003 030c 	and.w	r3, r3, #12
 800156a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800156e:	d0a4      	beq.n	80014ba <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001570:	f7ff fc76 	bl	8000e60 <HAL_GetTick>
 8001574:	1bc0      	subs	r0, r0, r7
 8001576:	4540      	cmp	r0, r8
 8001578:	d9f3      	bls.n	8001562 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800157a:	2003      	movs	r0, #3
}
 800157c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001580:	1e91      	subs	r1, r2, #2
 8001582:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001584:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001586:	d802      	bhi.n	800158e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001588:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800158c:	e7dd      	b.n	800154a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800158e:	f013 0f02 	tst.w	r3, #2
 8001592:	e7da      	b.n	800154a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001594:	b2ea      	uxtb	r2, r5
 8001596:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	429d      	cmp	r5, r3
 80015a0:	f47f af7d 	bne.w	800149e <HAL_RCC_ClockConfig+0xa>
 80015a4:	e78f      	b.n	80014c6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015a6:	4905      	ldr	r1, [pc, #20]	; (80015bc <HAL_RCC_ClockConfig+0x128>)
 80015a8:	68e0      	ldr	r0, [r4, #12]
 80015aa:	688b      	ldr	r3, [r1, #8]
 80015ac:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80015b0:	4303      	orrs	r3, r0
 80015b2:	608b      	str	r3, [r1, #8]
 80015b4:	e78a      	b.n	80014cc <HAL_RCC_ClockConfig+0x38>
 80015b6:	bf00      	nop
 80015b8:	40023c00 	.word	0x40023c00
 80015bc:	40023800 	.word	0x40023800
 80015c0:	08003177 	.word	0x08003177
 80015c4:	20000004 	.word	0x20000004

080015c8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80015c8:	4b01      	ldr	r3, [pc, #4]	; (80015d0 <HAL_RCC_GetHCLKFreq+0x8>)
 80015ca:	6818      	ldr	r0, [r3, #0]
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	20000004 	.word	0x20000004

080015d4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80015d6:	4a05      	ldr	r2, [pc, #20]	; (80015ec <HAL_RCC_GetPCLK1Freq+0x18>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80015de:	5cd3      	ldrb	r3, [r2, r3]
 80015e0:	4a03      	ldr	r2, [pc, #12]	; (80015f0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80015e2:	6810      	ldr	r0, [r2, #0]
}
 80015e4:	40d8      	lsrs	r0, r3
 80015e6:	4770      	bx	lr
 80015e8:	40023800 	.word	0x40023800
 80015ec:	08003187 	.word	0x08003187
 80015f0:	20000004 	.word	0x20000004

080015f4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80015f4:	230f      	movs	r3, #15
 80015f6:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80015f8:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <HAL_RCC_GetClockConfig+0x34>)
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	f002 0203 	and.w	r2, r2, #3
 8001600:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001608:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001610:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	08db      	lsrs	r3, r3, #3
 8001616:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800161a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <HAL_RCC_GetClockConfig+0x38>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 030f 	and.w	r3, r3, #15
 8001624:	600b      	str	r3, [r1, #0]
 8001626:	4770      	bx	lr
 8001628:	40023800 	.word	0x40023800
 800162c:	40023c00 	.word	0x40023c00

08001630 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001630:	6a03      	ldr	r3, [r0, #32]
 8001632:	f023 0301 	bic.w	r3, r3, #1
 8001636:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001638:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800163a:	6842      	ldr	r2, [r0, #4]
{
 800163c:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800163e:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001640:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001642:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001646:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001648:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800164a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800164e:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001650:	4c0c      	ldr	r4, [pc, #48]	; (8001684 <TIM_OC1_SetConfig+0x54>)
 8001652:	42a0      	cmp	r0, r4
 8001654:	d009      	beq.n	800166a <TIM_OC1_SetConfig+0x3a>
 8001656:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800165a:	42a0      	cmp	r0, r4
 800165c:	d005      	beq.n	800166a <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800165e:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001660:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001662:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001664:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001666:	6203      	str	r3, [r0, #32]
} 
 8001668:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 800166a:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 800166c:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 800166e:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001672:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001674:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001676:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800167a:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800167c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001680:	4322      	orrs	r2, r4
 8001682:	e7ec      	b.n	800165e <TIM_OC1_SetConfig+0x2e>
 8001684:	40010000 	.word	0x40010000

08001688 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001688:	6a03      	ldr	r3, [r0, #32]
 800168a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800168e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001690:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001692:	6842      	ldr	r2, [r0, #4]
{
 8001694:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001696:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001698:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800169a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800169e:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80016a0:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80016a2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80016a6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80016aa:	4c0e      	ldr	r4, [pc, #56]	; (80016e4 <TIM_OC3_SetConfig+0x5c>)
 80016ac:	42a0      	cmp	r0, r4
 80016ae:	d009      	beq.n	80016c4 <TIM_OC3_SetConfig+0x3c>
 80016b0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80016b4:	42a0      	cmp	r0, r4
 80016b6:	d005      	beq.n	80016c4 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80016b8:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80016ba:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80016bc:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80016be:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80016c0:	6203      	str	r3, [r0, #32]
}
 80016c2:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80016c4:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80016c6:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 80016c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80016cc:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80016d0:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80016d2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80016d6:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80016d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80016dc:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 80016e0:	e7ea      	b.n	80016b8 <TIM_OC3_SetConfig+0x30>
 80016e2:	bf00      	nop
 80016e4:	40010000 	.word	0x40010000

080016e8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80016e8:	6a03      	ldr	r3, [r0, #32]
 80016ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016ee:	6203      	str	r3, [r0, #32]
{
 80016f0:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80016f2:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80016f4:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80016f6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80016f8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80016fa:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80016fe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001702:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001704:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001708:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800170c:	4d09      	ldr	r5, [pc, #36]	; (8001734 <TIM_OC4_SetConfig+0x4c>)
 800170e:	42a8      	cmp	r0, r5
 8001710:	d009      	beq.n	8001726 <TIM_OC4_SetConfig+0x3e>
 8001712:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001716:	42a8      	cmp	r0, r5
 8001718:	d005      	beq.n	8001726 <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800171a:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800171c:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800171e:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001720:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001722:	6204      	str	r4, [r0, #32]
}
 8001724:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001726:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001728:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800172c:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8001730:	e7f3      	b.n	800171a <TIM_OC4_SetConfig+0x32>
 8001732:	bf00      	nop
 8001734:	40010000 	.word	0x40010000

08001738 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001738:	6803      	ldr	r3, [r0, #0]
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	f042 0201 	orr.w	r2, r2, #1
 8001740:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	f042 0201 	orr.w	r2, r2, #1
 8001748:	601a      	str	r2, [r3, #0]
}
 800174a:	2000      	movs	r0, #0
 800174c:	4770      	bx	lr

0800174e <HAL_TIM_PWM_MspInit>:
 800174e:	4770      	bx	lr

08001750 <HAL_TIM_Encoder_Start>:
{
 8001750:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 8001752:	b189      	cbz	r1, 8001778 <HAL_TIM_Encoder_Start+0x28>
 8001754:	2904      	cmp	r1, #4
 8001756:	d007      	beq.n	8001768 <HAL_TIM_Encoder_Start+0x18>
  TIMx->CCER &= ~tmp;
 8001758:	6a1a      	ldr	r2, [r3, #32]
 800175a:	f022 0201 	bic.w	r2, r2, #1
 800175e:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001760:	6a1a      	ldr	r2, [r3, #32]
 8001762:	f042 0201 	orr.w	r2, r2, #1
 8001766:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8001768:	6a1a      	ldr	r2, [r3, #32]
 800176a:	f022 0210 	bic.w	r2, r2, #16
 800176e:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001770:	6a1a      	ldr	r2, [r3, #32]
 8001772:	f042 0210 	orr.w	r2, r2, #16
 8001776:	e006      	b.n	8001786 <HAL_TIM_Encoder_Start+0x36>
  TIMx->CCER &= ~tmp;
 8001778:	6a1a      	ldr	r2, [r3, #32]
 800177a:	f022 0201 	bic.w	r2, r2, #1
 800177e:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001780:	6a1a      	ldr	r2, [r3, #32]
 8001782:	f042 0201 	orr.w	r2, r2, #1
 8001786:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	f042 0201 	orr.w	r2, r2, #1
 800178e:	601a      	str	r2, [r3, #0]
}
 8001790:	2000      	movs	r0, #0
 8001792:	4770      	bx	lr

08001794 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001794:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001798:	2b01      	cmp	r3, #1
{
 800179a:	b570      	push	{r4, r5, r6, lr}
 800179c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80017a0:	d01c      	beq.n	80017dc <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 80017a2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 80017a6:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 80017a8:	2201      	movs	r2, #1
 80017aa:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 80017ae:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80017b0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80017b4:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80017b8:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80017ba:	680a      	ldr	r2, [r1, #0]
 80017bc:	2a40      	cmp	r2, #64	; 0x40
 80017be:	d079      	beq.n	80018b4 <HAL_TIM_ConfigClockSource+0x120>
 80017c0:	d819      	bhi.n	80017f6 <HAL_TIM_ConfigClockSource+0x62>
 80017c2:	2a10      	cmp	r2, #16
 80017c4:	f000 8093 	beq.w	80018ee <HAL_TIM_ConfigClockSource+0x15a>
 80017c8:	d80a      	bhi.n	80017e0 <HAL_TIM_ConfigClockSource+0x4c>
 80017ca:	2a00      	cmp	r2, #0
 80017cc:	f000 8089 	beq.w	80018e2 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 80017d0:	2301      	movs	r3, #1
 80017d2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80017d6:	2300      	movs	r3, #0
 80017d8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80017dc:	4618      	mov	r0, r3
}
 80017de:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80017e0:	2a20      	cmp	r2, #32
 80017e2:	f000 808a 	beq.w	80018fa <HAL_TIM_ConfigClockSource+0x166>
 80017e6:	2a30      	cmp	r2, #48	; 0x30
 80017e8:	d1f2      	bne.n	80017d0 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80017ea:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80017ec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80017f0:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80017f4:	e036      	b.n	8001864 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80017f6:	2a70      	cmp	r2, #112	; 0x70
 80017f8:	d036      	beq.n	8001868 <HAL_TIM_ConfigClockSource+0xd4>
 80017fa:	d81b      	bhi.n	8001834 <HAL_TIM_ConfigClockSource+0xa0>
 80017fc:	2a50      	cmp	r2, #80	; 0x50
 80017fe:	d042      	beq.n	8001886 <HAL_TIM_ConfigClockSource+0xf2>
 8001800:	2a60      	cmp	r2, #96	; 0x60
 8001802:	d1e5      	bne.n	80017d0 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001804:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001806:	684d      	ldr	r5, [r1, #4]
 8001808:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800180a:	f024 0410 	bic.w	r4, r4, #16
 800180e:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001810:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001812:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001814:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001818:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800181c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001820:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001824:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001826:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001828:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800182a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800182e:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001832:	e017      	b.n	8001864 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001834:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001838:	d011      	beq.n	800185e <HAL_TIM_ConfigClockSource+0xca>
 800183a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800183e:	d1c7      	bne.n	80017d0 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001840:	688a      	ldr	r2, [r1, #8]
 8001842:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001844:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001846:	68c9      	ldr	r1, [r1, #12]
 8001848:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800184a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800184e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001852:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001854:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800185c:	e002      	b.n	8001864 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	e7b3      	b.n	80017d0 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001868:	688a      	ldr	r2, [r1, #8]
 800186a:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800186c:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800186e:	68c9      	ldr	r1, [r1, #12]
 8001870:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001872:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001876:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800187a:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 800187c:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 800187e:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001880:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001884:	e7ee      	b.n	8001864 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001886:	684c      	ldr	r4, [r1, #4]
 8001888:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800188a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800188c:	6a1d      	ldr	r5, [r3, #32]
 800188e:	f025 0501 	bic.w	r5, r5, #1
 8001892:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001894:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001896:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800189a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800189e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80018a2:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80018a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80018a6:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80018a8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80018aa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80018ae:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 80018b2:	e7d7      	b.n	8001864 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80018b4:	684c      	ldr	r4, [r1, #4]
 80018b6:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80018b8:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80018ba:	6a1d      	ldr	r5, [r3, #32]
 80018bc:	f025 0501 	bic.w	r5, r5, #1
 80018c0:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80018c2:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80018c4:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80018c8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80018cc:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80018d0:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80018d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80018d4:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80018d6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80018d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80018dc:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80018e0:	e7c0      	b.n	8001864 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80018e2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80018e4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80018e8:	f042 0207 	orr.w	r2, r2, #7
 80018ec:	e7ba      	b.n	8001864 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80018ee:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80018f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80018f4:	f042 0217 	orr.w	r2, r2, #23
 80018f8:	e7b4      	b.n	8001864 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80018fa:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80018fc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001900:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8001904:	e7ae      	b.n	8001864 <HAL_TIM_ConfigClockSource+0xd0>

08001906 <HAL_TIM_OC_DelayElapsedCallback>:
 8001906:	4770      	bx	lr

08001908 <HAL_TIM_IC_CaptureCallback>:
 8001908:	4770      	bx	lr

0800190a <HAL_TIM_PWM_PulseFinishedCallback>:
 800190a:	4770      	bx	lr

0800190c <HAL_TIM_TriggerCallback>:
 800190c:	4770      	bx	lr

0800190e <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800190e:	6803      	ldr	r3, [r0, #0]
 8001910:	691a      	ldr	r2, [r3, #16]
 8001912:	0791      	lsls	r1, r2, #30
{
 8001914:	b510      	push	{r4, lr}
 8001916:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001918:	d50e      	bpl.n	8001938 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800191a:	68da      	ldr	r2, [r3, #12]
 800191c:	0792      	lsls	r2, r2, #30
 800191e:	d50b      	bpl.n	8001938 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001920:	f06f 0202 	mvn.w	r2, #2
 8001924:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001926:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001928:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800192a:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800192c:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800192e:	d077      	beq.n	8001a20 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001930:	f7ff ffea 	bl	8001908 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001934:	2300      	movs	r3, #0
 8001936:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001938:	6823      	ldr	r3, [r4, #0]
 800193a:	691a      	ldr	r2, [r3, #16]
 800193c:	0750      	lsls	r0, r2, #29
 800193e:	d510      	bpl.n	8001962 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001940:	68da      	ldr	r2, [r3, #12]
 8001942:	0751      	lsls	r1, r2, #29
 8001944:	d50d      	bpl.n	8001962 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001946:	f06f 0204 	mvn.w	r2, #4
 800194a:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800194c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800194e:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001950:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001954:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001956:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001958:	d068      	beq.n	8001a2c <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800195a:	f7ff ffd5 	bl	8001908 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800195e:	2300      	movs	r3, #0
 8001960:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001962:	6823      	ldr	r3, [r4, #0]
 8001964:	691a      	ldr	r2, [r3, #16]
 8001966:	0712      	lsls	r2, r2, #28
 8001968:	d50f      	bpl.n	800198a <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	0710      	lsls	r0, r2, #28
 800196e:	d50c      	bpl.n	800198a <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001970:	f06f 0208 	mvn.w	r2, #8
 8001974:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001976:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001978:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800197a:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800197c:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800197e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001980:	d05a      	beq.n	8001a38 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001982:	f7ff ffc1 	bl	8001908 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001986:	2300      	movs	r3, #0
 8001988:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800198a:	6823      	ldr	r3, [r4, #0]
 800198c:	691a      	ldr	r2, [r3, #16]
 800198e:	06d2      	lsls	r2, r2, #27
 8001990:	d510      	bpl.n	80019b4 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001992:	68da      	ldr	r2, [r3, #12]
 8001994:	06d0      	lsls	r0, r2, #27
 8001996:	d50d      	bpl.n	80019b4 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001998:	f06f 0210 	mvn.w	r2, #16
 800199c:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800199e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80019a0:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019a2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80019a6:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80019a8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019aa:	d04b      	beq.n	8001a44 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80019ac:	f7ff ffac 	bl	8001908 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019b0:	2300      	movs	r3, #0
 80019b2:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80019b4:	6823      	ldr	r3, [r4, #0]
 80019b6:	691a      	ldr	r2, [r3, #16]
 80019b8:	07d1      	lsls	r1, r2, #31
 80019ba:	d508      	bpl.n	80019ce <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	07d2      	lsls	r2, r2, #31
 80019c0:	d505      	bpl.n	80019ce <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019c2:	f06f 0201 	mvn.w	r2, #1
 80019c6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80019c8:	4620      	mov	r0, r4
 80019ca:	f000 fc15 	bl	80021f8 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80019ce:	6823      	ldr	r3, [r4, #0]
 80019d0:	691a      	ldr	r2, [r3, #16]
 80019d2:	0610      	lsls	r0, r2, #24
 80019d4:	d508      	bpl.n	80019e8 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80019d6:	68da      	ldr	r2, [r3, #12]
 80019d8:	0611      	lsls	r1, r2, #24
 80019da:	d505      	bpl.n	80019e8 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80019dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80019e0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80019e2:	4620      	mov	r0, r4
 80019e4:	f000 f9f3 	bl	8001dce <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80019e8:	6823      	ldr	r3, [r4, #0]
 80019ea:	691a      	ldr	r2, [r3, #16]
 80019ec:	0652      	lsls	r2, r2, #25
 80019ee:	d508      	bpl.n	8001a02 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	0650      	lsls	r0, r2, #25
 80019f4:	d505      	bpl.n	8001a02 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80019f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80019fa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80019fc:	4620      	mov	r0, r4
 80019fe:	f7ff ff85 	bl	800190c <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a02:	6823      	ldr	r3, [r4, #0]
 8001a04:	691a      	ldr	r2, [r3, #16]
 8001a06:	0691      	lsls	r1, r2, #26
 8001a08:	d522      	bpl.n	8001a50 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001a0a:	68da      	ldr	r2, [r3, #12]
 8001a0c:	0692      	lsls	r2, r2, #26
 8001a0e:	d51f      	bpl.n	8001a50 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a10:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001a14:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a16:	611a      	str	r2, [r3, #16]
}
 8001a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8001a1c:	f000 b9d6 	b.w	8001dcc <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a20:	f7ff ff71 	bl	8001906 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a24:	4620      	mov	r0, r4
 8001a26:	f7ff ff70 	bl	800190a <HAL_TIM_PWM_PulseFinishedCallback>
 8001a2a:	e783      	b.n	8001934 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a2c:	f7ff ff6b 	bl	8001906 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a30:	4620      	mov	r0, r4
 8001a32:	f7ff ff6a 	bl	800190a <HAL_TIM_PWM_PulseFinishedCallback>
 8001a36:	e792      	b.n	800195e <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a38:	f7ff ff65 	bl	8001906 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001a3c:	4620      	mov	r0, r4
 8001a3e:	f7ff ff64 	bl	800190a <HAL_TIM_PWM_PulseFinishedCallback>
 8001a42:	e7a0      	b.n	8001986 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a44:	f7ff ff5f 	bl	8001906 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a48:	4620      	mov	r0, r4
 8001a4a:	f7ff ff5e 	bl	800190a <HAL_TIM_PWM_PulseFinishedCallback>
 8001a4e:	e7af      	b.n	80019b0 <HAL_TIM_IRQHandler+0xa2>
 8001a50:	bd10      	pop	{r4, pc}
	...

08001a54 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001a54:	4a2e      	ldr	r2, [pc, #184]	; (8001b10 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8001a56:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001a58:	4290      	cmp	r0, r2
 8001a5a:	d012      	beq.n	8001a82 <TIM_Base_SetConfig+0x2e>
 8001a5c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001a60:	d00f      	beq.n	8001a82 <TIM_Base_SetConfig+0x2e>
 8001a62:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001a66:	4290      	cmp	r0, r2
 8001a68:	d00b      	beq.n	8001a82 <TIM_Base_SetConfig+0x2e>
 8001a6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a6e:	4290      	cmp	r0, r2
 8001a70:	d007      	beq.n	8001a82 <TIM_Base_SetConfig+0x2e>
 8001a72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a76:	4290      	cmp	r0, r2
 8001a78:	d003      	beq.n	8001a82 <TIM_Base_SetConfig+0x2e>
 8001a7a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001a7e:	4290      	cmp	r0, r2
 8001a80:	d11d      	bne.n	8001abe <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8001a82:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001a88:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001a8a:	4a21      	ldr	r2, [pc, #132]	; (8001b10 <TIM_Base_SetConfig+0xbc>)
 8001a8c:	4290      	cmp	r0, r2
 8001a8e:	d104      	bne.n	8001a9a <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a90:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a96:	4313      	orrs	r3, r2
 8001a98:	e028      	b.n	8001aec <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001a9a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001a9e:	d0f7      	beq.n	8001a90 <TIM_Base_SetConfig+0x3c>
 8001aa0:	4a1c      	ldr	r2, [pc, #112]	; (8001b14 <TIM_Base_SetConfig+0xc0>)
 8001aa2:	4290      	cmp	r0, r2
 8001aa4:	d0f4      	beq.n	8001a90 <TIM_Base_SetConfig+0x3c>
 8001aa6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001aaa:	4290      	cmp	r0, r2
 8001aac:	d0f0      	beq.n	8001a90 <TIM_Base_SetConfig+0x3c>
 8001aae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ab2:	4290      	cmp	r0, r2
 8001ab4:	d0ec      	beq.n	8001a90 <TIM_Base_SetConfig+0x3c>
 8001ab6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001aba:	4290      	cmp	r0, r2
 8001abc:	d0e8      	beq.n	8001a90 <TIM_Base_SetConfig+0x3c>
 8001abe:	4a16      	ldr	r2, [pc, #88]	; (8001b18 <TIM_Base_SetConfig+0xc4>)
 8001ac0:	4290      	cmp	r0, r2
 8001ac2:	d0e5      	beq.n	8001a90 <TIM_Base_SetConfig+0x3c>
 8001ac4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ac8:	4290      	cmp	r0, r2
 8001aca:	d0e1      	beq.n	8001a90 <TIM_Base_SetConfig+0x3c>
 8001acc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ad0:	4290      	cmp	r0, r2
 8001ad2:	d0dd      	beq.n	8001a90 <TIM_Base_SetConfig+0x3c>
 8001ad4:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001ad8:	4290      	cmp	r0, r2
 8001ada:	d0d9      	beq.n	8001a90 <TIM_Base_SetConfig+0x3c>
 8001adc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ae0:	4290      	cmp	r0, r2
 8001ae2:	d0d5      	beq.n	8001a90 <TIM_Base_SetConfig+0x3c>
 8001ae4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ae8:	4290      	cmp	r0, r2
 8001aea:	d0d1      	beq.n	8001a90 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8001aec:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001aee:	688b      	ldr	r3, [r1, #8]
 8001af0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001af2:	680b      	ldr	r3, [r1, #0]
 8001af4:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <TIM_Base_SetConfig+0xbc>)
 8001af8:	4298      	cmp	r0, r3
 8001afa:	d006      	beq.n	8001b0a <TIM_Base_SetConfig+0xb6>
 8001afc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b00:	4298      	cmp	r0, r3
 8001b02:	d002      	beq.n	8001b0a <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8001b04:	2301      	movs	r3, #1
 8001b06:	6143      	str	r3, [r0, #20]
}
 8001b08:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001b0a:	690b      	ldr	r3, [r1, #16]
 8001b0c:	6303      	str	r3, [r0, #48]	; 0x30
 8001b0e:	e7f9      	b.n	8001b04 <TIM_Base_SetConfig+0xb0>
 8001b10:	40010000 	.word	0x40010000
 8001b14:	40000400 	.word	0x40000400
 8001b18:	40014000 	.word	0x40014000

08001b1c <HAL_TIM_Base_Init>:
{ 
 8001b1c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001b1e:	4604      	mov	r4, r0
 8001b20:	b1a0      	cbz	r0, 8001b4c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001b22:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001b26:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b2a:	b91b      	cbnz	r3, 8001b34 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001b2c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8001b30:	f000 fe12 	bl	8002758 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001b34:	2302      	movs	r3, #2
 8001b36:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001b3a:	6820      	ldr	r0, [r4, #0]
 8001b3c:	1d21      	adds	r1, r4, #4
 8001b3e:	f7ff ff89 	bl	8001a54 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001b42:	2301      	movs	r3, #1
 8001b44:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001b48:	2000      	movs	r0, #0
 8001b4a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001b4c:	2001      	movs	r0, #1
}
 8001b4e:	bd10      	pop	{r4, pc}

08001b50 <HAL_TIM_PWM_Init>:
{
 8001b50:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001b52:	4604      	mov	r4, r0
 8001b54:	b1a0      	cbz	r0, 8001b80 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001b56:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001b5a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b5e:	b91b      	cbnz	r3, 8001b68 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001b60:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8001b64:	f7ff fdf3 	bl	800174e <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8001b68:	2302      	movs	r3, #2
 8001b6a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001b6e:	6820      	ldr	r0, [r4, #0]
 8001b70:	1d21      	adds	r1, r4, #4
 8001b72:	f7ff ff6f 	bl	8001a54 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001b76:	2301      	movs	r3, #1
 8001b78:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001b80:	2001      	movs	r0, #1
}  
 8001b82:	bd10      	pop	{r4, pc}

08001b84 <HAL_TIM_Encoder_Init>:
{
 8001b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b86:	460c      	mov	r4, r1
  if(htim == NULL)
 8001b88:	4605      	mov	r5, r0
 8001b8a:	2800      	cmp	r0, #0
 8001b8c:	d041      	beq.n	8001c12 <HAL_TIM_Encoder_Init+0x8e>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001b8e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001b92:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b96:	b91b      	cbnz	r3, 8001ba0 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8001b98:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Encoder_MspInit(htim);
 8001b9c:	f000 fdb4 	bl	8002708 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001ba0:	4629      	mov	r1, r5
  htim->State= HAL_TIM_STATE_BUSY;   
 8001ba2:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001ba4:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State= HAL_TIM_STATE_BUSY;   
 8001ba8:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001bac:	6883      	ldr	r3, [r0, #8]
 8001bae:	f023 0307 	bic.w	r3, r3, #7
 8001bb2:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 8001bb4:	f7ff ff4e 	bl	8001a54 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8001bb8:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8001bba:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 8001bbc:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8001bbe:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001bc0:	68a1      	ldr	r1, [r4, #8]
  tmpccer = htim->Instance->CCER;
 8001bc2:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8001bc4:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001bc6:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001bc8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001bcc:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001bd0:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8001bd4:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001bd6:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001bda:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001bdc:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001bde:	011b      	lsls	r3, r3, #4
 8001be0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001be4:	68e1      	ldr	r1, [r4, #12]
 8001be6:	430b      	orrs	r3, r1
 8001be8:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001bea:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001bee:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8001bf2:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001bf4:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001bf6:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001bfa:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 8001bfc:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001bfe:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 8001c02:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001c04:	4317      	orrs	r7, r2
  htim->State= HAL_TIM_STATE_READY;
 8001c06:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 8001c08:	6207      	str	r7, [r0, #32]
  htim->State= HAL_TIM_STATE_READY;
 8001c0a:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  return HAL_OK;
 8001c0e:	2000      	movs	r0, #0
 8001c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001c12:	2001      	movs	r0, #1
}
 8001c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001c18 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c18:	6a03      	ldr	r3, [r0, #32]
 8001c1a:	f023 0310 	bic.w	r3, r3, #16
 8001c1e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001c20:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8001c22:	6842      	ldr	r2, [r0, #4]
{
 8001c24:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 8001c26:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c28:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001c2a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c2e:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001c32:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001c34:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001c38:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001c3c:	4c0d      	ldr	r4, [pc, #52]	; (8001c74 <TIM_OC2_SetConfig+0x5c>)
 8001c3e:	42a0      	cmp	r0, r4
 8001c40:	d009      	beq.n	8001c56 <TIM_OC2_SetConfig+0x3e>
 8001c42:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001c46:	42a0      	cmp	r0, r4
 8001c48:	d005      	beq.n	8001c56 <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 8001c4a:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8001c4c:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001c4e:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001c50:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001c52:	6203      	str	r3, [r0, #32]
}
 8001c54:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001c56:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001c58:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001c5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001c5e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001c62:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001c64:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001c68:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001c6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001c6e:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 8001c72:	e7ea      	b.n	8001c4a <TIM_OC2_SetConfig+0x32>
 8001c74:	40010000 	.word	0x40010000

08001c78 <HAL_TIM_PWM_ConfigChannel>:
{
 8001c78:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001c7a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001c7e:	2b01      	cmp	r3, #1
{
 8001c80:	4604      	mov	r4, r0
 8001c82:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001c86:	d025      	beq.n	8001cd4 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001c88:	2301      	movs	r3, #1
 8001c8a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8001c8e:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 8001c92:	2a0c      	cmp	r2, #12
 8001c94:	d818      	bhi.n	8001cc8 <HAL_TIM_PWM_ConfigChannel+0x50>
 8001c96:	e8df f002 	tbb	[pc, r2]
 8001c9a:	1707      	.short	0x1707
 8001c9c:	171e1717 	.word	0x171e1717
 8001ca0:	172f1717 	.word	0x172f1717
 8001ca4:	1717      	.short	0x1717
 8001ca6:	40          	.byte	0x40
 8001ca7:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ca8:	6820      	ldr	r0, [r4, #0]
 8001caa:	f7ff fcc1 	bl	8001630 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001cae:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001cb0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001cb2:	699a      	ldr	r2, [r3, #24]
 8001cb4:	f042 0208 	orr.w	r2, r2, #8
 8001cb8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001cba:	699a      	ldr	r2, [r3, #24]
 8001cbc:	f022 0204 	bic.w	r2, r2, #4
 8001cc0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001cc2:	699a      	ldr	r2, [r3, #24]
 8001cc4:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001cc6:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001cc8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001cca:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001ccc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001cd0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001cd4:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001cd6:	6820      	ldr	r0, [r4, #0]
 8001cd8:	f7ff ff9e 	bl	8001c18 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001cdc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001cde:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ce0:	699a      	ldr	r2, [r3, #24]
 8001ce2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ce6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ce8:	699a      	ldr	r2, [r3, #24]
 8001cea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001cf0:	699a      	ldr	r2, [r3, #24]
 8001cf2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001cf6:	e7e6      	b.n	8001cc6 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001cf8:	6820      	ldr	r0, [r4, #0]
 8001cfa:	f7ff fcc5 	bl	8001688 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001cfe:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001d00:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d02:	69da      	ldr	r2, [r3, #28]
 8001d04:	f042 0208 	orr.w	r2, r2, #8
 8001d08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001d0a:	69da      	ldr	r2, [r3, #28]
 8001d0c:	f022 0204 	bic.w	r2, r2, #4
 8001d10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001d12:	69da      	ldr	r2, [r3, #28]
 8001d14:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001d16:	61da      	str	r2, [r3, #28]
    break;
 8001d18:	e7d6      	b.n	8001cc8 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d1a:	6820      	ldr	r0, [r4, #0]
 8001d1c:	f7ff fce4 	bl	80016e8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d20:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001d22:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d24:	69da      	ldr	r2, [r3, #28]
 8001d26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d2a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d2c:	69da      	ldr	r2, [r3, #28]
 8001d2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d32:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001d34:	69da      	ldr	r2, [r3, #28]
 8001d36:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001d3a:	e7ec      	b.n	8001d16 <HAL_TIM_PWM_ConfigChannel+0x9e>

08001d3c <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8001d3c:	6a03      	ldr	r3, [r0, #32]
{
 8001d3e:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8001d40:	2401      	movs	r4, #1
 8001d42:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001d44:	ea23 0304 	bic.w	r3, r3, r4
 8001d48:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001d4a:	6a03      	ldr	r3, [r0, #32]
 8001d4c:	408a      	lsls	r2, r1
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	6202      	str	r2, [r0, #32]
 8001d52:	bd10      	pop	{r4, pc}

08001d54 <HAL_TIM_PWM_Start>:
{
 8001d54:	b510      	push	{r4, lr}
 8001d56:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d58:	2201      	movs	r2, #1
 8001d5a:	6800      	ldr	r0, [r0, #0]
 8001d5c:	f7ff ffee 	bl	8001d3c <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001d60:	6823      	ldr	r3, [r4, #0]
 8001d62:	4a08      	ldr	r2, [pc, #32]	; (8001d84 <HAL_TIM_PWM_Start+0x30>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d003      	beq.n	8001d70 <HAL_TIM_PWM_Start+0x1c>
 8001d68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d103      	bne.n	8001d78 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8001d70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d76:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	f042 0201 	orr.w	r2, r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]
} 
 8001d80:	2000      	movs	r0, #0
 8001d82:	bd10      	pop	{r4, pc}
 8001d84:	40010000 	.word	0x40010000

08001d88 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001d88:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001d8c:	2b01      	cmp	r3, #1
{
 8001d8e:	b510      	push	{r4, lr}
 8001d90:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001d94:	d018      	beq.n	8001dc8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001d96:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001d9a:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001d9c:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001d9e:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001da0:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001da2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001da6:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	4322      	orrs	r2, r4
 8001dac:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001db4:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001dc8:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8001dca:	bd10      	pop	{r4, pc}

08001dcc <HAL_TIMEx_CommutationCallback>:
 8001dcc:	4770      	bx	lr

08001dce <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001dce:	4770      	bx	lr

08001dd0 <LCD1602_TIM_MicorSecDelay>:
	TIM3->EGR = 1; 					//Update generate auto
	TIM3->SR &= ~(0x0001);	//Clear Update interrupt flag
}
static void LCD1602_TIM_MicorSecDelay(uint32_t uSecDelay)
{
	TIM3->ARR = uSecDelay-1;
 8001dd0:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <LCD1602_TIM_MicorSecDelay+0x20>)
 8001dd2:	3801      	subs	r0, #1
 8001dd4:	62d8      	str	r0, [r3, #44]	; 0x2c
	TIM3->SR &= ~(0x0001);  // Clear UEV flag
 8001dd6:	691a      	ldr	r2, [r3, #16]
 8001dd8:	f022 0201 	bic.w	r2, r2, #1
 8001ddc:	611a      	str	r2, [r3, #16]
	TIM3->CR1 |= 1UL;
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	f042 0201 	orr.w	r2, r2, #1
 8001de4:	601a      	str	r2, [r3, #0]
	while((TIM3->SR&0x0001) != 1);
 8001de6:	691a      	ldr	r2, [r3, #16]
 8001de8:	07d2      	lsls	r2, r2, #31
 8001dea:	d5fc      	bpl.n	8001de6 <LCD1602_TIM_MicorSecDelay+0x16>
}
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40000400 	.word	0x40000400
 8001df4:	00000000 	.word	0x00000000

08001df8 <LCD1602_TIM_Config>:
{
 8001df8:	b510      	push	{r4, lr}
 8001dfa:	b086      	sub	sp, #24
	HAL_RCC_GetClockConfig(&myCLKtypeDef, &flashLatencyVar);
 8001dfc:	4669      	mov	r1, sp
 8001dfe:	a801      	add	r0, sp, #4
 8001e00:	f7ff fbf8 	bl	80015f4 <HAL_RCC_GetClockConfig>
	if(myCLKtypeDef.APB1CLKDivider == RCC_HCLK_DIV1)
 8001e04:	9b04      	ldr	r3, [sp, #16]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d12c      	bne.n	8001e64 <LCD1602_TIM_Config+0x6c>
		clockSpeed = HAL_RCC_GetPCLK1Freq();
 8001e0a:	f7ff fbe3 	bl	80015d4 <HAL_RCC_GetPCLK1Freq>
	clockSpeed *= 0.000001;
 8001e0e:	f7fe fb71 	bl	80004f4 <__aeabi_ui2d>
 8001e12:	a319      	add	r3, pc, #100	; (adr r3, 8001e78 <LCD1602_TIM_Config+0x80>)
 8001e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e18:	f7fe fbe2 	bl	80005e0 <__aeabi_dmul>
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;  // 0x1
 8001e1c:	4a14      	ldr	r2, [pc, #80]	; (8001e70 <LCD1602_TIM_Config+0x78>)
	TIM3->CR1 &= ~(0x0010);
 8001e1e:	4c15      	ldr	r4, [pc, #84]	; (8001e74 <LCD1602_TIM_Config+0x7c>)
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;  // 0x1
 8001e20:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001e22:	f043 0302 	orr.w	r3, r3, #2
 8001e26:	6413      	str	r3, [r2, #64]	; 0x40
	TIM3->CR1 &= ~(0x0010);
 8001e28:	6823      	ldr	r3, [r4, #0]
 8001e2a:	f023 0310 	bic.w	r3, r3, #16
 8001e2e:	6023      	str	r3, [r4, #0]
	TIM3->CR1 &= ~(0x0001);
 8001e30:	6823      	ldr	r3, [r4, #0]
 8001e32:	f023 0301 	bic.w	r3, r3, #1
 8001e36:	6023      	str	r3, [r4, #0]
	TIM3->CR1 &= ~(1UL << 2);
 8001e38:	6823      	ldr	r3, [r4, #0]
 8001e3a:	f023 0304 	bic.w	r3, r3, #4
 8001e3e:	6023      	str	r3, [r4, #0]
	TIM3->CR1 |= (1UL << 3);				  
 8001e40:	6823      	ldr	r3, [r4, #0]
 8001e42:	f043 0308 	orr.w	r3, r3, #8
 8001e46:	6023      	str	r3, [r4, #0]
	clockSpeed *= 0.000001;
 8001e48:	f7fe fddc 	bl	8000a04 <__aeabi_d2uiz>
	TIM3->ARR = 10-1; 								// The Flag sets when overflows
 8001e4c:	2309      	movs	r3, #9
	TIM3->PSC = clockSpeed-1;
 8001e4e:	3801      	subs	r0, #1
 8001e50:	62a0      	str	r0, [r4, #40]	; 0x28
	TIM3->ARR = 10-1; 								// The Flag sets when overflows
 8001e52:	62e3      	str	r3, [r4, #44]	; 0x2c
	TIM3->EGR = 1; 					//Update generate auto
 8001e54:	2301      	movs	r3, #1
 8001e56:	6163      	str	r3, [r4, #20]
	TIM3->SR &= ~(0x0001);	//Clear Update interrupt flag
 8001e58:	6923      	ldr	r3, [r4, #16]
 8001e5a:	f023 0301 	bic.w	r3, r3, #1
 8001e5e:	6123      	str	r3, [r4, #16]
}
 8001e60:	b006      	add	sp, #24
 8001e62:	bd10      	pop	{r4, pc}
		clockSpeed = HAL_RCC_GetPCLK1Freq()*2;
 8001e64:	f7ff fbb6 	bl	80015d4 <HAL_RCC_GetPCLK1Freq>
 8001e68:	0040      	lsls	r0, r0, #1
 8001e6a:	e7d0      	b.n	8001e0e <LCD1602_TIM_Config+0x16>
 8001e6c:	f3af 8000 	nop.w
 8001e70:	40023800 	.word	0x40023800
 8001e74:	40000400 	.word	0x40000400
 8001e78:	a0b5ed8d 	.word	0xa0b5ed8d
 8001e7c:	3eb0c6f7 	.word	0x3eb0c6f7

08001e80 <LCD1602_EnablePulse>:
{
 8001e80:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8001e82:	4d0a      	ldr	r5, [pc, #40]	; (8001eac <LCD1602_EnablePulse+0x2c>)
 8001e84:	4c0a      	ldr	r4, [pc, #40]	; (8001eb0 <LCD1602_EnablePulse+0x30>)
 8001e86:	8829      	ldrh	r1, [r5, #0]
 8001e88:	6820      	ldr	r0, [r4, #0]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f7ff f958 	bl	8001140 <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(writeTimeConstant);
 8001e90:	200a      	movs	r0, #10
 8001e92:	f7ff ff9d 	bl	8001dd0 <LCD1602_TIM_MicorSecDelay>
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 8001e96:	6820      	ldr	r0, [r4, #0]
 8001e98:	8829      	ldrh	r1, [r5, #0]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f7ff f950 	bl	8001140 <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(60);
 8001ea0:	203c      	movs	r0, #60	; 0x3c
}
 8001ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	LCD1602_TIM_MicorSecDelay(60);
 8001ea6:	f7ff bf93 	b.w	8001dd0 <LCD1602_TIM_MicorSecDelay>
 8001eaa:	bf00      	nop
 8001eac:	20000098 	.word	0x20000098
 8001eb0:	200000a4 	.word	0x200000a4

08001eb4 <LCD1602_write>:
{
 8001eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(mode_8_4_I2C == 1)		//8bits mode
 8001eb8:	4b43      	ldr	r3, [pc, #268]	; (8001fc8 <LCD1602_write+0x114>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b01      	cmp	r3, #1
{
 8001ebe:	4604      	mov	r4, r0
	uint8_t LSB_nibble = byte&0xF, MSB_nibble = (byte>>4)&0xF;
 8001ec0:	ea4f 1610 	mov.w	r6, r0, lsr #4
	if(mode_8_4_I2C == 1)		//8bits mode
 8001ec4:	d13d      	bne.n	8001f42 <LCD1602_write+0x8e>
		HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8001ec6:	4d41      	ldr	r5, [pc, #260]	; (8001fcc <LCD1602_write+0x118>)
 8001ec8:	4b41      	ldr	r3, [pc, #260]	; (8001fd0 <LCD1602_write+0x11c>)
 8001eca:	f000 0201 	and.w	r2, r0, #1
 8001ece:	8819      	ldrh	r1, [r3, #0]
 8001ed0:	6828      	ldr	r0, [r5, #0]
 8001ed2:	f7ff f935 	bl	8001140 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8001ed6:	4b3f      	ldr	r3, [pc, #252]	; (8001fd4 <LCD1602_write+0x120>)
 8001ed8:	6828      	ldr	r0, [r5, #0]
 8001eda:	8819      	ldrh	r1, [r3, #0]
 8001edc:	f004 0202 	and.w	r2, r4, #2
 8001ee0:	f7ff f92e 	bl	8001140 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8001ee4:	4b3c      	ldr	r3, [pc, #240]	; (8001fd8 <LCD1602_write+0x124>)
 8001ee6:	6828      	ldr	r0, [r5, #0]
 8001ee8:	8819      	ldrh	r1, [r3, #0]
 8001eea:	f004 0204 	and.w	r2, r4, #4
 8001eee:	f7ff f927 	bl	8001140 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8001ef2:	4b3a      	ldr	r3, [pc, #232]	; (8001fdc <LCD1602_write+0x128>)
 8001ef4:	6828      	ldr	r0, [r5, #0]
 8001ef6:	8819      	ldrh	r1, [r3, #0]
 8001ef8:	f004 0208 	and.w	r2, r4, #8
 8001efc:	f7ff f920 	bl	8001140 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8001f00:	4c37      	ldr	r4, [pc, #220]	; (8001fe0 <LCD1602_write+0x12c>)
 8001f02:	4b38      	ldr	r3, [pc, #224]	; (8001fe4 <LCD1602_write+0x130>)
 8001f04:	6820      	ldr	r0, [r4, #0]
 8001f06:	8819      	ldrh	r1, [r3, #0]
 8001f08:	f006 0201 	and.w	r2, r6, #1
 8001f0c:	f7ff f918 	bl	8001140 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8001f10:	4b35      	ldr	r3, [pc, #212]	; (8001fe8 <LCD1602_write+0x134>)
 8001f12:	6820      	ldr	r0, [r4, #0]
 8001f14:	8819      	ldrh	r1, [r3, #0]
 8001f16:	f006 0202 	and.w	r2, r6, #2
 8001f1a:	f7ff f911 	bl	8001140 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8001f1e:	4b33      	ldr	r3, [pc, #204]	; (8001fec <LCD1602_write+0x138>)
 8001f20:	6820      	ldr	r0, [r4, #0]
 8001f22:	8819      	ldrh	r1, [r3, #0]
 8001f24:	f006 0204 	and.w	r2, r6, #4
 8001f28:	f7ff f90a 	bl	8001140 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8001f2c:	4b30      	ldr	r3, [pc, #192]	; (8001ff0 <LCD1602_write+0x13c>)
 8001f2e:	6820      	ldr	r0, [r4, #0]
 8001f30:	8819      	ldrh	r1, [r3, #0]
 8001f32:	f006 0208 	and.w	r2, r6, #8
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8001f36:	f7ff f903 	bl	8001140 <HAL_GPIO_WritePin>
}
 8001f3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		LCD1602_EnablePulse();
 8001f3e:	f7ff bf9f 	b.w	8001e80 <LCD1602_EnablePulse>
	else if(mode_8_4_I2C == 2)	//4 bits mode
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d13e      	bne.n	8001fc4 <LCD1602_write+0x110>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8001f46:	4d26      	ldr	r5, [pc, #152]	; (8001fe0 <LCD1602_write+0x12c>)
 8001f48:	f8df a098 	ldr.w	sl, [pc, #152]	; 8001fe4 <LCD1602_write+0x130>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8001f4c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8001fe8 <LCD1602_write+0x134>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8001f50:	f8ba 1000 	ldrh.w	r1, [sl]
 8001f54:	6828      	ldr	r0, [r5, #0]
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8001f56:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8001fec <LCD1602_write+0x138>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8001f5a:	4f25      	ldr	r7, [pc, #148]	; (8001ff0 <LCD1602_write+0x13c>)
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8001f5c:	f006 0201 	and.w	r2, r6, #1
 8001f60:	f7ff f8ee 	bl	8001140 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8001f64:	f006 0202 	and.w	r2, r6, #2
 8001f68:	f8b9 1000 	ldrh.w	r1, [r9]
 8001f6c:	6828      	ldr	r0, [r5, #0]
 8001f6e:	f7ff f8e7 	bl	8001140 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8001f72:	f006 0204 	and.w	r2, r6, #4
 8001f76:	f8b8 1000 	ldrh.w	r1, [r8]
 8001f7a:	6828      	ldr	r0, [r5, #0]
 8001f7c:	f7ff f8e0 	bl	8001140 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8001f80:	f006 0208 	and.w	r2, r6, #8
 8001f84:	8839      	ldrh	r1, [r7, #0]
 8001f86:	6828      	ldr	r0, [r5, #0]
 8001f88:	f7ff f8da 	bl	8001140 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 8001f8c:	f7ff ff78 	bl	8001e80 <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8001f90:	f004 0201 	and.w	r2, r4, #1
 8001f94:	f8ba 1000 	ldrh.w	r1, [sl]
 8001f98:	6828      	ldr	r0, [r5, #0]
 8001f9a:	f7ff f8d1 	bl	8001140 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8001f9e:	f004 0202 	and.w	r2, r4, #2
 8001fa2:	f8b9 1000 	ldrh.w	r1, [r9]
 8001fa6:	6828      	ldr	r0, [r5, #0]
 8001fa8:	f7ff f8ca 	bl	8001140 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8001fac:	f004 0204 	and.w	r2, r4, #4
 8001fb0:	f8b8 1000 	ldrh.w	r1, [r8]
 8001fb4:	6828      	ldr	r0, [r5, #0]
 8001fb6:	f7ff f8c3 	bl	8001140 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8001fba:	f004 0208 	and.w	r2, r4, #8
 8001fbe:	8839      	ldrh	r1, [r7, #0]
 8001fc0:	6828      	ldr	r0, [r5, #0]
 8001fc2:	e7b8      	b.n	8001f36 <LCD1602_write+0x82>
 8001fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fc8:	20000002 	.word	0x20000002
 8001fcc:	2000009c 	.word	0x2000009c
 8001fd0:	20000088 	.word	0x20000088
 8001fd4:	2000008a 	.word	0x2000008a
 8001fd8:	2000008c 	.word	0x2000008c
 8001fdc:	2000008e 	.word	0x2000008e
 8001fe0:	200000a0 	.word	0x200000a0
 8001fe4:	20000090 	.word	0x20000090
 8001fe8:	20000092 	.word	0x20000092
 8001fec:	20000094 	.word	0x20000094
 8001ff0:	20000096 	.word	0x20000096

08001ff4 <LCD1602_write4bitCommand>:
	//Call low level write parallel function
	LCD1602_write(data);
}
//7) Write 4 bits command, *FOR 4 BITS MODE ONLY*
static void LCD1602_write4bitCommand(uint8_t nibble)
{
 8001ff4:	b538      	push	{r3, r4, r5, lr}
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 8001ff6:	4b14      	ldr	r3, [pc, #80]	; (8002048 <LCD1602_write4bitCommand+0x54>)
	uint8_t LSB_nibble = nibble&0xF;
	//Set RS to 0
	LCD1602_RS(false);
	//LSB data
	HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8001ff8:	4c14      	ldr	r4, [pc, #80]	; (800204c <LCD1602_write4bitCommand+0x58>)
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 8001ffa:	8819      	ldrh	r1, [r3, #0]
 8001ffc:	4b14      	ldr	r3, [pc, #80]	; (8002050 <LCD1602_write4bitCommand+0x5c>)
{
 8001ffe:	4605      	mov	r5, r0
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 8002000:	2200      	movs	r2, #0
 8002002:	6818      	ldr	r0, [r3, #0]
 8002004:	f7ff f89c 	bl	8001140 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8002008:	4b12      	ldr	r3, [pc, #72]	; (8002054 <LCD1602_write4bitCommand+0x60>)
 800200a:	6820      	ldr	r0, [r4, #0]
 800200c:	8819      	ldrh	r1, [r3, #0]
 800200e:	f005 0201 	and.w	r2, r5, #1
 8002012:	f7ff f895 	bl	8001140 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8002016:	4b10      	ldr	r3, [pc, #64]	; (8002058 <LCD1602_write4bitCommand+0x64>)
 8002018:	6820      	ldr	r0, [r4, #0]
 800201a:	8819      	ldrh	r1, [r3, #0]
 800201c:	f005 0202 	and.w	r2, r5, #2
 8002020:	f7ff f88e 	bl	8001140 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8002024:	4b0d      	ldr	r3, [pc, #52]	; (800205c <LCD1602_write4bitCommand+0x68>)
 8002026:	6820      	ldr	r0, [r4, #0]
 8002028:	8819      	ldrh	r1, [r3, #0]
 800202a:	f005 0204 	and.w	r2, r5, #4
 800202e:	f7ff f887 	bl	8001140 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8002032:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <LCD1602_write4bitCommand+0x6c>)
 8002034:	6820      	ldr	r0, [r4, #0]
 8002036:	8819      	ldrh	r1, [r3, #0]
 8002038:	f005 0208 	and.w	r2, r5, #8
 800203c:	f7ff f880 	bl	8001140 <HAL_GPIO_WritePin>
	//Write the Enable pulse
	LCD1602_EnablePulse();
}
 8002040:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	LCD1602_EnablePulse();
 8002044:	f7ff bf1c 	b.w	8001e80 <LCD1602_EnablePulse>
 8002048:	2000009a 	.word	0x2000009a
 800204c:	200000a0 	.word	0x200000a0
 8002050:	200000a4 	.word	0x200000a4
 8002054:	20000090 	.word	0x20000090
 8002058:	20000092 	.word	0x20000092
 800205c:	20000094 	.word	0x20000094
 8002060:	20000096 	.word	0x20000096

08002064 <LCD1602_writeCommand>:
{
 8002064:	b510      	push	{r4, lr}
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 8002066:	4b06      	ldr	r3, [pc, #24]	; (8002080 <LCD1602_writeCommand+0x1c>)
 8002068:	8819      	ldrh	r1, [r3, #0]
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <LCD1602_writeCommand+0x20>)
{
 800206c:	4604      	mov	r4, r0
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 800206e:	2200      	movs	r2, #0
 8002070:	6818      	ldr	r0, [r3, #0]
 8002072:	f7ff f865 	bl	8001140 <HAL_GPIO_WritePin>
	LCD1602_write(command);
 8002076:	4620      	mov	r0, r4
}
 8002078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LCD1602_write(command);
 800207c:	f7ff bf1a 	b.w	8001eb4 <LCD1602_write>
 8002080:	2000009a 	.word	0x2000009a
 8002084:	200000a4 	.word	0x200000a4

08002088 <LCD1602_Begin4BIT>:
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
	HAL_Delay(2);
}
//2) LCD begin 4 bits function
void LCD1602_Begin4BIT(GPIO_TypeDef* PORT_RS_E, uint16_t RS, uint16_t E, GPIO_TypeDef* PORT_MSBs4to7, uint16_t D4, uint16_t D5, uint16_t D6, uint16_t D7)
{
 8002088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Set GPIO Ports and Pins data
	PORT_RS_and_E = PORT_RS_E;
 800208a:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 800214c <LCD1602_Begin4BIT+0xc4>
{
 800208e:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	PORT_RS_and_E = PORT_RS_E;
 8002092:	f8ce 0000 	str.w	r0, [lr]
	PIN_RS = RS;
 8002096:	4824      	ldr	r0, [pc, #144]	; (8002128 <LCD1602_Begin4BIT+0xa0>)
{
 8002098:	f8bd 601c 	ldrh.w	r6, [sp, #28]
	PIN_RS = RS;
 800209c:	8001      	strh	r1, [r0, #0]
	PIN_E = E;
 800209e:	4923      	ldr	r1, [pc, #140]	; (800212c <LCD1602_Begin4BIT+0xa4>)
{
 80020a0:	f8bd 5020 	ldrh.w	r5, [sp, #32]
	PIN_E = E;
 80020a4:	800a      	strh	r2, [r1, #0]
	PORT_MSB = PORT_MSBs4to7;
 80020a6:	4a22      	ldr	r2, [pc, #136]	; (8002130 <LCD1602_Begin4BIT+0xa8>)
{
 80020a8:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	PORT_MSB = PORT_MSBs4to7;
 80020ac:	6013      	str	r3, [r2, #0]
	D4_PIN = D4;
 80020ae:	4b21      	ldr	r3, [pc, #132]	; (8002134 <LCD1602_Begin4BIT+0xac>)
 80020b0:	801f      	strh	r7, [r3, #0]
	D5_PIN = D5;
 80020b2:	4b21      	ldr	r3, [pc, #132]	; (8002138 <LCD1602_Begin4BIT+0xb0>)
 80020b4:	801e      	strh	r6, [r3, #0]
	D6_PIN = D6;
 80020b6:	4b21      	ldr	r3, [pc, #132]	; (800213c <LCD1602_Begin4BIT+0xb4>)
 80020b8:	801d      	strh	r5, [r3, #0]
	D7_PIN = D7;
 80020ba:	4b21      	ldr	r3, [pc, #132]	; (8002140 <LCD1602_Begin4BIT+0xb8>)
 80020bc:	801c      	strh	r4, [r3, #0]
	//Initialise microsecond timer
	LCD1602_TIM_Config();
 80020be:	f7ff fe9b 	bl	8001df8 <LCD1602_TIM_Config>
	//Set the mode to 4 bits
	mode_8_4_I2C = 2;
 80020c2:	4b20      	ldr	r3, [pc, #128]	; (8002144 <LCD1602_Begin4BIT+0xbc>)
 80020c4:	2502      	movs	r5, #2
 80020c6:	701d      	strb	r5, [r3, #0]
	//Function set variable to 4 bits mode
	FunctionSet = 0x28;
 80020c8:	4b1f      	ldr	r3, [pc, #124]	; (8002148 <LCD1602_Begin4BIT+0xc0>)
 80020ca:	2428      	movs	r4, #40	; 0x28
	
	//Initialise LCD
	//1. Wait at least 15ms
	HAL_Delay(20);
 80020cc:	2014      	movs	r0, #20
	FunctionSet = 0x28;
 80020ce:	701c      	strb	r4, [r3, #0]
	HAL_Delay(20);
 80020d0:	f7fe fecc 	bl	8000e6c <HAL_Delay>
	//2. Attentions sequence
	LCD1602_write4bitCommand(0x3);
 80020d4:	2003      	movs	r0, #3
 80020d6:	f7ff ff8d 	bl	8001ff4 <LCD1602_write4bitCommand>
	HAL_Delay(5);
 80020da:	2005      	movs	r0, #5
 80020dc:	f7fe fec6 	bl	8000e6c <HAL_Delay>
	LCD1602_write4bitCommand(0x3);
 80020e0:	2003      	movs	r0, #3
 80020e2:	f7ff ff87 	bl	8001ff4 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 80020e6:	2001      	movs	r0, #1
 80020e8:	f7fe fec0 	bl	8000e6c <HAL_Delay>
	LCD1602_write4bitCommand(0x3);
 80020ec:	2003      	movs	r0, #3
 80020ee:	f7ff ff81 	bl	8001ff4 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 80020f2:	2001      	movs	r0, #1
 80020f4:	f7fe feba 	bl	8000e6c <HAL_Delay>
	LCD1602_write4bitCommand(0x2);  //4 bit mode
 80020f8:	4628      	mov	r0, r5
 80020fa:	f7ff ff7b 	bl	8001ff4 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 80020fe:	2001      	movs	r0, #1
 8002100:	f7fe feb4 	bl	8000e6c <HAL_Delay>
	//3. Display control (Display ON, Cursor ON, blink cursor)
	LCD1602_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 8002104:	200f      	movs	r0, #15
 8002106:	f7ff ffad 	bl	8002064 <LCD1602_writeCommand>
	//4. Clear LCD and return home
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 800210a:	2001      	movs	r0, #1
 800210c:	f7ff ffaa 	bl	8002064 <LCD1602_writeCommand>
	HAL_Delay(3);
 8002110:	2003      	movs	r0, #3
 8002112:	f7fe feab 	bl	8000e6c <HAL_Delay>
	//4. Function set; Enable 2 lines, Data length to 8 bits
	LCD1602_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8002116:	4620      	mov	r0, r4
 8002118:	f7ff ffa4 	bl	8002064 <LCD1602_writeCommand>
	HAL_Delay(3);
 800211c:	2003      	movs	r0, #3
}
 800211e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_Delay(3);
 8002122:	f7fe bea3 	b.w	8000e6c <HAL_Delay>
 8002126:	bf00      	nop
 8002128:	2000009a 	.word	0x2000009a
 800212c:	20000098 	.word	0x20000098
 8002130:	200000a0 	.word	0x200000a0
 8002134:	20000090 	.word	0x20000090
 8002138:	20000092 	.word	0x20000092
 800213c:	20000094 	.word	0x20000094
 8002140:	20000096 	.word	0x20000096
 8002144:	20000002 	.word	0x20000002
 8002148:	20000001 	.word	0x20000001
 800214c:	200000a4 	.word	0x200000a4

08002150 <LCD1602_print>:
//3) LCD print string
void LCD1602_print(char string[])
{
 8002150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if(state) HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_SET);
 8002154:	4f0a      	ldr	r7, [pc, #40]	; (8002180 <LCD1602_print+0x30>)
 8002156:	f8df 802c 	ldr.w	r8, [pc, #44]	; 8002184 <LCD1602_print+0x34>
 800215a:	1e45      	subs	r5, r0, #1
 800215c:	f100 040f 	add.w	r4, r0, #15
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 8002160:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8002164:	b156      	cbz	r6, 800217c <LCD1602_print+0x2c>
	if(state) HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_SET);
 8002166:	2201      	movs	r2, #1
 8002168:	8839      	ldrh	r1, [r7, #0]
 800216a:	f8d8 0000 	ldr.w	r0, [r8]
 800216e:	f7fe ffe7 	bl	8001140 <HAL_GPIO_WritePin>
	LCD1602_write(data);
 8002172:	4630      	mov	r0, r6
 8002174:	f7ff fe9e 	bl	8001eb4 <LCD1602_write>
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 8002178:	42a5      	cmp	r5, r4
 800217a:	d1f1      	bne.n	8002160 <LCD1602_print+0x10>
 800217c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002180:	2000009a 	.word	0x2000009a
 8002184:	200000a4 	.word	0x200000a4

08002188 <LCD1602_setCursor>:
}
//4) set cursor position
void LCD1602_setCursor(uint8_t row, uint8_t col)
{
	uint8_t maskData;
	maskData = (col-1)&0x0F;
 8002188:	3901      	subs	r1, #1
 800218a:	f001 010f 	and.w	r1, r1, #15
	if(row==1)
 800218e:	2801      	cmp	r0, #1
	{
		maskData |= (0x80);
		LCD1602_writeCommand(maskData);
 8002190:	bf0c      	ite	eq
 8002192:	f041 0080 	orreq.w	r0, r1, #128	; 0x80
	}
	else
	{
		maskData |= (0xc0);
		LCD1602_writeCommand(maskData);
 8002196:	f041 00c0 	orrne.w	r0, r1, #192	; 0xc0
 800219a:	f7ff bf63 	b.w	8002064 <LCD1602_writeCommand>
	...

080021a0 <LCD1602_noCursor>:
	LCD1602_writeCommand(FunctionSet);
}
//6) Cursor ON/OFF
void LCD1602_noCursor(void)
{
	DisplayControl &= ~(0x02);
 80021a0:	4b03      	ldr	r3, [pc, #12]	; (80021b0 <LCD1602_noCursor+0x10>)
 80021a2:	7818      	ldrb	r0, [r3, #0]
 80021a4:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 80021a8:	7018      	strb	r0, [r3, #0]
	LCD1602_writeCommand(DisplayControl);
 80021aa:	f7ff bf5b 	b.w	8002064 <LCD1602_writeCommand>
 80021ae:	bf00      	nop
 80021b0:	20000000 	.word	0x20000000

080021b4 <LCD1602_clear>:
	DisplayControl |= (0x02);
	LCD1602_writeCommand(DisplayControl);
}
//7) Clear display
void LCD1602_clear(void)
{
 80021b4:	b508      	push	{r3, lr}
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 80021b6:	2001      	movs	r0, #1
 80021b8:	f7ff ff54 	bl	8002064 <LCD1602_writeCommand>
	HAL_Delay(3);
 80021bc:	2003      	movs	r0, #3
}
 80021be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(3);
 80021c2:	f7fe be53 	b.w	8000e6c <HAL_Delay>
	...

080021c8 <LCD1602_noBlink>:
//8) Blinking cursor
void LCD1602_noBlink(void)
{
	DisplayControl &= ~(0x01);
 80021c8:	4b03      	ldr	r3, [pc, #12]	; (80021d8 <LCD1602_noBlink+0x10>)
 80021ca:	7818      	ldrb	r0, [r3, #0]
 80021cc:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 80021d0:	7018      	strb	r0, [r3, #0]
	LCD1602_writeCommand(DisplayControl);
 80021d2:	f7ff bf47 	b.w	8002064 <LCD1602_writeCommand>
 80021d6:	bf00      	nop
 80021d8:	20000000 	.word	0x20000000

080021dc <LCD1602_PrintInt>:
}

//********** Print numbers to LCD **********//
//1. Integer
void LCD1602_PrintInt(int number)
{
 80021dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char numStr[16];
	sprintf(numStr,"%d", number);
 80021de:	4602      	mov	r2, r0
 80021e0:	4904      	ldr	r1, [pc, #16]	; (80021f4 <LCD1602_PrintInt+0x18>)
 80021e2:	4668      	mov	r0, sp
 80021e4:	f000 fb8e 	bl	8002904 <siprintf>
	LCD1602_print(numStr);
 80021e8:	4668      	mov	r0, sp
 80021ea:	f7ff ffb1 	bl	8002150 <LCD1602_print>
}
 80021ee:	b005      	add	sp, #20
 80021f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80021f4:	08003174 	.word	0x08003174

080021f8 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END 3 */

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(htim->Instance==TIM7)
 80021fa:	6802      	ldr	r2, [r0, #0]
 80021fc:	4b52      	ldr	r3, [pc, #328]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80021fe:	429a      	cmp	r2, r3
{
 8002200:	ed2d 8b04 	vpush	{d8-d9}
  if(htim->Instance==TIM7)
 8002204:	d17b      	bne.n	80022fe <HAL_TIM_PeriodElapsedCallback+0x106>
  {
	  v_motor = encoder;
 8002206:	4951      	ldr	r1, [pc, #324]	; (800234c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002208:	4b51      	ldr	r3, [pc, #324]	; (8002350 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800220a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	  encoder = 0;

	  error_motor = sp_motor - v_motor;

	  p_motor = kp_motor*error_motor;
	  i_motor += ki_motor*error_motor;
 800220c:	4c51      	ldr	r4, [pc, #324]	; (8002354 <HAL_TIM_PeriodElapsedCallback+0x15c>)
	  d_motor = kd_motor*(error_motor - previous_error_motor);
 800220e:	4d52      	ldr	r5, [pc, #328]	; (8002358 <HAL_TIM_PeriodElapsedCallback+0x160>)
	  i_motor += ki_motor*error_motor;
 8002210:	6820      	ldr	r0, [r4, #0]
	  v_motor = encoder;
 8002212:	b212      	sxth	r2, r2
 8002214:	801a      	strh	r2, [r3, #0]
	  encoder = 0;
 8002216:	2300      	movs	r3, #0
 8002218:	624b      	str	r3, [r1, #36]	; 0x24
	  error_motor = sp_motor - v_motor;
 800221a:	4b50      	ldr	r3, [pc, #320]	; (800235c <HAL_TIM_PeriodElapsedCallback+0x164>)
 800221c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002220:	1a9b      	subs	r3, r3, r2
 8002222:	ee07 3a90 	vmov	s15, r3
 8002226:	4b4e      	ldr	r3, [pc, #312]	; (8002360 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002228:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	  p_motor = kp_motor*error_motor;
 800222c:	eeb1 8a04 	vmov.f32	s16, #20	; 0x40a00000  5.0
	  error_motor = sp_motor - v_motor;
 8002230:	edc3 8a00 	vstr	s17, [r3]
	  p_motor = kp_motor*error_motor;
 8002234:	ee28 8a88 	vmul.f32	s16, s17, s16
 8002238:	4b4a      	ldr	r3, [pc, #296]	; (8002364 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800223a:	ed83 8a00 	vstr	s16, [r3]
	  i_motor += ki_motor*error_motor;
 800223e:	f7fe f97b 	bl	8000538 <__aeabi_f2d>
 8002242:	4606      	mov	r6, r0
 8002244:	ee18 0a90 	vmov	r0, s17
 8002248:	460f      	mov	r7, r1
 800224a:	f7fe f975 	bl	8000538 <__aeabi_f2d>
 800224e:	2200      	movs	r2, #0
 8002250:	4b45      	ldr	r3, [pc, #276]	; (8002368 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002252:	f7fe f9c5 	bl	80005e0 <__aeabi_dmul>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4630      	mov	r0, r6
 800225c:	4639      	mov	r1, r7
 800225e:	f7fe f80d 	bl	800027c <__adddf3>
 8002262:	f7fe fbef 	bl	8000a44 <__aeabi_d2f>
	  d_motor = kd_motor*(error_motor - previous_error_motor);
 8002266:	edd5 7a00 	vldr	s15, [r5]
	  i_motor += ki_motor*error_motor;
 800226a:	6020      	str	r0, [r4, #0]
	  d_motor = kd_motor*(error_motor - previous_error_motor);
 800226c:	ee78 7ae7 	vsub.f32	s15, s17, s15
	  i_motor += ki_motor*error_motor;
 8002270:	ee09 0a10 	vmov	s18, r0
	  d_motor = kd_motor*(error_motor - previous_error_motor);
 8002274:	ee17 0a90 	vmov	r0, s15
 8002278:	f7fe f95e 	bl	8000538 <__aeabi_f2d>
 800227c:	a330      	add	r3, pc, #192	; (adr r3, 8002340 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800227e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002282:	f7fe f9ad 	bl	80005e0 <__aeabi_dmul>
 8002286:	f7fe fbdd 	bl	8000a44 <__aeabi_d2f>

	  previous_error_motor = error_motor;

	  if(i_motor > 100) i_motor = 100;
 800228a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800236c <HAL_TIM_PeriodElapsedCallback+0x174>
	  d_motor = kd_motor*(error_motor - previous_error_motor);
 800228e:	4b38      	ldr	r3, [pc, #224]	; (8002370 <HAL_TIM_PeriodElapsedCallback+0x178>)
	  previous_error_motor = error_motor;
 8002290:	edc5 8a00 	vstr	s17, [r5]
	  if(i_motor > 100) i_motor = 100;
 8002294:	eeb4 9ac7 	vcmpe.f32	s18, s14
 8002298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	  d_motor = kd_motor*(error_motor - previous_error_motor);
 800229c:	ee06 0a90 	vmov	s13, r0
 80022a0:	6018      	str	r0, [r3, #0]
	  if(i_motor > 100) i_motor = 100;
 80022a2:	dd2f      	ble.n	8002304 <HAL_TIM_PeriodElapsedCallback+0x10c>
 80022a4:	ed84 7a00 	vstr	s14, [r4]
	  else if(i_motor < -100) i_motor = -100;

	  output_motor = p_motor + i_motor + d_motor;
 80022a8:	edd4 7a00 	vldr	s15, [r4]
 80022ac:	4c31      	ldr	r4, [pc, #196]	; (8002374 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80022ae:	ee78 7a27 	vadd.f32	s15, s16, s15
 80022b2:	ee77 7aa6 	vadd.f32	s15, s15, s13

	  if(output_motor > 100) output_motor = 100;
 80022b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022be:	dd2b      	ble.n	8002318 <HAL_TIM_PeriodElapsedCallback+0x120>
 80022c0:	ed84 7a00 	vstr	s14, [r4]
	  else if(output_motor < -100) output_motor = -100;

	  if(output_motor > 0)
 80022c4:	edd4 7a00 	vldr	s15, [r4]
 80022c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d0:	dd2e      	ble.n	8002330 <HAL_TIM_PeriodElapsedCallback+0x138>
	  {
		  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4,SET);
 80022d2:	2201      	movs	r2, #1
 80022d4:	2110      	movs	r1, #16
 80022d6:	4828      	ldr	r0, [pc, #160]	; (8002378 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80022d8:	f7fe ff32 	bl	8001140 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,RESET);
 80022dc:	2200      	movs	r2, #0
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4,RESET);
		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,SET);
 80022de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022e2:	4826      	ldr	r0, [pc, #152]	; (800237c <HAL_TIM_PeriodElapsedCallback+0x184>)
 80022e4:	f7fe ff2c 	bl	8001140 <HAL_GPIO_WritePin>
	  }

	  motor = abs(output_motor);
 80022e8:	edd4 7a00 	vldr	s15, [r4]
 80022ec:	4a24      	ldr	r2, [pc, #144]	; (8002380 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80022ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022f2:	ee17 3a90 	vmov	r3, s15
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	bfb8      	it	lt
 80022fa:	425b      	neglt	r3, r3
 80022fc:	6353      	str	r3, [r2, #52]	; 0x34
  }
}
 80022fe:	ecbd 8b04 	vpop	{d8-d9}
 8002302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  else if(i_motor < -100) i_motor = -100;
 8002304:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8002384 <HAL_TIM_PeriodElapsedCallback+0x18c>
 8002308:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800230c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002310:	bf48      	it	mi
 8002312:	edc4 7a00 	vstrmi	s15, [r4]
 8002316:	e7c7      	b.n	80022a8 <HAL_TIM_PeriodElapsedCallback+0xb0>
	  else if(output_motor < -100) output_motor = -100;
 8002318:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002384 <HAL_TIM_PeriodElapsedCallback+0x18c>
	  output_motor = p_motor + i_motor + d_motor;
 800231c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002324:	bf48      	it	mi
 8002326:	eef0 7a47 	vmovmi.f32	s15, s14
 800232a:	edc4 7a00 	vstr	s15, [r4]
 800232e:	e7c9      	b.n	80022c4 <HAL_TIM_PeriodElapsedCallback+0xcc>
		  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_4,RESET);
 8002330:	2200      	movs	r2, #0
 8002332:	2110      	movs	r1, #16
 8002334:	4810      	ldr	r0, [pc, #64]	; (8002378 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002336:	f7fe ff03 	bl	8001140 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,SET);
 800233a:	2201      	movs	r2, #1
 800233c:	e7cf      	b.n	80022de <HAL_TIM_PeriodElapsedCallback+0xe6>
 800233e:	bf00      	nop
 8002340:	9999999a 	.word	0x9999999a
 8002344:	3fa99999 	.word	0x3fa99999
 8002348:	40001400 	.word	0x40001400
 800234c:	40010000 	.word	0x40010000
 8002350:	20000148 	.word	0x20000148
 8002354:	2000013c 	.word	0x2000013c
 8002358:	20000144 	.word	0x20000144
 800235c:	200000bc 	.word	0x200000bc
 8002360:	20000188 	.word	0x20000188
 8002364:	20000140 	.word	0x20000140
 8002368:	3fe00000 	.word	0x3fe00000
 800236c:	42c80000 	.word	0x42c80000
 8002370:	200000c0 	.word	0x200000c0
 8002374:	200000b8 	.word	0x200000b8
 8002378:	40021000 	.word	0x40021000
 800237c:	40020800 	.word	0x40020800
 8002380:	40014000 	.word	0x40014000
 8002384:	c2c80000 	.word	0xc2c80000

08002388 <SystemClock_Config>:

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002388:	b530      	push	{r4, r5, lr}
 800238a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 800238c:	2300      	movs	r3, #0
 800238e:	4a27      	ldr	r2, [pc, #156]	; (800242c <SystemClock_Config+0xa4>)
 8002390:	9301      	str	r3, [sp, #4]
 8002392:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002394:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002398:	6411      	str	r1, [r2, #64]	; 0x40
 800239a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800239c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80023a0:	9201      	str	r2, [sp, #4]
 80023a2:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023a4:	4a22      	ldr	r2, [pc, #136]	; (8002430 <SystemClock_Config+0xa8>)
 80023a6:	9302      	str	r3, [sp, #8]
 80023a8:	6811      	ldr	r1, [r2, #0]
 80023aa:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80023ae:	6011      	str	r1, [r2, #0]
 80023b0:	6812      	ldr	r2, [r2, #0]
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023b2:	930f      	str	r3, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023b4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80023b8:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 8;
 80023ba:	2308      	movs	r3, #8
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023bc:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 8;
 80023be:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023c0:	2201      	movs	r2, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023c2:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023c4:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80023c6:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80023c8:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80023ca:	2504      	movs	r5, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023cc:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023ce:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80023d0:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023d2:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 168;
 80023d4:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023d6:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80023d8:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023da:	f7fe feb7 	bl	800114c <HAL_RCC_OscConfig>
 80023de:	b100      	cbz	r0, 80023e2 <SystemClock_Config+0x5a>
 80023e0:	e7fe      	b.n	80023e0 <SystemClock_Config+0x58>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023e2:	230f      	movs	r3, #15
 80023e4:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023ea:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023ec:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80023ee:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80023f4:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023f6:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023f8:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80023fa:	f7ff f84b 	bl	8001494 <HAL_RCC_ClockConfig>
 80023fe:	4604      	mov	r4, r0
 8002400:	b100      	cbz	r0, 8002404 <SystemClock_Config+0x7c>
 8002402:	e7fe      	b.n	8002402 <SystemClock_Config+0x7a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002404:	f7ff f8e0 	bl	80015c8 <HAL_RCC_GetHCLKFreq>
 8002408:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800240c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002410:	f7fe fd8e 	bl	8000f30 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002414:	4628      	mov	r0, r5
 8002416:	f7fe fda1 	bl	8000f5c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800241a:	4622      	mov	r2, r4
 800241c:	4621      	mov	r1, r4
 800241e:	f04f 30ff 	mov.w	r0, #4294967295
 8002422:	f7fe fd45 	bl	8000eb0 <HAL_NVIC_SetPriority>
}
 8002426:	b015      	add	sp, #84	; 0x54
 8002428:	bd30      	pop	{r4, r5, pc}
 800242a:	bf00      	nop
 800242c:	40023800 	.word	0x40023800
 8002430:	40007000 	.word	0x40007000

08002434 <main>:
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b096      	sub	sp, #88	; 0x58
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002438:	2400      	movs	r4, #0
  HAL_Init();
 800243a:	f7fe fcef 	bl	8000e1c <HAL_Init>
  SystemClock_Config();
 800243e:	f7ff ffa3 	bl	8002388 <SystemClock_Config>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002442:	4b8b      	ldr	r3, [pc, #556]	; (8002670 <main+0x23c>)
 8002444:	9404      	str	r4, [sp, #16]
 8002446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8002448:	488a      	ldr	r0, [pc, #552]	; (8002674 <main+0x240>)
  htim1.Instance = TIM1;
 800244a:	4d8b      	ldr	r5, [pc, #556]	; (8002678 <main+0x244>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800244c:	f042 0210 	orr.w	r2, r2, #16
 8002450:	631a      	str	r2, [r3, #48]	; 0x30
 8002452:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002454:	f002 0210 	and.w	r2, r2, #16
 8002458:	9204      	str	r2, [sp, #16]
 800245a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800245c:	9405      	str	r4, [sp, #20]
 800245e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002460:	f042 0204 	orr.w	r2, r2, #4
 8002464:	631a      	str	r2, [r3, #48]	; 0x30
 8002466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002468:	f002 0204 	and.w	r2, r2, #4
 800246c:	9205      	str	r2, [sp, #20]
 800246e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002470:	9406      	str	r4, [sp, #24]
 8002472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002474:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002478:	631a      	str	r2, [r3, #48]	; 0x30
 800247a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800247c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002480:	9206      	str	r2, [sp, #24]
 8002482:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002484:	9407      	str	r4, [sp, #28]
 8002486:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002488:	f042 0202 	orr.w	r2, r2, #2
 800248c:	631a      	str	r2, [r3, #48]	; 0x30
 800248e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002490:	f002 0202 	and.w	r2, r2, #2
 8002494:	9207      	str	r2, [sp, #28]
 8002496:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002498:	9408      	str	r4, [sp, #32]
 800249a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800249c:	f042 0208 	orr.w	r2, r2, #8
 80024a0:	631a      	str	r2, [r3, #48]	; 0x30
 80024a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a4:	f003 0308 	and.w	r3, r3, #8
 80024a8:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 80024aa:	4622      	mov	r2, r4
 80024ac:	2110      	movs	r1, #16
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ae:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 80024b0:	f7fe fe46 	bl	8001140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80024b4:	4622      	mov	r2, r4
 80024b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024ba:	4870      	ldr	r0, [pc, #448]	; (800267c <main+0x248>)
 80024bc:	f7fe fe40 	bl	8001140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 80024c0:	4622      	mov	r2, r4
 80024c2:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 80024c6:	486e      	ldr	r0, [pc, #440]	; (8002680 <main+0x24c>)
 80024c8:	f7fe fe3a 	bl	8001140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 80024cc:	4622      	mov	r2, r4
 80024ce:	f44f 412a 	mov.w	r1, #43520	; 0xaa00
 80024d2:	486c      	ldr	r0, [pc, #432]	; (8002684 <main+0x250>)
 80024d4:	f7fe fe34 	bl	8001140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d8:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80024da:	2310      	movs	r3, #16
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024dc:	a90d      	add	r1, sp, #52	; 0x34
 80024de:	4865      	ldr	r0, [pc, #404]	; (8002674 <main+0x240>)
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80024e0:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e2:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e6:	9410      	str	r4, [sp, #64]	; 0x40

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80024e8:	f44f 5800 	mov.w	r8, #8192	; 0x2000
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024ec:	f7fe fd48 	bl	8000f80 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024f0:	a90d      	add	r1, sp, #52	; 0x34
 80024f2:	4862      	ldr	r0, [pc, #392]	; (800267c <main+0x248>)
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80024f4:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f8:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fa:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fc:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024fe:	f7fe fd3f 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002502:	f44f 4320 	mov.w	r3, #40960	; 0xa000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002506:	a90d      	add	r1, sp, #52	; 0x34
 8002508:	485d      	ldr	r0, [pc, #372]	; (8002680 <main+0x24c>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800250a:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800250c:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002510:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002512:	f7fe fd35 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD11 PD13 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15;
 8002516:	f44f 432a 	mov.w	r3, #43520	; 0xaa00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800251a:	a90d      	add	r1, sp, #52	; 0x34
 800251c:	4859      	ldr	r0, [pc, #356]	; (8002684 <main+0x250>)
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15;
 800251e:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002520:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002522:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002524:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002526:	f7fe fd2b 	bl	8000f80 <HAL_GPIO_Init>
  htim1.Instance = TIM1;
 800252a:	4b57      	ldr	r3, [pc, #348]	; (8002688 <main+0x254>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800252c:	60ac      	str	r4, [r5, #8]
  htim1.Init.Prescaler = 0;
 800252e:	e885 0018 	stmia.w	r5, {r3, r4}
  htim1.Init.Period = 65535;
 8002532:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002536:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002538:	a90d      	add	r1, sp, #52	; 0x34
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 800253a:	2302      	movs	r3, #2
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800253c:	4628      	mov	r0, r5
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800253e:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8002540:	616c      	str	r4, [r5, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8002542:	930d      	str	r3, [sp, #52]	; 0x34
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002544:	940e      	str	r4, [sp, #56]	; 0x38
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002546:	960f      	str	r6, [sp, #60]	; 0x3c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002548:	9410      	str	r4, [sp, #64]	; 0x40
  sConfig.IC1Filter = 0;
 800254a:	9411      	str	r4, [sp, #68]	; 0x44
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800254c:	9412      	str	r4, [sp, #72]	; 0x48
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800254e:	9613      	str	r6, [sp, #76]	; 0x4c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002550:	9414      	str	r4, [sp, #80]	; 0x50
  sConfig.IC2Filter = 0;
 8002552:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002554:	f7ff fb16 	bl	8001b84 <HAL_TIM_Encoder_Init>
 8002558:	b100      	cbz	r0, 800255c <main+0x128>
 800255a:	e7fe      	b.n	800255a <main+0x126>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800255c:	9009      	str	r0, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800255e:	900a      	str	r0, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002560:	a909      	add	r1, sp, #36	; 0x24
 8002562:	4628      	mov	r0, r5
 8002564:	f7ff fc10 	bl	8001d88 <HAL_TIMEx_MasterConfigSynchronization>
 8002568:	b100      	cbz	r0, 800256c <main+0x138>
 800256a:	e7fe      	b.n	800256a <main+0x136>
  htim9.Instance = TIM9;
 800256c:	4c47      	ldr	r4, [pc, #284]	; (800268c <main+0x258>)
  htim9.Init.Prescaler = 84;
 800256e:	4b48      	ldr	r3, [pc, #288]	; (8002690 <main+0x25c>)
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002570:	60a0      	str	r0, [r4, #8]
  htim9.Init.Prescaler = 84;
 8002572:	2654      	movs	r6, #84	; 0x54
 8002574:	e884 0048 	stmia.w	r4, {r3, r6}
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002578:	6120      	str	r0, [r4, #16]
  htim9.Init.Period = 100;
 800257a:	2364      	movs	r3, #100	; 0x64
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800257c:	4620      	mov	r0, r4
  htim9.Init.Period = 100;
 800257e:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002580:	f7ff facc 	bl	8001b1c <HAL_TIM_Base_Init>
 8002584:	b100      	cbz	r0, 8002588 <main+0x154>
 8002586:	e7fe      	b.n	8002586 <main+0x152>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800258c:	a909      	add	r1, sp, #36	; 0x24
 800258e:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002590:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002592:	f7ff f8ff 	bl	8001794 <HAL_TIM_ConfigClockSource>
 8002596:	b100      	cbz	r0, 800259a <main+0x166>
 8002598:	e7fe      	b.n	8002598 <main+0x164>
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800259a:	4620      	mov	r0, r4
 800259c:	f7ff fad8 	bl	8001b50 <HAL_TIM_PWM_Init>
 80025a0:	4602      	mov	r2, r0
 80025a2:	b100      	cbz	r0, 80025a6 <main+0x172>
 80025a4:	e7fe      	b.n	80025a4 <main+0x170>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025a6:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 80025a8:	900e      	str	r0, [sp, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025aa:	900f      	str	r0, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025ac:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025ae:	a90d      	add	r1, sp, #52	; 0x34
 80025b0:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025b2:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025b4:	f7ff fb60 	bl	8001c78 <HAL_TIM_PWM_ConfigChannel>
 80025b8:	4607      	mov	r7, r0
 80025ba:	b100      	cbz	r0, 80025be <main+0x18a>
 80025bc:	e7fe      	b.n	80025bc <main+0x188>
  HAL_TIM_MspPostInit(&htim9);
 80025be:	4620      	mov	r0, r4
 80025c0:	f000 f8fc 	bl	80027bc <HAL_TIM_MspPostInit>
  htim7.Instance = TIM7;
 80025c4:	4e33      	ldr	r6, [pc, #204]	; (8002694 <main+0x260>)
  htim7.Init.Prescaler = 840;
 80025c6:	4834      	ldr	r0, [pc, #208]	; (8002698 <main+0x264>)
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c8:	60b7      	str	r7, [r6, #8]
  htim7.Init.Prescaler = 840;
 80025ca:	f44f 7352 	mov.w	r3, #840	; 0x348
 80025ce:	e886 0009 	stmia.w	r6, {r0, r3}
  htim7.Init.Period = 4000;
 80025d2:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80025d6:	4630      	mov	r0, r6
  htim7.Init.Period = 4000;
 80025d8:	60f3      	str	r3, [r6, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80025da:	f7ff fa9f 	bl	8001b1c <HAL_TIM_Base_Init>
 80025de:	b100      	cbz	r0, 80025e2 <main+0x1ae>
 80025e0:	e7fe      	b.n	80025e0 <main+0x1ac>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80025e2:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025e4:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80025e6:	a90d      	add	r1, sp, #52	; 0x34
 80025e8:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80025ea:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80025ec:	f7ff fbcc 	bl	8001d88 <HAL_TIMEx_MasterConfigSynchronization>
 80025f0:	4607      	mov	r7, r0
 80025f2:	b100      	cbz	r0, 80025f6 <main+0x1c2>
 80025f4:	e7fe      	b.n	80025f4 <main+0x1c0>
  LCD1602_Begin4BIT(GPIOB, GPIO_PIN_13, GPIO_PIN_15, GPIOD, GPIO_PIN_9, GPIO_PIN_11, GPIO_PIN_13, GPIO_PIN_15);
 80025f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80025fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002602:	9203      	str	r2, [sp, #12]
 8002604:	481e      	ldr	r0, [pc, #120]	; (8002680 <main+0x24c>)
 8002606:	f8cd 8008 	str.w	r8, [sp, #8]
 800260a:	e88d 000a 	stmia.w	sp, {r1, r3}
 800260e:	4b1d      	ldr	r3, [pc, #116]	; (8002684 <main+0x250>)
 8002610:	4641      	mov	r1, r8
 8002612:	f7ff fd39 	bl	8002088 <LCD1602_Begin4BIT>
  LCD1602_noCursor();
 8002616:	f7ff fdc3 	bl	80021a0 <LCD1602_noCursor>
  LCD1602_noBlink();
 800261a:	f7ff fdd5 	bl	80021c8 <LCD1602_noBlink>
  HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_1);
 800261e:	4639      	mov	r1, r7
 8002620:	4628      	mov	r0, r5
 8002622:	f7ff f895 	bl	8001750 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim9,TIM_CHANNEL_1);
 8002626:	4639      	mov	r1, r7
 8002628:	4620      	mov	r0, r4
 800262a:	f7ff fb93 	bl	8001d54 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 800262e:	4630      	mov	r0, r6
 8002630:	f7ff f882 	bl	8001738 <HAL_TIM_Base_Start_IT>
	  sp_motor = 0;
 8002634:	4d19      	ldr	r5, [pc, #100]	; (800269c <main+0x268>)
	  LCD1602_PrintInt(v_motor);
 8002636:	4c1a      	ldr	r4, [pc, #104]	; (80026a0 <main+0x26c>)
	  sp_motor = 0;
 8002638:	802f      	strh	r7, [r5, #0]
	  LCD1602_clear();
 800263a:	f7ff fdbb 	bl	80021b4 <LCD1602_clear>
	  LCD1602_setCursor(1,1);
 800263e:	2101      	movs	r1, #1
 8002640:	4608      	mov	r0, r1
 8002642:	f7ff fda1 	bl	8002188 <LCD1602_setCursor>
	  LCD1602_PrintInt(v_motor);
 8002646:	f9b4 0000 	ldrsh.w	r0, [r4]
 800264a:	f7ff fdc7 	bl	80021dc <LCD1602_PrintInt>
	  LCD1602_setCursor(1,8);
 800264e:	2108      	movs	r1, #8
 8002650:	2001      	movs	r0, #1
 8002652:	f7ff fd99 	bl	8002188 <LCD1602_setCursor>
	  LCD1602_PrintInt(output_motor);
 8002656:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <main+0x270>)
 8002658:	edd3 7a00 	vldr	s15, [r3]
 800265c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002660:	ee17 0a90 	vmov	r0, s15
 8002664:	f7ff fdba 	bl	80021dc <LCD1602_PrintInt>
	  HAL_Delay(200);
 8002668:	20c8      	movs	r0, #200	; 0xc8
 800266a:	f7fe fbff 	bl	8000e6c <HAL_Delay>
 800266e:	e7e3      	b.n	8002638 <main+0x204>
 8002670:	40023800 	.word	0x40023800
 8002674:	40021000 	.word	0x40021000
 8002678:	200000c4 	.word	0x200000c4
 800267c:	40020800 	.word	0x40020800
 8002680:	40020400 	.word	0x40020400
 8002684:	40020c00 	.word	0x40020c00
 8002688:	40010000 	.word	0x40010000
 800268c:	20000100 	.word	0x20000100
 8002690:	40014000 	.word	0x40014000
 8002694:	2000014c 	.word	0x2000014c
 8002698:	40001400 	.word	0x40001400
 800269c:	200000bc 	.word	0x200000bc
 80026a0:	20000148 	.word	0x20000148
 80026a4:	200000b8 	.word	0x200000b8

080026a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026aa:	2003      	movs	r0, #3
 80026ac:	f7fe fbee 	bl	8000e8c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80026b0:	2200      	movs	r2, #0
 80026b2:	4611      	mov	r1, r2
 80026b4:	f06f 000b 	mvn.w	r0, #11
 80026b8:	f7fe fbfa 	bl	8000eb0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80026bc:	2200      	movs	r2, #0
 80026be:	4611      	mov	r1, r2
 80026c0:	f06f 000a 	mvn.w	r0, #10
 80026c4:	f7fe fbf4 	bl	8000eb0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80026c8:	2200      	movs	r2, #0
 80026ca:	4611      	mov	r1, r2
 80026cc:	f06f 0009 	mvn.w	r0, #9
 80026d0:	f7fe fbee 	bl	8000eb0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80026d4:	2200      	movs	r2, #0
 80026d6:	4611      	mov	r1, r2
 80026d8:	f06f 0004 	mvn.w	r0, #4
 80026dc:	f7fe fbe8 	bl	8000eb0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80026e0:	2200      	movs	r2, #0
 80026e2:	4611      	mov	r1, r2
 80026e4:	f06f 0003 	mvn.w	r0, #3
 80026e8:	f7fe fbe2 	bl	8000eb0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80026ec:	2200      	movs	r2, #0
 80026ee:	4611      	mov	r1, r2
 80026f0:	f06f 0001 	mvn.w	r0, #1
 80026f4:	f7fe fbdc 	bl	8000eb0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80026f8:	2200      	movs	r2, #0
 80026fa:	4611      	mov	r1, r2
 80026fc:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002700:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002704:	f7fe bbd4 	b.w	8000eb0 <HAL_NVIC_SetPriority>

08002708 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002708:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_encoder->Instance==TIM1)
 800270a:	6802      	ldr	r2, [r0, #0]
 800270c:	4b0f      	ldr	r3, [pc, #60]	; (800274c <HAL_TIM_Encoder_MspInit+0x44>)
 800270e:	429a      	cmp	r2, r3
 8002710:	d118      	bne.n	8002744 <HAL_TIM_Encoder_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	4a0e      	ldr	r2, [pc, #56]	; (8002750 <HAL_TIM_Encoder_MspInit+0x48>)
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	6c51      	ldr	r1, [r2, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800271a:	480e      	ldr	r0, [pc, #56]	; (8002754 <HAL_TIM_Encoder_MspInit+0x4c>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 800271c:	f041 0101 	orr.w	r1, r1, #1
 8002720:	6451      	str	r1, [r2, #68]	; 0x44
 8002722:	6c52      	ldr	r2, [r2, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002724:	9303      	str	r3, [sp, #12]
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002726:	f002 0201 	and.w	r2, r2, #1
 800272a:	9200      	str	r2, [sp, #0]
 800272c:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002730:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8002734:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002736:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002738:	2202      	movs	r2, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800273a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273c:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800273e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002740:	f7fe fc1e 	bl	8000f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002744:	b007      	add	sp, #28
 8002746:	f85d fb04 	ldr.w	pc, [sp], #4
 800274a:	bf00      	nop
 800274c:	40010000 	.word	0x40010000
 8002750:	40023800 	.word	0x40023800
 8002754:	40021000 	.word	0x40021000

08002758 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002758:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM7)
 800275a:	6803      	ldr	r3, [r0, #0]
 800275c:	4a14      	ldr	r2, [pc, #80]	; (80027b0 <HAL_TIM_Base_MspInit+0x58>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d115      	bne.n	800278e <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002762:	2200      	movs	r2, #0
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_TIM_Base_MspInit+0x5c>)
 8002766:	9200      	str	r2, [sp, #0]
 8002768:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800276a:	f041 0120 	orr.w	r1, r1, #32
 800276e:	6419      	str	r1, [r3, #64]	; 0x40
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f003 0320 	and.w	r3, r3, #32
 8002776:	9300      	str	r3, [sp, #0]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002778:	2037      	movs	r0, #55	; 0x37
 800277a:	4611      	mov	r1, r2
    __HAL_RCC_TIM7_CLK_ENABLE();
 800277c:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800277e:	f7fe fb97 	bl	8000eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002782:	2037      	movs	r0, #55	; 0x37
 8002784:	f7fe fbc8 	bl	8000f18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8002788:	b003      	add	sp, #12
 800278a:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM9)
 800278e:	4a0a      	ldr	r2, [pc, #40]	; (80027b8 <HAL_TIM_Base_MspInit+0x60>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d1f9      	bne.n	8002788 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002794:	2300      	movs	r3, #0
 8002796:	9301      	str	r3, [sp, #4]
 8002798:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <HAL_TIM_Base_MspInit+0x5c>)
 800279a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800279c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80027a0:	645a      	str	r2, [r3, #68]	; 0x44
 80027a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a8:	9301      	str	r3, [sp, #4]
 80027aa:	9b01      	ldr	r3, [sp, #4]
}
 80027ac:	e7ec      	b.n	8002788 <HAL_TIM_Base_MspInit+0x30>
 80027ae:	bf00      	nop
 80027b0:	40001400 	.word	0x40001400
 80027b4:	40023800 	.word	0x40023800
 80027b8:	40014000 	.word	0x40014000

080027bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM9)
 80027be:	6802      	ldr	r2, [r0, #0]
 80027c0:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <HAL_TIM_MspPostInit+0x2c>)
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d10c      	bne.n	80027e0 <HAL_TIM_MspPostInit+0x24>
  /* USER CODE END TIM9_MspPostInit 0 */
  
    /**TIM9 GPIO Configuration    
    PE5     ------> TIM9_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80027c6:	2320      	movs	r3, #32
 80027c8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ca:	2302      	movs	r3, #2
 80027cc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027d4:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80027d6:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027d8:	4804      	ldr	r0, [pc, #16]	; (80027ec <HAL_TIM_MspPostInit+0x30>)
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80027da:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027dc:	f7fe fbd0 	bl	8000f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80027e0:	b007      	add	sp, #28
 80027e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80027e6:	bf00      	nop
 80027e8:	40014000 	.word	0x40014000
 80027ec:	40021000 	.word	0x40021000

080027f0 <NMI_Handler>:
 80027f0:	4770      	bx	lr

080027f2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80027f2:	e7fe      	b.n	80027f2 <HardFault_Handler>

080027f4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80027f4:	e7fe      	b.n	80027f4 <MemManage_Handler>

080027f6 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80027f6:	e7fe      	b.n	80027f6 <BusFault_Handler>

080027f8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80027f8:	e7fe      	b.n	80027f8 <UsageFault_Handler>

080027fa <SVC_Handler>:
 80027fa:	4770      	bx	lr

080027fc <DebugMon_Handler>:
 80027fc:	4770      	bx	lr

080027fe <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80027fe:	4770      	bx	lr

08002800 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002800:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002802:	f7fe fb25 	bl	8000e50 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002806:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800280a:	f7fe bbb4 	b.w	8000f76 <HAL_SYSTICK_IRQHandler>
	...

08002810 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002810:	4801      	ldr	r0, [pc, #4]	; (8002818 <TIM7_IRQHandler+0x8>)
 8002812:	f7ff b87c 	b.w	800190e <HAL_TIM_IRQHandler>
 8002816:	bf00      	nop
 8002818:	2000014c 	.word	0x2000014c

0800281c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800281c:	490f      	ldr	r1, [pc, #60]	; (800285c <SystemInit+0x40>)
 800281e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002822:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800282a:	4b0d      	ldr	r3, [pc, #52]	; (8002860 <SystemInit+0x44>)
 800282c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800282e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002830:	f042 0201 	orr.w	r2, r2, #1
 8002834:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002836:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800283e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002842:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002844:	4a07      	ldr	r2, [pc, #28]	; (8002864 <SystemInit+0x48>)
 8002846:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800284e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002850:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002852:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002856:	608b      	str	r3, [r1, #8]
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	e000ed00 	.word	0xe000ed00
 8002860:	40023800 	.word	0x40023800
 8002864:	24003010 	.word	0x24003010

08002868 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002868:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800286c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800286e:	e003      	b.n	8002878 <LoopCopyDataInit>

08002870 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002872:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002874:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002876:	3104      	adds	r1, #4

08002878 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002878:	480b      	ldr	r0, [pc, #44]	; (80028a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800287a:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800287c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800287e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002880:	d3f6      	bcc.n	8002870 <CopyDataInit>
  ldr  r2, =_sbss
 8002882:	4a0b      	ldr	r2, [pc, #44]	; (80028b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002884:	e002      	b.n	800288c <LoopFillZerobss>

08002886 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002886:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002888:	f842 3b04 	str.w	r3, [r2], #4

0800288c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800288c:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800288e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002890:	d3f9      	bcc.n	8002886 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002892:	f7ff ffc3 	bl	800281c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002896:	f000 f811 	bl	80028bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800289a:	f7ff fdcb 	bl	8002434 <main>
  bx  lr    
 800289e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80028a0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80028a4:	080031d4 	.word	0x080031d4
  ldr  r0, =_sdata
 80028a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80028ac:	2000006c 	.word	0x2000006c
  ldr  r2, =_sbss
 80028b0:	2000006c 	.word	0x2000006c
  ldr  r3, = _ebss
 80028b4:	20000190 	.word	0x20000190

080028b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028b8:	e7fe      	b.n	80028b8 <ADC_IRQHandler>
	...

080028bc <__libc_init_array>:
 80028bc:	b570      	push	{r4, r5, r6, lr}
 80028be:	4e0d      	ldr	r6, [pc, #52]	; (80028f4 <__libc_init_array+0x38>)
 80028c0:	4c0d      	ldr	r4, [pc, #52]	; (80028f8 <__libc_init_array+0x3c>)
 80028c2:	1ba4      	subs	r4, r4, r6
 80028c4:	10a4      	asrs	r4, r4, #2
 80028c6:	2500      	movs	r5, #0
 80028c8:	42a5      	cmp	r5, r4
 80028ca:	d109      	bne.n	80028e0 <__libc_init_array+0x24>
 80028cc:	4e0b      	ldr	r6, [pc, #44]	; (80028fc <__libc_init_array+0x40>)
 80028ce:	4c0c      	ldr	r4, [pc, #48]	; (8002900 <__libc_init_array+0x44>)
 80028d0:	f000 fc44 	bl	800315c <_init>
 80028d4:	1ba4      	subs	r4, r4, r6
 80028d6:	10a4      	asrs	r4, r4, #2
 80028d8:	2500      	movs	r5, #0
 80028da:	42a5      	cmp	r5, r4
 80028dc:	d105      	bne.n	80028ea <__libc_init_array+0x2e>
 80028de:	bd70      	pop	{r4, r5, r6, pc}
 80028e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028e4:	4798      	blx	r3
 80028e6:	3501      	adds	r5, #1
 80028e8:	e7ee      	b.n	80028c8 <__libc_init_array+0xc>
 80028ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028ee:	4798      	blx	r3
 80028f0:	3501      	adds	r5, #1
 80028f2:	e7f2      	b.n	80028da <__libc_init_array+0x1e>
 80028f4:	080031cc 	.word	0x080031cc
 80028f8:	080031cc 	.word	0x080031cc
 80028fc:	080031cc 	.word	0x080031cc
 8002900:	080031d0 	.word	0x080031d0

08002904 <siprintf>:
 8002904:	b40e      	push	{r1, r2, r3}
 8002906:	b500      	push	{lr}
 8002908:	b09c      	sub	sp, #112	; 0x70
 800290a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800290e:	ab1d      	add	r3, sp, #116	; 0x74
 8002910:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002914:	9002      	str	r0, [sp, #8]
 8002916:	9006      	str	r0, [sp, #24]
 8002918:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800291c:	480a      	ldr	r0, [pc, #40]	; (8002948 <siprintf+0x44>)
 800291e:	9104      	str	r1, [sp, #16]
 8002920:	9107      	str	r1, [sp, #28]
 8002922:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002926:	f853 2b04 	ldr.w	r2, [r3], #4
 800292a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800292e:	6800      	ldr	r0, [r0, #0]
 8002930:	9301      	str	r3, [sp, #4]
 8002932:	a902      	add	r1, sp, #8
 8002934:	f000 f866 	bl	8002a04 <_svfiprintf_r>
 8002938:	9b02      	ldr	r3, [sp, #8]
 800293a:	2200      	movs	r2, #0
 800293c:	701a      	strb	r2, [r3, #0]
 800293e:	b01c      	add	sp, #112	; 0x70
 8002940:	f85d eb04 	ldr.w	lr, [sp], #4
 8002944:	b003      	add	sp, #12
 8002946:	4770      	bx	lr
 8002948:	20000008 	.word	0x20000008

0800294c <__ssputs_r>:
 800294c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002950:	688e      	ldr	r6, [r1, #8]
 8002952:	429e      	cmp	r6, r3
 8002954:	4682      	mov	sl, r0
 8002956:	460c      	mov	r4, r1
 8002958:	4691      	mov	r9, r2
 800295a:	4698      	mov	r8, r3
 800295c:	d835      	bhi.n	80029ca <__ssputs_r+0x7e>
 800295e:	898a      	ldrh	r2, [r1, #12]
 8002960:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002964:	d031      	beq.n	80029ca <__ssputs_r+0x7e>
 8002966:	6825      	ldr	r5, [r4, #0]
 8002968:	6909      	ldr	r1, [r1, #16]
 800296a:	1a6f      	subs	r7, r5, r1
 800296c:	6965      	ldr	r5, [r4, #20]
 800296e:	2302      	movs	r3, #2
 8002970:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002974:	fb95 f5f3 	sdiv	r5, r5, r3
 8002978:	f108 0301 	add.w	r3, r8, #1
 800297c:	443b      	add	r3, r7
 800297e:	429d      	cmp	r5, r3
 8002980:	bf38      	it	cc
 8002982:	461d      	movcc	r5, r3
 8002984:	0553      	lsls	r3, r2, #21
 8002986:	d531      	bpl.n	80029ec <__ssputs_r+0xa0>
 8002988:	4629      	mov	r1, r5
 800298a:	f000 fb39 	bl	8003000 <_malloc_r>
 800298e:	4606      	mov	r6, r0
 8002990:	b950      	cbnz	r0, 80029a8 <__ssputs_r+0x5c>
 8002992:	230c      	movs	r3, #12
 8002994:	f8ca 3000 	str.w	r3, [sl]
 8002998:	89a3      	ldrh	r3, [r4, #12]
 800299a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800299e:	81a3      	strh	r3, [r4, #12]
 80029a0:	f04f 30ff 	mov.w	r0, #4294967295
 80029a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029a8:	463a      	mov	r2, r7
 80029aa:	6921      	ldr	r1, [r4, #16]
 80029ac:	f000 fab4 	bl	8002f18 <memcpy>
 80029b0:	89a3      	ldrh	r3, [r4, #12]
 80029b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80029b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029ba:	81a3      	strh	r3, [r4, #12]
 80029bc:	6126      	str	r6, [r4, #16]
 80029be:	6165      	str	r5, [r4, #20]
 80029c0:	443e      	add	r6, r7
 80029c2:	1bed      	subs	r5, r5, r7
 80029c4:	6026      	str	r6, [r4, #0]
 80029c6:	60a5      	str	r5, [r4, #8]
 80029c8:	4646      	mov	r6, r8
 80029ca:	4546      	cmp	r6, r8
 80029cc:	bf28      	it	cs
 80029ce:	4646      	movcs	r6, r8
 80029d0:	4632      	mov	r2, r6
 80029d2:	4649      	mov	r1, r9
 80029d4:	6820      	ldr	r0, [r4, #0]
 80029d6:	f000 faaa 	bl	8002f2e <memmove>
 80029da:	68a3      	ldr	r3, [r4, #8]
 80029dc:	1b9b      	subs	r3, r3, r6
 80029de:	60a3      	str	r3, [r4, #8]
 80029e0:	6823      	ldr	r3, [r4, #0]
 80029e2:	441e      	add	r6, r3
 80029e4:	6026      	str	r6, [r4, #0]
 80029e6:	2000      	movs	r0, #0
 80029e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029ec:	462a      	mov	r2, r5
 80029ee:	f000 fb65 	bl	80030bc <_realloc_r>
 80029f2:	4606      	mov	r6, r0
 80029f4:	2800      	cmp	r0, #0
 80029f6:	d1e1      	bne.n	80029bc <__ssputs_r+0x70>
 80029f8:	6921      	ldr	r1, [r4, #16]
 80029fa:	4650      	mov	r0, sl
 80029fc:	f000 fab2 	bl	8002f64 <_free_r>
 8002a00:	e7c7      	b.n	8002992 <__ssputs_r+0x46>
	...

08002a04 <_svfiprintf_r>:
 8002a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a08:	b09d      	sub	sp, #116	; 0x74
 8002a0a:	4680      	mov	r8, r0
 8002a0c:	9303      	str	r3, [sp, #12]
 8002a0e:	898b      	ldrh	r3, [r1, #12]
 8002a10:	061c      	lsls	r4, r3, #24
 8002a12:	460d      	mov	r5, r1
 8002a14:	4616      	mov	r6, r2
 8002a16:	d50f      	bpl.n	8002a38 <_svfiprintf_r+0x34>
 8002a18:	690b      	ldr	r3, [r1, #16]
 8002a1a:	b96b      	cbnz	r3, 8002a38 <_svfiprintf_r+0x34>
 8002a1c:	2140      	movs	r1, #64	; 0x40
 8002a1e:	f000 faef 	bl	8003000 <_malloc_r>
 8002a22:	6028      	str	r0, [r5, #0]
 8002a24:	6128      	str	r0, [r5, #16]
 8002a26:	b928      	cbnz	r0, 8002a34 <_svfiprintf_r+0x30>
 8002a28:	230c      	movs	r3, #12
 8002a2a:	f8c8 3000 	str.w	r3, [r8]
 8002a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a32:	e0c5      	b.n	8002bc0 <_svfiprintf_r+0x1bc>
 8002a34:	2340      	movs	r3, #64	; 0x40
 8002a36:	616b      	str	r3, [r5, #20]
 8002a38:	2300      	movs	r3, #0
 8002a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8002a3c:	2320      	movs	r3, #32
 8002a3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a42:	2330      	movs	r3, #48	; 0x30
 8002a44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a48:	f04f 0b01 	mov.w	fp, #1
 8002a4c:	4637      	mov	r7, r6
 8002a4e:	463c      	mov	r4, r7
 8002a50:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d13c      	bne.n	8002ad2 <_svfiprintf_r+0xce>
 8002a58:	ebb7 0a06 	subs.w	sl, r7, r6
 8002a5c:	d00b      	beq.n	8002a76 <_svfiprintf_r+0x72>
 8002a5e:	4653      	mov	r3, sl
 8002a60:	4632      	mov	r2, r6
 8002a62:	4629      	mov	r1, r5
 8002a64:	4640      	mov	r0, r8
 8002a66:	f7ff ff71 	bl	800294c <__ssputs_r>
 8002a6a:	3001      	adds	r0, #1
 8002a6c:	f000 80a3 	beq.w	8002bb6 <_svfiprintf_r+0x1b2>
 8002a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a72:	4453      	add	r3, sl
 8002a74:	9309      	str	r3, [sp, #36]	; 0x24
 8002a76:	783b      	ldrb	r3, [r7, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 809c 	beq.w	8002bb6 <_svfiprintf_r+0x1b2>
 8002a7e:	2300      	movs	r3, #0
 8002a80:	f04f 32ff 	mov.w	r2, #4294967295
 8002a84:	9304      	str	r3, [sp, #16]
 8002a86:	9307      	str	r3, [sp, #28]
 8002a88:	9205      	str	r2, [sp, #20]
 8002a8a:	9306      	str	r3, [sp, #24]
 8002a8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a90:	931a      	str	r3, [sp, #104]	; 0x68
 8002a92:	2205      	movs	r2, #5
 8002a94:	7821      	ldrb	r1, [r4, #0]
 8002a96:	4850      	ldr	r0, [pc, #320]	; (8002bd8 <_svfiprintf_r+0x1d4>)
 8002a98:	f7fd fb9a 	bl	80001d0 <memchr>
 8002a9c:	1c67      	adds	r7, r4, #1
 8002a9e:	9b04      	ldr	r3, [sp, #16]
 8002aa0:	b9d8      	cbnz	r0, 8002ada <_svfiprintf_r+0xd6>
 8002aa2:	06d9      	lsls	r1, r3, #27
 8002aa4:	bf44      	itt	mi
 8002aa6:	2220      	movmi	r2, #32
 8002aa8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002aac:	071a      	lsls	r2, r3, #28
 8002aae:	bf44      	itt	mi
 8002ab0:	222b      	movmi	r2, #43	; 0x2b
 8002ab2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002ab6:	7822      	ldrb	r2, [r4, #0]
 8002ab8:	2a2a      	cmp	r2, #42	; 0x2a
 8002aba:	d016      	beq.n	8002aea <_svfiprintf_r+0xe6>
 8002abc:	9a07      	ldr	r2, [sp, #28]
 8002abe:	2100      	movs	r1, #0
 8002ac0:	200a      	movs	r0, #10
 8002ac2:	4627      	mov	r7, r4
 8002ac4:	3401      	adds	r4, #1
 8002ac6:	783b      	ldrb	r3, [r7, #0]
 8002ac8:	3b30      	subs	r3, #48	; 0x30
 8002aca:	2b09      	cmp	r3, #9
 8002acc:	d951      	bls.n	8002b72 <_svfiprintf_r+0x16e>
 8002ace:	b1c9      	cbz	r1, 8002b04 <_svfiprintf_r+0x100>
 8002ad0:	e011      	b.n	8002af6 <_svfiprintf_r+0xf2>
 8002ad2:	2b25      	cmp	r3, #37	; 0x25
 8002ad4:	d0c0      	beq.n	8002a58 <_svfiprintf_r+0x54>
 8002ad6:	4627      	mov	r7, r4
 8002ad8:	e7b9      	b.n	8002a4e <_svfiprintf_r+0x4a>
 8002ada:	4a3f      	ldr	r2, [pc, #252]	; (8002bd8 <_svfiprintf_r+0x1d4>)
 8002adc:	1a80      	subs	r0, r0, r2
 8002ade:	fa0b f000 	lsl.w	r0, fp, r0
 8002ae2:	4318      	orrs	r0, r3
 8002ae4:	9004      	str	r0, [sp, #16]
 8002ae6:	463c      	mov	r4, r7
 8002ae8:	e7d3      	b.n	8002a92 <_svfiprintf_r+0x8e>
 8002aea:	9a03      	ldr	r2, [sp, #12]
 8002aec:	1d11      	adds	r1, r2, #4
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	9103      	str	r1, [sp, #12]
 8002af2:	2a00      	cmp	r2, #0
 8002af4:	db01      	blt.n	8002afa <_svfiprintf_r+0xf6>
 8002af6:	9207      	str	r2, [sp, #28]
 8002af8:	e004      	b.n	8002b04 <_svfiprintf_r+0x100>
 8002afa:	4252      	negs	r2, r2
 8002afc:	f043 0302 	orr.w	r3, r3, #2
 8002b00:	9207      	str	r2, [sp, #28]
 8002b02:	9304      	str	r3, [sp, #16]
 8002b04:	783b      	ldrb	r3, [r7, #0]
 8002b06:	2b2e      	cmp	r3, #46	; 0x2e
 8002b08:	d10e      	bne.n	8002b28 <_svfiprintf_r+0x124>
 8002b0a:	787b      	ldrb	r3, [r7, #1]
 8002b0c:	2b2a      	cmp	r3, #42	; 0x2a
 8002b0e:	f107 0101 	add.w	r1, r7, #1
 8002b12:	d132      	bne.n	8002b7a <_svfiprintf_r+0x176>
 8002b14:	9b03      	ldr	r3, [sp, #12]
 8002b16:	1d1a      	adds	r2, r3, #4
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	9203      	str	r2, [sp, #12]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	bfb8      	it	lt
 8002b20:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b24:	3702      	adds	r7, #2
 8002b26:	9305      	str	r3, [sp, #20]
 8002b28:	4c2c      	ldr	r4, [pc, #176]	; (8002bdc <_svfiprintf_r+0x1d8>)
 8002b2a:	7839      	ldrb	r1, [r7, #0]
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	4620      	mov	r0, r4
 8002b30:	f7fd fb4e 	bl	80001d0 <memchr>
 8002b34:	b138      	cbz	r0, 8002b46 <_svfiprintf_r+0x142>
 8002b36:	2340      	movs	r3, #64	; 0x40
 8002b38:	1b00      	subs	r0, r0, r4
 8002b3a:	fa03 f000 	lsl.w	r0, r3, r0
 8002b3e:	9b04      	ldr	r3, [sp, #16]
 8002b40:	4303      	orrs	r3, r0
 8002b42:	9304      	str	r3, [sp, #16]
 8002b44:	3701      	adds	r7, #1
 8002b46:	7839      	ldrb	r1, [r7, #0]
 8002b48:	4825      	ldr	r0, [pc, #148]	; (8002be0 <_svfiprintf_r+0x1dc>)
 8002b4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b4e:	2206      	movs	r2, #6
 8002b50:	1c7e      	adds	r6, r7, #1
 8002b52:	f7fd fb3d 	bl	80001d0 <memchr>
 8002b56:	2800      	cmp	r0, #0
 8002b58:	d035      	beq.n	8002bc6 <_svfiprintf_r+0x1c2>
 8002b5a:	4b22      	ldr	r3, [pc, #136]	; (8002be4 <_svfiprintf_r+0x1e0>)
 8002b5c:	b9fb      	cbnz	r3, 8002b9e <_svfiprintf_r+0x19a>
 8002b5e:	9b03      	ldr	r3, [sp, #12]
 8002b60:	3307      	adds	r3, #7
 8002b62:	f023 0307 	bic.w	r3, r3, #7
 8002b66:	3308      	adds	r3, #8
 8002b68:	9303      	str	r3, [sp, #12]
 8002b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b6c:	444b      	add	r3, r9
 8002b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8002b70:	e76c      	b.n	8002a4c <_svfiprintf_r+0x48>
 8002b72:	fb00 3202 	mla	r2, r0, r2, r3
 8002b76:	2101      	movs	r1, #1
 8002b78:	e7a3      	b.n	8002ac2 <_svfiprintf_r+0xbe>
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	9305      	str	r3, [sp, #20]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	240a      	movs	r4, #10
 8002b82:	460f      	mov	r7, r1
 8002b84:	3101      	adds	r1, #1
 8002b86:	783a      	ldrb	r2, [r7, #0]
 8002b88:	3a30      	subs	r2, #48	; 0x30
 8002b8a:	2a09      	cmp	r2, #9
 8002b8c:	d903      	bls.n	8002b96 <_svfiprintf_r+0x192>
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0ca      	beq.n	8002b28 <_svfiprintf_r+0x124>
 8002b92:	9005      	str	r0, [sp, #20]
 8002b94:	e7c8      	b.n	8002b28 <_svfiprintf_r+0x124>
 8002b96:	fb04 2000 	mla	r0, r4, r0, r2
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e7f1      	b.n	8002b82 <_svfiprintf_r+0x17e>
 8002b9e:	ab03      	add	r3, sp, #12
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	462a      	mov	r2, r5
 8002ba4:	4b10      	ldr	r3, [pc, #64]	; (8002be8 <_svfiprintf_r+0x1e4>)
 8002ba6:	a904      	add	r1, sp, #16
 8002ba8:	4640      	mov	r0, r8
 8002baa:	f3af 8000 	nop.w
 8002bae:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002bb2:	4681      	mov	r9, r0
 8002bb4:	d1d9      	bne.n	8002b6a <_svfiprintf_r+0x166>
 8002bb6:	89ab      	ldrh	r3, [r5, #12]
 8002bb8:	065b      	lsls	r3, r3, #25
 8002bba:	f53f af38 	bmi.w	8002a2e <_svfiprintf_r+0x2a>
 8002bbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002bc0:	b01d      	add	sp, #116	; 0x74
 8002bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bc6:	ab03      	add	r3, sp, #12
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	462a      	mov	r2, r5
 8002bcc:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <_svfiprintf_r+0x1e4>)
 8002bce:	a904      	add	r1, sp, #16
 8002bd0:	4640      	mov	r0, r8
 8002bd2:	f000 f881 	bl	8002cd8 <_printf_i>
 8002bd6:	e7ea      	b.n	8002bae <_svfiprintf_r+0x1aa>
 8002bd8:	0800318f 	.word	0x0800318f
 8002bdc:	08003195 	.word	0x08003195
 8002be0:	08003199 	.word	0x08003199
 8002be4:	00000000 	.word	0x00000000
 8002be8:	0800294d 	.word	0x0800294d

08002bec <_printf_common>:
 8002bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bf0:	4691      	mov	r9, r2
 8002bf2:	461f      	mov	r7, r3
 8002bf4:	688a      	ldr	r2, [r1, #8]
 8002bf6:	690b      	ldr	r3, [r1, #16]
 8002bf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	bfb8      	it	lt
 8002c00:	4613      	movlt	r3, r2
 8002c02:	f8c9 3000 	str.w	r3, [r9]
 8002c06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c0a:	4606      	mov	r6, r0
 8002c0c:	460c      	mov	r4, r1
 8002c0e:	b112      	cbz	r2, 8002c16 <_printf_common+0x2a>
 8002c10:	3301      	adds	r3, #1
 8002c12:	f8c9 3000 	str.w	r3, [r9]
 8002c16:	6823      	ldr	r3, [r4, #0]
 8002c18:	0699      	lsls	r1, r3, #26
 8002c1a:	bf42      	ittt	mi
 8002c1c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002c20:	3302      	addmi	r3, #2
 8002c22:	f8c9 3000 	strmi.w	r3, [r9]
 8002c26:	6825      	ldr	r5, [r4, #0]
 8002c28:	f015 0506 	ands.w	r5, r5, #6
 8002c2c:	d107      	bne.n	8002c3e <_printf_common+0x52>
 8002c2e:	f104 0a19 	add.w	sl, r4, #25
 8002c32:	68e3      	ldr	r3, [r4, #12]
 8002c34:	f8d9 2000 	ldr.w	r2, [r9]
 8002c38:	1a9b      	subs	r3, r3, r2
 8002c3a:	429d      	cmp	r5, r3
 8002c3c:	db29      	blt.n	8002c92 <_printf_common+0xa6>
 8002c3e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002c42:	6822      	ldr	r2, [r4, #0]
 8002c44:	3300      	adds	r3, #0
 8002c46:	bf18      	it	ne
 8002c48:	2301      	movne	r3, #1
 8002c4a:	0692      	lsls	r2, r2, #26
 8002c4c:	d42e      	bmi.n	8002cac <_printf_common+0xc0>
 8002c4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c52:	4639      	mov	r1, r7
 8002c54:	4630      	mov	r0, r6
 8002c56:	47c0      	blx	r8
 8002c58:	3001      	adds	r0, #1
 8002c5a:	d021      	beq.n	8002ca0 <_printf_common+0xb4>
 8002c5c:	6823      	ldr	r3, [r4, #0]
 8002c5e:	68e5      	ldr	r5, [r4, #12]
 8002c60:	f8d9 2000 	ldr.w	r2, [r9]
 8002c64:	f003 0306 	and.w	r3, r3, #6
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	bf08      	it	eq
 8002c6c:	1aad      	subeq	r5, r5, r2
 8002c6e:	68a3      	ldr	r3, [r4, #8]
 8002c70:	6922      	ldr	r2, [r4, #16]
 8002c72:	bf0c      	ite	eq
 8002c74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c78:	2500      	movne	r5, #0
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	bfc4      	itt	gt
 8002c7e:	1a9b      	subgt	r3, r3, r2
 8002c80:	18ed      	addgt	r5, r5, r3
 8002c82:	f04f 0900 	mov.w	r9, #0
 8002c86:	341a      	adds	r4, #26
 8002c88:	454d      	cmp	r5, r9
 8002c8a:	d11b      	bne.n	8002cc4 <_printf_common+0xd8>
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c92:	2301      	movs	r3, #1
 8002c94:	4652      	mov	r2, sl
 8002c96:	4639      	mov	r1, r7
 8002c98:	4630      	mov	r0, r6
 8002c9a:	47c0      	blx	r8
 8002c9c:	3001      	adds	r0, #1
 8002c9e:	d103      	bne.n	8002ca8 <_printf_common+0xbc>
 8002ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ca8:	3501      	adds	r5, #1
 8002caa:	e7c2      	b.n	8002c32 <_printf_common+0x46>
 8002cac:	18e1      	adds	r1, r4, r3
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	2030      	movs	r0, #48	; 0x30
 8002cb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002cb6:	4422      	add	r2, r4
 8002cb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002cbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002cc0:	3302      	adds	r3, #2
 8002cc2:	e7c4      	b.n	8002c4e <_printf_common+0x62>
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	4622      	mov	r2, r4
 8002cc8:	4639      	mov	r1, r7
 8002cca:	4630      	mov	r0, r6
 8002ccc:	47c0      	blx	r8
 8002cce:	3001      	adds	r0, #1
 8002cd0:	d0e6      	beq.n	8002ca0 <_printf_common+0xb4>
 8002cd2:	f109 0901 	add.w	r9, r9, #1
 8002cd6:	e7d7      	b.n	8002c88 <_printf_common+0x9c>

08002cd8 <_printf_i>:
 8002cd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002cdc:	4617      	mov	r7, r2
 8002cde:	7e0a      	ldrb	r2, [r1, #24]
 8002ce0:	b085      	sub	sp, #20
 8002ce2:	2a6e      	cmp	r2, #110	; 0x6e
 8002ce4:	4698      	mov	r8, r3
 8002ce6:	4606      	mov	r6, r0
 8002ce8:	460c      	mov	r4, r1
 8002cea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002cec:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002cf0:	f000 80bc 	beq.w	8002e6c <_printf_i+0x194>
 8002cf4:	d81a      	bhi.n	8002d2c <_printf_i+0x54>
 8002cf6:	2a63      	cmp	r2, #99	; 0x63
 8002cf8:	d02e      	beq.n	8002d58 <_printf_i+0x80>
 8002cfa:	d80a      	bhi.n	8002d12 <_printf_i+0x3a>
 8002cfc:	2a00      	cmp	r2, #0
 8002cfe:	f000 80c8 	beq.w	8002e92 <_printf_i+0x1ba>
 8002d02:	2a58      	cmp	r2, #88	; 0x58
 8002d04:	f000 808a 	beq.w	8002e1c <_printf_i+0x144>
 8002d08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d0c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002d10:	e02a      	b.n	8002d68 <_printf_i+0x90>
 8002d12:	2a64      	cmp	r2, #100	; 0x64
 8002d14:	d001      	beq.n	8002d1a <_printf_i+0x42>
 8002d16:	2a69      	cmp	r2, #105	; 0x69
 8002d18:	d1f6      	bne.n	8002d08 <_printf_i+0x30>
 8002d1a:	6821      	ldr	r1, [r4, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002d22:	d023      	beq.n	8002d6c <_printf_i+0x94>
 8002d24:	1d11      	adds	r1, r2, #4
 8002d26:	6019      	str	r1, [r3, #0]
 8002d28:	6813      	ldr	r3, [r2, #0]
 8002d2a:	e027      	b.n	8002d7c <_printf_i+0xa4>
 8002d2c:	2a73      	cmp	r2, #115	; 0x73
 8002d2e:	f000 80b4 	beq.w	8002e9a <_printf_i+0x1c2>
 8002d32:	d808      	bhi.n	8002d46 <_printf_i+0x6e>
 8002d34:	2a6f      	cmp	r2, #111	; 0x6f
 8002d36:	d02a      	beq.n	8002d8e <_printf_i+0xb6>
 8002d38:	2a70      	cmp	r2, #112	; 0x70
 8002d3a:	d1e5      	bne.n	8002d08 <_printf_i+0x30>
 8002d3c:	680a      	ldr	r2, [r1, #0]
 8002d3e:	f042 0220 	orr.w	r2, r2, #32
 8002d42:	600a      	str	r2, [r1, #0]
 8002d44:	e003      	b.n	8002d4e <_printf_i+0x76>
 8002d46:	2a75      	cmp	r2, #117	; 0x75
 8002d48:	d021      	beq.n	8002d8e <_printf_i+0xb6>
 8002d4a:	2a78      	cmp	r2, #120	; 0x78
 8002d4c:	d1dc      	bne.n	8002d08 <_printf_i+0x30>
 8002d4e:	2278      	movs	r2, #120	; 0x78
 8002d50:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002d54:	496e      	ldr	r1, [pc, #440]	; (8002f10 <_printf_i+0x238>)
 8002d56:	e064      	b.n	8002e22 <_printf_i+0x14a>
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002d5e:	1d11      	adds	r1, r2, #4
 8002d60:	6019      	str	r1, [r3, #0]
 8002d62:	6813      	ldr	r3, [r2, #0]
 8002d64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e0a3      	b.n	8002eb4 <_printf_i+0x1dc>
 8002d6c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002d70:	f102 0104 	add.w	r1, r2, #4
 8002d74:	6019      	str	r1, [r3, #0]
 8002d76:	d0d7      	beq.n	8002d28 <_printf_i+0x50>
 8002d78:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	da03      	bge.n	8002d88 <_printf_i+0xb0>
 8002d80:	222d      	movs	r2, #45	; 0x2d
 8002d82:	425b      	negs	r3, r3
 8002d84:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002d88:	4962      	ldr	r1, [pc, #392]	; (8002f14 <_printf_i+0x23c>)
 8002d8a:	220a      	movs	r2, #10
 8002d8c:	e017      	b.n	8002dbe <_printf_i+0xe6>
 8002d8e:	6820      	ldr	r0, [r4, #0]
 8002d90:	6819      	ldr	r1, [r3, #0]
 8002d92:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002d96:	d003      	beq.n	8002da0 <_printf_i+0xc8>
 8002d98:	1d08      	adds	r0, r1, #4
 8002d9a:	6018      	str	r0, [r3, #0]
 8002d9c:	680b      	ldr	r3, [r1, #0]
 8002d9e:	e006      	b.n	8002dae <_printf_i+0xd6>
 8002da0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002da4:	f101 0004 	add.w	r0, r1, #4
 8002da8:	6018      	str	r0, [r3, #0]
 8002daa:	d0f7      	beq.n	8002d9c <_printf_i+0xc4>
 8002dac:	880b      	ldrh	r3, [r1, #0]
 8002dae:	4959      	ldr	r1, [pc, #356]	; (8002f14 <_printf_i+0x23c>)
 8002db0:	2a6f      	cmp	r2, #111	; 0x6f
 8002db2:	bf14      	ite	ne
 8002db4:	220a      	movne	r2, #10
 8002db6:	2208      	moveq	r2, #8
 8002db8:	2000      	movs	r0, #0
 8002dba:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002dbe:	6865      	ldr	r5, [r4, #4]
 8002dc0:	60a5      	str	r5, [r4, #8]
 8002dc2:	2d00      	cmp	r5, #0
 8002dc4:	f2c0 809c 	blt.w	8002f00 <_printf_i+0x228>
 8002dc8:	6820      	ldr	r0, [r4, #0]
 8002dca:	f020 0004 	bic.w	r0, r0, #4
 8002dce:	6020      	str	r0, [r4, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d13f      	bne.n	8002e54 <_printf_i+0x17c>
 8002dd4:	2d00      	cmp	r5, #0
 8002dd6:	f040 8095 	bne.w	8002f04 <_printf_i+0x22c>
 8002dda:	4675      	mov	r5, lr
 8002ddc:	2a08      	cmp	r2, #8
 8002dde:	d10b      	bne.n	8002df8 <_printf_i+0x120>
 8002de0:	6823      	ldr	r3, [r4, #0]
 8002de2:	07da      	lsls	r2, r3, #31
 8002de4:	d508      	bpl.n	8002df8 <_printf_i+0x120>
 8002de6:	6923      	ldr	r3, [r4, #16]
 8002de8:	6862      	ldr	r2, [r4, #4]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	bfde      	ittt	le
 8002dee:	2330      	movle	r3, #48	; 0x30
 8002df0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002df4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002df8:	ebae 0305 	sub.w	r3, lr, r5
 8002dfc:	6123      	str	r3, [r4, #16]
 8002dfe:	f8cd 8000 	str.w	r8, [sp]
 8002e02:	463b      	mov	r3, r7
 8002e04:	aa03      	add	r2, sp, #12
 8002e06:	4621      	mov	r1, r4
 8002e08:	4630      	mov	r0, r6
 8002e0a:	f7ff feef 	bl	8002bec <_printf_common>
 8002e0e:	3001      	adds	r0, #1
 8002e10:	d155      	bne.n	8002ebe <_printf_i+0x1e6>
 8002e12:	f04f 30ff 	mov.w	r0, #4294967295
 8002e16:	b005      	add	sp, #20
 8002e18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e1c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002e20:	493c      	ldr	r1, [pc, #240]	; (8002f14 <_printf_i+0x23c>)
 8002e22:	6822      	ldr	r2, [r4, #0]
 8002e24:	6818      	ldr	r0, [r3, #0]
 8002e26:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002e2a:	f100 0504 	add.w	r5, r0, #4
 8002e2e:	601d      	str	r5, [r3, #0]
 8002e30:	d001      	beq.n	8002e36 <_printf_i+0x15e>
 8002e32:	6803      	ldr	r3, [r0, #0]
 8002e34:	e002      	b.n	8002e3c <_printf_i+0x164>
 8002e36:	0655      	lsls	r5, r2, #25
 8002e38:	d5fb      	bpl.n	8002e32 <_printf_i+0x15a>
 8002e3a:	8803      	ldrh	r3, [r0, #0]
 8002e3c:	07d0      	lsls	r0, r2, #31
 8002e3e:	bf44      	itt	mi
 8002e40:	f042 0220 	orrmi.w	r2, r2, #32
 8002e44:	6022      	strmi	r2, [r4, #0]
 8002e46:	b91b      	cbnz	r3, 8002e50 <_printf_i+0x178>
 8002e48:	6822      	ldr	r2, [r4, #0]
 8002e4a:	f022 0220 	bic.w	r2, r2, #32
 8002e4e:	6022      	str	r2, [r4, #0]
 8002e50:	2210      	movs	r2, #16
 8002e52:	e7b1      	b.n	8002db8 <_printf_i+0xe0>
 8002e54:	4675      	mov	r5, lr
 8002e56:	fbb3 f0f2 	udiv	r0, r3, r2
 8002e5a:	fb02 3310 	mls	r3, r2, r0, r3
 8002e5e:	5ccb      	ldrb	r3, [r1, r3]
 8002e60:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002e64:	4603      	mov	r3, r0
 8002e66:	2800      	cmp	r0, #0
 8002e68:	d1f5      	bne.n	8002e56 <_printf_i+0x17e>
 8002e6a:	e7b7      	b.n	8002ddc <_printf_i+0x104>
 8002e6c:	6808      	ldr	r0, [r1, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	6949      	ldr	r1, [r1, #20]
 8002e72:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002e76:	d004      	beq.n	8002e82 <_printf_i+0x1aa>
 8002e78:	1d10      	adds	r0, r2, #4
 8002e7a:	6018      	str	r0, [r3, #0]
 8002e7c:	6813      	ldr	r3, [r2, #0]
 8002e7e:	6019      	str	r1, [r3, #0]
 8002e80:	e007      	b.n	8002e92 <_printf_i+0x1ba>
 8002e82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e86:	f102 0004 	add.w	r0, r2, #4
 8002e8a:	6018      	str	r0, [r3, #0]
 8002e8c:	6813      	ldr	r3, [r2, #0]
 8002e8e:	d0f6      	beq.n	8002e7e <_printf_i+0x1a6>
 8002e90:	8019      	strh	r1, [r3, #0]
 8002e92:	2300      	movs	r3, #0
 8002e94:	6123      	str	r3, [r4, #16]
 8002e96:	4675      	mov	r5, lr
 8002e98:	e7b1      	b.n	8002dfe <_printf_i+0x126>
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	1d11      	adds	r1, r2, #4
 8002e9e:	6019      	str	r1, [r3, #0]
 8002ea0:	6815      	ldr	r5, [r2, #0]
 8002ea2:	6862      	ldr	r2, [r4, #4]
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	4628      	mov	r0, r5
 8002ea8:	f7fd f992 	bl	80001d0 <memchr>
 8002eac:	b108      	cbz	r0, 8002eb2 <_printf_i+0x1da>
 8002eae:	1b40      	subs	r0, r0, r5
 8002eb0:	6060      	str	r0, [r4, #4]
 8002eb2:	6863      	ldr	r3, [r4, #4]
 8002eb4:	6123      	str	r3, [r4, #16]
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ebc:	e79f      	b.n	8002dfe <_printf_i+0x126>
 8002ebe:	6923      	ldr	r3, [r4, #16]
 8002ec0:	462a      	mov	r2, r5
 8002ec2:	4639      	mov	r1, r7
 8002ec4:	4630      	mov	r0, r6
 8002ec6:	47c0      	blx	r8
 8002ec8:	3001      	adds	r0, #1
 8002eca:	d0a2      	beq.n	8002e12 <_printf_i+0x13a>
 8002ecc:	6823      	ldr	r3, [r4, #0]
 8002ece:	079b      	lsls	r3, r3, #30
 8002ed0:	d507      	bpl.n	8002ee2 <_printf_i+0x20a>
 8002ed2:	2500      	movs	r5, #0
 8002ed4:	f104 0919 	add.w	r9, r4, #25
 8002ed8:	68e3      	ldr	r3, [r4, #12]
 8002eda:	9a03      	ldr	r2, [sp, #12]
 8002edc:	1a9b      	subs	r3, r3, r2
 8002ede:	429d      	cmp	r5, r3
 8002ee0:	db05      	blt.n	8002eee <_printf_i+0x216>
 8002ee2:	68e0      	ldr	r0, [r4, #12]
 8002ee4:	9b03      	ldr	r3, [sp, #12]
 8002ee6:	4298      	cmp	r0, r3
 8002ee8:	bfb8      	it	lt
 8002eea:	4618      	movlt	r0, r3
 8002eec:	e793      	b.n	8002e16 <_printf_i+0x13e>
 8002eee:	2301      	movs	r3, #1
 8002ef0:	464a      	mov	r2, r9
 8002ef2:	4639      	mov	r1, r7
 8002ef4:	4630      	mov	r0, r6
 8002ef6:	47c0      	blx	r8
 8002ef8:	3001      	adds	r0, #1
 8002efa:	d08a      	beq.n	8002e12 <_printf_i+0x13a>
 8002efc:	3501      	adds	r5, #1
 8002efe:	e7eb      	b.n	8002ed8 <_printf_i+0x200>
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1a7      	bne.n	8002e54 <_printf_i+0x17c>
 8002f04:	780b      	ldrb	r3, [r1, #0]
 8002f06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f0a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f0e:	e765      	b.n	8002ddc <_printf_i+0x104>
 8002f10:	080031b1 	.word	0x080031b1
 8002f14:	080031a0 	.word	0x080031a0

08002f18 <memcpy>:
 8002f18:	b510      	push	{r4, lr}
 8002f1a:	1e43      	subs	r3, r0, #1
 8002f1c:	440a      	add	r2, r1
 8002f1e:	4291      	cmp	r1, r2
 8002f20:	d100      	bne.n	8002f24 <memcpy+0xc>
 8002f22:	bd10      	pop	{r4, pc}
 8002f24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f2c:	e7f7      	b.n	8002f1e <memcpy+0x6>

08002f2e <memmove>:
 8002f2e:	4288      	cmp	r0, r1
 8002f30:	b510      	push	{r4, lr}
 8002f32:	eb01 0302 	add.w	r3, r1, r2
 8002f36:	d803      	bhi.n	8002f40 <memmove+0x12>
 8002f38:	1e42      	subs	r2, r0, #1
 8002f3a:	4299      	cmp	r1, r3
 8002f3c:	d10c      	bne.n	8002f58 <memmove+0x2a>
 8002f3e:	bd10      	pop	{r4, pc}
 8002f40:	4298      	cmp	r0, r3
 8002f42:	d2f9      	bcs.n	8002f38 <memmove+0xa>
 8002f44:	1881      	adds	r1, r0, r2
 8002f46:	1ad2      	subs	r2, r2, r3
 8002f48:	42d3      	cmn	r3, r2
 8002f4a:	d100      	bne.n	8002f4e <memmove+0x20>
 8002f4c:	bd10      	pop	{r4, pc}
 8002f4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f52:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002f56:	e7f7      	b.n	8002f48 <memmove+0x1a>
 8002f58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f5c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002f60:	e7eb      	b.n	8002f3a <memmove+0xc>
	...

08002f64 <_free_r>:
 8002f64:	b538      	push	{r3, r4, r5, lr}
 8002f66:	4605      	mov	r5, r0
 8002f68:	2900      	cmp	r1, #0
 8002f6a:	d045      	beq.n	8002ff8 <_free_r+0x94>
 8002f6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f70:	1f0c      	subs	r4, r1, #4
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	bfb8      	it	lt
 8002f76:	18e4      	addlt	r4, r4, r3
 8002f78:	f000 f8d6 	bl	8003128 <__malloc_lock>
 8002f7c:	4a1f      	ldr	r2, [pc, #124]	; (8002ffc <_free_r+0x98>)
 8002f7e:	6813      	ldr	r3, [r2, #0]
 8002f80:	4610      	mov	r0, r2
 8002f82:	b933      	cbnz	r3, 8002f92 <_free_r+0x2e>
 8002f84:	6063      	str	r3, [r4, #4]
 8002f86:	6014      	str	r4, [r2, #0]
 8002f88:	4628      	mov	r0, r5
 8002f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f8e:	f000 b8cc 	b.w	800312a <__malloc_unlock>
 8002f92:	42a3      	cmp	r3, r4
 8002f94:	d90c      	bls.n	8002fb0 <_free_r+0x4c>
 8002f96:	6821      	ldr	r1, [r4, #0]
 8002f98:	1862      	adds	r2, r4, r1
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	bf04      	itt	eq
 8002f9e:	681a      	ldreq	r2, [r3, #0]
 8002fa0:	685b      	ldreq	r3, [r3, #4]
 8002fa2:	6063      	str	r3, [r4, #4]
 8002fa4:	bf04      	itt	eq
 8002fa6:	1852      	addeq	r2, r2, r1
 8002fa8:	6022      	streq	r2, [r4, #0]
 8002faa:	6004      	str	r4, [r0, #0]
 8002fac:	e7ec      	b.n	8002f88 <_free_r+0x24>
 8002fae:	4613      	mov	r3, r2
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	b10a      	cbz	r2, 8002fb8 <_free_r+0x54>
 8002fb4:	42a2      	cmp	r2, r4
 8002fb6:	d9fa      	bls.n	8002fae <_free_r+0x4a>
 8002fb8:	6819      	ldr	r1, [r3, #0]
 8002fba:	1858      	adds	r0, r3, r1
 8002fbc:	42a0      	cmp	r0, r4
 8002fbe:	d10b      	bne.n	8002fd8 <_free_r+0x74>
 8002fc0:	6820      	ldr	r0, [r4, #0]
 8002fc2:	4401      	add	r1, r0
 8002fc4:	1858      	adds	r0, r3, r1
 8002fc6:	4282      	cmp	r2, r0
 8002fc8:	6019      	str	r1, [r3, #0]
 8002fca:	d1dd      	bne.n	8002f88 <_free_r+0x24>
 8002fcc:	6810      	ldr	r0, [r2, #0]
 8002fce:	6852      	ldr	r2, [r2, #4]
 8002fd0:	605a      	str	r2, [r3, #4]
 8002fd2:	4401      	add	r1, r0
 8002fd4:	6019      	str	r1, [r3, #0]
 8002fd6:	e7d7      	b.n	8002f88 <_free_r+0x24>
 8002fd8:	d902      	bls.n	8002fe0 <_free_r+0x7c>
 8002fda:	230c      	movs	r3, #12
 8002fdc:	602b      	str	r3, [r5, #0]
 8002fde:	e7d3      	b.n	8002f88 <_free_r+0x24>
 8002fe0:	6820      	ldr	r0, [r4, #0]
 8002fe2:	1821      	adds	r1, r4, r0
 8002fe4:	428a      	cmp	r2, r1
 8002fe6:	bf04      	itt	eq
 8002fe8:	6811      	ldreq	r1, [r2, #0]
 8002fea:	6852      	ldreq	r2, [r2, #4]
 8002fec:	6062      	str	r2, [r4, #4]
 8002fee:	bf04      	itt	eq
 8002ff0:	1809      	addeq	r1, r1, r0
 8002ff2:	6021      	streq	r1, [r4, #0]
 8002ff4:	605c      	str	r4, [r3, #4]
 8002ff6:	e7c7      	b.n	8002f88 <_free_r+0x24>
 8002ff8:	bd38      	pop	{r3, r4, r5, pc}
 8002ffa:	bf00      	nop
 8002ffc:	200000a8 	.word	0x200000a8

08003000 <_malloc_r>:
 8003000:	b570      	push	{r4, r5, r6, lr}
 8003002:	1ccd      	adds	r5, r1, #3
 8003004:	f025 0503 	bic.w	r5, r5, #3
 8003008:	3508      	adds	r5, #8
 800300a:	2d0c      	cmp	r5, #12
 800300c:	bf38      	it	cc
 800300e:	250c      	movcc	r5, #12
 8003010:	2d00      	cmp	r5, #0
 8003012:	4606      	mov	r6, r0
 8003014:	db01      	blt.n	800301a <_malloc_r+0x1a>
 8003016:	42a9      	cmp	r1, r5
 8003018:	d903      	bls.n	8003022 <_malloc_r+0x22>
 800301a:	230c      	movs	r3, #12
 800301c:	6033      	str	r3, [r6, #0]
 800301e:	2000      	movs	r0, #0
 8003020:	bd70      	pop	{r4, r5, r6, pc}
 8003022:	f000 f881 	bl	8003128 <__malloc_lock>
 8003026:	4a23      	ldr	r2, [pc, #140]	; (80030b4 <_malloc_r+0xb4>)
 8003028:	6814      	ldr	r4, [r2, #0]
 800302a:	4621      	mov	r1, r4
 800302c:	b991      	cbnz	r1, 8003054 <_malloc_r+0x54>
 800302e:	4c22      	ldr	r4, [pc, #136]	; (80030b8 <_malloc_r+0xb8>)
 8003030:	6823      	ldr	r3, [r4, #0]
 8003032:	b91b      	cbnz	r3, 800303c <_malloc_r+0x3c>
 8003034:	4630      	mov	r0, r6
 8003036:	f000 f867 	bl	8003108 <_sbrk_r>
 800303a:	6020      	str	r0, [r4, #0]
 800303c:	4629      	mov	r1, r5
 800303e:	4630      	mov	r0, r6
 8003040:	f000 f862 	bl	8003108 <_sbrk_r>
 8003044:	1c43      	adds	r3, r0, #1
 8003046:	d126      	bne.n	8003096 <_malloc_r+0x96>
 8003048:	230c      	movs	r3, #12
 800304a:	6033      	str	r3, [r6, #0]
 800304c:	4630      	mov	r0, r6
 800304e:	f000 f86c 	bl	800312a <__malloc_unlock>
 8003052:	e7e4      	b.n	800301e <_malloc_r+0x1e>
 8003054:	680b      	ldr	r3, [r1, #0]
 8003056:	1b5b      	subs	r3, r3, r5
 8003058:	d41a      	bmi.n	8003090 <_malloc_r+0x90>
 800305a:	2b0b      	cmp	r3, #11
 800305c:	d90f      	bls.n	800307e <_malloc_r+0x7e>
 800305e:	600b      	str	r3, [r1, #0]
 8003060:	50cd      	str	r5, [r1, r3]
 8003062:	18cc      	adds	r4, r1, r3
 8003064:	4630      	mov	r0, r6
 8003066:	f000 f860 	bl	800312a <__malloc_unlock>
 800306a:	f104 000b 	add.w	r0, r4, #11
 800306e:	1d23      	adds	r3, r4, #4
 8003070:	f020 0007 	bic.w	r0, r0, #7
 8003074:	1ac3      	subs	r3, r0, r3
 8003076:	d01b      	beq.n	80030b0 <_malloc_r+0xb0>
 8003078:	425a      	negs	r2, r3
 800307a:	50e2      	str	r2, [r4, r3]
 800307c:	bd70      	pop	{r4, r5, r6, pc}
 800307e:	428c      	cmp	r4, r1
 8003080:	bf0d      	iteet	eq
 8003082:	6863      	ldreq	r3, [r4, #4]
 8003084:	684b      	ldrne	r3, [r1, #4]
 8003086:	6063      	strne	r3, [r4, #4]
 8003088:	6013      	streq	r3, [r2, #0]
 800308a:	bf18      	it	ne
 800308c:	460c      	movne	r4, r1
 800308e:	e7e9      	b.n	8003064 <_malloc_r+0x64>
 8003090:	460c      	mov	r4, r1
 8003092:	6849      	ldr	r1, [r1, #4]
 8003094:	e7ca      	b.n	800302c <_malloc_r+0x2c>
 8003096:	1cc4      	adds	r4, r0, #3
 8003098:	f024 0403 	bic.w	r4, r4, #3
 800309c:	42a0      	cmp	r0, r4
 800309e:	d005      	beq.n	80030ac <_malloc_r+0xac>
 80030a0:	1a21      	subs	r1, r4, r0
 80030a2:	4630      	mov	r0, r6
 80030a4:	f000 f830 	bl	8003108 <_sbrk_r>
 80030a8:	3001      	adds	r0, #1
 80030aa:	d0cd      	beq.n	8003048 <_malloc_r+0x48>
 80030ac:	6025      	str	r5, [r4, #0]
 80030ae:	e7d9      	b.n	8003064 <_malloc_r+0x64>
 80030b0:	bd70      	pop	{r4, r5, r6, pc}
 80030b2:	bf00      	nop
 80030b4:	200000a8 	.word	0x200000a8
 80030b8:	200000ac 	.word	0x200000ac

080030bc <_realloc_r>:
 80030bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030be:	4607      	mov	r7, r0
 80030c0:	4614      	mov	r4, r2
 80030c2:	460e      	mov	r6, r1
 80030c4:	b921      	cbnz	r1, 80030d0 <_realloc_r+0x14>
 80030c6:	4611      	mov	r1, r2
 80030c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80030cc:	f7ff bf98 	b.w	8003000 <_malloc_r>
 80030d0:	b922      	cbnz	r2, 80030dc <_realloc_r+0x20>
 80030d2:	f7ff ff47 	bl	8002f64 <_free_r>
 80030d6:	4625      	mov	r5, r4
 80030d8:	4628      	mov	r0, r5
 80030da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030dc:	f000 f826 	bl	800312c <_malloc_usable_size_r>
 80030e0:	4284      	cmp	r4, r0
 80030e2:	d90f      	bls.n	8003104 <_realloc_r+0x48>
 80030e4:	4621      	mov	r1, r4
 80030e6:	4638      	mov	r0, r7
 80030e8:	f7ff ff8a 	bl	8003000 <_malloc_r>
 80030ec:	4605      	mov	r5, r0
 80030ee:	2800      	cmp	r0, #0
 80030f0:	d0f2      	beq.n	80030d8 <_realloc_r+0x1c>
 80030f2:	4631      	mov	r1, r6
 80030f4:	4622      	mov	r2, r4
 80030f6:	f7ff ff0f 	bl	8002f18 <memcpy>
 80030fa:	4631      	mov	r1, r6
 80030fc:	4638      	mov	r0, r7
 80030fe:	f7ff ff31 	bl	8002f64 <_free_r>
 8003102:	e7e9      	b.n	80030d8 <_realloc_r+0x1c>
 8003104:	4635      	mov	r5, r6
 8003106:	e7e7      	b.n	80030d8 <_realloc_r+0x1c>

08003108 <_sbrk_r>:
 8003108:	b538      	push	{r3, r4, r5, lr}
 800310a:	4c06      	ldr	r4, [pc, #24]	; (8003124 <_sbrk_r+0x1c>)
 800310c:	2300      	movs	r3, #0
 800310e:	4605      	mov	r5, r0
 8003110:	4608      	mov	r0, r1
 8003112:	6023      	str	r3, [r4, #0]
 8003114:	f000 f814 	bl	8003140 <_sbrk>
 8003118:	1c43      	adds	r3, r0, #1
 800311a:	d102      	bne.n	8003122 <_sbrk_r+0x1a>
 800311c:	6823      	ldr	r3, [r4, #0]
 800311e:	b103      	cbz	r3, 8003122 <_sbrk_r+0x1a>
 8003120:	602b      	str	r3, [r5, #0]
 8003122:	bd38      	pop	{r3, r4, r5, pc}
 8003124:	2000018c 	.word	0x2000018c

08003128 <__malloc_lock>:
 8003128:	4770      	bx	lr

0800312a <__malloc_unlock>:
 800312a:	4770      	bx	lr

0800312c <_malloc_usable_size_r>:
 800312c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003130:	2800      	cmp	r0, #0
 8003132:	f1a0 0004 	sub.w	r0, r0, #4
 8003136:	bfbc      	itt	lt
 8003138:	580b      	ldrlt	r3, [r1, r0]
 800313a:	18c0      	addlt	r0, r0, r3
 800313c:	4770      	bx	lr
	...

08003140 <_sbrk>:
 8003140:	4b04      	ldr	r3, [pc, #16]	; (8003154 <_sbrk+0x14>)
 8003142:	6819      	ldr	r1, [r3, #0]
 8003144:	4602      	mov	r2, r0
 8003146:	b909      	cbnz	r1, 800314c <_sbrk+0xc>
 8003148:	4903      	ldr	r1, [pc, #12]	; (8003158 <_sbrk+0x18>)
 800314a:	6019      	str	r1, [r3, #0]
 800314c:	6818      	ldr	r0, [r3, #0]
 800314e:	4402      	add	r2, r0
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	4770      	bx	lr
 8003154:	200000b0 	.word	0x200000b0
 8003158:	20000190 	.word	0x20000190

0800315c <_init>:
 800315c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800315e:	bf00      	nop
 8003160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003162:	bc08      	pop	{r3}
 8003164:	469e      	mov	lr, r3
 8003166:	4770      	bx	lr

08003168 <_fini>:
 8003168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316a:	bf00      	nop
 800316c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800316e:	bc08      	pop	{r3}
 8003170:	469e      	mov	lr, r3
 8003172:	4770      	bx	lr
