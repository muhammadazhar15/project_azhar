
coba_udp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08006274  08006274  00016274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006360  08006360  00016360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006368  08006368  00016368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800636c  0800636c  0001636c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08006370  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  8 .bss          00006838  20000070  20000070  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200068a8  200068a8  00020070  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 11 .debug_info   00031df9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000635c  00000000  00000000  00051e99  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000dbae  00000000  00000000  000581f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ee0  00000000  00000000  00065da8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001600  00000000  00000000  00066c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000bd7c  00000000  00000000  00068288  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00005e35  00000000  00000000  00074004  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00079e39  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002ef8  00000000  00000000  00079eb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800625c 	.word	0x0800625c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800625c 	.word	0x0800625c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000590:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000592:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <HAL_InitTick+0x24>)
{
 8000594:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000596:	6818      	ldr	r0, [r3, #0]
 8000598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059c:	fbb0 f0f3 	udiv	r0, r0, r3
 80005a0:	f000 f894 	bl	80006cc <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a4:	2200      	movs	r2, #0
 80005a6:	4621      	mov	r1, r4
 80005a8:	f04f 30ff 	mov.w	r0, #4294967295
 80005ac:	f000 f84e 	bl	800064c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80005b0:	2000      	movs	r0, #0
 80005b2:	bd10      	pop	{r4, pc}
 80005b4:	20000008 	.word	0x20000008

080005b8 <HAL_Init>:
{
 80005b8:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005ba:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <HAL_Init+0x30>)
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005c2:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005ca:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005d2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d4:	2003      	movs	r0, #3
 80005d6:	f000 f827 	bl	8000628 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005da:	2000      	movs	r0, #0
 80005dc:	f7ff ffd8 	bl	8000590 <HAL_InitTick>
  HAL_MspInit();
 80005e0:	f005 f910 	bl	8005804 <HAL_MspInit>
}
 80005e4:	2000      	movs	r0, #0
 80005e6:	bd08      	pop	{r3, pc}
 80005e8:	40023c00 	.word	0x40023c00

080005ec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80005ec:	4a02      	ldr	r2, [pc, #8]	; (80005f8 <HAL_IncTick+0xc>)
 80005ee:	6813      	ldr	r3, [r2, #0]
 80005f0:	3301      	adds	r3, #1
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20000200 	.word	0x20000200

080005fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005fc:	4b01      	ldr	r3, [pc, #4]	; (8000604 <HAL_GetTick+0x8>)
 80005fe:	6818      	ldr	r0, [r3, #0]
}
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	20000200 	.word	0x20000200

08000608 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000608:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800060a:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800060c:	f7ff fff6 	bl	80005fc <HAL_GetTick>
  uint32_t wait = Delay;
 8000610:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000612:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000614:	4605      	mov	r5, r0
  {
     wait++;
 8000616:	bf18      	it	ne
 8000618:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800061a:	f7ff ffef 	bl	80005fc <HAL_GetTick>
 800061e:	1b40      	subs	r0, r0, r5
 8000620:	42a0      	cmp	r0, r4
 8000622:	d3fa      	bcc.n	800061a <HAL_Delay+0x12>
  {
  }
}
 8000624:	b003      	add	sp, #12
 8000626:	bd30      	pop	{r4, r5, pc}

08000628 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000628:	4a07      	ldr	r2, [pc, #28]	; (8000648 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800062a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800062c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000630:	041b      	lsls	r3, r3, #16
 8000632:	0c1b      	lsrs	r3, r3, #16
 8000634:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000638:	0200      	lsls	r0, r0, #8
 800063a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800063e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000642:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000644:	60d3      	str	r3, [r2, #12]
 8000646:	4770      	bx	lr
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800064c:	4b17      	ldr	r3, [pc, #92]	; (80006ac <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	68dc      	ldr	r4, [r3, #12]
 8000652:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000656:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800065a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800065c:	2b04      	cmp	r3, #4
 800065e:	bf28      	it	cs
 8000660:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000662:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000664:	f04f 0501 	mov.w	r5, #1
 8000668:	fa05 f303 	lsl.w	r3, r5, r3
 800066c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000670:	bf8c      	ite	hi
 8000672:	3c03      	subhi	r4, #3
 8000674:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000676:	4019      	ands	r1, r3
 8000678:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800067a:	fa05 f404 	lsl.w	r4, r5, r4
 800067e:	3c01      	subs	r4, #1
 8000680:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000682:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000684:	ea42 0201 	orr.w	r2, r2, r1
 8000688:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068c:	bfaf      	iteee	ge
 800068e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000692:	f000 000f 	andlt.w	r0, r0, #15
 8000696:	4b06      	ldrlt	r3, [pc, #24]	; (80006b0 <HAL_NVIC_SetPriority+0x64>)
 8000698:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069a:	bfa5      	ittet	ge
 800069c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80006a0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	bf00      	nop
 80006ac:	e000ed00 	.word	0xe000ed00
 80006b0:	e000ed14 	.word	0xe000ed14

080006b4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006b4:	0942      	lsrs	r2, r0, #5
 80006b6:	2301      	movs	r3, #1
 80006b8:	f000 001f 	and.w	r0, r0, #31
 80006bc:	fa03 f000 	lsl.w	r0, r3, r0
 80006c0:	4b01      	ldr	r3, [pc, #4]	; (80006c8 <HAL_NVIC_EnableIRQ+0x14>)
 80006c2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006c6:	4770      	bx	lr
 80006c8:	e000e100 	.word	0xe000e100

080006cc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006cc:	3801      	subs	r0, #1
 80006ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006d2:	d20a      	bcs.n	80006ea <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d6:	4a07      	ldr	r2, [pc, #28]	; (80006f4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006d8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006da:	21f0      	movs	r1, #240	; 0xf0
 80006dc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006e2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006ea:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	e000e010 	.word	0xe000e010
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006fa:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80006fc:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006fe:	bf0c      	ite	eq
 8000700:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000704:	f022 0204 	bicne.w	r2, r2, #4
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	4770      	bx	lr
 800070c:	e000e010 	.word	0xe000e010

08000710 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000710:	4770      	bx	lr

08000712 <HAL_SYSTICK_IRQHandler>:
{
 8000712:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000714:	f7ff fffc 	bl	8000710 <HAL_SYSTICK_Callback>
 8000718:	bd08      	pop	{r3, pc}
	...

0800071c <ETH_Delay.constprop.4>:
/**
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
 800071c:	b082      	sub	sp, #8
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800071e:	4b07      	ldr	r3, [pc, #28]	; (800073c <ETH_Delay.constprop.4+0x20>)
 8000720:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	fbb3 f3f2 	udiv	r3, r3, r2
 800072a:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800072c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800072e:	9b01      	ldr	r3, [sp, #4]
 8000730:	1e5a      	subs	r2, r3, #1
 8000732:	9201      	str	r2, [sp, #4]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d1f9      	bne.n	800072c <ETH_Delay.constprop.4+0x10>
}
 8000738:	b002      	add	sp, #8
 800073a:	4770      	bx	lr
 800073c:	20000008 	.word	0x20000008

08000740 <ETH_FlushTransmitFIFO>:
{
 8000740:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t tmpreg1 = 0U;
 8000742:	2300      	movs	r3, #0
 8000744:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8000746:	f241 0118 	movw	r1, #4120	; 0x1018
 800074a:	6803      	ldr	r3, [r0, #0]
 800074c:	585a      	ldr	r2, [r3, r1]
 800074e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000752:	505a      	str	r2, [r3, r1]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8000754:	585b      	ldr	r3, [r3, r1]
 8000756:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000758:	f7ff ffe0 	bl	800071c <ETH_Delay.constprop.4>
  (heth->Instance)->DMAOMR = tmpreg1;
 800075c:	9a01      	ldr	r2, [sp, #4]
 800075e:	6803      	ldr	r3, [r0, #0]
 8000760:	505a      	str	r2, [r3, r1]
}
 8000762:	b003      	add	sp, #12
 8000764:	f85d fb04 	ldr.w	pc, [sp], #4

08000768 <ETH_MACDMAConfig>:
{
 8000768:	b570      	push	{r4, r5, r6, lr}
 800076a:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800076c:	b129      	cbz	r1, 800077a <ETH_MACDMAConfig+0x12>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800076e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000772:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8000774:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000778:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800077a:	69e3      	ldr	r3, [r4, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 800077c:	6822      	ldr	r2, [r4, #0]
                       macinit.LoopbackMode |
 800077e:	68e0      	ldr	r0, [r4, #12]
  tmpreg1 = (heth->Instance)->MACCR;
 8000780:	6815      	ldr	r5, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000782:	2b00      	cmp	r3, #0
                       macinit.LoopbackMode |
 8000784:	68a3      	ldr	r3, [r4, #8]
 8000786:	ea43 0300 	orr.w	r3, r3, r0
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800078a:	4830      	ldr	r0, [pc, #192]	; (800084c <ETH_MACDMAConfig+0xe4>)
 800078c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000790:	ea00 0005 	and.w	r0, r0, r5
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000794:	bf0c      	ite	eq
 8000796:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 800079a:	2100      	movne	r1, #0
 800079c:	4303      	orrs	r3, r0
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800079e:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80007a0:	6013      	str	r3, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80007a2:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->MACCR;
 80007a4:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80007a6:	f7ff ff2f 	bl	8000608 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80007aa:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80007ac:	2240      	movs	r2, #64	; 0x40
  (heth->Instance)->MACCR = tmpreg1; 
 80007ae:	601d      	str	r5, [r3, #0]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007b0:	2001      	movs	r0, #1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80007b2:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 80007b4:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007b6:	f7ff ff27 	bl	8000608 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80007ba:	6823      	ldr	r3, [r4, #0]
 80007bc:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80007be:	2500      	movs	r5, #0
 80007c0:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80007c2:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 80007c4:	699a      	ldr	r2, [r3, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80007c6:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 80007ca:	0412      	lsls	r2, r2, #16
 80007cc:	0c12      	lsrs	r2, r2, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80007ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80007d2:	619a      	str	r2, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007d4:	2001      	movs	r0, #1
   tmpreg1 = (heth->Instance)->MACFCR;
 80007d6:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007d8:	f7ff ff16 	bl	8000608 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80007dc:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007de:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg1;
 80007e0:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80007e2:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80007e4:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007e6:	f7ff ff0f 	bl	8000608 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80007ea:	6822      	ldr	r2, [r4, #0]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg1;
 80007ee:	61d5      	str	r5, [r2, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 80007f0:	f241 0518 	movw	r5, #4120	; 0x1018
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007f4:	2001      	movs	r0, #1
    tmpreg1 = (heth->Instance)->DMAOMR;
 80007f6:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80007f8:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80007fa:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 80007fe:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8000802:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8000804:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000806:	f7ff feff 	bl	8000608 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800080a:	6823      	ldr	r3, [r4, #0]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800080c:	4a11      	ldr	r2, [pc, #68]	; (8000854 <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->DMAOMR = tmpreg1;
 800080e:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000814:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000816:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 8000818:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800081a:	f7ff fef5 	bl	8000608 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800081e:	6822      	ldr	r2, [r4, #0]
 8000820:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8000824:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000826:	69a3      	ldr	r3, [r4, #24]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d107      	bne.n	800083c <ETH_MACDMAConfig+0xd4>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800082c:	f241 011c 	movw	r1, #4124	; 0x101c
 8000830:	5853      	ldr	r3, [r2, r1]
 8000832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800083a:	5053      	str	r3, [r2, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800083c:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800083e:	4a06      	ldr	r2, [pc, #24]	; (8000858 <ETH_MACDMAConfig+0xf0>)
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8000840:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8000842:	6011      	str	r1, [r2, #0]
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8000844:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <ETH_MACDMAConfig+0xf4>)
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	ff20810f 	.word	0xff20810f
 8000850:	f8de3f23 	.word	0xf8de3f23
 8000854:	02c12080 	.word	0x02c12080
 8000858:	40028040 	.word	0x40028040
 800085c:	40028044 	.word	0x40028044

08000860 <HAL_ETH_DMATxDescListInit>:
{
 8000860:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 8000862:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8000866:	2c01      	cmp	r4, #1
 8000868:	f04f 0402 	mov.w	r4, #2
 800086c:	d033      	beq.n	80008d6 <HAL_ETH_DMATxDescListInit+0x76>
 800086e:	2501      	movs	r5, #1
 8000870:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000874:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 8000878:	62c1      	str	r1, [r0, #44]	; 0x2c
 800087a:	f101 0420 	add.w	r4, r1, #32
  for(i=0U; i < TxBuffCount; i++)
 800087e:	2500      	movs	r5, #0
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000880:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000884:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (TxBuffCount-1U))
 8000888:	f103 3cff 	add.w	ip, r3, #4294967295
  for(i=0U; i < TxBuffCount; i++)
 800088c:	429d      	cmp	r5, r3
 800088e:	d10b      	bne.n	80008a8 <HAL_ETH_DMATxDescListInit+0x48>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8000890:	6802      	ldr	r2, [r0, #0]
 8000892:	f241 0310 	movw	r3, #4112	; 0x1010
 8000896:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000898:	2301      	movs	r3, #1
 800089a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800089e:	2300      	movs	r3, #0
 80008a0:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80008a4:	4618      	mov	r0, r3
 80008a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80008a8:	fb0e 2605 	mla	r6, lr, r5, r2
 80008ac:	f844 6c18 	str.w	r6, [r4, #-24]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80008b0:	69c6      	ldr	r6, [r0, #28]
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80008b2:	f844 7c20 	str.w	r7, [r4, #-32]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80008b6:	b92e      	cbnz	r6, 80008c4 <HAL_ETH_DMATxDescListInit+0x64>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80008b8:	f854 6c20 	ldr.w	r6, [r4, #-32]
 80008bc:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 80008c0:	f844 6c20 	str.w	r6, [r4, #-32]
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80008c4:	4565      	cmp	r5, ip
 80008c6:	bf2c      	ite	cs
 80008c8:	460e      	movcs	r6, r1
 80008ca:	4626      	movcc	r6, r4
 80008cc:	f844 6c14 	str.w	r6, [r4, #-20]
  for(i=0U; i < TxBuffCount; i++)
 80008d0:	3501      	adds	r5, #1
 80008d2:	3420      	adds	r4, #32
 80008d4:	e7da      	b.n	800088c <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 80008d6:	4620      	mov	r0, r4
}
 80008d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080008da <HAL_ETH_DMARxDescListInit>:
{
 80008da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 80008de:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 80008e2:	2c01      	cmp	r4, #1
 80008e4:	f04f 0402 	mov.w	r4, #2
 80008e8:	d030      	beq.n	800094c <HAL_ETH_DMARxDescListInit+0x72>
 80008ea:	2501      	movs	r5, #1
 80008ec:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80008f0:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 80008f4:	6281      	str	r1, [r0, #40]	; 0x28
 80008f6:	f101 0420 	add.w	r4, r1, #32
  for(i=0U; i < RxBuffCount; i++)
 80008fa:	2500      	movs	r5, #0
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80008fc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000900:	f244 57f4 	movw	r7, #17908	; 0x45f4
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8000904:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (RxBuffCount-1U))
 8000908:	f103 3cff 	add.w	ip, r3, #4294967295
  for(i=0U; i < RxBuffCount; i++)
 800090c:	429d      	cmp	r5, r3
 800090e:	d10c      	bne.n	800092a <HAL_ETH_DMARxDescListInit+0x50>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8000910:	6802      	ldr	r2, [r0, #0]
 8000912:	f241 030c 	movw	r3, #4108	; 0x100c
 8000916:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000918:	2301      	movs	r3, #1
 800091a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800091e:	2300      	movs	r3, #0
 8000920:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8000924:	4618      	mov	r0, r3
 8000926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800092a:	fb0e 2805 	mla	r8, lr, r5, r2
 800092e:	f844 8c18 	str.w	r8, [r4, #-24]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8000932:	4565      	cmp	r5, ip
 8000934:	bf2c      	ite	cs
 8000936:	4688      	movcs	r8, r1
 8000938:	46a0      	movcc	r8, r4
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800093a:	f844 6c20 	str.w	r6, [r4, #-32]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800093e:	f844 7c1c 	str.w	r7, [r4, #-28]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8000942:	f844 8c14 	str.w	r8, [r4, #-20]
  for(i=0U; i < RxBuffCount; i++)
 8000946:	3501      	adds	r5, #1
 8000948:	3420      	adds	r4, #32
 800094a:	e7df      	b.n	800090c <HAL_ETH_DMARxDescListInit+0x32>
  __HAL_LOCK(heth);
 800094c:	4620      	mov	r0, r4
}
 800094e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08000954 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8000954:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000958:	2b01      	cmp	r3, #1
{
 800095a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800095c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(heth);
 8000960:	d068      	beq.n	8000a34 <HAL_ETH_TransmitFrame+0xe0>
 8000962:	2201      	movs	r2, #1
 8000964:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000968:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0U) 
 800096c:	b929      	cbnz	r1, 800097a <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 800096e:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000972:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 8000976:	4610      	mov	r0, r2
 8000978:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800097a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800097c:	681c      	ldr	r4, [r3, #0]
 800097e:	2c00      	cmp	r4, #0
 8000980:	da06      	bge.n	8000990 <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8000982:	2312      	movs	r3, #18
 8000984:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000988:	2300      	movs	r3, #0
 800098a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 800098e:	e7f2      	b.n	8000976 <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 8000990:	f240 54f4 	movw	r4, #1524	; 0x5f4
 8000994:	42a1      	cmp	r1, r4
 8000996:	d92e      	bls.n	80009f6 <HAL_ETH_TransmitFrame+0xa2>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8000998:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800099c:	fb04 1412 	mls	r4, r4, r2, r1
 80009a0:	b33c      	cbz	r4, 80009f2 <HAL_ETH_TransmitFrame+0x9e>
      bufcount++;
 80009a2:	3201      	adds	r2, #1
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80009a4:	4c24      	ldr	r4, [pc, #144]	; (8000a38 <HAL_ETH_TransmitFrame+0xe4>)
 80009a6:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
 80009aa:	fb04 1102 	mla	r1, r4, r2, r1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80009ae:	f3c1 010c 	ubfx	r1, r1, #0, #13
 80009b2:	2400      	movs	r4, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80009b4:	f240 56f4 	movw	r6, #1524	; 0x5f4
      if (i == (bufcount-1U))
 80009b8:	1e57      	subs	r7, r2, #1
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80009ba:	681d      	ldr	r5, [r3, #0]
 80009bc:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 80009c0:	601d      	str	r5, [r3, #0]
      if (i == 0U) 
 80009c2:	b91c      	cbnz	r4, 80009cc <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80009c4:	681d      	ldr	r5, [r3, #0]
 80009c6:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 80009ca:	601d      	str	r5, [r3, #0]
      if (i == (bufcount-1U))
 80009cc:	42a7      	cmp	r7, r4
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80009ce:	bf08      	it	eq
 80009d0:	681d      	ldreq	r5, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80009d2:	605e      	str	r6, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80009d4:	bf04      	itt	eq
 80009d6:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
 80009da:	601d      	streq	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009dc:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80009de:	bf08      	it	eq
 80009e0:	6059      	streq	r1, [r3, #4]
    for (i=0U; i< bufcount; i++)
 80009e2:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009e4:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    for (i=0U; i< bufcount; i++)
 80009e8:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009ea:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80009ec:	68db      	ldr	r3, [r3, #12]
    for (i=0U; i< bufcount; i++)
 80009ee:	d1e4      	bne.n	80009ba <HAL_ETH_TransmitFrame+0x66>
 80009f0:	e00d      	b.n	8000a0e <HAL_ETH_TransmitFrame+0xba>
  if (bufcount == 1U)
 80009f2:	2a01      	cmp	r2, #1
 80009f4:	d1d6      	bne.n	80009a4 <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80009fc:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009fe:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000a00:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000a04:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000a08:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000a0a:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000a0c:	68db      	ldr	r3, [r3, #12]
 8000a0e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8000a10:	f241 0214 	movw	r2, #4116	; 0x1014
 8000a14:	6803      	ldr	r3, [r0, #0]
 8000a16:	5899      	ldr	r1, [r3, r2]
 8000a18:	0749      	lsls	r1, r1, #29
 8000a1a:	d505      	bpl.n	8000a28 <HAL_ETH_TransmitFrame+0xd4>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8000a1c:	2104      	movs	r1, #4
 8000a1e:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 8000a20:	f241 0204 	movw	r2, #4100	; 0x1004
 8000a24:	2100      	movs	r1, #0
 8000a26:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000a2e:	2300      	movs	r3, #0
 8000a30:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 8000a34:	4618      	mov	r0, r3
}
 8000a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a38:	fffffa0c 	.word	0xfffffa0c

08000a3c <HAL_ETH_GetReceivedFrame>:
  __HAL_LOCK(heth);
 8000a3c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000a40:	2b01      	cmp	r3, #1
{
 8000a42:	b530      	push	{r4, r5, lr}
 8000a44:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(heth);
 8000a48:	d023      	beq.n	8000a92 <HAL_ETH_GetReceivedFrame+0x56>
  heth->State = HAL_ETH_STATE_BUSY;
 8000a4a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8000a4e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000a50:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(heth);
 8000a52:	2401      	movs	r4, #1
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8000a54:	2a00      	cmp	r2, #0
  __HAL_LOCK(heth);
 8000a56:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8000a5a:	db27      	blt.n	8000aac <HAL_ETH_GetReceivedFrame+0x70>
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	68d9      	ldr	r1, [r3, #12]
 8000a60:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000a64:	d017      	beq.n	8000a96 <HAL_ETH_GetReceivedFrame+0x5a>
      (heth->RxFrameInfos).SegCount++;
 8000a66:	6b82      	ldr	r2, [r0, #56]	; 0x38
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8000a68:	6343      	str	r3, [r0, #52]	; 0x34
      (heth->RxFrameInfos).SegCount++;
 8000a6a:	4422      	add	r2, r4
      if ((heth->RxFrameInfos).SegCount == 1U)
 8000a6c:	42a2      	cmp	r2, r4
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8000a6e:	bf08      	it	eq
 8000a70:	6303      	streq	r3, [r0, #48]	; 0x30
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8000a72:	681b      	ldr	r3, [r3, #0]
      (heth->RxFrameInfos).SegCount++;
 8000a74:	6382      	str	r2, [r0, #56]	; 0x38
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8000a76:	f3c3 430d 	ubfx	r3, r3, #16, #14
 8000a7a:	3b04      	subs	r3, #4
      heth->RxFrameInfos.length = framelength;
 8000a7c:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000a7e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 8000a84:	2301      	movs	r3, #1
 8000a86:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000a8a:	2300      	movs	r3, #0
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8000a8c:	6281      	str	r1, [r0, #40]	; 0x28
      __HAL_UNLOCK(heth);
 8000a8e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	bd30      	pop	{r4, r5, pc}
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8000a96:	681d      	ldr	r5, [r3, #0]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000a98:	6281      	str	r1, [r0, #40]	; 0x28
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8000a9a:	05ad      	lsls	r5, r5, #22
      (heth->RxFrameInfos).SegCount++;
 8000a9c:	bf55      	itete	pl
 8000a9e:	6b83      	ldrpl	r3, [r0, #56]	; 0x38
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8000aa0:	6303      	strmi	r3, [r0, #48]	; 0x30
      (heth->RxFrameInfos).SegCount++;
 8000aa2:	3301      	addpl	r3, #1
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8000aa4:	6342      	strmi	r2, [r0, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8000aa6:	bf4c      	ite	mi
 8000aa8:	6384      	strmi	r4, [r0, #56]	; 0x38
      (heth->RxFrameInfos).SegCount++;
 8000aaa:	6383      	strpl	r3, [r0, #56]	; 0x38
  heth->State = HAL_ETH_STATE_READY;
 8000aac:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 8000aae:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 8000ab0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000ab4:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8000ab8:	e7eb      	b.n	8000a92 <HAL_ETH_GetReceivedFrame+0x56>

08000aba <HAL_ETH_ReadPHYRegister>:
{
 8000aba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000abc:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000ac0:	2b82      	cmp	r3, #130	; 0x82
{
 8000ac2:	4605      	mov	r5, r0
 8000ac4:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000ac6:	d030      	beq.n	8000b2a <HAL_ETH_ReadPHYRegister+0x70>
  tmpreg1 = heth->Instance->MACMIIAR;
 8000ac8:	6802      	ldr	r2, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000aca:	2382      	movs	r3, #130	; 0x82
 8000acc:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000ad0:	6913      	ldr	r3, [r2, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000ad2:	0189      	lsls	r1, r1, #6
 8000ad4:	f401 64f8 	and.w	r4, r1, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000ad8:	f003 011c 	and.w	r1, r3, #28
 8000adc:	4321      	orrs	r1, r4
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000ade:	8a04      	ldrh	r4, [r0, #16]
 8000ae0:	02e4      	lsls	r4, r4, #11
 8000ae2:	b2a4      	uxth	r4, r4
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8000ae4:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8000ae6:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8000aea:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8000aec:	f7ff fd86 	bl	80005fc <HAL_GetTick>
 8000af0:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000af2:	f014 0001 	ands.w	r0, r4, #1
 8000af6:	d107      	bne.n	8000b08 <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000af8:	682b      	ldr	r3, [r5, #0]
 8000afa:	695b      	ldr	r3, [r3, #20]
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8000b00:	2301      	movs	r3, #1
 8000b02:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000b08:	f7ff fd78 	bl	80005fc <HAL_GetTick>
 8000b0c:	1bc0      	subs	r0, r0, r7
 8000b0e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000b12:	d307      	bcc.n	8000b24 <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 8000b14:	2301      	movs	r3, #1
 8000b16:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000b20:	2003      	movs	r0, #3
 8000b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 8000b24:	682b      	ldr	r3, [r5, #0]
 8000b26:	691c      	ldr	r4, [r3, #16]
 8000b28:	e7e3      	b.n	8000af2 <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 8000b2a:	2002      	movs	r0, #2
}
 8000b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000b2e <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000b2e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000b32:	2b42      	cmp	r3, #66	; 0x42
{
 8000b34:	b570      	push	{r4, r5, r6, lr}
 8000b36:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000b38:	d02e      	beq.n	8000b98 <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000b3a:	2342      	movs	r3, #66	; 0x42
 8000b3c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000b40:	6803      	ldr	r3, [r0, #0]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000b42:	018c      	lsls	r4, r1, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 8000b44:	6918      	ldr	r0, [r3, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000b46:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 8000b4a:	f044 0403 	orr.w	r4, r4, #3
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000b4e:	f000 001c 	and.w	r0, r0, #28
 8000b52:	4320      	orrs	r0, r4
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000b54:	8a2c      	ldrh	r4, [r5, #16]
 8000b56:	02e4      	lsls	r4, r4, #11
 8000b58:	b2a4      	uxth	r4, r4
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8000b5a:	4304      	orrs	r4, r0
 8000b5c:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000b5e:	615a      	str	r2, [r3, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8000b60:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000b62:	f7ff fd4b 	bl	80005fc <HAL_GetTick>
 8000b66:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000b68:	f014 0001 	ands.w	r0, r4, #1
 8000b6c:	d103      	bne.n	8000b76 <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000b74:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000b76:	f7ff fd41 	bl	80005fc <HAL_GetTick>
 8000b7a:	1b80      	subs	r0, r0, r6
 8000b7c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000b80:	d307      	bcc.n	8000b92 <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 8000b82:	2301      	movs	r3, #1
 8000b84:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000b8e:	2003      	movs	r0, #3
 8000b90:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 8000b92:	682b      	ldr	r3, [r5, #0]
 8000b94:	691c      	ldr	r4, [r3, #16]
 8000b96:	e7e7      	b.n	8000b68 <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 8000b98:	2002      	movs	r0, #2
}
 8000b9a:	bd70      	pop	{r4, r5, r6, pc}

08000b9c <HAL_ETH_Init>:
{
 8000b9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	2800      	cmp	r0, #0
 8000ba6:	f000 80de 	beq.w	8000d66 <HAL_ETH_Init+0x1ca>
  if(heth->State == HAL_ETH_STATE_RESET)
 8000baa:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000bae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000bb2:	b91b      	cbnz	r3, 8000bbc <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 8000bb4:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8000bb8:	f004 fb36 	bl	8005228 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	9301      	str	r3, [sp, #4]
 8000bc0:	4b6a      	ldr	r3, [pc, #424]	; (8000d6c <HAL_ETH_Init+0x1d0>)
 8000bc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000bc8:	645a      	str	r2, [r3, #68]	; 0x44
 8000bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd0:	9301      	str	r3, [sp, #4]
 8000bd2:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000bd4:	4b66      	ldr	r3, [pc, #408]	; (8000d70 <HAL_ETH_Init+0x1d4>)
 8000bd6:	685a      	ldr	r2, [r3, #4]
 8000bd8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000bdc:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000bde:	685a      	ldr	r2, [r3, #4]
 8000be0:	6a21      	ldr	r1, [r4, #32]
 8000be2:	430a      	orrs	r2, r1
 8000be4:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000be6:	6823      	ldr	r3, [r4, #0]
 8000be8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	f042 0201 	orr.w	r2, r2, #1
 8000bf2:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000bf4:	f7ff fd02 	bl	80005fc <HAL_GetTick>
 8000bf8:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000bfa:	6823      	ldr	r3, [r4, #0]
 8000bfc:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8000c00:	6812      	ldr	r2, [r2, #0]
 8000c02:	07d0      	lsls	r0, r2, #31
 8000c04:	d41d      	bmi.n	8000c42 <HAL_ETH_Init+0xa6>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000c06:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8000c08:	f000 fc28 	bl	800145c <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000c0c:	4b59      	ldr	r3, [pc, #356]	; (8000d74 <HAL_ETH_Init+0x1d8>)
 8000c0e:	4a5a      	ldr	r2, [pc, #360]	; (8000d78 <HAL_ETH_Init+0x1dc>)
 8000c10:	4403      	add	r3, r0
 8000c12:	4293      	cmp	r3, r2
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000c14:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000c18:	d822      	bhi.n	8000c60 <HAL_ETH_Init+0xc4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000c1a:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000c1e:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000c20:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000c24:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000c26:	2100      	movs	r1, #0
 8000c28:	4620      	mov	r0, r4
 8000c2a:	f7ff ff80 	bl	8000b2e <HAL_ETH_WritePHYRegister>
 8000c2e:	4605      	mov	r5, r0
 8000c30:	b368      	cbz	r0, 8000c8e <HAL_ETH_Init+0xf2>
      ETH_MACDMAConfig(heth, err);
 8000c32:	2101      	movs	r1, #1
 8000c34:	4620      	mov	r0, r4
      heth->State = HAL_ETH_STATE_READY;
 8000c36:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8000c38:	f7ff fd96 	bl	8000768 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000c3c:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000c40:	e00b      	b.n	8000c5a <HAL_ETH_Init+0xbe>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000c42:	f7ff fcdb 	bl	80005fc <HAL_GetTick>
 8000c46:	1b40      	subs	r0, r0, r5
 8000c48:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000c4c:	d9d5      	bls.n	8000bfa <HAL_ETH_Init+0x5e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000c4e:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8000c50:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000c52:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000c56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000c5a:	4628      	mov	r0, r5
 8000c5c:	b003      	add	sp, #12
 8000c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000c60:	4b46      	ldr	r3, [pc, #280]	; (8000d7c <HAL_ETH_Init+0x1e0>)
 8000c62:	4a47      	ldr	r2, [pc, #284]	; (8000d80 <HAL_ETH_Init+0x1e4>)
 8000c64:	4403      	add	r3, r0
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d802      	bhi.n	8000c70 <HAL_ETH_Init+0xd4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000c6a:	f045 050c 	orr.w	r5, r5, #12
 8000c6e:	e7d6      	b.n	8000c1e <HAL_ETH_Init+0x82>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000c70:	4b44      	ldr	r3, [pc, #272]	; (8000d84 <HAL_ETH_Init+0x1e8>)
 8000c72:	4a45      	ldr	r2, [pc, #276]	; (8000d88 <HAL_ETH_Init+0x1ec>)
 8000c74:	4403      	add	r3, r0
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d9d1      	bls.n	8000c1e <HAL_ETH_Init+0x82>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000c7a:	4b44      	ldr	r3, [pc, #272]	; (8000d8c <HAL_ETH_Init+0x1f0>)
 8000c7c:	4a44      	ldr	r2, [pc, #272]	; (8000d90 <HAL_ETH_Init+0x1f4>)
 8000c7e:	4403      	add	r3, r0
 8000c80:	4293      	cmp	r3, r2
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000c82:	bf94      	ite	ls
 8000c84:	f045 0504 	orrls.w	r5, r5, #4
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000c88:	f045 0510 	orrhi.w	r5, r5, #16
 8000c8c:	e7c7      	b.n	8000c1e <HAL_ETH_Init+0x82>
  HAL_Delay(PHY_RESET_DELAY);
 8000c8e:	20ff      	movs	r0, #255	; 0xff
 8000c90:	f7ff fcba 	bl	8000608 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000c94:	6863      	ldr	r3, [r4, #4]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d053      	beq.n	8000d42 <HAL_ETH_Init+0x1a6>
    tickstart = HAL_GetTick();
 8000c9a:	f7ff fcaf 	bl	80005fc <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000c9e:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000ca2:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000ca4:	466a      	mov	r2, sp
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	4620      	mov	r0, r4
 8000caa:	f7ff ff06 	bl	8000aba <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000cae:	f7ff fca5 	bl	80005fc <HAL_GetTick>
 8000cb2:	1b80      	subs	r0, r0, r6
 8000cb4:	42b8      	cmp	r0, r7
 8000cb6:	d90b      	bls.n	8000cd0 <HAL_ETH_Init+0x134>
        ETH_MACDMAConfig(heth, err);
 8000cb8:	2101      	movs	r1, #1
 8000cba:	4620      	mov	r0, r4
 8000cbc:	f7ff fd54 	bl	8000768 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000ccc:	2503      	movs	r5, #3
 8000cce:	e7c4      	b.n	8000c5a <HAL_ETH_Init+0xbe>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000cd0:	9b00      	ldr	r3, [sp, #0]
 8000cd2:	0759      	lsls	r1, r3, #29
 8000cd4:	d5e6      	bpl.n	8000ca4 <HAL_ETH_Init+0x108>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000cd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f7ff ff26 	bl	8000b2e <HAL_ETH_WritePHYRegister>
 8000ce2:	2800      	cmp	r0, #0
 8000ce4:	d1a5      	bne.n	8000c32 <HAL_ETH_Init+0x96>
    tickstart = HAL_GetTick();
 8000ce6:	f7ff fc89 	bl	80005fc <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000cea:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000cee:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000cf0:	466a      	mov	r2, sp
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f7ff fee0 	bl	8000aba <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000cfa:	f7ff fc7f 	bl	80005fc <HAL_GetTick>
 8000cfe:	1b80      	subs	r0, r0, r6
 8000d00:	42b8      	cmp	r0, r7
 8000d02:	d8d9      	bhi.n	8000cb8 <HAL_ETH_Init+0x11c>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000d04:	9b00      	ldr	r3, [sp, #0]
 8000d06:	069a      	lsls	r2, r3, #26
 8000d08:	d5f2      	bpl.n	8000cf0 <HAL_ETH_Init+0x154>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000d0a:	466a      	mov	r2, sp
 8000d0c:	2110      	movs	r1, #16
 8000d0e:	4620      	mov	r0, r4
 8000d10:	f7ff fed3 	bl	8000aba <HAL_ETH_ReadPHYRegister>
 8000d14:	2800      	cmp	r0, #0
 8000d16:	d18c      	bne.n	8000c32 <HAL_ETH_Init+0x96>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000d18:	9b00      	ldr	r3, [sp, #0]
 8000d1a:	f013 0204 	ands.w	r2, r3, #4
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000d1e:	bf18      	it	ne
 8000d20:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000d24:	079b      	lsls	r3, r3, #30
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000d26:	bf4c      	ite	mi
 8000d28:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8000d2a:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000d2e:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8000d30:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8000d32:	2100      	movs	r1, #0
 8000d34:	4620      	mov	r0, r4
 8000d36:	f7ff fd17 	bl	8000768 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000d40:	e78b      	b.n	8000c5a <HAL_ETH_Init+0xbe>
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000d42:	68a3      	ldr	r3, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000d44:	68e2      	ldr	r2, [r4, #12]
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000d46:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000d48:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8000d4c:	b292      	uxth	r2, r2
 8000d4e:	4629      	mov	r1, r5
 8000d50:	4620      	mov	r0, r4
 8000d52:	f7ff feec 	bl	8000b2e <HAL_ETH_WritePHYRegister>
 8000d56:	2800      	cmp	r0, #0
 8000d58:	f47f af6b 	bne.w	8000c32 <HAL_ETH_Init+0x96>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000d5c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000d60:	f7ff fc52 	bl	8000608 <HAL_Delay>
 8000d64:	e7e5      	b.n	8000d32 <HAL_ETH_Init+0x196>
    return HAL_ERROR;
 8000d66:	2501      	movs	r5, #1
 8000d68:	e777      	b.n	8000c5a <HAL_ETH_Init+0xbe>
 8000d6a:	bf00      	nop
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40013800 	.word	0x40013800
 8000d74:	feced300 	.word	0xfeced300
 8000d78:	00e4e1bf 	.word	0x00e4e1bf
 8000d7c:	fde9f140 	.word	0xfde9f140
 8000d80:	017d783f 	.word	0x017d783f
 8000d84:	fc6c7900 	.word	0xfc6c7900
 8000d88:	026259ff 	.word	0x026259ff
 8000d8c:	fa0a1f00 	.word	0xfa0a1f00
 8000d90:	02faf07f 	.word	0x02faf07f

08000d94 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 8000d94:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000d98:	2b01      	cmp	r3, #1
{  
 8000d9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000d9c:	4605      	mov	r5, r0
 8000d9e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 8000da2:	d031      	beq.n	8000e08 <HAL_ETH_Start+0x74>
  __IO uint32_t tmpreg1 = 0U;
 8000da4:	2400      	movs	r4, #0
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000da6:	682b      	ldr	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8000da8:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  __IO uint32_t tmpreg1 = 0U;
 8000dac:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000dae:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(heth);
 8000db0:	2601      	movs	r6, #1
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000db2:	f042 0208 	orr.w	r2, r2, #8
  __HAL_LOCK(heth);
 8000db6:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000dba:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000dc0:	f7ff fcac 	bl	800071c <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 8000dc4:	682b      	ldr	r3, [r5, #0]
 8000dc6:	9a01      	ldr	r2, [sp, #4]
 8000dc8:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg1 = 0U;
 8000dca:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	f042 0204 	orr.w	r2, r2, #4
 8000dd2:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	9300      	str	r3, [sp, #0]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000dd8:	f7ff fca0 	bl	800071c <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 8000ddc:	682b      	ldr	r3, [r5, #0]
 8000dde:	9a00      	ldr	r2, [sp, #0]
 8000de0:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8000de2:	4628      	mov	r0, r5
 8000de4:	f7ff fcac 	bl	8000740 <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000de8:	682a      	ldr	r2, [r5, #0]
 8000dea:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 8000dee:	4620      	mov	r0, r4
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000df0:	58d1      	ldr	r1, [r2, r3]
 8000df2:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8000df6:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8000df8:	58d1      	ldr	r1, [r2, r3]
 8000dfa:	f041 0102 	orr.w	r1, r1, #2
 8000dfe:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000e00:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000e04:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
}
 8000e08:	b002      	add	sp, #8
 8000e0a:	bd70      	pop	{r4, r5, r6, pc}

08000e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e10:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e12:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e14:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000fc4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e18:	4a68      	ldr	r2, [pc, #416]	; (8000fbc <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e1a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000fc8 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e1e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e20:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000e22:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e26:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000e28:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e2c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000e30:	45b6      	cmp	lr, r6
 8000e32:	f040 80ae 	bne.w	8000f92 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e36:	684c      	ldr	r4, [r1, #4]
 8000e38:	f024 0710 	bic.w	r7, r4, #16
 8000e3c:	2f02      	cmp	r7, #2
 8000e3e:	d116      	bne.n	8000e6e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000e40:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000e44:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e48:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000e4c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e50:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000e54:	f04f 0c0f 	mov.w	ip, #15
 8000e58:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000e5c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e60:	690d      	ldr	r5, [r1, #16]
 8000e62:	fa05 f50b 	lsl.w	r5, r5, fp
 8000e66:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000e6a:	f8ca 5020 	str.w	r5, [sl, #32]
 8000e6e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e72:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000e74:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e78:	fa05 f50a 	lsl.w	r5, r5, sl
 8000e7c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e7e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e82:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e86:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e8a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e8c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e90:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000e92:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e96:	d811      	bhi.n	8000ebc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000e98:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e9a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e9e:	68cf      	ldr	r7, [r1, #12]
 8000ea0:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000ea4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000ea8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000eaa:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eac:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000eb0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000eb4:	409f      	lsls	r7, r3
 8000eb6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000eba:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000ebc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ebe:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ec0:	688f      	ldr	r7, [r1, #8]
 8000ec2:	fa07 f70a 	lsl.w	r7, r7, sl
 8000ec6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000ec8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eca:	00e5      	lsls	r5, r4, #3
 8000ecc:	d561      	bpl.n	8000f92 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ece:	f04f 0b00 	mov.w	fp, #0
 8000ed2:	f8cd b00c 	str.w	fp, [sp, #12]
 8000ed6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eda:	4d39      	ldr	r5, [pc, #228]	; (8000fc0 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000edc:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000ee0:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000ee4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000ee8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000eec:	9703      	str	r7, [sp, #12]
 8000eee:	9f03      	ldr	r7, [sp, #12]
 8000ef0:	f023 0703 	bic.w	r7, r3, #3
 8000ef4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000ef8:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000efc:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000f00:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f04:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000f08:	f04f 0e0f 	mov.w	lr, #15
 8000f0c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f10:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f12:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f16:	d043      	beq.n	8000fa0 <HAL_GPIO_Init+0x194>
 8000f18:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f1c:	42a8      	cmp	r0, r5
 8000f1e:	d041      	beq.n	8000fa4 <HAL_GPIO_Init+0x198>
 8000f20:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f24:	42a8      	cmp	r0, r5
 8000f26:	d03f      	beq.n	8000fa8 <HAL_GPIO_Init+0x19c>
 8000f28:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f2c:	42a8      	cmp	r0, r5
 8000f2e:	d03d      	beq.n	8000fac <HAL_GPIO_Init+0x1a0>
 8000f30:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f34:	42a8      	cmp	r0, r5
 8000f36:	d03b      	beq.n	8000fb0 <HAL_GPIO_Init+0x1a4>
 8000f38:	4548      	cmp	r0, r9
 8000f3a:	d03b      	beq.n	8000fb4 <HAL_GPIO_Init+0x1a8>
 8000f3c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000f40:	42a8      	cmp	r0, r5
 8000f42:	d039      	beq.n	8000fb8 <HAL_GPIO_Init+0x1ac>
 8000f44:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f48:	42a8      	cmp	r0, r5
 8000f4a:	bf14      	ite	ne
 8000f4c:	2508      	movne	r5, #8
 8000f4e:	2507      	moveq	r5, #7
 8000f50:	fa05 f50c 	lsl.w	r5, r5, ip
 8000f54:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f58:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000f5a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f5c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f5e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000f62:	bf0c      	ite	eq
 8000f64:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f66:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000f68:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000f6a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f6c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000f70:	bf0c      	ite	eq
 8000f72:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f74:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000f76:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f78:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f7a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000f7e:	bf0c      	ite	eq
 8000f80:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f82:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000f84:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000f86:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f88:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000f8a:	bf54      	ite	pl
 8000f8c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000f8e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000f90:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f92:	3301      	adds	r3, #1
 8000f94:	2b10      	cmp	r3, #16
 8000f96:	f47f af44 	bne.w	8000e22 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000f9a:	b005      	add	sp, #20
 8000f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fa0:	465d      	mov	r5, fp
 8000fa2:	e7d5      	b.n	8000f50 <HAL_GPIO_Init+0x144>
 8000fa4:	2501      	movs	r5, #1
 8000fa6:	e7d3      	b.n	8000f50 <HAL_GPIO_Init+0x144>
 8000fa8:	2502      	movs	r5, #2
 8000faa:	e7d1      	b.n	8000f50 <HAL_GPIO_Init+0x144>
 8000fac:	2503      	movs	r5, #3
 8000fae:	e7cf      	b.n	8000f50 <HAL_GPIO_Init+0x144>
 8000fb0:	2504      	movs	r5, #4
 8000fb2:	e7cd      	b.n	8000f50 <HAL_GPIO_Init+0x144>
 8000fb4:	2505      	movs	r5, #5
 8000fb6:	e7cb      	b.n	8000f50 <HAL_GPIO_Init+0x144>
 8000fb8:	2506      	movs	r5, #6
 8000fba:	e7c9      	b.n	8000f50 <HAL_GPIO_Init+0x144>
 8000fbc:	40013c00 	.word	0x40013c00
 8000fc0:	40020000 	.word	0x40020000
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40021400 	.word	0x40021400

08000fcc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fcc:	b10a      	cbz	r2, 8000fd2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fce:	6181      	str	r1, [r0, #24]
 8000fd0:	4770      	bx	lr
 8000fd2:	0409      	lsls	r1, r1, #16
 8000fd4:	e7fb      	b.n	8000fce <HAL_GPIO_WritePin+0x2>

08000fd6 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000fd6:	6943      	ldr	r3, [r0, #20]
 8000fd8:	4059      	eors	r1, r3
 8000fda:	6141      	str	r1, [r0, #20]
 8000fdc:	4770      	bx	lr
	...

08000fe0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	b910      	cbnz	r0, 8000fec <HAL_RCC_OscConfig+0xc>
  {
    return HAL_ERROR;
 8000fe6:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000fe8:	b003      	add	sp, #12
 8000fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fec:	6803      	ldr	r3, [r0, #0]
 8000fee:	07d8      	lsls	r0, r3, #31
 8000ff0:	d43b      	bmi.n	800106a <HAL_RCC_OscConfig+0x8a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ff2:	6823      	ldr	r3, [r4, #0]
 8000ff4:	0799      	lsls	r1, r3, #30
 8000ff6:	f100 8084 	bmi.w	8001102 <HAL_RCC_OscConfig+0x122>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ffa:	6823      	ldr	r3, [r4, #0]
 8000ffc:	071e      	lsls	r6, r3, #28
 8000ffe:	f100 80c6 	bmi.w	800118e <HAL_RCC_OscConfig+0x1ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001002:	6823      	ldr	r3, [r4, #0]
 8001004:	075d      	lsls	r5, r3, #29
 8001006:	d52a      	bpl.n	800105e <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001008:	2300      	movs	r3, #0
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	4baa      	ldr	r3, [pc, #680]	; (80012b8 <HAL_RCC_OscConfig+0x2d8>)
    PWR->CR |= PWR_CR_DBP;
 800100e:	4dab      	ldr	r5, [pc, #684]	; (80012bc <HAL_RCC_OscConfig+0x2dc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001010:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001012:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001016:	641a      	str	r2, [r3, #64]	; 0x40
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001022:	682b      	ldr	r3, [r5, #0]
 8001024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001028:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800102a:	f7ff fae7 	bl	80005fc <HAL_GetTick>
 800102e:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001030:	682b      	ldr	r3, [r5, #0]
 8001032:	05da      	lsls	r2, r3, #23
 8001034:	f140 80cd 	bpl.w	80011d2 <HAL_RCC_OscConfig+0x1f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001038:	68a3      	ldr	r3, [r4, #8]
 800103a:	4d9f      	ldr	r5, [pc, #636]	; (80012b8 <HAL_RCC_OscConfig+0x2d8>)
 800103c:	2b01      	cmp	r3, #1
 800103e:	f040 80cf 	bne.w	80011e0 <HAL_RCC_OscConfig+0x200>
 8001042:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800104a:	f7ff fad7 	bl	80005fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800104e:	4d9a      	ldr	r5, [pc, #616]	; (80012b8 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8001050:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001052:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001056:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001058:	079b      	lsls	r3, r3, #30
 800105a:	f140 80e2 	bpl.w	8001222 <HAL_RCC_OscConfig+0x242>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800105e:	69a2      	ldr	r2, [r4, #24]
 8001060:	2a00      	cmp	r2, #0
 8001062:	f040 80e5 	bne.w	8001230 <HAL_RCC_OscConfig+0x250>
  return HAL_OK;
 8001066:	2000      	movs	r0, #0
 8001068:	e7be      	b.n	8000fe8 <HAL_RCC_OscConfig+0x8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800106a:	4b93      	ldr	r3, [pc, #588]	; (80012b8 <HAL_RCC_OscConfig+0x2d8>)
 800106c:	689a      	ldr	r2, [r3, #8]
 800106e:	f002 020c 	and.w	r2, r2, #12
 8001072:	2a04      	cmp	r2, #4
 8001074:	d007      	beq.n	8001086 <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800107c:	2a08      	cmp	r2, #8
 800107e:	d10a      	bne.n	8001096 <HAL_RCC_OscConfig+0xb6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	025a      	lsls	r2, r3, #9
 8001084:	d507      	bpl.n	8001096 <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001086:	4b8c      	ldr	r3, [pc, #560]	; (80012b8 <HAL_RCC_OscConfig+0x2d8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	039b      	lsls	r3, r3, #14
 800108c:	d5b1      	bpl.n	8000ff2 <HAL_RCC_OscConfig+0x12>
 800108e:	6863      	ldr	r3, [r4, #4]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1ae      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x12>
 8001094:	e7a7      	b.n	8000fe6 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001096:	6863      	ldr	r3, [r4, #4]
 8001098:	4d87      	ldr	r5, [pc, #540]	; (80012b8 <HAL_RCC_OscConfig+0x2d8>)
 800109a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800109e:	d111      	bne.n	80010c4 <HAL_RCC_OscConfig+0xe4>
 80010a0:	682b      	ldr	r3, [r5, #0]
 80010a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80010a8:	f7ff faa8 	bl	80005fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ac:	4d82      	ldr	r5, [pc, #520]	; (80012b8 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 80010ae:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b0:	682b      	ldr	r3, [r5, #0]
 80010b2:	039f      	lsls	r7, r3, #14
 80010b4:	d49d      	bmi.n	8000ff2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010b6:	f7ff faa1 	bl	80005fc <HAL_GetTick>
 80010ba:	1b80      	subs	r0, r0, r6
 80010bc:	2864      	cmp	r0, #100	; 0x64
 80010be:	d9f7      	bls.n	80010b0 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 80010c0:	2003      	movs	r0, #3
 80010c2:	e791      	b.n	8000fe8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010c8:	d104      	bne.n	80010d4 <HAL_RCC_OscConfig+0xf4>
 80010ca:	682b      	ldr	r3, [r5, #0]
 80010cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010d0:	602b      	str	r3, [r5, #0]
 80010d2:	e7e5      	b.n	80010a0 <HAL_RCC_OscConfig+0xc0>
 80010d4:	682a      	ldr	r2, [r5, #0]
 80010d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80010da:	602a      	str	r2, [r5, #0]
 80010dc:	682a      	ldr	r2, [r5, #0]
 80010de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80010e2:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1df      	bne.n	80010a8 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 80010e8:	f7ff fa88 	bl	80005fc <HAL_GetTick>
 80010ec:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ee:	682b      	ldr	r3, [r5, #0]
 80010f0:	0398      	lsls	r0, r3, #14
 80010f2:	f57f af7e 	bpl.w	8000ff2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010f6:	f7ff fa81 	bl	80005fc <HAL_GetTick>
 80010fa:	1b80      	subs	r0, r0, r6
 80010fc:	2864      	cmp	r0, #100	; 0x64
 80010fe:	d9f6      	bls.n	80010ee <HAL_RCC_OscConfig+0x10e>
 8001100:	e7de      	b.n	80010c0 <HAL_RCC_OscConfig+0xe0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001102:	4b6d      	ldr	r3, [pc, #436]	; (80012b8 <HAL_RCC_OscConfig+0x2d8>)
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	f012 0f0c 	tst.w	r2, #12
 800110a:	d007      	beq.n	800111c <HAL_RCC_OscConfig+0x13c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800110c:	689a      	ldr	r2, [r3, #8]
 800110e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001112:	2a08      	cmp	r2, #8
 8001114:	d112      	bne.n	800113c <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	0259      	lsls	r1, r3, #9
 800111a:	d40f      	bmi.n	800113c <HAL_RCC_OscConfig+0x15c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800111c:	4b66      	ldr	r3, [pc, #408]	; (80012b8 <HAL_RCC_OscConfig+0x2d8>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	0792      	lsls	r2, r2, #30
 8001122:	d503      	bpl.n	800112c <HAL_RCC_OscConfig+0x14c>
 8001124:	68e2      	ldr	r2, [r4, #12]
 8001126:	2a01      	cmp	r2, #1
 8001128:	f47f af5d 	bne.w	8000fe6 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	6921      	ldr	r1, [r4, #16]
 8001130:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001134:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001138:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800113a:	e75e      	b.n	8000ffa <HAL_RCC_OscConfig+0x1a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800113c:	68e2      	ldr	r2, [r4, #12]
 800113e:	4b60      	ldr	r3, [pc, #384]	; (80012c0 <HAL_RCC_OscConfig+0x2e0>)
 8001140:	b1b2      	cbz	r2, 8001170 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 8001142:	2201      	movs	r2, #1
 8001144:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001146:	f7ff fa59 	bl	80005fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800114a:	4d5b      	ldr	r5, [pc, #364]	; (80012b8 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 800114c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800114e:	682b      	ldr	r3, [r5, #0]
 8001150:	079b      	lsls	r3, r3, #30
 8001152:	d507      	bpl.n	8001164 <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001154:	682b      	ldr	r3, [r5, #0]
 8001156:	6922      	ldr	r2, [r4, #16]
 8001158:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800115c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001160:	602b      	str	r3, [r5, #0]
 8001162:	e74a      	b.n	8000ffa <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001164:	f7ff fa4a 	bl	80005fc <HAL_GetTick>
 8001168:	1b80      	subs	r0, r0, r6
 800116a:	2802      	cmp	r0, #2
 800116c:	d9ef      	bls.n	800114e <HAL_RCC_OscConfig+0x16e>
 800116e:	e7a7      	b.n	80010c0 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8001170:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001172:	f7ff fa43 	bl	80005fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001176:	4d50      	ldr	r5, [pc, #320]	; (80012b8 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8001178:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800117a:	682b      	ldr	r3, [r5, #0]
 800117c:	079f      	lsls	r7, r3, #30
 800117e:	f57f af3c 	bpl.w	8000ffa <HAL_RCC_OscConfig+0x1a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001182:	f7ff fa3b 	bl	80005fc <HAL_GetTick>
 8001186:	1b80      	subs	r0, r0, r6
 8001188:	2802      	cmp	r0, #2
 800118a:	d9f6      	bls.n	800117a <HAL_RCC_OscConfig+0x19a>
 800118c:	e798      	b.n	80010c0 <HAL_RCC_OscConfig+0xe0>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800118e:	6962      	ldr	r2, [r4, #20]
 8001190:	4b4c      	ldr	r3, [pc, #304]	; (80012c4 <HAL_RCC_OscConfig+0x2e4>)
 8001192:	b17a      	cbz	r2, 80011b4 <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_LSI_ENABLE();
 8001194:	2201      	movs	r2, #1
 8001196:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001198:	f7ff fa30 	bl	80005fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800119c:	4d46      	ldr	r5, [pc, #280]	; (80012b8 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 800119e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011a0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80011a2:	0798      	lsls	r0, r3, #30
 80011a4:	f53f af2d 	bmi.w	8001002 <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011a8:	f7ff fa28 	bl	80005fc <HAL_GetTick>
 80011ac:	1b80      	subs	r0, r0, r6
 80011ae:	2802      	cmp	r0, #2
 80011b0:	d9f6      	bls.n	80011a0 <HAL_RCC_OscConfig+0x1c0>
 80011b2:	e785      	b.n	80010c0 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_LSI_DISABLE();
 80011b4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80011b6:	f7ff fa21 	bl	80005fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ba:	4d3f      	ldr	r5, [pc, #252]	; (80012b8 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 80011bc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011be:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80011c0:	0799      	lsls	r1, r3, #30
 80011c2:	f57f af1e 	bpl.w	8001002 <HAL_RCC_OscConfig+0x22>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011c6:	f7ff fa19 	bl	80005fc <HAL_GetTick>
 80011ca:	1b80      	subs	r0, r0, r6
 80011cc:	2802      	cmp	r0, #2
 80011ce:	d9f6      	bls.n	80011be <HAL_RCC_OscConfig+0x1de>
 80011d0:	e776      	b.n	80010c0 <HAL_RCC_OscConfig+0xe0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80011d2:	f7ff fa13 	bl	80005fc <HAL_GetTick>
 80011d6:	1b80      	subs	r0, r0, r6
 80011d8:	2802      	cmp	r0, #2
 80011da:	f67f af29 	bls.w	8001030 <HAL_RCC_OscConfig+0x50>
 80011de:	e76f      	b.n	80010c0 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011e0:	2b05      	cmp	r3, #5
 80011e2:	d104      	bne.n	80011ee <HAL_RCC_OscConfig+0x20e>
 80011e4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80011e6:	f043 0304 	orr.w	r3, r3, #4
 80011ea:	672b      	str	r3, [r5, #112]	; 0x70
 80011ec:	e729      	b.n	8001042 <HAL_RCC_OscConfig+0x62>
 80011ee:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80011f0:	f022 0201 	bic.w	r2, r2, #1
 80011f4:	672a      	str	r2, [r5, #112]	; 0x70
 80011f6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80011f8:	f022 0204 	bic.w	r2, r2, #4
 80011fc:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f47f af23 	bne.w	800104a <HAL_RCC_OscConfig+0x6a>
      tickstart = HAL_GetTick();
 8001204:	f7ff f9fa 	bl	80005fc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001208:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800120c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800120e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001210:	0798      	lsls	r0, r3, #30
 8001212:	f57f af24 	bpl.w	800105e <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001216:	f7ff f9f1 	bl	80005fc <HAL_GetTick>
 800121a:	1b80      	subs	r0, r0, r6
 800121c:	42b8      	cmp	r0, r7
 800121e:	d9f6      	bls.n	800120e <HAL_RCC_OscConfig+0x22e>
 8001220:	e74e      	b.n	80010c0 <HAL_RCC_OscConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001222:	f7ff f9eb 	bl	80005fc <HAL_GetTick>
 8001226:	1b80      	subs	r0, r0, r6
 8001228:	42b8      	cmp	r0, r7
 800122a:	f67f af14 	bls.w	8001056 <HAL_RCC_OscConfig+0x76>
 800122e:	e747      	b.n	80010c0 <HAL_RCC_OscConfig+0xe0>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001230:	4d21      	ldr	r5, [pc, #132]	; (80012b8 <HAL_RCC_OscConfig+0x2d8>)
 8001232:	68ab      	ldr	r3, [r5, #8]
 8001234:	f003 030c 	and.w	r3, r3, #12
 8001238:	2b08      	cmp	r3, #8
 800123a:	f43f aed4 	beq.w	8000fe6 <HAL_RCC_OscConfig+0x6>
 800123e:	4e22      	ldr	r6, [pc, #136]	; (80012c8 <HAL_RCC_OscConfig+0x2e8>)
 8001240:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001242:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001244:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001246:	d12a      	bne.n	800129e <HAL_RCC_OscConfig+0x2be>
        tickstart = HAL_GetTick();
 8001248:	f7ff f9d8 	bl	80005fc <HAL_GetTick>
 800124c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800124e:	682b      	ldr	r3, [r5, #0]
 8001250:	0199      	lsls	r1, r3, #6
 8001252:	d41e      	bmi.n	8001292 <HAL_RCC_OscConfig+0x2b2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001254:	6a22      	ldr	r2, [r4, #32]
 8001256:	69e3      	ldr	r3, [r4, #28]
 8001258:	4313      	orrs	r3, r2
 800125a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800125c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001260:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001262:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001266:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001268:	4c13      	ldr	r4, [pc, #76]	; (80012b8 <HAL_RCC_OscConfig+0x2d8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800126a:	0852      	lsrs	r2, r2, #1
 800126c:	3a01      	subs	r2, #1
 800126e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001272:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001274:	2301      	movs	r3, #1
 8001276:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001278:	f7ff f9c0 	bl	80005fc <HAL_GetTick>
 800127c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800127e:	6823      	ldr	r3, [r4, #0]
 8001280:	019a      	lsls	r2, r3, #6
 8001282:	f53f aef0 	bmi.w	8001066 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001286:	f7ff f9b9 	bl	80005fc <HAL_GetTick>
 800128a:	1b40      	subs	r0, r0, r5
 800128c:	2802      	cmp	r0, #2
 800128e:	d9f6      	bls.n	800127e <HAL_RCC_OscConfig+0x29e>
 8001290:	e716      	b.n	80010c0 <HAL_RCC_OscConfig+0xe0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001292:	f7ff f9b3 	bl	80005fc <HAL_GetTick>
 8001296:	1bc0      	subs	r0, r0, r7
 8001298:	2802      	cmp	r0, #2
 800129a:	d9d8      	bls.n	800124e <HAL_RCC_OscConfig+0x26e>
 800129c:	e710      	b.n	80010c0 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 800129e:	f7ff f9ad 	bl	80005fc <HAL_GetTick>
 80012a2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012a4:	682b      	ldr	r3, [r5, #0]
 80012a6:	019b      	lsls	r3, r3, #6
 80012a8:	f57f aedd 	bpl.w	8001066 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ac:	f7ff f9a6 	bl	80005fc <HAL_GetTick>
 80012b0:	1b00      	subs	r0, r0, r4
 80012b2:	2802      	cmp	r0, #2
 80012b4:	d9f6      	bls.n	80012a4 <HAL_RCC_OscConfig+0x2c4>
 80012b6:	e703      	b.n	80010c0 <HAL_RCC_OscConfig+0xe0>
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40007000 	.word	0x40007000
 80012c0:	42470000 	.word	0x42470000
 80012c4:	42470e80 	.word	0x42470e80
 80012c8:	42470060 	.word	0x42470060

080012cc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012cc:	4913      	ldr	r1, [pc, #76]	; (800131c <HAL_RCC_GetSysClockFreq+0x50>)
{
 80012ce:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012d0:	688b      	ldr	r3, [r1, #8]
 80012d2:	f003 030c 	and.w	r3, r3, #12
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	d003      	beq.n	80012e2 <HAL_RCC_GetSysClockFreq+0x16>
 80012da:	2b08      	cmp	r3, #8
 80012dc:	d003      	beq.n	80012e6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012de:	4810      	ldr	r0, [pc, #64]	; (8001320 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80012e0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80012e2:	4810      	ldr	r0, [pc, #64]	; (8001324 <HAL_RCC_GetSysClockFreq+0x58>)
 80012e4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012e6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012e8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012ea:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012ec:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012f0:	bf14      	ite	ne
 80012f2:	480c      	ldrne	r0, [pc, #48]	; (8001324 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012f4:	480a      	ldreq	r0, [pc, #40]	; (8001320 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012f6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80012fa:	bf18      	it	ne
 80012fc:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012fe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001302:	fba1 0100 	umull	r0, r1, r1, r0
 8001306:	f7fe ffbb 	bl	8000280 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800130a:	4b04      	ldr	r3, [pc, #16]	; (800131c <HAL_RCC_GetSysClockFreq+0x50>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001312:	3301      	adds	r3, #1
 8001314:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001316:	fbb0 f0f3 	udiv	r0, r0, r3
 800131a:	bd08      	pop	{r3, pc}
 800131c:	40023800 	.word	0x40023800
 8001320:	00f42400 	.word	0x00f42400
 8001324:	007a1200 	.word	0x007a1200

08001328 <HAL_RCC_ClockConfig>:
{
 8001328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800132c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800132e:	4604      	mov	r4, r0
 8001330:	b910      	cbnz	r0, 8001338 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001332:	2001      	movs	r0, #1
 8001334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001338:	4b44      	ldr	r3, [pc, #272]	; (800144c <HAL_RCC_ClockConfig+0x124>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	f002 020f 	and.w	r2, r2, #15
 8001340:	428a      	cmp	r2, r1
 8001342:	d328      	bcc.n	8001396 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001344:	6821      	ldr	r1, [r4, #0]
 8001346:	078f      	lsls	r7, r1, #30
 8001348:	d42d      	bmi.n	80013a6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800134a:	07c8      	lsls	r0, r1, #31
 800134c:	d440      	bmi.n	80013d0 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800134e:	4b3f      	ldr	r3, [pc, #252]	; (800144c <HAL_RCC_ClockConfig+0x124>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	f002 020f 	and.w	r2, r2, #15
 8001356:	4295      	cmp	r5, r2
 8001358:	d366      	bcc.n	8001428 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800135a:	6822      	ldr	r2, [r4, #0]
 800135c:	0751      	lsls	r1, r2, #29
 800135e:	d46c      	bmi.n	800143a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001360:	0713      	lsls	r3, r2, #28
 8001362:	d507      	bpl.n	8001374 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001364:	4a3a      	ldr	r2, [pc, #232]	; (8001450 <HAL_RCC_ClockConfig+0x128>)
 8001366:	6921      	ldr	r1, [r4, #16]
 8001368:	6893      	ldr	r3, [r2, #8]
 800136a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800136e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001372:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001374:	f7ff ffaa 	bl	80012cc <HAL_RCC_GetSysClockFreq>
 8001378:	4b35      	ldr	r3, [pc, #212]	; (8001450 <HAL_RCC_ClockConfig+0x128>)
 800137a:	4a36      	ldr	r2, [pc, #216]	; (8001454 <HAL_RCC_ClockConfig+0x12c>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001382:	5cd3      	ldrb	r3, [r2, r3]
 8001384:	40d8      	lsrs	r0, r3
 8001386:	4b34      	ldr	r3, [pc, #208]	; (8001458 <HAL_RCC_ClockConfig+0x130>)
 8001388:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800138a:	2000      	movs	r0, #0
 800138c:	f7ff f900 	bl	8000590 <HAL_InitTick>
  return HAL_OK;
 8001390:	2000      	movs	r0, #0
 8001392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001396:	b2ca      	uxtb	r2, r1
 8001398:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 030f 	and.w	r3, r3, #15
 80013a0:	4299      	cmp	r1, r3
 80013a2:	d1c6      	bne.n	8001332 <HAL_RCC_ClockConfig+0xa>
 80013a4:	e7ce      	b.n	8001344 <HAL_RCC_ClockConfig+0x1c>
 80013a6:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013ac:	bf1e      	ittt	ne
 80013ae:	689a      	ldrne	r2, [r3, #8]
 80013b0:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80013b4:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013b6:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013b8:	bf42      	ittt	mi
 80013ba:	689a      	ldrmi	r2, [r3, #8]
 80013bc:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80013c0:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	68a0      	ldr	r0, [r4, #8]
 80013c6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80013ca:	4302      	orrs	r2, r0
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	e7bc      	b.n	800134a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013d0:	6862      	ldr	r2, [r4, #4]
 80013d2:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <HAL_RCC_ClockConfig+0x128>)
 80013d4:	2a01      	cmp	r2, #1
 80013d6:	d11d      	bne.n	8001414 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013de:	d0a8      	beq.n	8001332 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013e0:	4e1b      	ldr	r6, [pc, #108]	; (8001450 <HAL_RCC_ClockConfig+0x128>)
 80013e2:	68b3      	ldr	r3, [r6, #8]
 80013e4:	f023 0303 	bic.w	r3, r3, #3
 80013e8:	4313      	orrs	r3, r2
 80013ea:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80013ec:	f7ff f906 	bl	80005fc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013f0:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80013f4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013f6:	68b3      	ldr	r3, [r6, #8]
 80013f8:	6862      	ldr	r2, [r4, #4]
 80013fa:	f003 030c 	and.w	r3, r3, #12
 80013fe:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001402:	d0a4      	beq.n	800134e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001404:	f7ff f8fa 	bl	80005fc <HAL_GetTick>
 8001408:	1bc0      	subs	r0, r0, r7
 800140a:	4540      	cmp	r0, r8
 800140c:	d9f3      	bls.n	80013f6 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800140e:	2003      	movs	r0, #3
}
 8001410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001414:	1e91      	subs	r1, r2, #2
 8001416:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001418:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800141a:	d802      	bhi.n	8001422 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800141c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001420:	e7dd      	b.n	80013de <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001422:	f013 0f02 	tst.w	r3, #2
 8001426:	e7da      	b.n	80013de <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001428:	b2ea      	uxtb	r2, r5
 800142a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 030f 	and.w	r3, r3, #15
 8001432:	429d      	cmp	r5, r3
 8001434:	f47f af7d 	bne.w	8001332 <HAL_RCC_ClockConfig+0xa>
 8001438:	e78f      	b.n	800135a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800143a:	4905      	ldr	r1, [pc, #20]	; (8001450 <HAL_RCC_ClockConfig+0x128>)
 800143c:	68e0      	ldr	r0, [r4, #12]
 800143e:	688b      	ldr	r3, [r1, #8]
 8001440:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001444:	4303      	orrs	r3, r0
 8001446:	608b      	str	r3, [r1, #8]
 8001448:	e78a      	b.n	8001360 <HAL_RCC_ClockConfig+0x38>
 800144a:	bf00      	nop
 800144c:	40023c00 	.word	0x40023c00
 8001450:	40023800 	.word	0x40023800
 8001454:	0800631a 	.word	0x0800631a
 8001458:	20000008 	.word	0x20000008

0800145c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800145c:	4b01      	ldr	r3, [pc, #4]	; (8001464 <HAL_RCC_GetHCLKFreq+0x8>)
 800145e:	6818      	ldr	r0, [r3, #0]
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000008 	.word	0x20000008

08001468 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001468:	6803      	ldr	r3, [r0, #0]
 800146a:	68da      	ldr	r2, [r3, #12]
 800146c:	f042 0201 	orr.w	r2, r2, #1
 8001470:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	f042 0201 	orr.w	r2, r2, #1
 8001478:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 800147a:	2000      	movs	r0, #0
 800147c:	4770      	bx	lr

0800147e <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 800147e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001482:	2b01      	cmp	r3, #1
{
 8001484:	b570      	push	{r4, r5, r6, lr}
 8001486:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800148a:	d01c      	beq.n	80014c6 <HAL_TIM_ConfigClockSource+0x48>
  
  htim->State = HAL_TIM_STATE_BUSY;
 800148c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001490:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001492:	2201      	movs	r2, #1
 8001494:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8001498:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800149a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800149e:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80014a2:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 80014a4:	680a      	ldr	r2, [r1, #0]
 80014a6:	2a40      	cmp	r2, #64	; 0x40
 80014a8:	d079      	beq.n	800159e <HAL_TIM_ConfigClockSource+0x120>
 80014aa:	d819      	bhi.n	80014e0 <HAL_TIM_ConfigClockSource+0x62>
 80014ac:	2a10      	cmp	r2, #16
 80014ae:	f000 8093 	beq.w	80015d8 <HAL_TIM_ConfigClockSource+0x15a>
 80014b2:	d80a      	bhi.n	80014ca <HAL_TIM_ConfigClockSource+0x4c>
 80014b4:	2a00      	cmp	r2, #0
 80014b6:	f000 8089 	beq.w	80015cc <HAL_TIM_ConfigClockSource+0x14e>
    break;
    
    default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 80014ba:	2301      	movs	r3, #1
 80014bc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80014c0:	2300      	movs	r3, #0
 80014c2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80014c6:	4618      	mov	r0, r3
  
  return HAL_OK;
}
 80014c8:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80014ca:	2a20      	cmp	r2, #32
 80014cc:	f000 808a 	beq.w	80015e4 <HAL_TIM_ConfigClockSource+0x166>
 80014d0:	2a30      	cmp	r2, #48	; 0x30
 80014d2:	d1f2      	bne.n	80014ba <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80014d4:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80014d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80014da:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80014de:	e036      	b.n	800154e <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80014e0:	2a70      	cmp	r2, #112	; 0x70
 80014e2:	d036      	beq.n	8001552 <HAL_TIM_ConfigClockSource+0xd4>
 80014e4:	d81b      	bhi.n	800151e <HAL_TIM_ConfigClockSource+0xa0>
 80014e6:	2a50      	cmp	r2, #80	; 0x50
 80014e8:	d042      	beq.n	8001570 <HAL_TIM_ConfigClockSource+0xf2>
 80014ea:	2a60      	cmp	r2, #96	; 0x60
 80014ec:	d1e5      	bne.n	80014ba <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80014ee:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80014f0:	684d      	ldr	r5, [r1, #4]
 80014f2:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80014f4:	f024 0410 	bic.w	r4, r4, #16
 80014f8:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80014fa:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80014fc:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80014fe:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001502:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001506:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800150a:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800150e:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001510:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001512:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001514:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001518:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 800151c:	e017      	b.n	800154e <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800151e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001522:	d011      	beq.n	8001548 <HAL_TIM_ConfigClockSource+0xca>
 8001524:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001528:	d1c7      	bne.n	80014ba <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800152a:	688a      	ldr	r2, [r1, #8]
 800152c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800152e:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001530:	68c9      	ldr	r1, [r1, #12]
 8001532:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001534:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001538:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800153c:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800153e:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001546:	e002      	b.n	800154e <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001548:	689a      	ldr	r2, [r3, #8]
 800154a:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	e7b3      	b.n	80014ba <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001552:	688a      	ldr	r2, [r1, #8]
 8001554:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001556:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001558:	68c9      	ldr	r1, [r1, #12]
 800155a:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800155c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001560:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001564:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001566:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001568:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800156a:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 800156e:	e7ee      	b.n	800154e <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001570:	684c      	ldr	r4, [r1, #4]
 8001572:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001574:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001576:	6a1d      	ldr	r5, [r3, #32]
 8001578:	f025 0501 	bic.w	r5, r5, #1
 800157c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800157e:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001580:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001584:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001588:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800158c:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800158e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001590:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001592:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001594:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001598:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 800159c:	e7d7      	b.n	800154e <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800159e:	684c      	ldr	r4, [r1, #4]
 80015a0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80015a2:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80015a4:	6a1d      	ldr	r5, [r3, #32]
 80015a6:	f025 0501 	bic.w	r5, r5, #1
 80015aa:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80015ac:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80015ae:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80015b2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80015b6:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80015ba:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80015bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80015be:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80015c0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80015c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80015c6:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80015ca:	e7c0      	b.n	800154e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80015cc:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80015ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80015d2:	f042 0207 	orr.w	r2, r2, #7
 80015d6:	e7ba      	b.n	800154e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80015d8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80015da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80015de:	f042 0217 	orr.w	r2, r2, #23
 80015e2:	e7b4      	b.n	800154e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80015e4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80015e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80015ea:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 80015ee:	e7ae      	b.n	800154e <HAL_TIM_ConfigClockSource+0xd0>

080015f0 <HAL_TIM_OC_DelayElapsedCallback>:
 80015f0:	4770      	bx	lr

080015f2 <HAL_TIM_IC_CaptureCallback>:
 80015f2:	4770      	bx	lr

080015f4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80015f4:	4770      	bx	lr

080015f6 <HAL_TIM_TriggerCallback>:
 80015f6:	4770      	bx	lr

080015f8 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015f8:	6803      	ldr	r3, [r0, #0]
 80015fa:	691a      	ldr	r2, [r3, #16]
 80015fc:	0791      	lsls	r1, r2, #30
{
 80015fe:	b510      	push	{r4, lr}
 8001600:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001602:	d50e      	bpl.n	8001622 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001604:	68da      	ldr	r2, [r3, #12]
 8001606:	0792      	lsls	r2, r2, #30
 8001608:	d50b      	bpl.n	8001622 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800160a:	f06f 0202 	mvn.w	r2, #2
 800160e:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001610:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001612:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001614:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001616:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001618:	d077      	beq.n	800170a <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800161a:	f7ff ffea 	bl	80015f2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800161e:	2300      	movs	r3, #0
 8001620:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001622:	6823      	ldr	r3, [r4, #0]
 8001624:	691a      	ldr	r2, [r3, #16]
 8001626:	0750      	lsls	r0, r2, #29
 8001628:	d510      	bpl.n	800164c <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800162a:	68da      	ldr	r2, [r3, #12]
 800162c:	0751      	lsls	r1, r2, #29
 800162e:	d50d      	bpl.n	800164c <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001630:	f06f 0204 	mvn.w	r2, #4
 8001634:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001636:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001638:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800163a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800163e:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001640:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001642:	d068      	beq.n	8001716 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001644:	f7ff ffd5 	bl	80015f2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001648:	2300      	movs	r3, #0
 800164a:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800164c:	6823      	ldr	r3, [r4, #0]
 800164e:	691a      	ldr	r2, [r3, #16]
 8001650:	0712      	lsls	r2, r2, #28
 8001652:	d50f      	bpl.n	8001674 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001654:	68da      	ldr	r2, [r3, #12]
 8001656:	0710      	lsls	r0, r2, #28
 8001658:	d50c      	bpl.n	8001674 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800165a:	f06f 0208 	mvn.w	r2, #8
 800165e:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001660:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001662:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001664:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001666:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001668:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800166a:	d05a      	beq.n	8001722 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800166c:	f7ff ffc1 	bl	80015f2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001670:	2300      	movs	r3, #0
 8001672:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001674:	6823      	ldr	r3, [r4, #0]
 8001676:	691a      	ldr	r2, [r3, #16]
 8001678:	06d2      	lsls	r2, r2, #27
 800167a:	d510      	bpl.n	800169e <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800167c:	68da      	ldr	r2, [r3, #12]
 800167e:	06d0      	lsls	r0, r2, #27
 8001680:	d50d      	bpl.n	800169e <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001682:	f06f 0210 	mvn.w	r2, #16
 8001686:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001688:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800168a:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800168c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001690:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001692:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001694:	d04b      	beq.n	800172e <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001696:	f7ff ffac 	bl	80015f2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800169a:	2300      	movs	r3, #0
 800169c:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800169e:	6823      	ldr	r3, [r4, #0]
 80016a0:	691a      	ldr	r2, [r3, #16]
 80016a2:	07d1      	lsls	r1, r2, #31
 80016a4:	d508      	bpl.n	80016b8 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80016a6:	68da      	ldr	r2, [r3, #12]
 80016a8:	07d2      	lsls	r2, r2, #31
 80016aa:	d505      	bpl.n	80016b8 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016ac:	f06f 0201 	mvn.w	r2, #1
 80016b0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80016b2:	4620      	mov	r0, r4
 80016b4:	f003 ff5c 	bl	8005570 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016b8:	6823      	ldr	r3, [r4, #0]
 80016ba:	691a      	ldr	r2, [r3, #16]
 80016bc:	0610      	lsls	r0, r2, #24
 80016be:	d508      	bpl.n	80016d2 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80016c0:	68da      	ldr	r2, [r3, #12]
 80016c2:	0611      	lsls	r1, r2, #24
 80016c4:	d505      	bpl.n	80016d2 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016c6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80016ca:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80016cc:	4620      	mov	r0, r4
 80016ce:	f000 f8d6 	bl	800187e <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016d2:	6823      	ldr	r3, [r4, #0]
 80016d4:	691a      	ldr	r2, [r3, #16]
 80016d6:	0652      	lsls	r2, r2, #25
 80016d8:	d508      	bpl.n	80016ec <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80016da:	68da      	ldr	r2, [r3, #12]
 80016dc:	0650      	lsls	r0, r2, #25
 80016de:	d505      	bpl.n	80016ec <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80016e4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80016e6:	4620      	mov	r0, r4
 80016e8:	f7ff ff85 	bl	80015f6 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016ec:	6823      	ldr	r3, [r4, #0]
 80016ee:	691a      	ldr	r2, [r3, #16]
 80016f0:	0691      	lsls	r1, r2, #26
 80016f2:	d522      	bpl.n	800173a <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80016f4:	68da      	ldr	r2, [r3, #12]
 80016f6:	0692      	lsls	r2, r2, #26
 80016f8:	d51f      	bpl.n	800173a <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016fa:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80016fe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001700:	611a      	str	r2, [r3, #16]
}
 8001702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8001706:	f000 b8b9 	b.w	800187c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800170a:	f7ff ff71 	bl	80015f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800170e:	4620      	mov	r0, r4
 8001710:	f7ff ff70 	bl	80015f4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001714:	e783      	b.n	800161e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001716:	f7ff ff6b 	bl	80015f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800171a:	4620      	mov	r0, r4
 800171c:	f7ff ff6a 	bl	80015f4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001720:	e792      	b.n	8001648 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001722:	f7ff ff65 	bl	80015f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001726:	4620      	mov	r0, r4
 8001728:	f7ff ff64 	bl	80015f4 <HAL_TIM_PWM_PulseFinishedCallback>
 800172c:	e7a0      	b.n	8001670 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800172e:	f7ff ff5f 	bl	80015f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001732:	4620      	mov	r0, r4
 8001734:	f7ff ff5e 	bl	80015f4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001738:	e7af      	b.n	800169a <HAL_TIM_IRQHandler+0xa2>
 800173a:	bd10      	pop	{r4, pc}

0800173c <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800173c:	4a2e      	ldr	r2, [pc, #184]	; (80017f8 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 800173e:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001740:	4290      	cmp	r0, r2
 8001742:	d012      	beq.n	800176a <TIM_Base_SetConfig+0x2e>
 8001744:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001748:	d00f      	beq.n	800176a <TIM_Base_SetConfig+0x2e>
 800174a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800174e:	4290      	cmp	r0, r2
 8001750:	d00b      	beq.n	800176a <TIM_Base_SetConfig+0x2e>
 8001752:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001756:	4290      	cmp	r0, r2
 8001758:	d007      	beq.n	800176a <TIM_Base_SetConfig+0x2e>
 800175a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800175e:	4290      	cmp	r0, r2
 8001760:	d003      	beq.n	800176a <TIM_Base_SetConfig+0x2e>
 8001762:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001766:	4290      	cmp	r0, r2
 8001768:	d11d      	bne.n	80017a6 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 800176a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800176c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001770:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001772:	4a21      	ldr	r2, [pc, #132]	; (80017f8 <TIM_Base_SetConfig+0xbc>)
 8001774:	4290      	cmp	r0, r2
 8001776:	d104      	bne.n	8001782 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001778:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800177a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800177e:	4313      	orrs	r3, r2
 8001780:	e028      	b.n	80017d4 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001782:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001786:	d0f7      	beq.n	8001778 <TIM_Base_SetConfig+0x3c>
 8001788:	4a1c      	ldr	r2, [pc, #112]	; (80017fc <TIM_Base_SetConfig+0xc0>)
 800178a:	4290      	cmp	r0, r2
 800178c:	d0f4      	beq.n	8001778 <TIM_Base_SetConfig+0x3c>
 800178e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001792:	4290      	cmp	r0, r2
 8001794:	d0f0      	beq.n	8001778 <TIM_Base_SetConfig+0x3c>
 8001796:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800179a:	4290      	cmp	r0, r2
 800179c:	d0ec      	beq.n	8001778 <TIM_Base_SetConfig+0x3c>
 800179e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80017a2:	4290      	cmp	r0, r2
 80017a4:	d0e8      	beq.n	8001778 <TIM_Base_SetConfig+0x3c>
 80017a6:	4a16      	ldr	r2, [pc, #88]	; (8001800 <TIM_Base_SetConfig+0xc4>)
 80017a8:	4290      	cmp	r0, r2
 80017aa:	d0e5      	beq.n	8001778 <TIM_Base_SetConfig+0x3c>
 80017ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017b0:	4290      	cmp	r0, r2
 80017b2:	d0e1      	beq.n	8001778 <TIM_Base_SetConfig+0x3c>
 80017b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017b8:	4290      	cmp	r0, r2
 80017ba:	d0dd      	beq.n	8001778 <TIM_Base_SetConfig+0x3c>
 80017bc:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80017c0:	4290      	cmp	r0, r2
 80017c2:	d0d9      	beq.n	8001778 <TIM_Base_SetConfig+0x3c>
 80017c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017c8:	4290      	cmp	r0, r2
 80017ca:	d0d5      	beq.n	8001778 <TIM_Base_SetConfig+0x3c>
 80017cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017d0:	4290      	cmp	r0, r2
 80017d2:	d0d1      	beq.n	8001778 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 80017d4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017d6:	688b      	ldr	r3, [r1, #8]
 80017d8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80017da:	680b      	ldr	r3, [r1, #0]
 80017dc:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <TIM_Base_SetConfig+0xbc>)
 80017e0:	4298      	cmp	r0, r3
 80017e2:	d006      	beq.n	80017f2 <TIM_Base_SetConfig+0xb6>
 80017e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017e8:	4298      	cmp	r0, r3
 80017ea:	d002      	beq.n	80017f2 <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 80017ec:	2301      	movs	r3, #1
 80017ee:	6143      	str	r3, [r0, #20]
}
 80017f0:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80017f2:	690b      	ldr	r3, [r1, #16]
 80017f4:	6303      	str	r3, [r0, #48]	; 0x30
 80017f6:	e7f9      	b.n	80017ec <TIM_Base_SetConfig+0xb0>
 80017f8:	40010000 	.word	0x40010000
 80017fc:	40000400 	.word	0x40000400
 8001800:	40014000 	.word	0x40014000

08001804 <HAL_TIM_Base_Init>:
{ 
 8001804:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001806:	4604      	mov	r4, r0
 8001808:	b1a0      	cbz	r0, 8001834 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800180a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800180e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001812:	b91b      	cbnz	r3, 800181c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001814:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8001818:	f004 f824 	bl	8005864 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800181c:	2302      	movs	r3, #2
 800181e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001822:	6820      	ldr	r0, [r4, #0]
 8001824:	1d21      	adds	r1, r4, #4
 8001826:	f7ff ff89 	bl	800173c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800182a:	2301      	movs	r3, #1
 800182c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001830:	2000      	movs	r0, #0
 8001832:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001834:	2001      	movs	r0, #1
}
 8001836:	bd10      	pop	{r4, pc}

08001838 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001838:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800183c:	2b01      	cmp	r3, #1
{
 800183e:	b510      	push	{r4, lr}
 8001840:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001844:	d018      	beq.n	8001878 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001846:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800184a:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800184c:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800184e:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001850:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001852:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001856:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	4322      	orrs	r2, r4
 800185c:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001864:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	430a      	orrs	r2, r1
 800186a:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 800186c:	2301      	movs	r3, #1
 800186e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8001872:	2300      	movs	r3, #0
 8001874:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001878:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 800187a:	bd10      	pop	{r4, pc}

0800187c <HAL_TIMEx_CommutationCallback>:
 800187c:	4770      	bx	lr

0800187e <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800187e:	4770      	bx	lr

08001880 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 8001880:	ba40      	rev16	r0, r0
}
 8001882:	b280      	uxth	r0, r0
 8001884:	4770      	bx	lr

08001886 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
}
 8001886:	ba00      	rev	r0, r0
 8001888:	4770      	bx	lr

0800188a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800188a:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800188c:	f000 ff92 	bl	80027b4 <mem_init>
  memp_init();
 8001890:	f001 f8ba 	bl	8002a08 <memp_init>
  pbuf_init();
  netif_init();
 8001894:	f001 f8ed 	bl	8002a72 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8001898:	f003 fa43 	bl	8004d22 <udp_init>
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 800189c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  tcp_init();
 80018a0:	f001 bb4d 	b.w	8002f3e <tcp_init>

080018a4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80018a4:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80018a6:	2618      	movs	r6, #24
 80018a8:	4c07      	ldr	r4, [pc, #28]	; (80018c8 <etharp_free_entry+0x24>)
 80018aa:	4346      	muls	r6, r0
{
 80018ac:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 80018ae:	59a0      	ldr	r0, [r4, r6]
 80018b0:	b118      	cbz	r0, 80018ba <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80018b2:	f001 f9cf 	bl	8002c54 <pbuf_free>
    arp_table[i].q = NULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80018ba:	2318      	movs	r3, #24
 80018bc:	fb03 4405 	mla	r4, r3, r5, r4
 80018c0:	2300      	movs	r3, #0
 80018c2:	7523      	strb	r3, [r4, #20]
 80018c4:	bd70      	pop	{r4, r5, r6, pc}
 80018c6:	bf00      	nop
 80018c8:	2000008c 	.word	0x2000008c

080018cc <etharp_find_entry.isra.0>:
 *
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 80018cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018d0:	4b31      	ldr	r3, [pc, #196]	; (8001998 <etharp_find_entry.isra.0+0xcc>)
 80018d2:	9101      	str	r1, [sp, #4]
{
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0;
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 80018d4:	220a      	movs	r2, #10
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 80018d6:	4605      	mov	r5, r0
 80018d8:	2000      	movs	r0, #0
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80018da:	4616      	mov	r6, r2
 80018dc:	4696      	mov	lr, r2
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80018de:	4681      	mov	r9, r0
 80018e0:	4684      	mov	ip, r0
 80018e2:	4683      	mov	fp, r0
  s8_t empty = ARP_TABLE_SIZE;
 80018e4:	4614      	mov	r4, r2
 80018e6:	4698      	mov	r8, r3
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80018e8:	2c0a      	cmp	r4, #10
    u8_t state = arp_table[i].state;
 80018ea:	7d1f      	ldrb	r7, [r3, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80018ec:	d110      	bne.n	8001910 <etharp_find_entry.isra.0+0x44>
 80018ee:	b98f      	cbnz	r7, 8001914 <etharp_find_entry.isra.0+0x48>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 80018f0:	b244      	sxtb	r4, r0
 80018f2:	3001      	adds	r0, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80018f4:	280a      	cmp	r0, #10
 80018f6:	f103 0318 	add.w	r3, r3, #24
 80018fa:	d1f5      	bne.n	80018e8 <etharp_find_entry.isra.0+0x1c>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80018fc:	9b01      	ldr	r3, [sp, #4]
 80018fe:	0799      	lsls	r1, r3, #30
 8001900:	d403      	bmi.n	800190a <etharp_find_entry.isra.0+0x3e>
 8001902:	2c0a      	cmp	r4, #10
 8001904:	d11b      	bne.n	800193e <etharp_find_entry.isra.0+0x72>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8001906:	07db      	lsls	r3, r3, #31
 8001908:	d428      	bmi.n	800195c <etharp_find_entry.isra.0+0x90>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800190a:	f04f 30ff 	mov.w	r0, #4294967295
 800190e:	e008      	b.n	8001922 <etharp_find_entry.isra.0+0x56>
    } else if (state != ETHARP_STATE_EMPTY) {
 8001910:	2f00      	cmp	r7, #0
 8001912:	d0ee      	beq.n	80018f2 <etharp_find_entry.isra.0+0x26>
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8001914:	b39d      	cbz	r5, 800197e <etharp_find_entry.isra.0+0xb2>
 8001916:	6829      	ldr	r1, [r5, #0]
 8001918:	468a      	mov	sl, r1
 800191a:	6859      	ldr	r1, [r3, #4]
 800191c:	458a      	cmp	sl, r1
 800191e:	d12e      	bne.n	800197e <etharp_find_entry.isra.0+0xb2>
        return i;
 8001920:	b240      	sxtb	r0, r0
  arp_table[i].ctime = 0;
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
}
 8001922:	b003      	add	sp, #12
 8001924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 8001928:	45e2      	cmp	sl, ip
 800192a:	d3e2      	bcc.n	80018f2 <etharp_find_entry.isra.0+0x26>
            old_pending = i;
 800192c:	b246      	sxtb	r6, r0
 800192e:	46d4      	mov	ip, sl
 8001930:	e7df      	b.n	80018f2 <etharp_find_entry.isra.0+0x26>
          if (arp_table[i].ctime >= age_stable) {
 8001932:	45ca      	cmp	sl, r9
            old_stable = i;
 8001934:	bf24      	itt	cs
 8001936:	fa4f fe80 	sxtbcs.w	lr, r0
 800193a:	46d1      	movcs	r9, sl
 800193c:	e7d9      	b.n	80018f2 <etharp_find_entry.isra.0+0x26>
    i = empty;
 800193e:	b2e4      	uxtb	r4, r4
  if (ipaddr != NULL) {
 8001940:	b125      	cbz	r5, 800194c <etharp_find_entry.isra.0+0x80>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8001942:	2318      	movs	r3, #24
 8001944:	fb03 8304 	mla	r3, r3, r4, r8
 8001948:	682a      	ldr	r2, [r5, #0]
 800194a:	605a      	str	r2, [r3, #4]
  arp_table[i].ctime = 0;
 800194c:	2318      	movs	r3, #24
 800194e:	fb03 8804 	mla	r8, r3, r4, r8
 8001952:	2300      	movs	r3, #0
 8001954:	f8a8 3012 	strh.w	r3, [r8, #18]
  return (err_t)i;
 8001958:	b260      	sxtb	r0, r4
 800195a:	e7e2      	b.n	8001922 <etharp_find_entry.isra.0+0x56>
    if (old_stable < ARP_TABLE_SIZE) {
 800195c:	f1be 0f0a 	cmp.w	lr, #10
 8001960:	d005      	beq.n	800196e <etharp_find_entry.isra.0+0xa2>
      i = old_stable;
 8001962:	fa5f f48e 	uxtb.w	r4, lr
    etharp_free_entry(i);
 8001966:	4620      	mov	r0, r4
 8001968:	f7ff ff9c 	bl	80018a4 <etharp_free_entry>
 800196c:	e7e8      	b.n	8001940 <etharp_find_entry.isra.0+0x74>
    } else if (old_pending < ARP_TABLE_SIZE) {
 800196e:	2e0a      	cmp	r6, #10
 8001970:	d001      	beq.n	8001976 <etharp_find_entry.isra.0+0xaa>
      i = old_pending;
 8001972:	b2f4      	uxtb	r4, r6
 8001974:	e7f7      	b.n	8001966 <etharp_find_entry.isra.0+0x9a>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8001976:	2a0a      	cmp	r2, #10
 8001978:	d0c7      	beq.n	800190a <etharp_find_entry.isra.0+0x3e>
      i = old_queue;
 800197a:	b2d4      	uxtb	r4, r2
 800197c:	e7f3      	b.n	8001966 <etharp_find_entry.isra.0+0x9a>
      if (state == ETHARP_STATE_PENDING) {
 800197e:	2f01      	cmp	r7, #1
 8001980:	f8b3 a012 	ldrh.w	sl, [r3, #18]
 8001984:	d1d5      	bne.n	8001932 <etharp_find_entry.isra.0+0x66>
        if (arp_table[i].q != NULL) {
 8001986:	681f      	ldr	r7, [r3, #0]
 8001988:	2f00      	cmp	r7, #0
 800198a:	d0cd      	beq.n	8001928 <etharp_find_entry.isra.0+0x5c>
          if (arp_table[i].ctime >= age_queue) {
 800198c:	45da      	cmp	sl, fp
 800198e:	d3b0      	bcc.n	80018f2 <etharp_find_entry.isra.0+0x26>
            old_queue = i;
 8001990:	b242      	sxtb	r2, r0
 8001992:	46d3      	mov	fp, sl
 8001994:	e7ad      	b.n	80018f2 <etharp_find_entry.isra.0+0x26>
 8001996:	bf00      	nop
 8001998:	2000008c 	.word	0x2000008c

0800199c <etharp_raw.constprop.1>:
 * @return ERR_OK if the ARP packet has been sent
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
 800199c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80019a0:	4607      	mov	r7, r0
 80019a2:	4688      	mov	r8, r1
 80019a4:	4691      	mov	r9, r2
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80019a6:	211c      	movs	r1, #28
 80019a8:	2200      	movs	r2, #0
 80019aa:	2002      	movs	r0, #2
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
 80019ac:	461d      	mov	r5, r3
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80019ae:	f001 f979 	bl	8002ca4 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80019b2:	4606      	mov	r6, r0
 80019b4:	b380      	cbz	r0, 8001a18 <etharp_raw.constprop.1+0x7c>
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80019b6:	6844      	ldr	r4, [r0, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80019b8:	2001      	movs	r0, #1
 80019ba:	f7ff ff61 	bl	8001880 <lwip_htons>
 80019be:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 80019c0:	682b      	ldr	r3, [r5, #0]
 80019c2:	60a3      	str	r3, [r4, #8]
 80019c4:	88ab      	ldrh	r3, [r5, #4]
 80019c6:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 80019c8:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <etharp_raw.constprop.1+0x84>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	889b      	ldrh	r3, [r3, #4]
 80019ce:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 80019d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 80019d2:	f8c4 2012 	str.w	r2, [r4, #18]
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 80019dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80019e2:	2301      	movs	r3, #1
 80019e4:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80019e6:	2308      	movs	r3, #8
 80019e8:	70a3      	strb	r3, [r4, #2]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80019ea:	2306      	movs	r3, #6
 80019ec:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80019ee:	2304      	movs	r3, #4
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80019f0:	2500      	movs	r5, #0
  hdr->protolen = sizeof(ip4_addr_t);
 80019f2:	7163      	strb	r3, [r4, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80019f4:	f640 0306 	movw	r3, #2054	; 0x806
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80019f8:	7025      	strb	r5, [r4, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80019fa:	70e5      	strb	r5, [r4, #3]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80019fc:	4642      	mov	r2, r8
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	4631      	mov	r1, r6
 8001a02:	464b      	mov	r3, r9
 8001a04:	4638      	mov	r0, r7
 8001a06:	f003 fb99 	bl	800513c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8001a0a:	4630      	mov	r0, r6
 8001a0c:	f001 f922 	bl	8002c54 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8001a10:	4628      	mov	r0, r5
}
 8001a12:	b003      	add	sp, #12
 8001a14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return ERR_MEM;
 8001a18:	f04f 30ff 	mov.w	r0, #4294967295
 8001a1c:	e7f9      	b.n	8001a12 <etharp_raw.constprop.1+0x76>
 8001a1e:	bf00      	nop
 8001a20:	0800630e 	.word	0x0800630e

08001a24 <etharp_cleanup_netif>:
{
 8001a24:	b570      	push	{r4, r5, r6, lr}
 8001a26:	4d08      	ldr	r5, [pc, #32]	; (8001a48 <etharp_cleanup_netif+0x24>)
 8001a28:	4606      	mov	r6, r0
 8001a2a:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8001a2c:	7d2b      	ldrb	r3, [r5, #20]
 8001a2e:	b12b      	cbz	r3, 8001a3c <etharp_cleanup_netif+0x18>
 8001a30:	68ab      	ldr	r3, [r5, #8]
 8001a32:	42b3      	cmp	r3, r6
 8001a34:	d102      	bne.n	8001a3c <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 8001a36:	4620      	mov	r0, r4
 8001a38:	f7ff ff34 	bl	80018a4 <etharp_free_entry>
 8001a3c:	3401      	adds	r4, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8001a3e:	2c0a      	cmp	r4, #10
 8001a40:	f105 0518 	add.w	r5, r5, #24
 8001a44:	d1f2      	bne.n	8001a2c <etharp_cleanup_netif+0x8>
}
 8001a46:	bd70      	pop	{r4, r5, r6, pc}
 8001a48:	2000008c 	.word	0x2000008c

08001a4c <etharp_input>:
{
 8001a4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001a50:	4680      	mov	r8, r0
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8001a52:	460d      	mov	r5, r1
 8001a54:	b181      	cbz	r1, 8001a78 <etharp_input+0x2c>
  hdr = (struct etharp_hdr *)p->payload;
 8001a56:	6844      	ldr	r4, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8001a58:	8823      	ldrh	r3, [r4, #0]
 8001a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a5e:	d108      	bne.n	8001a72 <etharp_input+0x26>
 8001a60:	7923      	ldrb	r3, [r4, #4]
 8001a62:	2b06      	cmp	r3, #6
 8001a64:	d105      	bne.n	8001a72 <etharp_input+0x26>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8001a66:	7963      	ldrb	r3, [r4, #5]
 8001a68:	2b04      	cmp	r3, #4
 8001a6a:	d102      	bne.n	8001a72 <etharp_input+0x26>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8001a6c:	8863      	ldrh	r3, [r4, #2]
 8001a6e:	2b08      	cmp	r3, #8
 8001a70:	d005      	beq.n	8001a7e <etharp_input+0x32>
  pbuf_free(p);
 8001a72:	4640      	mov	r0, r8
 8001a74:	f001 f8ee 	bl	8002c54 <pbuf_free>
}
 8001a78:	b004      	add	sp, #16
 8001a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8001a7e:	684f      	ldr	r7, [r1, #4]
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8001a80:	f8d4 000e 	ldr.w	r0, [r4, #14]
 8001a84:	9003      	str	r0, [sp, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8001a86:	69a3      	ldr	r3, [r4, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8001a88:	b117      	cbz	r7, 8001a90 <etharp_input+0x44>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8001a8a:	1bdb      	subs	r3, r3, r7
 8001a8c:	425f      	negs	r7, r3
 8001a8e:	415f      	adcs	r7, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8001a90:	2f00      	cmp	r7, #0
 8001a92:	f104 0608 	add.w	r6, r4, #8
 8001a96:	bf14      	ite	ne
 8001a98:	f04f 0901 	movne.w	r9, #1
 8001a9c:	f04f 0902 	moveq.w	r9, #2
  if (ip4_addr_isany(ipaddr) ||
 8001aa0:	2800      	cmp	r0, #0
 8001aa2:	d03c      	beq.n	8001b1e <etharp_input+0xd2>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8001aa4:	4629      	mov	r1, r5
 8001aa6:	f000 fbbe 	bl	8002226 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8001aaa:	4682      	mov	sl, r0
 8001aac:	bbb8      	cbnz	r0, 8001b1e <etharp_input+0xd2>
      ip4_addr_ismulticast(ipaddr)) {
 8001aae:	9b03      	ldr	r3, [sp, #12]
 8001ab0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8001ab4:	2be0      	cmp	r3, #224	; 0xe0
 8001ab6:	d032      	beq.n	8001b1e <etharp_input+0xd2>
  i = etharp_find_entry(ipaddr, flags, netif);
 8001ab8:	4649      	mov	r1, r9
 8001aba:	a803      	add	r0, sp, #12
 8001abc:	f7ff ff06 	bl	80018cc <etharp_find_entry.isra.0>
  if (i < 0) {
 8001ac0:	2800      	cmp	r0, #0
 8001ac2:	db2c      	blt.n	8001b1e <etharp_input+0xd2>
    arp_table[i].state = ETHARP_STATE_STABLE;
 8001ac4:	4b29      	ldr	r3, [pc, #164]	; (8001b6c <etharp_input+0x120>)
 8001ac6:	2218      	movs	r2, #24
 8001ac8:	fb02 f100 	mul.w	r1, r2, r0
 8001acc:	eb03 0e01 	add.w	lr, r3, r1
 8001ad0:	f04f 0c02 	mov.w	ip, #2
 8001ad4:	f88e c014 	strb.w	ip, [lr, #20]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8001ad8:	f04f 0c0c 	mov.w	ip, #12
  arp_table[i].netif = netif;
 8001adc:	f8ce 5008 	str.w	r5, [lr, #8]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8001ae0:	fb12 c200 	smlabb	r2, r2, r0, ip
 8001ae4:	6830      	ldr	r0, [r6, #0]
 8001ae6:	5098      	str	r0, [r3, r2]
 8001ae8:	eb03 0c02 	add.w	ip, r3, r2
 8001aec:	88b2      	ldrh	r2, [r6, #4]
 8001aee:	f8ac 2004 	strh.w	r2, [ip, #4]
  if (arp_table[i].q != NULL) {
 8001af2:	f853 9001 	ldr.w	r9, [r3, r1]
  arp_table[i].ctime = 0;
 8001af6:	f8ae a012 	strh.w	sl, [lr, #18]
  if (arp_table[i].q != NULL) {
 8001afa:	f1b9 0f00 	cmp.w	r9, #0
 8001afe:	d00e      	beq.n	8001b1e <etharp_input+0xd2>
    arp_table[i].q = NULL;
 8001b00:	f843 a001 	str.w	sl, [r3, r1]
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8001b04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	f105 0225 	add.w	r2, r5, #37	; 0x25
 8001b0e:	4633      	mov	r3, r6
 8001b10:	4649      	mov	r1, r9
 8001b12:	4628      	mov	r0, r5
 8001b14:	f003 fb12 	bl	800513c <ethernet_output>
    pbuf_free(p);
 8001b18:	4648      	mov	r0, r9
 8001b1a:	f001 f89b 	bl	8002c54 <pbuf_free>
  switch (hdr->opcode) {
 8001b1e:	88e3      	ldrh	r3, [r4, #6]
 8001b20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b24:	d1a5      	bne.n	8001a72 <etharp_input+0x26>
    if (for_us) {
 8001b26:	2f00      	cmp	r7, #0
 8001b28:	d0a3      	beq.n	8001a72 <etharp_input+0x26>
      hdr->opcode = lwip_htons(ARP_REPLY);
 8001b2a:	2002      	movs	r0, #2
 8001b2c:	f7ff fea8 	bl	8001880 <lwip_htons>
      IPADDR2_COPY(&hdr->dipaddr, &hdr->sipaddr);
 8001b30:	f8d4 300e 	ldr.w	r3, [r4, #14]
      hdr->opcode = lwip_htons(ARP_REPLY);
 8001b34:	80e0      	strh	r0, [r4, #6]
      IPADDR2_COPY(&hdr->dipaddr, &hdr->sipaddr);
 8001b36:	61a3      	str	r3, [r4, #24]
      IPADDR2_COPY(&hdr->sipaddr, netif_ip4_addr(netif));
 8001b38:	686b      	ldr	r3, [r5, #4]
 8001b3a:	f8c4 300e 	str.w	r3, [r4, #14]
      ETHADDR16_COPY(&hdr->dhwaddr, &hdr->shwaddr);
 8001b3e:	6832      	ldr	r2, [r6, #0]
 8001b40:	f8c4 2012 	str.w	r2, [r4, #18]
 8001b44:	f104 0312 	add.w	r3, r4, #18
 8001b48:	88b2      	ldrh	r2, [r6, #4]
 8001b4a:	809a      	strh	r2, [r3, #4]
      ETHADDR16_COPY(&hdr->shwaddr, netif->hwaddr);
 8001b4c:	462a      	mov	r2, r5
        ethernet_output(netif, p, &hdr->shwaddr, &hdr->dhwaddr, ETHTYPE_ARP);
 8001b4e:	4628      	mov	r0, r5
      ETHADDR16_COPY(&hdr->shwaddr, netif->hwaddr);
 8001b50:	f852 1f25 	ldr.w	r1, [r2, #37]!
 8001b54:	60a1      	str	r1, [r4, #8]
 8001b56:	8892      	ldrh	r2, [r2, #4]
 8001b58:	80b2      	strh	r2, [r6, #4]
        ethernet_output(netif, p, &hdr->shwaddr, &hdr->dhwaddr, ETHTYPE_ARP);
 8001b5a:	f640 0206 	movw	r2, #2054	; 0x806
 8001b5e:	9200      	str	r2, [sp, #0]
 8001b60:	4641      	mov	r1, r8
 8001b62:	4632      	mov	r2, r6
 8001b64:	f003 faea 	bl	800513c <ethernet_output>
 8001b68:	e783      	b.n	8001a72 <etharp_input+0x26>
 8001b6a:	bf00      	nop
 8001b6c:	2000008c 	.word	0x2000008c

08001b70 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8001b70:	b507      	push	{r0, r1, r2, lr}
 8001b72:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8001b74:	f100 0325 	add.w	r3, r0, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8001b78:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8001b7a:	9101      	str	r1, [sp, #4]
 8001b7c:	9200      	str	r2, [sp, #0]
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4a02      	ldr	r2, [pc, #8]	; (8001b8c <etharp_request+0x1c>)
 8001b82:	f7ff ff0b 	bl	800199c <etharp_raw.constprop.1>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8001b86:	b003      	add	sp, #12
 8001b88:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b8c:	08006308 	.word	0x08006308

08001b90 <etharp_output_to_arp_index>:
{
 8001b90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8001b94:	4d1c      	ldr	r5, [pc, #112]	; (8001c08 <etharp_output_to_arp_index+0x78>)
{
 8001b96:	4689      	mov	r9, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8001b98:	2118      	movs	r1, #24
 8001b9a:	fb01 5602 	mla	r6, r1, r2, r5
{
 8001b9e:	4607      	mov	r7, r0
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8001ba0:	7d33      	ldrb	r3, [r6, #20]
 8001ba2:	2b02      	cmp	r3, #2
{
 8001ba4:	4614      	mov	r4, r2
 8001ba6:	f100 0825 	add.w	r8, r0, #37	; 0x25
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8001baa:	d10a      	bne.n	8001bc2 <etharp_output_to_arp_index+0x32>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8001bac:	8a73      	ldrh	r3, [r6, #18]
 8001bae:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8001bb2:	d915      	bls.n	8001be0 <etharp_output_to_arp_index+0x50>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8001bb4:	4631      	mov	r1, r6
 8001bb6:	3104      	adds	r1, #4
 8001bb8:	f7ff ffda 	bl	8001b70 <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8001bbc:	b908      	cbnz	r0, 8001bc2 <etharp_output_to_arp_index+0x32>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	7533      	strb	r3, [r6, #20]
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8001bc2:	2318      	movs	r3, #24
 8001bc4:	fb03 5304 	mla	r3, r3, r4, r5
 8001bc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bcc:	9200      	str	r2, [sp, #0]
 8001bce:	330c      	adds	r3, #12
 8001bd0:	4642      	mov	r2, r8
 8001bd2:	4649      	mov	r1, r9
 8001bd4:	4638      	mov	r0, r7
 8001bd6:	f003 fab1 	bl	800513c <ethernet_output>
}
 8001bda:	b003      	add	sp, #12
 8001bdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8001be0:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001be4:	d3ed      	bcc.n	8001bc2 <etharp_output_to_arp_index+0x32>
 8001be6:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8001bea:	00c9      	lsls	r1, r1, #3
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8001bec:	f101 020c 	add.w	r2, r1, #12
 8001bf0:	3104      	adds	r1, #4
 8001bf2:	4429      	add	r1, r5
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8001bf4:	1d03      	adds	r3, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8001bf6:	9101      	str	r1, [sp, #4]
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	442a      	add	r2, r5
 8001bfc:	4643      	mov	r3, r8
 8001bfe:	4641      	mov	r1, r8
 8001c00:	f7ff fecc 	bl	800199c <etharp_raw.constprop.1>
 8001c04:	e7da      	b.n	8001bbc <etharp_output_to_arp_index+0x2c>
 8001c06:	bf00      	nop
 8001c08:	2000008c 	.word	0x2000008c

08001c0c <etharp_query>:
{
 8001c0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001c10:	4688      	mov	r8, r1
 8001c12:	4607      	mov	r7, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8001c14:	4601      	mov	r1, r0
 8001c16:	f8d8 0000 	ldr.w	r0, [r8]
{
 8001c1a:	4614      	mov	r4, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8001c1c:	f000 fb03 	bl	8002226 <ip4_addr_isbroadcast_u32>
 8001c20:	2800      	cmp	r0, #0
 8001c22:	d14e      	bne.n	8001cc2 <etharp_query+0xb6>
      ip4_addr_ismulticast(ipaddr) ||
 8001c24:	f8d8 3000 	ldr.w	r3, [r8]
 8001c28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8001c2c:	2ae0      	cmp	r2, #224	; 0xe0
 8001c2e:	d048      	beq.n	8001cc2 <etharp_query+0xb6>
      ip4_addr_isany(ipaddr)) {
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d046      	beq.n	8001cc2 <etharp_query+0xb6>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8001c34:	2101      	movs	r1, #1
 8001c36:	4640      	mov	r0, r8
 8001c38:	f7ff fe48 	bl	80018cc <etharp_find_entry.isra.0>
  if (i < 0) {
 8001c3c:	1e05      	subs	r5, r0, #0
 8001c3e:	db43      	blt.n	8001cc8 <etharp_query+0xbc>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8001c40:	4e2e      	ldr	r6, [pc, #184]	; (8001cfc <etharp_query+0xf0>)
 8001c42:	2318      	movs	r3, #24
 8001c44:	fb03 6305 	mla	r3, r3, r5, r6
 8001c48:	7d1a      	ldrb	r2, [r3, #20]
 8001c4a:	2a00      	cmp	r2, #0
 8001c4c:	d13e      	bne.n	8001ccc <etharp_query+0xc0>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8001c4e:	2201      	movs	r2, #1
 8001c50:	751a      	strb	r2, [r3, #20]
    arp_table[i].netif = netif;
 8001c52:	609f      	str	r7, [r3, #8]
    result = etharp_request(netif, ipaddr);
 8001c54:	4641      	mov	r1, r8
 8001c56:	4638      	mov	r0, r7
 8001c58:	f7ff ff8a 	bl	8001b70 <etharp_request>
    if (q == NULL) {
 8001c5c:	b1a4      	cbz	r4, 8001c88 <etharp_query+0x7c>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8001c5e:	2318      	movs	r3, #24
 8001c60:	fb03 6205 	mla	r2, r3, r5, r6
 8001c64:	7d12      	ldrb	r2, [r2, #20]
 8001c66:	2a01      	cmp	r2, #1
 8001c68:	d911      	bls.n	8001c8e <etharp_query+0x82>
    ETHARP_SET_HINT(netif, i);
 8001c6a:	4a25      	ldr	r2, [pc, #148]	; (8001d00 <etharp_query+0xf4>)
 8001c6c:	7015      	strb	r5, [r2, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8001c6e:	220c      	movs	r2, #12
 8001c70:	fb13 2305 	smlabb	r3, r3, r5, r2
 8001c74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c78:	9200      	str	r2, [sp, #0]
 8001c7a:	4433      	add	r3, r6
 8001c7c:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8001c80:	4621      	mov	r1, r4
 8001c82:	4638      	mov	r0, r7
 8001c84:	f003 fa5a 	bl	800513c <ethernet_output>
}
 8001c88:	b002      	add	sp, #8
 8001c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8001c8e:	d1fb      	bne.n	8001c88 <etharp_query+0x7c>
 8001c90:	4623      	mov	r3, r4
    while (p) {
 8001c92:	b98b      	cbnz	r3, 8001cb8 <etharp_query+0xac>
      pbuf_ref(p);
 8001c94:	4620      	mov	r0, r4
 8001c96:	f001 f8c2 	bl	8002e1e <pbuf_ref>
    if (p != NULL) {
 8001c9a:	b35c      	cbz	r4, 8001cf4 <etharp_query+0xe8>
 8001c9c:	4627      	mov	r7, r4
      if (arp_table[i].q != NULL) {
 8001c9e:	2318      	movs	r3, #24
 8001ca0:	fb03 f205 	mul.w	r2, r3, r5
 8001ca4:	461c      	mov	r4, r3
 8001ca6:	58b0      	ldr	r0, [r6, r2]
 8001ca8:	b108      	cbz	r0, 8001cae <etharp_query+0xa2>
        pbuf_free(arp_table[i].q);
 8001caa:	f000 ffd3 	bl	8002c54 <pbuf_free>
      arp_table[i].q = p;
 8001cae:	fb04 f305 	mul.w	r3, r4, r5
      result = ERR_OK;
 8001cb2:	2000      	movs	r0, #0
      arp_table[i].q = p;
 8001cb4:	50f7      	str	r7, [r6, r3]
 8001cb6:	e7e7      	b.n	8001c88 <etharp_query+0x7c>
      if (p->type != PBUF_ROM) {
 8001cb8:	7b1a      	ldrb	r2, [r3, #12]
 8001cba:	2a01      	cmp	r2, #1
 8001cbc:	d10b      	bne.n	8001cd6 <etharp_query+0xca>
      p = p->next;
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	e7e7      	b.n	8001c92 <etharp_query+0x86>
    return ERR_ARG;
 8001cc2:	f06f 000f 	mvn.w	r0, #15
 8001cc6:	e7df      	b.n	8001c88 <etharp_query+0x7c>
 8001cc8:	4628      	mov	r0, r5
 8001cca:	e7dd      	b.n	8001c88 <etharp_query+0x7c>
  if (is_new_entry || (q == NULL)) {
 8001ccc:	2c00      	cmp	r4, #0
 8001cce:	d0c1      	beq.n	8001c54 <etharp_query+0x48>
  err_t result = ERR_MEM;
 8001cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd4:	e7c3      	b.n	8001c5e <etharp_query+0x52>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	8919      	ldrh	r1, [r3, #8]
 8001cda:	2002      	movs	r0, #2
 8001cdc:	f000 ffe2 	bl	8002ca4 <pbuf_alloc>
      if (p != NULL) {
 8001ce0:	4607      	mov	r7, r0
 8001ce2:	b138      	cbz	r0, 8001cf4 <etharp_query+0xe8>
        if (pbuf_copy(p, q) != ERR_OK) {
 8001ce4:	4621      	mov	r1, r4
 8001ce6:	f001 f8b5 	bl	8002e54 <pbuf_copy>
 8001cea:	2800      	cmp	r0, #0
 8001cec:	d0d7      	beq.n	8001c9e <etharp_query+0x92>
          pbuf_free(p);
 8001cee:	4638      	mov	r0, r7
 8001cf0:	f000 ffb0 	bl	8002c54 <pbuf_free>
      result = ERR_MEM;
 8001cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf8:	e7c6      	b.n	8001c88 <etharp_query+0x7c>
 8001cfa:	bf00      	nop
 8001cfc:	2000008c 	.word	0x2000008c
 8001d00:	2000017c 	.word	0x2000017c

08001d04 <etharp_output>:
{
 8001d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d06:	4604      	mov	r4, r0
 8001d08:	b085      	sub	sp, #20
 8001d0a:	460e      	mov	r6, r1
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8001d0c:	4601      	mov	r1, r0
 8001d0e:	6810      	ldr	r0, [r2, #0]
{
 8001d10:	4615      	mov	r5, r2
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8001d12:	f000 fa88 	bl	8002226 <ip4_addr_isbroadcast_u32>
 8001d16:	2800      	cmp	r0, #0
 8001d18:	d15b      	bne.n	8001dd2 <etharp_output+0xce>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8001d1a:	682b      	ldr	r3, [r5, #0]
 8001d1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d20:	2ae0      	cmp	r2, #224	; 0xe0
 8001d22:	d11d      	bne.n	8001d60 <etharp_output+0x5c>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8001d24:	2301      	movs	r3, #1
 8001d26:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8001d2a:	235e      	movs	r3, #94	; 0x5e
 8001d2c:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8001d30:	786b      	ldrb	r3, [r5, #1]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8001d32:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8001d36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d3a:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8001d3e:	78ab      	ldrb	r3, [r5, #2]
 8001d40:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8001d44:	78eb      	ldrb	r3, [r5, #3]
 8001d46:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 8001d4a:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8001d4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d50:	9200      	str	r2, [sp, #0]
 8001d52:	4631      	mov	r1, r6
 8001d54:	f104 0225 	add.w	r2, r4, #37	; 0x25
 8001d58:	4620      	mov	r0, r4
 8001d5a:	f003 f9ef 	bl	800513c <ethernet_output>
 8001d5e:	e01f      	b.n	8001da0 <etharp_output+0x9c>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8001d60:	6862      	ldr	r2, [r4, #4]
 8001d62:	68a1      	ldr	r1, [r4, #8]
 8001d64:	405a      	eors	r2, r3
 8001d66:	420a      	tst	r2, r1
 8001d68:	d008      	beq.n	8001d7c <etharp_output+0x78>
        !ip4_addr_islinklocal(ipaddr)) {
 8001d6a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8001d6c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d003      	beq.n	8001d7c <etharp_output+0x78>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8001d74:	68e3      	ldr	r3, [r4, #12]
 8001d76:	b373      	cbz	r3, 8001dd6 <etharp_output+0xd2>
            dst_addr = netif_ip4_gw(netif);
 8001d78:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8001d7c:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <etharp_output+0xd8>)
 8001d7e:	4918      	ldr	r1, [pc, #96]	; (8001de0 <etharp_output+0xdc>)
 8001d80:	781a      	ldrb	r2, [r3, #0]
 8001d82:	2018      	movs	r0, #24
 8001d84:	fb00 1002 	mla	r0, r0, r2, r1
 8001d88:	7d01      	ldrb	r1, [r0, #20]
 8001d8a:	2901      	cmp	r1, #1
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	d909      	bls.n	8001da4 <etharp_output+0xa0>
 8001d90:	682f      	ldr	r7, [r5, #0]
 8001d92:	6843      	ldr	r3, [r0, #4]
 8001d94:	429f      	cmp	r7, r3
 8001d96:	d105      	bne.n	8001da4 <etharp_output+0xa0>
        return etharp_output_to_arp_index(netif, q, i);
 8001d98:	4631      	mov	r1, r6
 8001d9a:	4620      	mov	r0, r4
 8001d9c:	f7ff fef8 	bl	8001b90 <etharp_output_to_arp_index>
}
 8001da0:	b005      	add	sp, #20
 8001da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001da4:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <etharp_output+0xdc>)
{
 8001da6:	2200      	movs	r2, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8001da8:	7d18      	ldrb	r0, [r3, #20]
 8001daa:	2801      	cmp	r0, #1
 8001dac:	d906      	bls.n	8001dbc <etharp_output+0xb8>
 8001dae:	682f      	ldr	r7, [r5, #0]
 8001db0:	6858      	ldr	r0, [r3, #4]
 8001db2:	4287      	cmp	r7, r0
 8001db4:	d102      	bne.n	8001dbc <etharp_output+0xb8>
        ETHARP_SET_HINT(netif, i);
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	700a      	strb	r2, [r1, #0]
 8001dba:	e7ed      	b.n	8001d98 <etharp_output+0x94>
 8001dbc:	3201      	adds	r2, #1
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8001dbe:	2a0a      	cmp	r2, #10
 8001dc0:	f103 0318 	add.w	r3, r3, #24
 8001dc4:	d1f0      	bne.n	8001da8 <etharp_output+0xa4>
    return etharp_query(netif, dst_addr, q);
 8001dc6:	4632      	mov	r2, r6
 8001dc8:	4629      	mov	r1, r5
 8001dca:	4620      	mov	r0, r4
 8001dcc:	f7ff ff1e 	bl	8001c0c <etharp_query>
 8001dd0:	e7e6      	b.n	8001da0 <etharp_output+0x9c>
    dest = (const struct eth_addr *)&ethbroadcast;
 8001dd2:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <etharp_output+0xe0>)
 8001dd4:	e7ba      	b.n	8001d4c <etharp_output+0x48>
            return ERR_RTE;
 8001dd6:	f06f 0003 	mvn.w	r0, #3
 8001dda:	e7e1      	b.n	8001da0 <etharp_output+0x9c>
 8001ddc:	2000017c 	.word	0x2000017c
 8001de0:	2000008c 	.word	0x2000008c
 8001de4:	08006308 	.word	0x08006308

08001de8 <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 8001de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dea:	4604      	mov	r4, r0
 8001dec:	b087      	sub	sp, #28
 8001dee:	460f      	mov	r7, r1
 8001df0:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8001df2:	2124      	movs	r1, #36	; 0x24
 8001df4:	2200      	movs	r2, #0
 8001df6:	2001      	movs	r0, #1
 8001df8:	f000 ff54 	bl	8002ca4 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8001dfc:	4605      	mov	r5, r0
 8001dfe:	b350      	cbz	r0, 8001e56 <icmp_send_response.isra.0+0x6e>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8001e00:	6822      	ldr	r2, [r4, #0]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8001e02:	6844      	ldr	r4, [r0, #4]
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	7123      	strb	r3, [r4, #4]
 8001e08:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8001e0a:	71a3      	strb	r3, [r4, #6]
 8001e0c:	71e3      	strb	r3, [r4, #7]
  icmphdr->type = type;
 8001e0e:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 8001e10:	7066      	strb	r6, [r4, #1]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8001e12:	4613      	mov	r3, r2
 8001e14:	f104 0108 	add.w	r1, r4, #8
 8001e18:	f102 001c 	add.w	r0, r2, #28
 8001e1c:	f853 6b04 	ldr.w	r6, [r3], #4
 8001e20:	f841 6b04 	str.w	r6, [r1], #4
 8001e24:	4283      	cmp	r3, r0
 8001e26:	d1f9      	bne.n	8001e1c <icmp_send_response.isra.0+0x34>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8001e28:	ae06      	add	r6, sp, #24
 8001e2a:	68d3      	ldr	r3, [r2, #12]
 8001e2c:	f846 3d04 	str.w	r3, [r6, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8001e30:	4630      	mov	r0, r6
 8001e32:	f000 f8a1 	bl	8001f78 <ip4_route>
#endif
  if (netif != NULL) {
 8001e36:	b158      	cbz	r0, 8001e50 <icmp_send_response.isra.0+0x68>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8001e38:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8001e3a:	2301      	movs	r3, #1
    icmphdr->chksum = 0;
 8001e3c:	70a1      	strb	r1, [r4, #2]
 8001e3e:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8001e40:	4632      	mov	r2, r6
 8001e42:	9002      	str	r0, [sp, #8]
 8001e44:	e88d 000a 	stmia.w	sp, {r1, r3}
 8001e48:	4628      	mov	r0, r5
 8001e4a:	23ff      	movs	r3, #255	; 0xff
 8001e4c:	f000 f9da 	bl	8002204 <ip4_output_if>
  }
  pbuf_free(q);
 8001e50:	4628      	mov	r0, r5
 8001e52:	f000 feff 	bl	8002c54 <pbuf_free>
}
 8001e56:	b007      	add	sp, #28
 8001e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001e5c <icmp_input>:
{
 8001e5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  iphdr_in = ip4_current_header();
 8001e60:	4b3e      	ldr	r3, [pc, #248]	; (8001f5c <icmp_input+0x100>)
 8001e62:	f8d3 a008 	ldr.w	sl, [r3, #8]
  hlen = IPH_HL(iphdr_in) * 4;
 8001e66:	f89a 5000 	ldrb.w	r5, [sl]
 8001e6a:	f005 050f 	and.w	r5, r5, #15
 8001e6e:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 8001e70:	2d13      	cmp	r5, #19
{
 8001e72:	4604      	mov	r4, r0
 8001e74:	4688      	mov	r8, r1
 8001e76:	461f      	mov	r7, r3
  if (hlen < IP_HLEN) {
 8001e78:	d92c      	bls.n	8001ed4 <icmp_input+0x78>
  if (p->len < sizeof(u16_t)*2) {
 8001e7a:	8942      	ldrh	r2, [r0, #10]
 8001e7c:	2a03      	cmp	r2, #3
 8001e7e:	d929      	bls.n	8001ed4 <icmp_input+0x78>
  type = *((u8_t *)p->payload);
 8001e80:	6842      	ldr	r2, [r0, #4]
  switch (type) {
 8001e82:	7812      	ldrb	r2, [r2, #0]
 8001e84:	2a08      	cmp	r2, #8
 8001e86:	d125      	bne.n	8001ed4 <icmp_input+0x78>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8001e88:	6958      	ldr	r0, [r3, #20]
 8001e8a:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001e8e:	2ae0      	cmp	r2, #224	; 0xe0
 8001e90:	d020      	beq.n	8001ed4 <icmp_input+0x78>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8001e92:	6819      	ldr	r1, [r3, #0]
 8001e94:	f000 f9c7 	bl	8002226 <ip4_addr_isbroadcast_u32>
 8001e98:	4606      	mov	r6, r0
 8001e9a:	b9d8      	cbnz	r0, 8001ed4 <icmp_input+0x78>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8001e9c:	8923      	ldrh	r3, [r4, #8]
 8001e9e:	2b07      	cmp	r3, #7
 8001ea0:	d918      	bls.n	8001ed4 <icmp_input+0x78>
    if (pbuf_header(p, (hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8001ea2:	f105 010e 	add.w	r1, r5, #14
 8001ea6:	4620      	mov	r0, r4
  hlen = IPH_HL(iphdr_in) * 4;
 8001ea8:	fa0f f985 	sxth.w	r9, r5
    if (pbuf_header(p, (hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8001eac:	f000 fec4 	bl	8002c38 <pbuf_header>
 8001eb0:	2800      	cmp	r0, #0
 8001eb2:	d049      	beq.n	8001f48 <icmp_input+0xec>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8001eb4:	8921      	ldrh	r1, [r4, #8]
 8001eb6:	4429      	add	r1, r5
 8001eb8:	4632      	mov	r2, r6
 8001eba:	b289      	uxth	r1, r1
 8001ebc:	2002      	movs	r0, #2
 8001ebe:	f000 fef1 	bl	8002ca4 <pbuf_alloc>
      if (r == NULL) {
 8001ec2:	4606      	mov	r6, r0
 8001ec4:	b130      	cbz	r0, 8001ed4 <icmp_input+0x78>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8001ec6:	8942      	ldrh	r2, [r0, #10]
 8001ec8:	f105 0308 	add.w	r3, r5, #8
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d207      	bcs.n	8001ee0 <icmp_input+0x84>
        pbuf_free(r);
 8001ed0:	f000 fec0 	bl	8002c54 <pbuf_free>
  pbuf_free(p);
 8001ed4:	4620      	mov	r0, r4
}
 8001ed6:	b004      	add	sp, #16
 8001ed8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pbuf_free(p);
 8001edc:	f000 beba 	b.w	8002c54 <pbuf_free>
      MEMCPY(r->payload, iphdr_in, hlen);
 8001ee0:	4651      	mov	r1, sl
 8001ee2:	462a      	mov	r2, r5
 8001ee4:	6840      	ldr	r0, [r0, #4]
 8001ee6:	f003 fd72 	bl	80059ce <memcpy>
      if (pbuf_header(r, -hlen)) {
 8001eea:	4269      	negs	r1, r5
 8001eec:	4630      	mov	r0, r6
 8001eee:	f000 fea3 	bl	8002c38 <pbuf_header>
 8001ef2:	b108      	cbz	r0, 8001ef8 <icmp_input+0x9c>
        pbuf_free(r);
 8001ef4:	4630      	mov	r0, r6
 8001ef6:	e7eb      	b.n	8001ed0 <icmp_input+0x74>
      if (pbuf_copy(r, p) != ERR_OK) {
 8001ef8:	4621      	mov	r1, r4
 8001efa:	4630      	mov	r0, r6
 8001efc:	f000 ffaa 	bl	8002e54 <pbuf_copy>
 8001f00:	2800      	cmp	r0, #0
 8001f02:	d1f7      	bne.n	8001ef4 <icmp_input+0x98>
      pbuf_free(p);
 8001f04:	4620      	mov	r0, r4
 8001f06:	f000 fea5 	bl	8002c54 <pbuf_free>
 8001f0a:	4634      	mov	r4, r6
    if (pbuf_header(p, hlen)) {
 8001f0c:	4649      	mov	r1, r9
 8001f0e:	4620      	mov	r0, r4
    iecho = (struct icmp_echo_hdr *)p->payload;
 8001f10:	6865      	ldr	r5, [r4, #4]
    if (pbuf_header(p, hlen)) {
 8001f12:	f000 fe91 	bl	8002c38 <pbuf_header>
 8001f16:	4602      	mov	r2, r0
 8001f18:	2800      	cmp	r0, #0
 8001f1a:	d1db      	bne.n	8001ed4 <icmp_input+0x78>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8001f1c:	6861      	ldr	r1, [r4, #4]
      ip4_addr_copy(iphdr->src, *src);
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	60cb      	str	r3, [r1, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	610b      	str	r3, [r1, #16]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8001f26:	23ff      	movs	r3, #255	; 0xff
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8001f28:	7028      	strb	r0, [r5, #0]
      iecho->chksum = 0;
 8001f2a:	70a8      	strb	r0, [r5, #2]
 8001f2c:	70e8      	strb	r0, [r5, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8001f2e:	720b      	strb	r3, [r1, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8001f30:	7288      	strb	r0, [r1, #10]
 8001f32:	72c8      	strb	r0, [r1, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8001f34:	2101      	movs	r1, #1
 8001f36:	9101      	str	r1, [sp, #4]
 8001f38:	9000      	str	r0, [sp, #0]
 8001f3a:	f8cd 8008 	str.w	r8, [sp, #8]
 8001f3e:	4908      	ldr	r1, [pc, #32]	; (8001f60 <icmp_input+0x104>)
 8001f40:	4620      	mov	r0, r4
 8001f42:	f000 f95f 	bl	8002204 <ip4_output_if>
 8001f46:	e7c5      	b.n	8001ed4 <icmp_input+0x78>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8001f48:	f5c5 417f 	rsb	r1, r5, #65280	; 0xff00
 8001f4c:	31f2      	adds	r1, #242	; 0xf2
 8001f4e:	b209      	sxth	r1, r1
 8001f50:	4620      	mov	r0, r4
 8001f52:	f000 fe71 	bl	8002c38 <pbuf_header>
 8001f56:	2800      	cmp	r0, #0
 8001f58:	d1bc      	bne.n	8001ed4 <icmp_input+0x78>
 8001f5a:	e7d7      	b.n	8001f0c <icmp_input+0xb0>
 8001f5c:	20000204 	.word	0x20000204
 8001f60:	20000218 	.word	0x20000218

08001f64 <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 8001f64:	460a      	mov	r2, r1
 8001f66:	3004      	adds	r0, #4
 8001f68:	2103      	movs	r1, #3
 8001f6a:	f7ff bf3d 	b.w	8001de8 <icmp_send_response.isra.0>

08001f6e <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 8001f6e:	460a      	mov	r2, r1
 8001f70:	3004      	adds	r0, #4
 8001f72:	210b      	movs	r1, #11
 8001f74:	f7ff bf38 	b.w	8001de8 <icmp_send_response.isra.0>

08001f78 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8001f78:	b530      	push	{r4, r5, lr}
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8001f7a:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <ip4_route+0x50>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	b96b      	cbnz	r3, 8001f9c <ip4_route+0x24>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8001f80:	4a12      	ldr	r2, [pc, #72]	; (8001fcc <ip4_route+0x54>)
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	b1ea      	cbz	r2, 8001fc2 <ip4_route+0x4a>
 8001f86:	f892 102b 	ldrb.w	r1, [r2, #43]	; 0x2b
 8001f8a:	f001 0105 	and.w	r1, r1, #5
 8001f8e:	2905      	cmp	r1, #5
 8001f90:	d117      	bne.n	8001fc2 <ip4_route+0x4a>
 8001f92:	6851      	ldr	r1, [r2, #4]
 8001f94:	2900      	cmp	r1, #0
 8001f96:	bf18      	it	ne
 8001f98:	4613      	movne	r3, r2
 8001f9a:	e012      	b.n	8001fc2 <ip4_route+0x4a>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8001f9c:	f893 402b 	ldrb.w	r4, [r3, #43]	; 0x2b
 8001fa0:	f004 0205 	and.w	r2, r4, #5
 8001fa4:	2a05      	cmp	r2, #5
 8001fa6:	d1e9      	bne.n	8001f7c <ip4_route+0x4>
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	2a00      	cmp	r2, #0
 8001fac:	d0e6      	beq.n	8001f7c <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8001fae:	6801      	ldr	r1, [r0, #0]
 8001fb0:	689d      	ldr	r5, [r3, #8]
 8001fb2:	404a      	eors	r2, r1
 8001fb4:	422a      	tst	r2, r5
 8001fb6:	d004      	beq.n	8001fc2 <ip4_route+0x4a>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8001fb8:	07a2      	lsls	r2, r4, #30
 8001fba:	d4df      	bmi.n	8001f7c <ip4_route+0x4>
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	4291      	cmp	r1, r2
 8001fc0:	d1dc      	bne.n	8001f7c <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	bd30      	pop	{r4, r5, pc}
 8001fc6:	bf00      	nop
 8001fc8:	200036e8 	.word	0x200036e8
 8001fcc:	200036ec 	.word	0x200036ec

08001fd0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8001fd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8001fd4:	6847      	ldr	r7, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 8001fd6:	f897 9000 	ldrb.w	r9, [r7]
 8001fda:	ea4f 1319 	mov.w	r3, r9, lsr #4
 8001fde:	2b04      	cmp	r3, #4
{
 8001fe0:	4605      	mov	r5, r0
 8001fe2:	4688      	mov	r8, r1
  if (IPH_V(iphdr) != 4) {
 8001fe4:	d005      	beq.n	8001ff2 <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8001fe6:	4628      	mov	r0, r5
 8001fe8:	f000 fe34 	bl	8002c54 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8001fec:	2000      	movs	r0, #0
 8001fee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8001ff2:	8878      	ldrh	r0, [r7, #2]
 8001ff4:	f7ff fc44 	bl	8001880 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 8001ff8:	892b      	ldrh	r3, [r5, #8]
  iphdr_hlen = IPH_HL(iphdr);
 8001ffa:	f009 090f 	and.w	r9, r9, #15
  if (iphdr_len < p->tot_len) {
 8001ffe:	4283      	cmp	r3, r0
  iphdr_hlen *= 4;
 8002000:	ea4f 0989 	mov.w	r9, r9, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8002004:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 8002006:	d903      	bls.n	8002010 <ip4_input+0x40>
    pbuf_realloc(p, iphdr_len);
 8002008:	4601      	mov	r1, r0
 800200a:	4628      	mov	r0, r5
 800200c:	f000 fed6 	bl	8002dbc <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8002010:	896b      	ldrh	r3, [r5, #10]
 8002012:	454b      	cmp	r3, r9
 8002014:	d3e7      	bcc.n	8001fe6 <ip4_input+0x16>
 8002016:	892b      	ldrh	r3, [r5, #8]
 8002018:	42a3      	cmp	r3, r4
 800201a:	d3e4      	bcc.n	8001fe6 <ip4_input+0x16>
 800201c:	f1b9 0f13 	cmp.w	r9, #19
 8002020:	d9e1      	bls.n	8001fe6 <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4c47      	ldr	r4, [pc, #284]	; (8002144 <ip4_input+0x174>)
 8002026:	6163      	str	r3, [r4, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8002028:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	6122      	str	r2, [r4, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8002030:	2be0      	cmp	r3, #224	; 0xe0
 8002032:	d139      	bne.n	80020a8 <ip4_input+0xd8>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8002034:	f898 302b 	ldrb.w	r3, [r8, #43]	; 0x2b
 8002038:	07da      	lsls	r2, r3, #31
 800203a:	d503      	bpl.n	8002044 <ip4_input+0x74>
 800203c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d155      	bne.n	80020f0 <ip4_input+0x120>
      netif = NULL;
 8002044:	2600      	movs	r6, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8002046:	4641      	mov	r1, r8
 8002048:	6920      	ldr	r0, [r4, #16]
 800204a:	f000 f8ec 	bl	8002226 <ip4_addr_isbroadcast_u32>
 800204e:	2800      	cmp	r0, #0
 8002050:	d1c9      	bne.n	8001fe6 <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8002052:	6923      	ldr	r3, [r4, #16]
 8002054:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8002058:	2be0      	cmp	r3, #224	; 0xe0
 800205a:	d0c4      	beq.n	8001fe6 <ip4_input+0x16>
  if (netif == NULL) {
 800205c:	2e00      	cmp	r6, #0
 800205e:	d0c2      	beq.n	8001fe6 <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8002060:	88fb      	ldrh	r3, [r7, #6]
 8002062:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002066:	b133      	cbz	r3, 8002076 <ip4_input+0xa6>
    p = ip4_reass(p);
 8002068:	4628      	mov	r0, r5
 800206a:	f000 f985 	bl	8002378 <ip4_reass>
    if (p == NULL) {
 800206e:	4605      	mov	r5, r0
 8002070:	2800      	cmp	r0, #0
 8002072:	d0bb      	beq.n	8001fec <ip4_input+0x1c>
    iphdr = (struct ip_hdr *)p->payload;
 8002074:	6847      	ldr	r7, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 8002076:	60a7      	str	r7, [r4, #8]
  ip_data.current_input_netif = inp;
 8002078:	e884 0140 	stmia.w	r4, {r6, r8}
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800207c:	783b      	ldrb	r3, [r7, #0]
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	009b      	lsls	r3, r3, #2
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8002084:	f1c9 0100 	rsb	r1, r9, #0
 8002088:	4628      	mov	r0, r5
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800208a:	81a3      	strh	r3, [r4, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800208c:	f000 fdd4 	bl	8002c38 <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 8002090:	7a7b      	ldrb	r3, [r7, #9]
 8002092:	2b06      	cmp	r3, #6
 8002094:	d03a      	beq.n	800210c <ip4_input+0x13c>
 8002096:	2b11      	cmp	r3, #17
 8002098:	d02c      	beq.n	80020f4 <ip4_input+0x124>
 800209a:	2b01      	cmp	r3, #1
 800209c:	d13b      	bne.n	8002116 <ip4_input+0x146>
      icmp_input(p, inp);
 800209e:	4641      	mov	r1, r8
 80020a0:	4628      	mov	r0, r5
 80020a2:	f7ff fedb 	bl	8001e5c <icmp_input>
      break;
 80020a6:	e029      	b.n	80020fc <ip4_input+0x12c>
        netif = netif_list;
 80020a8:	f8df b09c 	ldr.w	fp, [pc, #156]	; 8002148 <ip4_input+0x178>
 80020ac:	4646      	mov	r6, r8
 80020ae:	f04f 0a01 	mov.w	sl, #1
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80020b2:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
 80020b6:	07db      	lsls	r3, r3, #31
 80020b8:	d404      	bmi.n	80020c4 <ip4_input+0xf4>
      if (first) {
 80020ba:	f1ba 0f00 	cmp.w	sl, #0
 80020be:	d10d      	bne.n	80020dc <ip4_input+0x10c>
        netif = netif->next;
 80020c0:	6836      	ldr	r6, [r6, #0]
 80020c2:	e00d      	b.n	80020e0 <ip4_input+0x110>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80020c4:	6873      	ldr	r3, [r6, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f7      	beq.n	80020ba <ip4_input+0xea>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80020ca:	6960      	ldr	r0, [r4, #20]
 80020cc:	4283      	cmp	r3, r0
 80020ce:	d0ba      	beq.n	8002046 <ip4_input+0x76>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80020d0:	4631      	mov	r1, r6
 80020d2:	f000 f8a8 	bl	8002226 <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80020d6:	2800      	cmp	r0, #0
 80020d8:	d0ef      	beq.n	80020ba <ip4_input+0xea>
 80020da:	e7b4      	b.n	8002046 <ip4_input+0x76>
        netif = netif_list;
 80020dc:	f8db 6000 	ldr.w	r6, [fp]
      if (netif == inp) {
 80020e0:	4546      	cmp	r6, r8
        netif = netif->next;
 80020e2:	bf08      	it	eq
 80020e4:	6836      	ldreq	r6, [r6, #0]
 80020e6:	f04f 0a00 	mov.w	sl, #0
    } while (netif != NULL);
 80020ea:	2e00      	cmp	r6, #0
 80020ec:	d1e1      	bne.n	80020b2 <ip4_input+0xe2>
 80020ee:	e7a9      	b.n	8002044 <ip4_input+0x74>
 80020f0:	4646      	mov	r6, r8
 80020f2:	e7a8      	b.n	8002046 <ip4_input+0x76>
      udp_input(p, inp);
 80020f4:	4641      	mov	r1, r8
 80020f6:	4628      	mov	r0, r5
 80020f8:	f002 fe14 	bl	8004d24 <udp_input>
  ip_data.current_netif = NULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	6023      	str	r3, [r4, #0]
  ip_data.current_input_netif = NULL;
 8002100:	6063      	str	r3, [r4, #4]
  ip_data.current_ip4_header = NULL;
 8002102:	60a3      	str	r3, [r4, #8]
  ip_data.current_ip_header_tot_len = 0;
 8002104:	81a3      	strh	r3, [r4, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8002106:	6123      	str	r3, [r4, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8002108:	6163      	str	r3, [r4, #20]
  return ERR_OK;
 800210a:	e76f      	b.n	8001fec <ip4_input+0x1c>
      tcp_input(p, inp);
 800210c:	4641      	mov	r1, r8
 800210e:	4628      	mov	r0, r5
 8002110:	f001 fe9c 	bl	8003e4c <tcp_input>
      break;
 8002114:	e7f2      	b.n	80020fc <ip4_input+0x12c>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8002116:	4631      	mov	r1, r6
 8002118:	6960      	ldr	r0, [r4, #20]
 800211a:	f000 f884 	bl	8002226 <ip4_addr_isbroadcast_u32>
 800211e:	b968      	cbnz	r0, 800213c <ip4_input+0x16c>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8002120:	6963      	ldr	r3, [r4, #20]
 8002122:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8002126:	2be0      	cmp	r3, #224	; 0xe0
 8002128:	d008      	beq.n	800213c <ip4_input+0x16c>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800212a:	4649      	mov	r1, r9
 800212c:	4628      	mov	r0, r5
 800212e:	f000 fd8a 	bl	8002c46 <pbuf_header_force>
        p->payload = iphdr;
 8002132:	606f      	str	r7, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8002134:	2102      	movs	r1, #2
 8002136:	4628      	mov	r0, r5
 8002138:	f7ff ff14 	bl	8001f64 <icmp_dest_unreach>
      pbuf_free(p);
 800213c:	4628      	mov	r0, r5
 800213e:	f000 fd89 	bl	8002c54 <pbuf_free>
 8002142:	e7db      	b.n	80020fc <ip4_input+0x12c>
 8002144:	20000204 	.word	0x20000204
 8002148:	200036e8 	.word	0x200036e8

0800214c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800214c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8002150:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8002152:	4606      	mov	r6, r0
 8002154:	4689      	mov	r9, r1
 8002156:	469a      	mov	sl, r3
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8002158:	4615      	mov	r5, r2
 800215a:	2a00      	cmp	r2, #0
 800215c:	d03f      	beq.n	80021de <ip4_output_if_src+0x92>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800215e:	2114      	movs	r1, #20
 8002160:	f000 fd6a 	bl	8002c38 <pbuf_header>
 8002164:	4680      	mov	r8, r0
 8002166:	2800      	cmp	r0, #0
 8002168:	d145      	bne.n	80021f6 <ip4_output_if_src+0xaa>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 800216a:	6874      	ldr	r4, [r6, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
    IPH_PROTO_SET(iphdr, proto);
 800216c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 8002170:	f884 a008 	strb.w	sl, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 8002174:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(proto, ttl);
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8002176:	682b      	ldr	r3, [r5, #0]
 8002178:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800217a:	2345      	movs	r3, #69	; 0x45
 800217c:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 800217e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8002182:	7063      	strb	r3, [r4, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(tos, iphdr->_v_hl);
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8002184:	8930      	ldrh	r0, [r6, #8]
 8002186:	f7ff fb7b 	bl	8001880 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800218a:	f884 8006 	strb.w	r8, [r4, #6]
 800218e:	f884 8007 	strb.w	r8, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8002192:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8002200 <ip4_output_if_src+0xb4>
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8002196:	8060      	strh	r0, [r4, #2]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8002198:	f8b8 0000 	ldrh.w	r0, [r8]
 800219c:	f7ff fb70 	bl	8001880 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80021a0:	f8b8 3000 	ldrh.w	r3, [r8]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80021a4:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 80021a6:	3301      	adds	r3, #1
 80021a8:	f8a8 3000 	strh.w	r3, [r8]

    if (src == NULL) {
 80021ac:	f1b9 0f00 	cmp.w	r9, #0
 80021b0:	d112      	bne.n	80021d8 <ip4_output_if_src+0x8c>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80021b2:	4b12      	ldr	r3, [pc, #72]	; (80021fc <ip4_output_if_src+0xb0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80021b6:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80021b8:	2300      	movs	r3, #0
 80021ba:	72a3      	strb	r3, [r4, #10]
 80021bc:	72e3      	strb	r3, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80021be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80021c0:	b19b      	cbz	r3, 80021ea <ip4_output_if_src+0x9e>
 80021c2:	8932      	ldrh	r2, [r6, #8]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d910      	bls.n	80021ea <ip4_output_if_src+0x9e>
    return ip4_frag(p, netif, dest);
 80021c8:	462a      	mov	r2, r5
 80021ca:	4639      	mov	r1, r7
 80021cc:	4630      	mov	r0, r6
 80021ce:	f000 fa37 	bl	8002640 <ip4_frag>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 80021d2:	b002      	add	sp, #8
 80021d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ip4_addr_copy(iphdr->src, *src);
 80021d8:	f8d9 3000 	ldr.w	r3, [r9]
 80021dc:	e7eb      	b.n	80021b6 <ip4_output_if_src+0x6a>
    ip4_addr_copy(dest_addr, iphdr->dest);
 80021de:	6843      	ldr	r3, [r0, #4]
 80021e0:	ad02      	add	r5, sp, #8
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	f845 3d04 	str.w	r3, [r5, #-4]!
 80021e8:	e7e9      	b.n	80021be <ip4_output_if_src+0x72>
  return netif->output(netif, p, dest);
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	462a      	mov	r2, r5
 80021ee:	4631      	mov	r1, r6
 80021f0:	4638      	mov	r0, r7
 80021f2:	4798      	blx	r3
 80021f4:	e7ed      	b.n	80021d2 <ip4_output_if_src+0x86>
      return ERR_BUF;
 80021f6:	f06f 0001 	mvn.w	r0, #1
 80021fa:	e7ea      	b.n	80021d2 <ip4_output_if_src+0x86>
 80021fc:	08006274 	.word	0x08006274
 8002200:	2000017e 	.word	0x2000017e

08002204 <ip4_output_if>:
{
 8002204:	b4f0      	push	{r4, r5, r6, r7}
 8002206:	9c06      	ldr	r4, [sp, #24]
 8002208:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800220c:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8002210:	b11a      	cbz	r2, 800221a <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8002212:	b109      	cbz	r1, 8002218 <ip4_output_if+0x14>
 8002214:	680f      	ldr	r7, [r1, #0]
 8002216:	b907      	cbnz	r7, 800221a <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8002218:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800221a:	9406      	str	r4, [sp, #24]
 800221c:	9605      	str	r6, [sp, #20]
 800221e:	9504      	str	r5, [sp, #16]
}
 8002220:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8002222:	f7ff bf93 	b.w	800214c <ip4_output_if_src>

08002226 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8002226:	1e43      	subs	r3, r0, #1
 8002228:	3303      	adds	r3, #3
 800222a:	d811      	bhi.n	8002250 <ip4_addr_isbroadcast_u32+0x2a>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800222c:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 8002230:	f013 0302 	ands.w	r3, r3, #2
 8002234:	d00e      	beq.n	8002254 <ip4_addr_isbroadcast_u32+0x2e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8002236:	684a      	ldr	r2, [r1, #4]
 8002238:	4290      	cmp	r0, r2
 800223a:	d00b      	beq.n	8002254 <ip4_addr_isbroadcast_u32+0x2e>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800223c:	688b      	ldr	r3, [r1, #8]
 800223e:	4042      	eors	r2, r0
 8002240:	421a      	tst	r2, r3
 8002242:	d107      	bne.n	8002254 <ip4_addr_isbroadcast_u32+0x2e>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8002244:	43db      	mvns	r3, r3
 8002246:	4383      	bics	r3, r0
    return 1;
 8002248:	bf0c      	ite	eq
 800224a:	2001      	moveq	r0, #1
 800224c:	2000      	movne	r0, #0
 800224e:	4770      	bx	lr
 8002250:	2001      	movs	r0, #1
 8002252:	4770      	bx	lr
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8002254:	2000      	movs	r0, #0
  }
}
 8002256:	4770      	bx	lr

08002258 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8002258:	b510      	push	{r4, lr}
 800225a:	4604      	mov	r4, r0
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 800225c:	6940      	ldr	r0, [r0, #20]
 800225e:	b108      	cbz	r0, 8002264 <ipfrag_free_pbuf_custom+0xc>
    pbuf_free(pcr->original);
 8002260:	f000 fcf8 	bl	8002c54 <pbuf_free>
  memp_free(MEMP_FRAG_PBUF, p);
 8002264:	4621      	mov	r1, r4
 8002266:	2005      	movs	r0, #5
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
 8002268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 800226c:	f000 bbea 	b.w	8002a44 <memp_free>

08002270 <ip_reass_free_complete_datagram>:
{
 8002270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8002274:	6846      	ldr	r6, [r0, #4]
 8002276:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 8002278:	889a      	ldrh	r2, [r3, #4]
{
 800227a:	4604      	mov	r4, r0
 800227c:	460f      	mov	r7, r1
  if (iprh->start == 0) {
 800227e:	bb62      	cbnz	r2, 80022da <ip_reass_free_complete_datagram+0x6a>
    ipr->p = iprh->next_pbuf;
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	6042      	str	r2, [r0, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8002284:	f100 011c 	add.w	r1, r0, #28
 8002288:	f100 0208 	add.w	r2, r0, #8
 800228c:	f852 0b04 	ldr.w	r0, [r2], #4
 8002290:	f843 0b04 	str.w	r0, [r3], #4
 8002294:	428a      	cmp	r2, r1
 8002296:	d1f9      	bne.n	800228c <ip_reass_free_complete_datagram+0x1c>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8002298:	2101      	movs	r1, #1
 800229a:	4630      	mov	r0, r6
 800229c:	f7ff fe67 	bl	8001f6e <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80022a0:	4630      	mov	r0, r6
 80022a2:	f000 fdb4 	bl	8002e0e <pbuf_clen>
 80022a6:	4605      	mov	r5, r0
    pbuf_free(p);
 80022a8:	4630      	mov	r0, r6
 80022aa:	f000 fcd3 	bl	8002c54 <pbuf_free>
  p = ipr->p;
 80022ae:	6866      	ldr	r6, [r4, #4]
  while (p != NULL) {
 80022b0:	b9ae      	cbnz	r6, 80022de <ip_reass_free_complete_datagram+0x6e>
  if (reassdatagrams == ipr) {
 80022b2:	4a11      	ldr	r2, [pc, #68]	; (80022f8 <ip_reass_free_complete_datagram+0x88>)
 80022b4:	6813      	ldr	r3, [r2, #0]
 80022b6:	429c      	cmp	r4, r3
 80022b8:	6823      	ldr	r3, [r4, #0]
    prev->next = ipr->next;
 80022ba:	bf18      	it	ne
 80022bc:	603b      	strne	r3, [r7, #0]
  memp_free(MEMP_REASSDATA, ipr);
 80022be:	4621      	mov	r1, r4
 80022c0:	f04f 0004 	mov.w	r0, #4
    reassdatagrams = ipr->next;
 80022c4:	bf08      	it	eq
 80022c6:	6013      	streq	r3, [r2, #0]
  memp_free(MEMP_REASSDATA, ipr);
 80022c8:	f000 fbbc 	bl	8002a44 <memp_free>
  ip_reass_pbufcount -= pbufs_freed;
 80022cc:	4a0b      	ldr	r2, [pc, #44]	; (80022fc <ip_reass_free_complete_datagram+0x8c>)
 80022ce:	8813      	ldrh	r3, [r2, #0]
 80022d0:	1b5b      	subs	r3, r3, r5
 80022d2:	8013      	strh	r3, [r2, #0]
}
 80022d4:	4628      	mov	r0, r5
 80022d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  u16_t pbufs_freed = 0;
 80022da:	2500      	movs	r5, #0
 80022dc:	e7e7      	b.n	80022ae <ip_reass_free_complete_datagram+0x3e>
    iprh = (struct ip_reass_helper *)p->payload;
 80022de:	6873      	ldr	r3, [r6, #4]
    clen = pbuf_clen(pcur);
 80022e0:	4630      	mov	r0, r6
    p = iprh->next_pbuf;
 80022e2:	f8d3 8000 	ldr.w	r8, [r3]
    clen = pbuf_clen(pcur);
 80022e6:	f000 fd92 	bl	8002e0e <pbuf_clen>
    pbufs_freed += clen;
 80022ea:	4405      	add	r5, r0
    pbuf_free(pcur);
 80022ec:	4630      	mov	r0, r6
    pbufs_freed += clen;
 80022ee:	b2ad      	uxth	r5, r5
    pbuf_free(pcur);
 80022f0:	f000 fcb0 	bl	8002c54 <pbuf_free>
    p = iprh->next_pbuf;
 80022f4:	4646      	mov	r6, r8
 80022f6:	e7db      	b.n	80022b0 <ip_reass_free_complete_datagram+0x40>
 80022f8:	20000184 	.word	0x20000184
 80022fc:	20000180 	.word	0x20000180

08002300 <ip_reass_remove_oldest_datagram>:
{
 8002300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    r = reassdatagrams;
 8002304:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8002374 <ip_reass_remove_oldest_datagram+0x74>
{
 8002308:	4606      	mov	r6, r0
 800230a:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 800230c:	2500      	movs	r5, #0
    other_datagrams = 0;
 800230e:	2400      	movs	r4, #0
    r = reassdatagrams;
 8002310:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 8002314:	4621      	mov	r1, r4
    prev = NULL;
 8002316:	46a6      	mov	lr, r4
    oldest = NULL;
 8002318:	4620      	mov	r0, r4
    while (r != NULL) {
 800231a:	b953      	cbnz	r3, 8002332 <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 800231c:	b110      	cbz	r0, 8002324 <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800231e:	f7ff ffa7 	bl	8002270 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 8002322:	4405      	add	r5, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8002324:	42bd      	cmp	r5, r7
 8002326:	da01      	bge.n	800232c <ip_reass_remove_oldest_datagram+0x2c>
 8002328:	2c01      	cmp	r4, #1
 800232a:	dcf0      	bgt.n	800230e <ip_reass_remove_oldest_datagram+0xe>
}
 800232c:	4628      	mov	r0, r5
 800232e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8002332:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 8002336:	695a      	ldr	r2, [r3, #20]
 8002338:	4562      	cmp	r2, ip
 800233a:	d109      	bne.n	8002350 <ip_reass_remove_oldest_datagram+0x50>
 800233c:	f8d6 c010 	ldr.w	ip, [r6, #16]
 8002340:	699a      	ldr	r2, [r3, #24]
 8002342:	4562      	cmp	r2, ip
 8002344:	d104      	bne.n	8002350 <ip_reass_remove_oldest_datagram+0x50>
 8002346:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 800234a:	88b2      	ldrh	r2, [r6, #4]
 800234c:	4594      	cmp	ip, r2
 800234e:	d008      	beq.n	8002362 <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 8002350:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8002352:	b160      	cbz	r0, 800236e <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 8002354:	7fc2      	ldrb	r2, [r0, #31]
 8002356:	f893 c01f 	ldrb.w	ip, [r3, #31]
          oldest_prev = prev;
 800235a:	4594      	cmp	ip, r2
 800235c:	bf9c      	itt	ls
 800235e:	4671      	movls	r1, lr
 8002360:	4618      	movls	r0, r3
      if (r->next != NULL) {
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	2a00      	cmp	r2, #0
 8002366:	bf18      	it	ne
 8002368:	469e      	movne	lr, r3
 800236a:	4613      	mov	r3, r2
 800236c:	e7d5      	b.n	800231a <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 800236e:	4671      	mov	r1, lr
 8002370:	4618      	mov	r0, r3
 8002372:	e7f6      	b.n	8002362 <ip_reass_remove_oldest_datagram+0x62>
 8002374:	20000184 	.word	0x20000184

08002378 <ip4_reass>:
{
 8002378:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr*)p->payload;
 800237c:	6844      	ldr	r4, [r0, #4]
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800237e:	7823      	ldrb	r3, [r4, #0]
 8002380:	f003 030f 	and.w	r3, r3, #15
 8002384:	2b05      	cmp	r3, #5
{
 8002386:	4605      	mov	r5, r0
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8002388:	f040 808b 	bne.w	80024a2 <ip4_reass+0x12a>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800238c:	88e0      	ldrh	r0, [r4, #6]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800238e:	4eaa      	ldr	r6, [pc, #680]	; (8002638 <ip4_reass+0x2c0>)
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8002390:	f7ff fa76 	bl	8001880 <lwip_htons>
 8002394:	9001      	str	r0, [sp, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8002396:	8860      	ldrh	r0, [r4, #2]
 8002398:	f7ff fa72 	bl	8001880 <lwip_htons>
 800239c:	4683      	mov	fp, r0
  clen = pbuf_clen(p);
 800239e:	4628      	mov	r0, r5
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80023a0:	f894 8000 	ldrb.w	r8, [r4]
  clen = pbuf_clen(p);
 80023a4:	f000 fd33 	bl	8002e0e <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80023a8:	8833      	ldrh	r3, [r6, #0]
 80023aa:	4403      	add	r3, r0
 80023ac:	2b0a      	cmp	r3, #10
  clen = pbuf_clen(p);
 80023ae:	4681      	mov	r9, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80023b0:	dc6e      	bgt.n	8002490 <ip4_reass+0x118>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80023b2:	4fa2      	ldr	r7, [pc, #648]	; (800263c <ip4_reass+0x2c4>)
 80023b4:	f8d7 a000 	ldr.w	sl, [r7]
 80023b8:	f1ba 0f00 	cmp.w	sl, #0
 80023bc:	d176      	bne.n	80024ac <ip4_reass+0x134>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80023be:	2004      	movs	r0, #4
 80023c0:	f000 fb30 	bl	8002a24 <memp_malloc>
  if (ipr == NULL) {
 80023c4:	4682      	mov	sl, r0
 80023c6:	b958      	cbnz	r0, 80023e0 <ip4_reass+0x68>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80023c8:	4649      	mov	r1, r9
 80023ca:	4620      	mov	r0, r4
 80023cc:	f7ff ff98 	bl	8002300 <ip_reass_remove_oldest_datagram>
 80023d0:	4581      	cmp	r9, r0
 80023d2:	dc66      	bgt.n	80024a2 <ip4_reass+0x12a>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80023d4:	2004      	movs	r0, #4
 80023d6:	f000 fb25 	bl	8002a24 <memp_malloc>
    if (ipr == NULL)
 80023da:	4682      	mov	sl, r0
 80023dc:	2800      	cmp	r0, #0
 80023de:	d060      	beq.n	80024a2 <ip4_reass+0x12a>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80023e0:	2220      	movs	r2, #32
 80023e2:	2100      	movs	r1, #0
 80023e4:	4650      	mov	r0, sl
 80023e6:	f003 fafd 	bl	80059e4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80023ea:	2203      	movs	r2, #3
 80023ec:	f88a 201f 	strb.w	r2, [sl, #31]
  ipr->next = reassdatagrams;
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	f8ca 2000 	str.w	r2, [sl]
  reassdatagrams = ipr;
 80023f6:	f8c7 a000 	str.w	sl, [r7]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80023fa:	4622      	mov	r2, r4
 80023fc:	f10a 0108 	add.w	r1, sl, #8
 8002400:	f104 0014 	add.w	r0, r4, #20
 8002404:	f852 eb04 	ldr.w	lr, [r2], #4
 8002408:	f841 eb04 	str.w	lr, [r1], #4
 800240c:	4282      	cmp	r2, r0
 800240e:	d1f9      	bne.n	8002404 <ip4_reass+0x8c>
  ip_reass_pbufcount += clen;
 8002410:	8832      	ldrh	r2, [r6, #0]
 8002412:	4491      	add	r9, r2
 8002414:	f8a6 9000 	strh.w	r9, [r6]
  if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
 8002418:	88e2      	ldrh	r2, [r4, #6]
 800241a:	0693      	lsls	r3, r2, #26
 800241c:	d40e      	bmi.n	800243c <ip4_reass+0xc4>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800241e:	f89a 201e 	ldrb.w	r2, [sl, #30]
    ipr->datagram_len = offset + len;
 8002422:	9b01      	ldr	r3, [sp, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8002424:	f008 080f 	and.w	r8, r8, #15
 8002428:	ebab 0b88 	sub.w	fp, fp, r8, lsl #2
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800242c:	f042 0201 	orr.w	r2, r2, #1
    ipr->datagram_len = offset + len;
 8002430:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8002434:	f88a 201e 	strb.w	r2, [sl, #30]
    ipr->datagram_len = offset + len;
 8002438:	f8aa 301c 	strh.w	r3, [sl, #28]
  fraghdr = (struct ip_hdr*)new_p->payload;
 800243c:	f8d5 8004 	ldr.w	r8, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8002440:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8002444:	f7ff fa1c 	bl	8001880 <lwip_htons>
 8002448:	f898 4000 	ldrb.w	r4, [r8]
 800244c:	f004 040f 	and.w	r4, r4, #15
 8002450:	eba0 0484 	sub.w	r4, r0, r4, lsl #2
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8002454:	f8b8 0006 	ldrh.w	r0, [r8, #6]
 8002458:	f7ff fa12 	bl	8001880 <lwip_htons>
 800245c:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8002460:	00c0      	lsls	r0, r0, #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8002462:	b2a4      	uxth	r4, r4
  iprh = (struct ip_reass_helper*)new_p->payload;
 8002464:	6869      	ldr	r1, [r5, #4]
  for (q = ipr->p; q != NULL;) {
 8002466:	f8da c004 	ldr.w	ip, [sl, #4]
  iprh->start = offset;
 800246a:	8088      	strh	r0, [r1, #4]
  iprh->end = offset + len;
 800246c:	4404      	add	r4, r0
  iprh->next_pbuf = NULL;
 800246e:	2200      	movs	r2, #0
  iprh->end = offset + len;
 8002470:	b2a4      	uxth	r4, r4
  iprh->next_pbuf = NULL;
 8002472:	700a      	strb	r2, [r1, #0]
 8002474:	704a      	strb	r2, [r1, #1]
 8002476:	708a      	strb	r2, [r1, #2]
 8002478:	70ca      	strb	r2, [r1, #3]
  iprh->end = offset + len;
 800247a:	80cc      	strh	r4, [r1, #6]
  int valid = 1;
 800247c:	2301      	movs	r3, #1
  for (q = ipr->p; q != NULL;) {
 800247e:	f1bc 0f00 	cmp.w	ip, #0
 8002482:	d126      	bne.n	80024d2 <ip4_reass+0x15a>
    if (iprh_prev != NULL) {
 8002484:	2a00      	cmp	r2, #0
 8002486:	f040 8088 	bne.w	800259a <ip4_reass+0x222>
      ipr->p = new_p;
 800248a:	f8ca 5004 	str.w	r5, [sl, #4]
 800248e:	e031      	b.n	80024f4 <ip4_reass+0x17c>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8002490:	4601      	mov	r1, r0
 8002492:	4620      	mov	r0, r4
 8002494:	f7ff ff34 	bl	8002300 <ip_reass_remove_oldest_datagram>
 8002498:	b118      	cbz	r0, 80024a2 <ip4_reass+0x12a>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800249a:	8833      	ldrh	r3, [r6, #0]
 800249c:	444b      	add	r3, r9
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800249e:	2b0a      	cmp	r3, #10
 80024a0:	dd87      	ble.n	80023b2 <ip4_reass+0x3a>
  pbuf_free(p);
 80024a2:	4628      	mov	r0, r5
 80024a4:	f000 fbd6 	bl	8002c54 <pbuf_free>
  return NULL;
 80024a8:	2400      	movs	r4, #0
 80024aa:	e064      	b.n	8002576 <ip4_reass+0x1fe>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80024ac:	68e2      	ldr	r2, [r4, #12]
 80024ae:	f8da 1014 	ldr.w	r1, [sl, #20]
 80024b2:	4291      	cmp	r1, r2
 80024b4:	d10a      	bne.n	80024cc <ip4_reass+0x154>
 80024b6:	6922      	ldr	r2, [r4, #16]
 80024b8:	f8da 1018 	ldr.w	r1, [sl, #24]
 80024bc:	4291      	cmp	r1, r2
 80024be:	d105      	bne.n	80024cc <ip4_reass+0x154>
 80024c0:	f8ba 100c 	ldrh.w	r1, [sl, #12]
 80024c4:	88a2      	ldrh	r2, [r4, #4]
 80024c6:	4291      	cmp	r1, r2
 80024c8:	f000 8095 	beq.w	80025f6 <ip4_reass+0x27e>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80024cc:	f8da a000 	ldr.w	sl, [sl]
 80024d0:	e772      	b.n	80023b8 <ip4_reass+0x40>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 80024d2:	f8dc 8004 	ldr.w	r8, [ip, #4]
    if (iprh->start < iprh_tmp->start) {
 80024d6:	f8b8 9004 	ldrh.w	r9, [r8, #4]
 80024da:	4548      	cmp	r0, r9
 80024dc:	d24f      	bcs.n	800257e <ip4_reass+0x206>
      iprh->next_pbuf = q;
 80024de:	f8c1 c000 	str.w	ip, [r1]
      if (iprh_prev != NULL) {
 80024e2:	2a00      	cmp	r2, #0
 80024e4:	d0d1      	beq.n	800248a <ip4_reass+0x112>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80024e6:	f8b2 c006 	ldrh.w	ip, [r2, #6]
 80024ea:	4584      	cmp	ip, r0
 80024ec:	d864      	bhi.n	80025b8 <ip4_reass+0x240>
 80024ee:	454c      	cmp	r4, r9
 80024f0:	d862      	bhi.n	80025b8 <ip4_reass+0x240>
        iprh_prev->next_pbuf = new_p;
 80024f2:	6015      	str	r5, [r2, #0]
  if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
 80024f4:	f89a 201e 	ldrb.w	r2, [sl, #30]
 80024f8:	f012 0401 	ands.w	r4, r2, #1
 80024fc:	d03b      	beq.n	8002576 <ip4_reass+0x1fe>
    if (valid) {
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0d2      	beq.n	80024a8 <ip4_reass+0x130>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8002502:	f8da 4004 	ldr.w	r4, [sl, #4]
 8002506:	2c00      	cmp	r4, #0
 8002508:	d035      	beq.n	8002576 <ip4_reass+0x1fe>
 800250a:	6864      	ldr	r4, [r4, #4]
 800250c:	88a2      	ldrh	r2, [r4, #4]
 800250e:	2a00      	cmp	r2, #0
 8002510:	d1ca      	bne.n	80024a8 <ip4_reass+0x130>
        q = iprh->next_pbuf;
 8002512:	680a      	ldr	r2, [r1, #0]
        while (q != NULL) {
 8002514:	2a00      	cmp	r2, #0
 8002516:	d146      	bne.n	80025a6 <ip4_reass+0x22e>
    ipr->datagram_len += IP_HLEN;
 8002518:	f8ba 201c 	ldrh.w	r2, [sl, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800251c:	6825      	ldr	r5, [r4, #0]
    ipr->datagram_len += IP_HLEN;
 800251e:	3214      	adds	r2, #20
 8002520:	f8aa 201c 	strh.w	r2, [sl, #28]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8002524:	4621      	mov	r1, r4
 8002526:	f10a 0208 	add.w	r2, sl, #8
 800252a:	f10a 001c 	add.w	r0, sl, #28
 800252e:	f852 eb04 	ldr.w	lr, [r2], #4
 8002532:	f841 eb04 	str.w	lr, [r1], #4
 8002536:	4282      	cmp	r2, r0
 8002538:	d1f9      	bne.n	800252e <ip4_reass+0x1b6>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800253a:	f8ba 001c 	ldrh.w	r0, [sl, #28]
 800253e:	f7ff f99f 	bl	8001880 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 8002542:	2200      	movs	r2, #0
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8002544:	8060      	strh	r0, [r4, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8002546:	71a2      	strb	r2, [r4, #6]
 8002548:	71e2      	strb	r2, [r4, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800254a:	72a2      	strb	r2, [r4, #10]
 800254c:	72e2      	strb	r2, [r4, #11]
    p = ipr->p;
 800254e:	f8da 4004 	ldr.w	r4, [sl, #4]
    while (r != NULL) {
 8002552:	2d00      	cmp	r5, #0
 8002554:	d137      	bne.n	80025c6 <ip4_reass+0x24e>
    if (ipr == reassdatagrams) {
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	4592      	cmp	sl, r2
 800255a:	d146      	bne.n	80025ea <ip4_reass+0x272>
    reassdatagrams = ipr->next;
 800255c:	f8da 2000 	ldr.w	r2, [sl]
 8002560:	603a      	str	r2, [r7, #0]
  memp_free(MEMP_REASSDATA, ipr);
 8002562:	4651      	mov	r1, sl
 8002564:	2004      	movs	r0, #4
 8002566:	f000 fa6d 	bl	8002a44 <memp_free>
    ip_reass_pbufcount -= pbuf_clen(p);
 800256a:	4620      	mov	r0, r4
 800256c:	f000 fc4f 	bl	8002e0e <pbuf_clen>
 8002570:	8833      	ldrh	r3, [r6, #0]
 8002572:	1a18      	subs	r0, r3, r0
 8002574:	8030      	strh	r0, [r6, #0]
}
 8002576:	4620      	mov	r0, r4
 8002578:	b003      	add	sp, #12
 800257a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (iprh->start == iprh_tmp->start) {
 800257e:	d01b      	beq.n	80025b8 <ip4_reass+0x240>
    } else if (iprh->start < iprh_tmp->end) {
 8002580:	f8b8 c006 	ldrh.w	ip, [r8, #6]
 8002584:	4584      	cmp	ip, r0
 8002586:	d817      	bhi.n	80025b8 <ip4_reass+0x240>
      if (iprh_prev != NULL) {
 8002588:	b11a      	cbz	r2, 8002592 <ip4_reass+0x21a>
        if (iprh_prev->end != iprh_tmp->start) {
 800258a:	88d2      	ldrh	r2, [r2, #6]
          valid = 0;
 800258c:	454a      	cmp	r2, r9
 800258e:	bf18      	it	ne
 8002590:	2300      	movne	r3, #0
    q = iprh_tmp->next_pbuf;
 8002592:	f8d8 c000 	ldr.w	ip, [r8]
 8002596:	4642      	mov	r2, r8
 8002598:	e771      	b.n	800247e <ip4_reass+0x106>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800259a:	88d4      	ldrh	r4, [r2, #6]
      iprh_prev->next_pbuf = new_p;
 800259c:	6015      	str	r5, [r2, #0]
        valid = 0;
 800259e:	42a0      	cmp	r0, r4
 80025a0:	bf18      	it	ne
 80025a2:	2300      	movne	r3, #0
 80025a4:	e7a6      	b.n	80024f4 <ip4_reass+0x17c>
          iprh = (struct ip_reass_helper*)q->payload;
 80025a6:	6850      	ldr	r0, [r2, #4]
          if (iprh_prev->end != iprh->start) {
 80025a8:	88c9      	ldrh	r1, [r1, #6]
 80025aa:	8882      	ldrh	r2, [r0, #4]
 80025ac:	4291      	cmp	r1, r2
 80025ae:	f47f af7b 	bne.w	80024a8 <ip4_reass+0x130>
          q = iprh->next_pbuf;
 80025b2:	6802      	ldr	r2, [r0, #0]
 80025b4:	4601      	mov	r1, r0
 80025b6:	e7ad      	b.n	8002514 <ip4_reass+0x19c>
  ip_reass_pbufcount -= pbuf_clen(new_p);
 80025b8:	4628      	mov	r0, r5
 80025ba:	f000 fc28 	bl	8002e0e <pbuf_clen>
 80025be:	8833      	ldrh	r3, [r6, #0]
 80025c0:	1a18      	subs	r0, r3, r0
 80025c2:	8030      	strh	r0, [r6, #0]
 80025c4:	e76d      	b.n	80024a2 <ip4_reass+0x12a>
      iprh = (struct ip_reass_helper*)r->payload;
 80025c6:	f8d5 8004 	ldr.w	r8, [r5, #4]
      pbuf_header(r, -IP_HLEN);
 80025ca:	f06f 0113 	mvn.w	r1, #19
 80025ce:	4628      	mov	r0, r5
 80025d0:	f000 fb32 	bl	8002c38 <pbuf_header>
      pbuf_cat(p, r);
 80025d4:	4629      	mov	r1, r5
 80025d6:	4620      	mov	r0, r4
 80025d8:	f000 fc26 	bl	8002e28 <pbuf_cat>
      r = iprh->next_pbuf;
 80025dc:	f8d8 5000 	ldr.w	r5, [r8]
 80025e0:	e7b7      	b.n	8002552 <ip4_reass+0x1da>
        if (ipr_prev->next == ipr) {
 80025e2:	6811      	ldr	r1, [r2, #0]
 80025e4:	458a      	cmp	sl, r1
 80025e6:	d023      	beq.n	8002630 <ip4_reass+0x2b8>
 80025e8:	460a      	mov	r2, r1
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80025ea:	2a00      	cmp	r2, #0
 80025ec:	d1f9      	bne.n	80025e2 <ip4_reass+0x26a>
    prev->next = ipr->next;
 80025ee:	f8da 3000 	ldr.w	r3, [sl]
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	deff      	udf	#255	; 0xff
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80025f6:	88e0      	ldrh	r0, [r4, #6]
 80025f8:	f7ff f942 	bl	8001880 <lwip_htons>
 80025fc:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8002600:	2800      	cmp	r0, #0
 8002602:	f47f af05 	bne.w	8002410 <ip4_reass+0x98>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8002606:	f8ba 000e 	ldrh.w	r0, [sl, #14]
 800260a:	f7ff f939 	bl	8001880 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800260e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8002612:	2800      	cmp	r0, #0
 8002614:	f43f aefc 	beq.w	8002410 <ip4_reass+0x98>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8002618:	4622      	mov	r2, r4
 800261a:	f10a 0108 	add.w	r1, sl, #8
 800261e:	f104 0014 	add.w	r0, r4, #20
 8002622:	f852 eb04 	ldr.w	lr, [r2], #4
 8002626:	f841 eb04 	str.w	lr, [r1], #4
 800262a:	4282      	cmp	r2, r0
 800262c:	d1f9      	bne.n	8002622 <ip4_reass+0x2aa>
 800262e:	e6ef      	b.n	8002410 <ip4_reass+0x98>
    prev->next = ipr->next;
 8002630:	f8da 1000 	ldr.w	r1, [sl]
 8002634:	6011      	str	r1, [r2, #0]
 8002636:	e794      	b.n	8002562 <ip4_reass+0x1ea>
 8002638:	20000180 	.word	0x20000180
 800263c:	20000184 	.word	0x20000184

08002640 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8002640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8002644:	f8b1 8022 	ldrh.w	r8, [r1, #34]	; 0x22
{
 8002648:	b08b      	sub	sp, #44	; 0x2c
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800264a:	2308      	movs	r3, #8
 800264c:	f1a8 0814 	sub.w	r8, r8, #20
 8002650:	fb98 f8f3 	sdiv	r8, r8, r3
 8002654:	fa1f f388 	uxth.w	r3, r8
 8002658:	9306      	str	r3, [sp, #24]
#if !LWIP_NETIF_TX_SINGLE_PBUF
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif

  original_iphdr = (struct ip_hdr *)p->payload;
 800265a:	6843      	ldr	r3, [r0, #4]
{
 800265c:	9208      	str	r2, [sp, #32]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800265e:	781e      	ldrb	r6, [r3, #0]
  original_iphdr = (struct ip_hdr *)p->payload;
 8002660:	9302      	str	r3, [sp, #8]
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8002662:	f006 060f 	and.w	r6, r6, #15
 8002666:	00b6      	lsls	r6, r6, #2
 8002668:	2e14      	cmp	r6, #20
{
 800266a:	4607      	mov	r7, r0
 800266c:	468b      	mov	fp, r1
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800266e:	d004      	beq.n	800267a <ip4_frag+0x3a>
 8002670:	f06f 0005 	mvn.w	r0, #5
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 8002674:	b00b      	add	sp, #44	; 0x2c
 8002676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800267a:	9b02      	ldr	r3, [sp, #8]
 800267c:	88d8      	ldrh	r0, [r3, #6]
 800267e:	f7ff f8ff 	bl	8001880 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 8002682:	f3c0 030c 	ubfx	r3, r0, #0, #13
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8002686:	f410 5400 	ands.w	r4, r0, #8192	; 0x2000
  ofo = tmp & IP_OFFMASK;
 800268a:	9304      	str	r3, [sp, #16]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800268c:	d1f0      	bne.n	8002670 <ip4_frag+0x30>
  left = p->tot_len - IP_HLEN;
 800268e:	893d      	ldrh	r5, [r7, #8]
    fragsize = LWIP_MIN(left, nfb * 8);
 8002690:	fa1f f888 	uxth.w	r8, r8
  left = p->tot_len - IP_HLEN;
 8002694:	3d14      	subs	r5, #20
    fragsize = LWIP_MIN(left, nfb * 8);
 8002696:	ea4f 03c8 	mov.w	r3, r8, lsl #3
  left = p->tot_len - IP_HLEN;
 800269a:	b2ad      	uxth	r5, r5
    fragsize = LWIP_MIN(left, nfb * 8);
 800269c:	9307      	str	r3, [sp, #28]
  while (left) {
 800269e:	b90d      	cbnz	r5, 80026a4 <ip4_frag+0x64>
  return ERR_OK;
 80026a0:	4628      	mov	r0, r5
 80026a2:	e7e7      	b.n	8002674 <ip4_frag+0x34>
    fragsize = LWIP_MIN(left, nfb * 8);
 80026a4:	9b07      	ldr	r3, [sp, #28]
 80026a6:	42ab      	cmp	r3, r5
 80026a8:	bfa8      	it	ge
 80026aa:	462b      	movge	r3, r5
 80026ac:	b29b      	uxth	r3, r3
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80026ae:	2200      	movs	r2, #0
 80026b0:	2114      	movs	r1, #20
 80026b2:	2002      	movs	r0, #2
    fragsize = LWIP_MIN(left, nfb * 8);
 80026b4:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80026b6:	f000 faf5 	bl	8002ca4 <pbuf_alloc>
    if (rambuf == NULL) {
 80026ba:	4680      	mov	r8, r0
 80026bc:	b318      	cbz	r0, 8002706 <ip4_frag+0xc6>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80026be:	9b02      	ldr	r3, [sp, #8]
 80026c0:	6842      	ldr	r2, [r0, #4]
 80026c2:	4619      	mov	r1, r3
 80026c4:	3114      	adds	r1, #20
 80026c6:	f853 0b04 	ldr.w	r0, [r3], #4
 80026ca:	f842 0b04 	str.w	r0, [r2], #4
 80026ce:	428b      	cmp	r3, r1
 80026d0:	d1f9      	bne.n	80026c6 <ip4_frag+0x86>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80026d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
    left_to_copy = fragsize;
 80026d6:	f8dd 9014 	ldr.w	r9, [sp, #20]
    iphdr = (struct ip_hdr *)rambuf->payload;
 80026da:	9303      	str	r3, [sp, #12]
    while (left_to_copy) {
 80026dc:	f1b9 0f00 	cmp.w	r9, #0
 80026e0:	d038      	beq.n	8002754 <ip4_frag+0x114>
      u16_t plen = p->len - poff;
 80026e2:	897c      	ldrh	r4, [r7, #10]
 80026e4:	1ba4      	subs	r4, r4, r6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80026e6:	b2a4      	uxth	r4, r4
 80026e8:	454c      	cmp	r4, r9
 80026ea:	bf28      	it	cs
 80026ec:	464c      	movcs	r4, r9
      if (!newpbuflen) {
 80026ee:	b914      	cbnz	r4, 80026f6 <ip4_frag+0xb6>
        p = p->next;
 80026f0:	683f      	ldr	r7, [r7, #0]
        poff = 0;
 80026f2:	2600      	movs	r6, #0
 80026f4:	e7f2      	b.n	80026dc <ip4_frag+0x9c>
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 80026f6:	2005      	movs	r0, #5
 80026f8:	f000 f994 	bl	8002a24 <memp_malloc>
      if (pcr == NULL) {
 80026fc:	4682      	mov	sl, r0
 80026fe:	b928      	cbnz	r0, 800270c <ip4_frag+0xcc>
        pbuf_free(rambuf);
 8002700:	4640      	mov	r0, r8
 8002702:	f000 faa7 	bl	8002c54 <pbuf_free>
  return ERR_MEM;
 8002706:	f04f 30ff 	mov.w	r0, #4294967295
 800270a:	e7b3      	b.n	8002674 <ip4_frag+0x34>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800270c:	9401      	str	r4, [sp, #4]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4433      	add	r3, r6
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	2202      	movs	r2, #2
 8002716:	4603      	mov	r3, r0
 8002718:	4621      	mov	r1, r4
 800271a:	2004      	movs	r0, #4
 800271c:	f000 fa61 	bl	8002be2 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8002720:	b920      	cbnz	r0, 800272c <ip4_frag+0xec>
  memp_free(MEMP_FRAG_PBUF, p);
 8002722:	4651      	mov	r1, sl
 8002724:	2005      	movs	r0, #5
 8002726:	f000 f98d 	bl	8002a44 <memp_free>
 800272a:	e7e9      	b.n	8002700 <ip4_frag+0xc0>
 800272c:	9009      	str	r0, [sp, #36]	; 0x24
      pbuf_ref(p);
 800272e:	4638      	mov	r0, r7
 8002730:	f000 fb75 	bl	8002e1e <pbuf_ref>
      left_to_copy -= newpbuflen;
 8002734:	eba9 0904 	sub.w	r9, r9, r4
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8002738:	4b1d      	ldr	r3, [pc, #116]	; (80027b0 <ip4_frag+0x170>)
      pcr->original = p;
 800273a:	f8ca 7014 	str.w	r7, [sl, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800273e:	f8ca 3010 	str.w	r3, [sl, #16]
      pbuf_cat(rambuf, newpbuf);
 8002742:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002744:	4640      	mov	r0, r8
      left_to_copy -= newpbuflen;
 8002746:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 800274a:	f000 fb6d 	bl	8002e28 <pbuf_cat>
      if (left_to_copy) {
 800274e:	f1b9 0f00 	cmp.w	r9, #0
 8002752:	d1cd      	bne.n	80026f0 <ip4_frag+0xb0>
    tmp = (IP_OFFMASK & (ofo));
 8002754:	9b04      	ldr	r3, [sp, #16]
 8002756:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 800275a:	f8bb 3022 	ldrh.w	r3, [fp, #34]	; 0x22
 800275e:	3b13      	subs	r3, #19
    if (!last) {
 8002760:	429d      	cmp	r5, r3
      tmp = tmp | IP_MF;
 8002762:	bfa8      	it	ge
 8002764:	f440 5000 	orrge.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8002768:	f7ff f88a 	bl	8001880 <lwip_htons>
 800276c:	9b03      	ldr	r3, [sp, #12]
 800276e:	80d8      	strh	r0, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8002770:	9b05      	ldr	r3, [sp, #20]
 8002772:	f103 0014 	add.w	r0, r3, #20
 8002776:	b280      	uxth	r0, r0
 8002778:	f7ff f882 	bl	8001880 <lwip_htons>
 800277c:	9b03      	ldr	r3, [sp, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 800277e:	f04f 0200 	mov.w	r2, #0
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8002782:	8058      	strh	r0, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8002784:	729a      	strb	r2, [r3, #10]
 8002786:	72da      	strb	r2, [r3, #11]
    netif->output(netif, rambuf, dest);
 8002788:	4641      	mov	r1, r8
 800278a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800278e:	9a08      	ldr	r2, [sp, #32]
 8002790:	4658      	mov	r0, fp
 8002792:	4798      	blx	r3
    pbuf_free(rambuf);
 8002794:	4640      	mov	r0, r8
 8002796:	f000 fa5d 	bl	8002c54 <pbuf_free>
    left -= fragsize;
 800279a:	9b05      	ldr	r3, [sp, #20]
    ofo += nfb;
 800279c:	9a06      	ldr	r2, [sp, #24]
    left -= fragsize;
 800279e:	1aed      	subs	r5, r5, r3
    ofo += nfb;
 80027a0:	9b04      	ldr	r3, [sp, #16]
 80027a2:	4413      	add	r3, r2
    poff += newpbuflen;
 80027a4:	4426      	add	r6, r4
    ofo += nfb;
 80027a6:	b29b      	uxth	r3, r3
    poff += newpbuflen;
 80027a8:	b2b6      	uxth	r6, r6
    left -= fragsize;
 80027aa:	b2ad      	uxth	r5, r5
    ofo += nfb;
 80027ac:	9304      	str	r3, [sp, #16]
 80027ae:	e776      	b.n	800269e <ip4_frag+0x5e>
 80027b0:	08002259 	.word	0x08002259

080027b4 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80027b4:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <mem_init+0x30>)
 80027b6:	4a0c      	ldr	r2, [pc, #48]	; (80027e8 <mem_init+0x34>)
 80027b8:	f023 0303 	bic.w	r3, r3, #3
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
 80027bc:	2100      	movs	r1, #0
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80027be:	6013      	str	r3, [r2, #0]
  mem->prev = 0;
 80027c0:	8059      	strh	r1, [r3, #2]
  mem->next = MEM_SIZE_ALIGNED;
 80027c2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  mem->used = 0;
 80027c6:	7119      	strb	r1, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 80027c8:	4908      	ldr	r1, [pc, #32]	; (80027ec <mem_init+0x38>)
  mem->next = MEM_SIZE_ALIGNED;
 80027ca:	801a      	strh	r2, [r3, #0]
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 80027cc:	1898      	adds	r0, r3, r2
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 80027ce:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
  ram_end->prev = MEM_SIZE_ALIGNED;
 80027d2:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80027d6:	4a06      	ldr	r2, [pc, #24]	; (80027f0 <mem_init+0x3c>)
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 80027d8:	6008      	str	r0, [r1, #0]
  ram_end->used = 1;
 80027da:	2101      	movs	r1, #1
 80027dc:	f883 1644 	strb.w	r1, [r3, #1604]	; 0x644
  lfree = (struct mem *)(void *)ram;
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	4770      	bx	lr
 80027e4:	2000021f 	.word	0x2000021f
 80027e8:	2000018c 	.word	0x2000018c
 80027ec:	20000190 	.word	0x20000190
 80027f0:	20000188 	.word	0x20000188

080027f4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80027f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80027f6:	2800      	cmp	r0, #0
 80027f8:	d038      	beq.n	800286c <mem_free+0x78>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80027fa:	4b1d      	ldr	r3, [pc, #116]	; (8002870 <mem_free+0x7c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80027fe:	4298      	cmp	r0, r3
 8002800:	d334      	bcc.n	800286c <mem_free+0x78>
 8002802:	4a1c      	ldr	r2, [pc, #112]	; (8002874 <mem_free+0x80>)
 8002804:	6815      	ldr	r5, [r2, #0]
 8002806:	42a8      	cmp	r0, r5
 8002808:	d230      	bcs.n	800286c <mem_free+0x78>
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
  /* ... and is now unused. */
  mem->used = 0;
 800280a:	2200      	movs	r2, #0
 800280c:	f800 2c04 	strb.w	r2, [r0, #-4]

  if (mem < lfree) {
 8002810:	4a19      	ldr	r2, [pc, #100]	; (8002878 <mem_free+0x84>)
  nmem = (struct mem *)(void *)&ram[mem->next];
 8002812:	f830 4c08 	ldrh.w	r4, [r0, #-8]
  if (mem < lfree) {
 8002816:	6811      	ldr	r1, [r2, #0]
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8002818:	f1a0 0608 	sub.w	r6, r0, #8
  if (mem < lfree) {
 800281c:	428e      	cmp	r6, r1
  nmem = (struct mem *)(void *)&ram[mem->next];
 800281e:	eb03 0104 	add.w	r1, r3, r4
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8002822:	bf38      	it	cc
 8002824:	6016      	strcc	r6, [r2, #0]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8002826:	428e      	cmp	r6, r1
 8002828:	d00e      	beq.n	8002848 <mem_free+0x54>
 800282a:	790f      	ldrb	r7, [r1, #4]
 800282c:	b967      	cbnz	r7, 8002848 <mem_free+0x54>
 800282e:	428d      	cmp	r5, r1
 8002830:	d00a      	beq.n	8002848 <mem_free+0x54>
    if (lfree == nmem) {
 8002832:	6815      	ldr	r5, [r2, #0]
 8002834:	42a9      	cmp	r1, r5
    mem->next = nmem->next;
 8002836:	5b19      	ldrh	r1, [r3, r4]
 8002838:	f820 1c08 	strh.w	r1, [r0, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800283c:	5b19      	ldrh	r1, [r3, r4]
      lfree = mem;
 800283e:	bf08      	it	eq
 8002840:	6016      	streq	r6, [r2, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8002842:	4419      	add	r1, r3
 8002844:	1af4      	subs	r4, r6, r3
 8002846:	804c      	strh	r4, [r1, #2]
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8002848:	f830 1c06 	ldrh.w	r1, [r0, #-6]
 800284c:	185c      	adds	r4, r3, r1
  if (pmem != mem && pmem->used == 0) {
 800284e:	42a6      	cmp	r6, r4
 8002850:	d00c      	beq.n	800286c <mem_free+0x78>
 8002852:	7925      	ldrb	r5, [r4, #4]
 8002854:	b955      	cbnz	r5, 800286c <mem_free+0x78>
    if (lfree == mem) {
 8002856:	6815      	ldr	r5, [r2, #0]
 8002858:	42ae      	cmp	r6, r5
      lfree = pmem;
 800285a:	bf08      	it	eq
 800285c:	6014      	streq	r4, [r2, #0]
    pmem->next = mem->next;
 800285e:	f830 2c08 	ldrh.w	r2, [r0, #-8]
 8002862:	525a      	strh	r2, [r3, r1]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8002864:	f830 2c08 	ldrh.w	r2, [r0, #-8]
 8002868:	4413      	add	r3, r2
 800286a:	8059      	strh	r1, [r3, #2]
 800286c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800286e:	bf00      	nop
 8002870:	2000018c 	.word	0x2000018c
 8002874:	20000190 	.word	0x20000190
 8002878:	20000188 	.word	0x20000188

0800287c <mem_trim>:
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800287c:	3103      	adds	r1, #3
 800287e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8002882:	400b      	ands	r3, r1

  if (newsize < MIN_SIZE_ALIGNED) {
 8002884:	2b0b      	cmp	r3, #11
{
 8002886:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (newsize < MIN_SIZE_ALIGNED) {
 8002888:	d904      	bls.n	8002894 <mem_trim+0x18>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800288a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800288e:	d902      	bls.n	8002896 <mem_trim+0x1a>
    return NULL;
 8002890:	2000      	movs	r0, #0
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8002892:	bdf0      	pop	{r4, r5, r6, r7, pc}
    newsize = MIN_SIZE_ALIGNED;
 8002894:	230c      	movs	r3, #12
  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8002896:	4a21      	ldr	r2, [pc, #132]	; (800291c <mem_trim+0xa0>)
 8002898:	6812      	ldr	r2, [r2, #0]
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800289a:	4282      	cmp	r2, r0
 800289c:	d8f9      	bhi.n	8002892 <mem_trim+0x16>
 800289e:	4920      	ldr	r1, [pc, #128]	; (8002920 <mem_trim+0xa4>)
 80028a0:	6809      	ldr	r1, [r1, #0]
 80028a2:	4288      	cmp	r0, r1
 80028a4:	d2f5      	bcs.n	8002892 <mem_trim+0x16>
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 80028a6:	f1a0 0108 	sub.w	r1, r0, #8
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 80028aa:	f830 5c08 	ldrh.w	r5, [r0, #-8]
  ptr = (mem_size_t)((u8_t *)mem - ram);
 80028ae:	1a89      	subs	r1, r1, r2
 80028b0:	b289      	uxth	r1, r1
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 80028b2:	f1a5 0408 	sub.w	r4, r5, #8
 80028b6:	1a64      	subs	r4, r4, r1
 80028b8:	b2a4      	uxth	r4, r4
  if (newsize > size) {
 80028ba:	429c      	cmp	r4, r3
 80028bc:	d3e8      	bcc.n	8002890 <mem_trim+0x14>
  if (newsize == size) {
 80028be:	d0e8      	beq.n	8002892 <mem_trim+0x16>
  mem2 = (struct mem *)(void *)&ram[mem->next];
 80028c0:	1956      	adds	r6, r2, r5
  if (mem2->used == 0) {
 80028c2:	7937      	ldrb	r7, [r6, #4]
 80028c4:	b9c7      	cbnz	r7, 80028f8 <mem_trim+0x7c>
    next = mem2->next;
 80028c6:	5b57      	ldrh	r7, [r2, r5]
    if (lfree == mem2) {
 80028c8:	4d16      	ldr	r5, [pc, #88]	; (8002924 <mem_trim+0xa8>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80028ca:	f101 0408 	add.w	r4, r1, #8
 80028ce:	4423      	add	r3, r4
    if (lfree == mem2) {
 80028d0:	682c      	ldr	r4, [r5, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80028d2:	b29b      	uxth	r3, r3
    if (lfree == mem2) {
 80028d4:	42a6      	cmp	r6, r4
 80028d6:	eb02 0403 	add.w	r4, r2, r3
      lfree = (struct mem *)(void *)&ram[ptr2];
 80028da:	bf08      	it	eq
 80028dc:	602c      	streq	r4, [r5, #0]
    mem2->used = 0;
 80028de:	2500      	movs	r5, #0
 80028e0:	7125      	strb	r5, [r4, #4]
    mem2->next = next;
 80028e2:	52d7      	strh	r7, [r2, r3]
    mem2->prev = ptr;
 80028e4:	8061      	strh	r1, [r4, #2]
    mem->next = ptr2;
 80028e6:	f820 3c08 	strh.w	r3, [r0, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80028ea:	5ad1      	ldrh	r1, [r2, r3]
 80028ec:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 80028f0:	d0cf      	beq.n	8002892 <mem_trim+0x16>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80028f2:	440a      	add	r2, r1
 80028f4:	8053      	strh	r3, [r2, #2]
 80028f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80028f8:	f103 0614 	add.w	r6, r3, #20
 80028fc:	42a6      	cmp	r6, r4
 80028fe:	d8c8      	bhi.n	8002892 <mem_trim+0x16>
    if (mem2 < lfree) {
 8002900:	4e08      	ldr	r6, [pc, #32]	; (8002924 <mem_trim+0xa8>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8002902:	f101 0408 	add.w	r4, r1, #8
 8002906:	4423      	add	r3, r4
    if (mem2 < lfree) {
 8002908:	6837      	ldr	r7, [r6, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800290a:	b29b      	uxth	r3, r3
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800290c:	18d4      	adds	r4, r2, r3
    if (mem2 < lfree) {
 800290e:	42bc      	cmp	r4, r7
      lfree = mem2;
 8002910:	bf38      	it	cc
 8002912:	6034      	strcc	r4, [r6, #0]
    mem2->used = 0;
 8002914:	2600      	movs	r6, #0
 8002916:	7126      	strb	r6, [r4, #4]
    mem2->next = mem->next;
 8002918:	52d5      	strh	r5, [r2, r3]
 800291a:	e7e3      	b.n	80028e4 <mem_trim+0x68>
 800291c:	2000018c 	.word	0x2000018c
 8002920:	20000190 	.word	0x20000190
 8002924:	20000188 	.word	0x20000188

08002928 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8002928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800292c:	b148      	cbz	r0, 8002942 <mem_malloc+0x1a>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800292e:	3003      	adds	r0, #3
 8002930:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8002934:	4003      	ands	r3, r0

  if (size < MIN_SIZE_ALIGNED) {
 8002936:	2b0b      	cmp	r3, #11
 8002938:	d905      	bls.n	8002946 <mem_malloc+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
 800293a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800293e:	d903      	bls.n	8002948 <mem_malloc+0x20>
    return NULL;
 8002940:	2000      	movs	r0, #0
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
}
 8002942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    size = MIN_SIZE_ALIGNED;
 8002946:	230c      	movs	r3, #12
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8002948:	4c22      	ldr	r4, [pc, #136]	; (80029d4 <mem_malloc+0xac>)
 800294a:	4d23      	ldr	r5, [pc, #140]	; (80029d8 <mem_malloc+0xb0>)
 800294c:	6827      	ldr	r7, [r4, #0]
 800294e:	6829      	ldr	r1, [r5, #0]
 8002950:	1a7a      	subs	r2, r7, r1
 8002952:	b292      	uxth	r2, r2
 8002954:	f5c3 68c8 	rsb	r8, r3, #1600	; 0x640
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8002958:	f06f 0907 	mvn.w	r9, #7
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800295c:	4542      	cmp	r2, r8
 800295e:	d2ef      	bcs.n	8002940 <mem_malloc+0x18>
      mem = (struct mem *)(void *)&ram[ptr];
 8002960:	1888      	adds	r0, r1, r2
 8002962:	f831 e002 	ldrh.w	lr, [r1, r2]
      if ((!mem->used) &&
 8002966:	f890 c004 	ldrb.w	ip, [r0, #4]
 800296a:	f1bc 0f00 	cmp.w	ip, #0
 800296e:	d12e      	bne.n	80029ce <mem_malloc+0xa6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8002970:	eba9 0602 	sub.w	r6, r9, r2
 8002974:	4476      	add	r6, lr
      if ((!mem->used) &&
 8002976:	42b3      	cmp	r3, r6
 8002978:	d829      	bhi.n	80029ce <mem_malloc+0xa6>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800297a:	f103 0814 	add.w	r8, r3, #20
 800297e:	4546      	cmp	r6, r8
 8002980:	d31f      	bcc.n	80029c2 <mem_malloc+0x9a>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8002982:	3308      	adds	r3, #8
 8002984:	4413      	add	r3, r2
 8002986:	b29b      	uxth	r3, r3
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8002988:	18ce      	adds	r6, r1, r3
          mem2->used = 0;
 800298a:	f886 c004 	strb.w	ip, [r6, #4]
          mem2->next = mem->next;
 800298e:	f821 e003 	strh.w	lr, [r1, r3]
          mem2->prev = ptr;
 8002992:	8072      	strh	r2, [r6, #2]
          mem->used = 1;
 8002994:	2201      	movs	r2, #1
          mem->next = ptr2;
 8002996:	8003      	strh	r3, [r0, #0]
          mem->used = 1;
 8002998:	7102      	strb	r2, [r0, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800299a:	5aca      	ldrh	r2, [r1, r3]
 800299c:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
 80029a0:	d001      	beq.n	80029a6 <mem_malloc+0x7e>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80029a2:	4411      	add	r1, r2
 80029a4:	804b      	strh	r3, [r1, #2]
        if (mem == lfree) {
 80029a6:	4287      	cmp	r7, r0
 80029a8:	d108      	bne.n	80029bc <mem_malloc+0x94>
          while (cur->used && cur != ram_end) {
 80029aa:	4b0c      	ldr	r3, [pc, #48]	; (80029dc <mem_malloc+0xb4>)
            cur = (struct mem *)(void *)&ram[cur->next];
 80029ac:	6829      	ldr	r1, [r5, #0]
          while (cur->used && cur != ram_end) {
 80029ae:	681a      	ldr	r2, [r3, #0]
            cur = (struct mem *)(void *)&ram[cur->next];
 80029b0:	4603      	mov	r3, r0
          while (cur->used && cur != ram_end) {
 80029b2:	791d      	ldrb	r5, [r3, #4]
 80029b4:	b10d      	cbz	r5, 80029ba <mem_malloc+0x92>
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d106      	bne.n	80029c8 <mem_malloc+0xa0>
          lfree = cur;
 80029ba:	6023      	str	r3, [r4, #0]
        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 80029bc:	3008      	adds	r0, #8
 80029be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          mem->used = 1;
 80029c2:	2301      	movs	r3, #1
 80029c4:	7103      	strb	r3, [r0, #4]
 80029c6:	e7ee      	b.n	80029a6 <mem_malloc+0x7e>
            cur = (struct mem *)(void *)&ram[cur->next];
 80029c8:	881b      	ldrh	r3, [r3, #0]
 80029ca:	440b      	add	r3, r1
 80029cc:	e7f1      	b.n	80029b2 <mem_malloc+0x8a>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 80029ce:	4672      	mov	r2, lr
 80029d0:	e7c4      	b.n	800295c <mem_malloc+0x34>
 80029d2:	bf00      	nop
 80029d4:	20000188 	.word	0x20000188
 80029d8:	2000018c 	.word	0x2000018c
 80029dc:	20000190 	.word	0x20000190

080029e0 <memp_init_pool>:
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 80029e0:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 80029e2:	6881      	ldr	r1, [r0, #8]
{
 80029e4:	b530      	push	{r4, r5, lr}
  *desc->tab = NULL;
 80029e6:	2200      	movs	r2, #0
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 80029e8:	3303      	adds	r3, #3
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80029ea:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 80029ec:	600a      	str	r2, [r1, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 80029ee:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 80029f2:	42a2      	cmp	r2, r4
 80029f4:	db00      	blt.n	80029f8 <memp_init_pool+0x18>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80029f6:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 80029f8:	680d      	ldr	r5, [r1, #0]
 80029fa:	601d      	str	r5, [r3, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80029fc:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 80029fe:	600b      	str	r3, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8002a00:	3201      	adds	r2, #1
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8002a02:	442b      	add	r3, r5
 8002a04:	e7f5      	b.n	80029f2 <memp_init_pool+0x12>
	...

08002a08 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8002a08:	b538      	push	{r3, r4, r5, lr}
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
    memp_init_pool(memp_pools[i]);
 8002a0a:	4d05      	ldr	r5, [pc, #20]	; (8002a20 <memp_init+0x18>)
{
 8002a0c:	2400      	movs	r4, #0
    memp_init_pool(memp_pools[i]);
 8002a0e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8002a12:	3401      	adds	r4, #1
 8002a14:	f7ff ffe4 	bl	80029e0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8002a18:	2c08      	cmp	r4, #8
 8002a1a:	d1f8      	bne.n	8002a0e <memp_init+0x6>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8002a1c:	bd38      	pop	{r3, r4, r5, pc}
 8002a1e:	bf00      	nop
 8002a20:	080062d8 	.word	0x080062d8

08002a24 <memp_malloc>:
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8002a24:	2807      	cmp	r0, #7
 8002a26:	d808      	bhi.n	8002a3a <memp_malloc+0x16>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8002a28:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <memp_malloc+0x1c>)
 8002a2a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002a2e:	689b      	ldr	r3, [r3, #8]
  memp = *desc->tab;
 8002a30:	6818      	ldr	r0, [r3, #0]
  if (memp != NULL) {
 8002a32:	b118      	cbz	r0, 8002a3c <memp_malloc+0x18>
    *desc->tab = memp->next;
 8002a34:	6802      	ldr	r2, [r0, #0]
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	4770      	bx	lr
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8002a3a:	2000      	movs	r0, #0
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
}
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	080062d8 	.word	0x080062d8

08002a44 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8002a44:	2807      	cmp	r0, #7
 8002a46:	d807      	bhi.n	8002a58 <memp_free+0x14>

  if (mem == NULL) {
 8002a48:	b131      	cbz	r1, 8002a58 <memp_free+0x14>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8002a4a:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <memp_free+0x18>)
 8002a4c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002a50:	689b      	ldr	r3, [r3, #8]
  memp->next = *desc->tab;
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	600a      	str	r2, [r1, #0]
  *desc->tab = memp;
 8002a56:	6019      	str	r1, [r3, #0]
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	080062d8 	.word	0x080062d8

08002a60 <netif_issue_reports.part.0>:
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8002a60:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8002a64:	071b      	lsls	r3, r3, #28
netif_issue_reports(struct netif* netif, u8_t report_type)
 8002a66:	4601      	mov	r1, r0
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8002a68:	d502      	bpl.n	8002a70 <netif_issue_reports.part.0+0x10>
      etharp_gratuitous(netif);
 8002a6a:	3104      	adds	r1, #4
 8002a6c:	f7ff b880 	b.w	8001b70 <etharp_request>
 8002a70:	4770      	bx	lr

08002a72 <netif_init>:
{
 8002a72:	4770      	bx	lr

08002a74 <netif_set_ipaddr>:
{
 8002a74:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002a76:	4605      	mov	r5, r0
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8002a78:	460c      	mov	r4, r1
 8002a7a:	b1b9      	cbz	r1, 8002aac <netif_set_ipaddr+0x38>
 8002a7c:	680b      	ldr	r3, [r1, #0]
 8002a7e:	9301      	str	r3, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8002a80:	9a01      	ldr	r2, [sp, #4]
 8002a82:	686b      	ldr	r3, [r5, #4]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d00f      	beq.n	8002aa8 <netif_set_ipaddr+0x34>
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8002a88:	1d2e      	adds	r6, r5, #4
 8002a8a:	a901      	add	r1, sp, #4
 8002a8c:	4630      	mov	r0, r6
 8002a8e:	f000 fd49 	bl	8003524 <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8002a92:	a901      	add	r1, sp, #4
 8002a94:	4630      	mov	r0, r6
 8002a96:	f002 faef 	bl	8005078 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8002a9a:	b104      	cbz	r4, 8002a9e <netif_set_ipaddr+0x2a>
 8002a9c:	6824      	ldr	r4, [r4, #0]
 8002a9e:	606c      	str	r4, [r5, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8002aa0:	b114      	cbz	r4, 8002aa8 <netif_set_ipaddr+0x34>
 8002aa2:	4628      	mov	r0, r5
 8002aa4:	f7ff ffdc 	bl	8002a60 <netif_issue_reports.part.0>
}
 8002aa8:	b002      	add	sp, #8
 8002aaa:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8002aac:	4b01      	ldr	r3, [pc, #4]	; (8002ab4 <netif_set_ipaddr+0x40>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	e7e5      	b.n	8002a7e <netif_set_ipaddr+0xa>
 8002ab2:	bf00      	nop
 8002ab4:	08006274 	.word	0x08006274

08002ab8 <netif_set_addr>:
{
 8002ab8:	b570      	push	{r4, r5, r6, lr}
 8002aba:	4606      	mov	r6, r0
 8002abc:	4615      	mov	r5, r2
 8002abe:	461c      	mov	r4, r3
  if (ip4_addr_isany(ipaddr)) {
 8002ac0:	b109      	cbz	r1, 8002ac6 <netif_set_addr+0xe>
 8002ac2:	680b      	ldr	r3, [r1, #0]
 8002ac4:	b94b      	cbnz	r3, 8002ada <netif_set_addr+0x22>
    netif_set_ipaddr(netif, ipaddr);
 8002ac6:	4630      	mov	r0, r6
 8002ac8:	f7ff ffd4 	bl	8002a74 <netif_set_ipaddr>
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8002acc:	b105      	cbz	r5, 8002ad0 <netif_set_addr+0x18>
 8002ace:	682d      	ldr	r5, [r5, #0]
 8002ad0:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8002ad2:	b104      	cbz	r4, 8002ad6 <netif_set_addr+0x1e>
 8002ad4:	6824      	ldr	r4, [r4, #0]
 8002ad6:	60f4      	str	r4, [r6, #12]
 8002ad8:	bd70      	pop	{r4, r5, r6, pc}
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8002ada:	b102      	cbz	r2, 8002ade <netif_set_addr+0x26>
 8002adc:	6815      	ldr	r5, [r2, #0]
 8002ade:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8002ae0:	b104      	cbz	r4, 8002ae4 <netif_set_addr+0x2c>
 8002ae2:	6824      	ldr	r4, [r4, #0]
 8002ae4:	60f4      	str	r4, [r6, #12]
    netif_set_ipaddr(netif, ipaddr);
 8002ae6:	4630      	mov	r0, r6
}
 8002ae8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    netif_set_ipaddr(netif, ipaddr);
 8002aec:	f7ff bfc2 	b.w	8002a74 <netif_set_ipaddr>

08002af0 <netif_add>:
{
 8002af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8002af2:	2603      	movs	r6, #3
  netif->num = netif_num++;
 8002af4:	4f11      	ldr	r7, [pc, #68]	; (8002b3c <netif_add+0x4c>)
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8002af6:	f880 6020 	strb.w	r6, [r0, #32]
  netif->state = state;
 8002afa:	9e06      	ldr	r6, [sp, #24]
 8002afc:	61c6      	str	r6, [r0, #28]
  netif->num = netif_num++;
 8002afe:	783e      	ldrb	r6, [r7, #0]
 8002b00:	f880 602e 	strb.w	r6, [r0, #46]	; 0x2e
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8002b04:	2500      	movs	r5, #0
  netif->num = netif_num++;
 8002b06:	f106 0e01 	add.w	lr, r6, #1
  netif->input = input;
 8002b0a:	9e08      	ldr	r6, [sp, #32]
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8002b0c:	6045      	str	r5, [r0, #4]
{
 8002b0e:	4604      	mov	r4, r0
  ip_addr_set_zero_ip4(&netif->netmask);
 8002b10:	6085      	str	r5, [r0, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8002b12:	60c5      	str	r5, [r0, #12]
  netif->flags = 0;
 8002b14:	f880 502b 	strb.w	r5, [r0, #43]	; 0x2b
  netif->input = input;
 8002b18:	6106      	str	r6, [r0, #16]
  netif->num = netif_num++;
 8002b1a:	f887 e000 	strb.w	lr, [r7]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8002b1e:	f7ff ffcb 	bl	8002ab8 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8002b22:	4620      	mov	r0, r4
 8002b24:	9b07      	ldr	r3, [sp, #28]
 8002b26:	4798      	blx	r3
 8002b28:	b928      	cbnz	r0, 8002b36 <netif_add+0x46>
  netif->next = netif_list;
 8002b2a:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <netif_add+0x50>)
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 8002b30:	601c      	str	r4, [r3, #0]
}
 8002b32:	4620      	mov	r0, r4
 8002b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return NULL;
 8002b36:	462c      	mov	r4, r5
 8002b38:	e7fb      	b.n	8002b32 <netif_add+0x42>
 8002b3a:	bf00      	nop
 8002b3c:	200001b4 	.word	0x200001b4
 8002b40:	200036e8 	.word	0x200036e8

08002b44 <netif_set_default>:
  netif_default = netif;
 8002b44:	4b01      	ldr	r3, [pc, #4]	; (8002b4c <netif_set_default+0x8>)
 8002b46:	6018      	str	r0, [r3, #0]
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	200036ec 	.word	0x200036ec

08002b50 <netif_set_up>:
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8002b50:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
 8002b54:	07d1      	lsls	r1, r2, #31
 8002b56:	d409      	bmi.n	8002b6c <netif_set_up+0x1c>
    netif->flags |= NETIF_FLAG_UP;
 8002b58:	f042 0101 	orr.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8002b5c:	0752      	lsls	r2, r2, #29
    netif->flags |= NETIF_FLAG_UP;
 8002b5e:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8002b62:	d503      	bpl.n	8002b6c <netif_set_up+0x1c>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8002b64:	6843      	ldr	r3, [r0, #4]
 8002b66:	b10b      	cbz	r3, 8002b6c <netif_set_up+0x1c>
 8002b68:	f7ff bf7a 	b.w	8002a60 <netif_issue_reports.part.0>
 8002b6c:	4770      	bx	lr

08002b6e <netif_set_down>:
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  if (netif->flags & NETIF_FLAG_UP) {
 8002b6e:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8002b72:	07d9      	lsls	r1, r3, #31
 8002b74:	d507      	bpl.n	8002b86 <netif_set_down+0x18>
    netif->flags &= ~NETIF_FLAG_UP;
 8002b76:	f023 0101 	bic.w	r1, r3, #1
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8002b7a:	071b      	lsls	r3, r3, #28
    netif->flags &= ~NETIF_FLAG_UP;
 8002b7c:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8002b80:	d501      	bpl.n	8002b86 <netif_set_down+0x18>
      etharp_cleanup_netif(netif);
 8002b82:	f7fe bf4f 	b.w	8001a24 <etharp_cleanup_netif>
 8002b86:	4770      	bx	lr

08002b88 <pbuf_header_impl.part.0>:
  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
    return 0;
  }

  if (header_size_increment < 0) {
 8002b88:	2900      	cmp	r1, #0
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
 8002b8a:	b530      	push	{r4, r5, lr}
  if (header_size_increment < 0) {
 8002b8c:	da06      	bge.n	8002b9c <pbuf_header_impl.part.0+0x14>
    increment_magnitude = -header_size_increment;
 8002b8e:	424c      	negs	r4, r1
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8002b90:	8943      	ldrh	r3, [r0, #10]
    increment_magnitude = -header_size_increment;
 8002b92:	b2a4      	uxth	r4, r4
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8002b94:	42a3      	cmp	r3, r4
 8002b96:	d202      	bcs.n	8002b9e <pbuf_header_impl.part.0+0x16>
 8002b98:	2001      	movs	r0, #1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
}
 8002b9a:	bd30      	pop	{r4, r5, pc}
    increment_magnitude = header_size_increment;
 8002b9c:	b28c      	uxth	r4, r1
  type = p->type;
 8002b9e:	7b05      	ldrb	r5, [r0, #12]
  payload = p->payload;
 8002ba0:	6843      	ldr	r3, [r0, #4]
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8002ba2:	b10d      	cbz	r5, 8002ba8 <pbuf_header_impl.part.0+0x20>
 8002ba4:	2d03      	cmp	r5, #3
 8002ba6:	d10e      	bne.n	8002bc6 <pbuf_header_impl.part.0+0x3e>
    p->payload = (u8_t *)p->payload - header_size_increment;
 8002ba8:	1a5b      	subs	r3, r3, r1
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8002baa:	f100 0210 	add.w	r2, r0, #16
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d3f2      	bcc.n	8002b98 <pbuf_header_impl.part.0+0x10>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8002bb2:	6043      	str	r3, [r0, #4]
  p->len += header_size_increment;
 8002bb4:	8943      	ldrh	r3, [r0, #10]
 8002bb6:	b289      	uxth	r1, r1
 8002bb8:	440b      	add	r3, r1
 8002bba:	8143      	strh	r3, [r0, #10]
  p->tot_len += header_size_increment;
 8002bbc:	8903      	ldrh	r3, [r0, #8]
 8002bbe:	4419      	add	r1, r3
 8002bc0:	8101      	strh	r1, [r0, #8]
  return 0;
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	bd30      	pop	{r4, r5, pc}
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8002bc6:	3d01      	subs	r5, #1
 8002bc8:	2d01      	cmp	r5, #1
 8002bca:	d8e5      	bhi.n	8002b98 <pbuf_header_impl.part.0+0x10>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8002bcc:	2900      	cmp	r1, #0
 8002bce:	da04      	bge.n	8002bda <pbuf_header_impl.part.0+0x52>
 8002bd0:	8942      	ldrh	r2, [r0, #10]
 8002bd2:	42a2      	cmp	r2, r4
 8002bd4:	d3e0      	bcc.n	8002b98 <pbuf_header_impl.part.0+0x10>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8002bd6:	1a5b      	subs	r3, r3, r1
 8002bd8:	e7eb      	b.n	8002bb2 <pbuf_header_impl.part.0+0x2a>
    } else if ((header_size_increment > 0) && force) {
 8002bda:	d0dd      	beq.n	8002b98 <pbuf_header_impl.part.0+0x10>
 8002bdc:	2a00      	cmp	r2, #0
 8002bde:	d1fa      	bne.n	8002bd6 <pbuf_header_impl.part.0+0x4e>
 8002be0:	e7da      	b.n	8002b98 <pbuf_header_impl.part.0+0x10>

08002be2 <pbuf_alloced_custom>:
{
 8002be2:	b570      	push	{r4, r5, r6, lr}
 8002be4:	9d04      	ldr	r5, [sp, #16]
  switch (l) {
 8002be6:	2804      	cmp	r0, #4
 8002be8:	d824      	bhi.n	8002c34 <pbuf_alloced_custom+0x52>
 8002bea:	e8df f000 	tbb	[pc, r0]
 8002bee:	031f      	.short	0x031f
 8002bf0:	1d1b      	.short	0x1d1b
 8002bf2:	1d          	.byte	0x1d
 8002bf3:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8002bf4:	2422      	movs	r4, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8002bf6:	3403      	adds	r4, #3
 8002bf8:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8002bfc:	f024 0403 	bic.w	r4, r4, #3
 8002c00:	190e      	adds	r6, r1, r4
 8002c02:	4286      	cmp	r6, r0
 8002c04:	f04f 0000 	mov.w	r0, #0
 8002c08:	d815      	bhi.n	8002c36 <pbuf_alloced_custom+0x54>
  p->pbuf.next = NULL;
 8002c0a:	6018      	str	r0, [r3, #0]
  if (payload_mem != NULL) {
 8002c0c:	b185      	cbz	r5, 8002c30 <pbuf_alloced_custom+0x4e>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8002c0e:	442c      	add	r4, r5
 8002c10:	605c      	str	r4, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8002c12:	2002      	movs	r0, #2
  p->pbuf.type = type;
 8002c14:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8002c16:	2201      	movs	r2, #1
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8002c18:	7358      	strb	r0, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8002c1a:	8119      	strh	r1, [r3, #8]
 8002c1c:	8159      	strh	r1, [r3, #10]
  p->pbuf.ref = 1;
 8002c1e:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8002c20:	4618      	mov	r0, r3
 8002c22:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8002c24:	240e      	movs	r4, #14
    break;
 8002c26:	e7e6      	b.n	8002bf6 <pbuf_alloced_custom+0x14>
    offset = 0;
 8002c28:	2400      	movs	r4, #0
    break;
 8002c2a:	e7e4      	b.n	8002bf6 <pbuf_alloced_custom+0x14>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8002c2c:	2436      	movs	r4, #54	; 0x36
 8002c2e:	e7e2      	b.n	8002bf6 <pbuf_alloced_custom+0x14>
    p->pbuf.payload = NULL;
 8002c30:	605d      	str	r5, [r3, #4]
 8002c32:	e7ee      	b.n	8002c12 <pbuf_alloced_custom+0x30>
    return NULL;
 8002c34:	2000      	movs	r0, #0
}
 8002c36:	bd70      	pop	{r4, r5, r6, pc}

08002c38 <pbuf_header>:
  if ((header_size_increment == 0) || (p == NULL)) {
 8002c38:	b119      	cbz	r1, 8002c42 <pbuf_header+0xa>
 8002c3a:	b110      	cbz	r0, 8002c42 <pbuf_header+0xa>
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f7ff bfa3 	b.w	8002b88 <pbuf_header_impl.part.0>
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 0);
}
 8002c42:	2000      	movs	r0, #0
 8002c44:	4770      	bx	lr

08002c46 <pbuf_header_force>:
  if ((header_size_increment == 0) || (p == NULL)) {
 8002c46:	b119      	cbz	r1, 8002c50 <pbuf_header_force+0xa>
 8002c48:	b110      	cbz	r0, 8002c50 <pbuf_header_force+0xa>
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f7ff bf9c 	b.w	8002b88 <pbuf_header_impl.part.0>
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 1);
}
 8002c50:	2000      	movs	r0, #0
 8002c52:	4770      	bx	lr

08002c54 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8002c54:	b538      	push	{r3, r4, r5, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8002c56:	4601      	mov	r1, r0
 8002c58:	b310      	cbz	r0, 8002ca0 <pbuf_free+0x4c>
 8002c5a:	2400      	movs	r4, #0
 8002c5c:	b2e0      	uxtb	r0, r4
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8002c5e:	b901      	cbnz	r1, 8002c62 <pbuf_free+0xe>
 8002c60:	bd38      	pop	{r3, r4, r5, pc}
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8002c62:	89cb      	ldrh	r3, [r1, #14]
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	81cb      	strh	r3, [r1, #14]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8002c6a:	b9cb      	cbnz	r3, 8002ca0 <pbuf_free+0x4c>
      q = p->next;
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8002c6c:	7b4b      	ldrb	r3, [r1, #13]
      q = p->next;
 8002c6e:	680d      	ldr	r5, [r1, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8002c70:	079b      	lsls	r3, r3, #30
 8002c72:	d505      	bpl.n	8002c80 <pbuf_free+0x2c>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
        pc->custom_free_function(p);
 8002c74:	690b      	ldr	r3, [r1, #16]
 8002c76:	4608      	mov	r0, r1
 8002c78:	4798      	blx	r3
 8002c7a:	3401      	adds	r4, #1
          mem_free(p);
        }
      }
      count++;
      /* proceed to next pbuf */
      p = q;
 8002c7c:	4629      	mov	r1, r5
 8002c7e:	e7ed      	b.n	8002c5c <pbuf_free+0x8>
      type = p->type;
 8002c80:	7b0b      	ldrb	r3, [r1, #12]
        if (type == PBUF_POOL) {
 8002c82:	2b03      	cmp	r3, #3
 8002c84:	d103      	bne.n	8002c8e <pbuf_free+0x3a>
          memp_free(MEMP_PBUF_POOL, p);
 8002c86:	2007      	movs	r0, #7
          memp_free(MEMP_PBUF, p);
 8002c88:	f7ff fedc 	bl	8002a44 <memp_free>
 8002c8c:	e7f5      	b.n	8002c7a <pbuf_free+0x26>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d801      	bhi.n	8002c98 <pbuf_free+0x44>
          memp_free(MEMP_PBUF, p);
 8002c94:	2006      	movs	r0, #6
 8002c96:	e7f7      	b.n	8002c88 <pbuf_free+0x34>
          mem_free(p);
 8002c98:	4608      	mov	r0, r1
 8002c9a:	f7ff fdab 	bl	80027f4 <mem_free>
 8002c9e:	e7ec      	b.n	8002c7a <pbuf_free+0x26>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8002ca0:	bd38      	pop	{r3, r4, r5, pc}
	...

08002ca4 <pbuf_alloc>:
{
 8002ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ca8:	460e      	mov	r6, r1
 8002caa:	4617      	mov	r7, r2
  switch (layer) {
 8002cac:	2804      	cmp	r0, #4
 8002cae:	d845      	bhi.n	8002d3c <pbuf_alloc+0x98>
 8002cb0:	e8df f000 	tbb	[pc, r0]
 8002cb4:	0c0a030e 	.word	0x0c0a030e
 8002cb8:	0c          	.byte	0x0c
 8002cb9:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8002cba:	2522      	movs	r5, #34	; 0x22
  switch (type) {
 8002cbc:	2f03      	cmp	r7, #3
 8002cbe:	d83d      	bhi.n	8002d3c <pbuf_alloc+0x98>
 8002cc0:	e8df f007 	tbb	[pc, r7]
 8002cc4:	086d6d54 	.word	0x086d6d54
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8002cc8:	250e      	movs	r5, #14
    break;
 8002cca:	e7f7      	b.n	8002cbc <pbuf_alloc+0x18>
    offset = 0;
 8002ccc:	2500      	movs	r5, #0
    break;
 8002cce:	e7f5      	b.n	8002cbc <pbuf_alloc+0x18>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8002cd0:	2536      	movs	r5, #54	; 0x36
 8002cd2:	e7f3      	b.n	8002cbc <pbuf_alloc+0x18>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8002cd4:	2007      	movs	r0, #7
 8002cd6:	f7ff fea5 	bl	8002a24 <memp_malloc>
    if (p == NULL) {
 8002cda:	4604      	mov	r4, r0
 8002cdc:	b928      	cbnz	r0, 8002cea <pbuf_alloc+0x46>
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8002cde:	4b36      	ldr	r3, [pc, #216]	; (8002db8 <pbuf_alloc+0x114>)
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	701a      	strb	r2, [r3, #0]
}
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    p->type = type;
 8002cea:	2203      	movs	r2, #3
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8002cec:	1943      	adds	r3, r0, r5
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8002cee:	4415      	add	r5, r2
 8002cf0:	f025 0503 	bic.w	r5, r5, #3
 8002cf4:	f5c5 7514 	rsb	r5, r5, #592	; 0x250
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8002cf8:	3313      	adds	r3, #19
 8002cfa:	f023 0303 	bic.w	r3, r3, #3
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8002cfe:	42b5      	cmp	r5, r6
 8002d00:	bf28      	it	cs
 8002d02:	4635      	movcs	r5, r6
    p->next = NULL;
 8002d04:	2700      	movs	r7, #0
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8002d06:	6043      	str	r3, [r0, #4]
    p->ref = 1;
 8002d08:	2301      	movs	r3, #1
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8002d0a:	8145      	strh	r5, [r0, #10]
    p->type = type;
 8002d0c:	7302      	strb	r2, [r0, #12]
    p->next = NULL;
 8002d0e:	6007      	str	r7, [r0, #0]
    p->tot_len = length;
 8002d10:	8106      	strh	r6, [r0, #8]
    p->ref = 1;
 8002d12:	81c3      	strh	r3, [r0, #14]
    rem_len = length - p->len;
 8002d14:	1b75      	subs	r5, r6, r5
    while (rem_len > 0) {
 8002d16:	4681      	mov	r9, r0
      q->type = type;
 8002d18:	4690      	mov	r8, r2
    while (rem_len > 0) {
 8002d1a:	2d00      	cmp	r5, #0
 8002d1c:	dc04      	bgt.n	8002d28 <pbuf_alloc+0x84>
  p->ref = 1;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	81e3      	strh	r3, [r4, #14]
  p->flags = 0;
 8002d22:	2300      	movs	r3, #0
 8002d24:	7363      	strb	r3, [r4, #13]
  return p;
 8002d26:	e7dd      	b.n	8002ce4 <pbuf_alloc+0x40>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8002d28:	2007      	movs	r0, #7
 8002d2a:	f7ff fe7b 	bl	8002a24 <memp_malloc>
      if (q == NULL) {
 8002d2e:	b938      	cbnz	r0, 8002d40 <pbuf_alloc+0x9c>
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8002d30:	4b21      	ldr	r3, [pc, #132]	; (8002db8 <pbuf_alloc+0x114>)
 8002d32:	2201      	movs	r2, #1
        pbuf_free(p);
 8002d34:	4620      	mov	r0, r4
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8002d36:	701a      	strb	r2, [r3, #0]
        pbuf_free(p);
 8002d38:	f7ff ff8c 	bl	8002c54 <pbuf_free>
    return NULL;
 8002d3c:	2400      	movs	r4, #0
 8002d3e:	e7d1      	b.n	8002ce4 <pbuf_alloc+0x40>
      q->tot_len = (u16_t)rem_len;
 8002d40:	b2ab      	uxth	r3, r5
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8002d42:	f100 0210 	add.w	r2, r0, #16
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8002d46:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
      q->type = type;
 8002d4a:	f880 800c 	strb.w	r8, [r0, #12]
      q->flags = 0;
 8002d4e:	7347      	strb	r7, [r0, #13]
      q->next = NULL;
 8002d50:	6007      	str	r7, [r0, #0]
      r->next = q;
 8002d52:	f8c9 0000 	str.w	r0, [r9]
      q->tot_len = (u16_t)rem_len;
 8002d56:	8103      	strh	r3, [r0, #8]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8002d58:	6042      	str	r2, [r0, #4]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8002d5a:	bf28      	it	cs
 8002d5c:	f44f 7314 	movcs.w	r3, #592	; 0x250
      q->ref = 1;
 8002d60:	2201      	movs	r2, #1
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8002d62:	8143      	strh	r3, [r0, #10]
      q->ref = 1;
 8002d64:	81c2      	strh	r2, [r0, #14]
      rem_len -= q->len;
 8002d66:	1aed      	subs	r5, r5, r3
 8002d68:	4681      	mov	r9, r0
 8002d6a:	e7d6      	b.n	8002d1a <pbuf_alloc+0x76>
    p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
 8002d6c:	f105 0013 	add.w	r0, r5, #19
 8002d70:	1cf3      	adds	r3, r6, #3
 8002d72:	f023 0303 	bic.w	r3, r3, #3
 8002d76:	f020 0003 	bic.w	r0, r0, #3
 8002d7a:	4418      	add	r0, r3
 8002d7c:	b280      	uxth	r0, r0
 8002d7e:	f7ff fdd3 	bl	8002928 <mem_malloc>
    if (p == NULL) {
 8002d82:	4604      	mov	r4, r0
 8002d84:	2800      	cmp	r0, #0
 8002d86:	d0d9      	beq.n	8002d3c <pbuf_alloc+0x98>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8002d88:	4405      	add	r5, r0
 8002d8a:	3513      	adds	r5, #19
    p->next = NULL;
 8002d8c:	2300      	movs	r3, #0
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8002d8e:	f025 0503 	bic.w	r5, r5, #3
 8002d92:	6045      	str	r5, [r0, #4]
    p->len = p->tot_len = length;
 8002d94:	8106      	strh	r6, [r0, #8]
 8002d96:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 8002d98:	6003      	str	r3, [r0, #0]
    p->type = type;
 8002d9a:	7303      	strb	r3, [r0, #12]
    break;
 8002d9c:	e7bf      	b.n	8002d1e <pbuf_alloc+0x7a>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8002d9e:	2006      	movs	r0, #6
 8002da0:	f7ff fe40 	bl	8002a24 <memp_malloc>
    if (p == NULL) {
 8002da4:	4604      	mov	r4, r0
 8002da6:	2800      	cmp	r0, #0
 8002da8:	d0c8      	beq.n	8002d3c <pbuf_alloc+0x98>
    p->payload = NULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 8002dae:	8106      	strh	r6, [r0, #8]
 8002db0:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 8002db2:	6003      	str	r3, [r0, #0]
    p->type = type;
 8002db4:	7307      	strb	r7, [r0, #12]
    break;
 8002db6:	e7b2      	b.n	8002d1e <pbuf_alloc+0x7a>
 8002db8:	200036f0 	.word	0x200036f0

08002dbc <pbuf_realloc>:
{
 8002dbc:	b538      	push	{r3, r4, r5, lr}
  if (new_len >= p->tot_len) {
 8002dbe:	8903      	ldrh	r3, [r0, #8]
 8002dc0:	428b      	cmp	r3, r1
{
 8002dc2:	4604      	mov	r4, r0
  if (new_len >= p->tot_len) {
 8002dc4:	d91b      	bls.n	8002dfe <pbuf_realloc+0x42>
 8002dc6:	460d      	mov	r5, r1
    q->tot_len += (u16_t)grow;
 8002dc8:	1acb      	subs	r3, r1, r3
  while (rem_len > q->len) {
 8002dca:	8961      	ldrh	r1, [r4, #10]
 8002dcc:	428d      	cmp	r5, r1
 8002dce:	d817      	bhi.n	8002e00 <pbuf_realloc+0x44>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8002dd0:	7b23      	ldrb	r3, [r4, #12]
 8002dd2:	b963      	cbnz	r3, 8002dee <pbuf_realloc+0x32>
 8002dd4:	428d      	cmp	r5, r1
 8002dd6:	d00a      	beq.n	8002dee <pbuf_realloc+0x32>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8002dd8:	7b63      	ldrb	r3, [r4, #13]
 8002dda:	079b      	lsls	r3, r3, #30
 8002ddc:	d407      	bmi.n	8002dee <pbuf_realloc+0x32>
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8002dde:	6861      	ldr	r1, [r4, #4]
 8002de0:	1b09      	subs	r1, r1, r4
 8002de2:	4429      	add	r1, r5
 8002de4:	4620      	mov	r0, r4
 8002de6:	b289      	uxth	r1, r1
 8002de8:	f7ff fd48 	bl	800287c <mem_trim>
 8002dec:	4604      	mov	r4, r0
  if (q->next != NULL) {
 8002dee:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 8002df0:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8002df2:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8002df4:	b108      	cbz	r0, 8002dfa <pbuf_realloc+0x3e>
    pbuf_free(q->next);
 8002df6:	f7ff ff2d 	bl	8002c54 <pbuf_free>
  q->next = NULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	6023      	str	r3, [r4, #0]
 8002dfe:	bd38      	pop	{r3, r4, r5, pc}
    q->tot_len += (u16_t)grow;
 8002e00:	8922      	ldrh	r2, [r4, #8]
    rem_len -= q->len;
 8002e02:	1a6d      	subs	r5, r5, r1
    q->tot_len += (u16_t)grow;
 8002e04:	441a      	add	r2, r3
 8002e06:	8122      	strh	r2, [r4, #8]
    rem_len -= q->len;
 8002e08:	b2ad      	uxth	r5, r5
    q = q->next;
 8002e0a:	6824      	ldr	r4, [r4, #0]
 8002e0c:	e7dd      	b.n	8002dca <pbuf_realloc+0xe>

08002e0e <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8002e0e:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 8002e10:	2200      	movs	r2, #0
 8002e12:	b290      	uxth	r0, r2
 8002e14:	3201      	adds	r2, #1
 8002e16:	b903      	cbnz	r3, 8002e1a <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 8002e18:	4770      	bx	lr
    p = p->next;
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	e7f9      	b.n	8002e12 <pbuf_clen+0x4>

08002e1e <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 8002e1e:	b110      	cbz	r0, 8002e26 <pbuf_ref+0x8>
    SYS_ARCH_INC(p->ref, 1);
 8002e20:	89c3      	ldrh	r3, [r0, #14]
 8002e22:	3301      	adds	r3, #1
 8002e24:	81c3      	strh	r3, [r0, #14]
 8002e26:	4770      	bx	lr

08002e28 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8002e28:	b510      	push	{r4, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8002e2a:	b150      	cbz	r0, 8002e42 <pbuf_cat+0x1a>
 8002e2c:	b909      	cbnz	r1, 8002e32 <pbuf_cat+0xa>
 8002e2e:	bd10      	pop	{r4, pc}
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8002e30:	4620      	mov	r0, r4
 8002e32:	8903      	ldrh	r3, [r0, #8]
 8002e34:	890a      	ldrh	r2, [r1, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8002e36:	6804      	ldr	r4, [r0, #0]
    p->tot_len += t->tot_len;
 8002e38:	4413      	add	r3, r2
 8002e3a:	8103      	strh	r3, [r0, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8002e3c:	2c00      	cmp	r4, #0
 8002e3e:	d1f7      	bne.n	8002e30 <pbuf_cat+0x8>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8002e40:	6001      	str	r1, [r0, #0]
 8002e42:	bd10      	pop	{r4, pc}

08002e44 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8002e44:	b510      	push	{r4, lr}
  pbuf_cat(h, t);
 8002e46:	f7ff ffef 	bl	8002e28 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8002e4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pbuf_ref(t);
 8002e4e:	4608      	mov	r0, r1
 8002e50:	f7ff bfe5 	b.w	8002e1e <pbuf_ref>

08002e54 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8002e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e58:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8002e5a:	4605      	mov	r5, r0
 8002e5c:	b918      	cbnz	r0, 8002e66 <pbuf_copy+0x12>
 8002e5e:	f06f 000f 	mvn.w	r0, #15
 8002e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e66:	2900      	cmp	r1, #0
 8002e68:	d0f9      	beq.n	8002e5e <pbuf_copy+0xa>
 8002e6a:	8902      	ldrh	r2, [r0, #8]
 8002e6c:	890b      	ldrh	r3, [r1, #8]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d3f5      	bcc.n	8002e5e <pbuf_copy+0xa>
 8002e72:	f04f 0800 	mov.w	r8, #0
 8002e76:	4647      	mov	r7, r8

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8002e78:	8963      	ldrh	r3, [r4, #10]
 8002e7a:	896e      	ldrh	r6, [r5, #10]
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8002e7c:	6861      	ldr	r1, [r4, #4]
 8002e7e:	6868      	ldr	r0, [r5, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8002e80:	1bf6      	subs	r6, r6, r7
 8002e82:	eba3 0308 	sub.w	r3, r3, r8
 8002e86:	429e      	cmp	r6, r3
      len = p_from->len - offset_from;
 8002e88:	bfac      	ite	ge
 8002e8a:	b29e      	uxthge	r6, r3
      len = p_to->len - offset_to;
 8002e8c:	b2b6      	uxthlt	r6, r6
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8002e8e:	4632      	mov	r2, r6
 8002e90:	4441      	add	r1, r8
 8002e92:	4438      	add	r0, r7
 8002e94:	f002 fd9b 	bl	80059ce <memcpy>
    offset_to += len;
 8002e98:	4437      	add	r7, r6
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
 8002e9a:	8962      	ldrh	r2, [r4, #10]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8002e9c:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 8002e9e:	4446      	add	r6, r8
 8002ea0:	fa1f f886 	uxth.w	r8, r6
    if (offset_from >= p_from->len) {
 8002ea4:	4542      	cmp	r2, r8
    offset_to += len;
 8002ea6:	b2bf      	uxth	r7, r7
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
 8002ea8:	bf9c      	itt	ls
 8002eaa:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 8002eac:	f04f 0800 	movls.w	r8, #0
    }
    if (offset_to == p_to->len) {
 8002eb0:	429f      	cmp	r7, r3
 8002eb2:	d10b      	bne.n	8002ecc <pbuf_copy+0x78>
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
 8002eb4:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8002eb6:	b945      	cbnz	r5, 8002eca <pbuf_copy+0x76>
 8002eb8:	2c00      	cmp	r4, #0
 8002eba:	d1d0      	bne.n	8002e5e <pbuf_copy+0xa>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8002ebc:	4620      	mov	r0, r4
 8002ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8002ec2:	f06f 0005 	mvn.w	r0, #5
 8002ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      offset_to = 0;
 8002eca:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8002ecc:	b134      	cbz	r4, 8002edc <pbuf_copy+0x88>
 8002ece:	8962      	ldrh	r2, [r4, #10]
 8002ed0:	8923      	ldrh	r3, [r4, #8]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d102      	bne.n	8002edc <pbuf_copy+0x88>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8002ed6:	6823      	ldr	r3, [r4, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1f2      	bne.n	8002ec2 <pbuf_copy+0x6e>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8002edc:	896a      	ldrh	r2, [r5, #10]
 8002ede:	892b      	ldrh	r3, [r5, #8]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d102      	bne.n	8002eea <pbuf_copy+0x96>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8002ee4:	682b      	ldr	r3, [r5, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1eb      	bne.n	8002ec2 <pbuf_copy+0x6e>
  } while (p_from);
 8002eea:	2c00      	cmp	r4, #0
 8002eec:	d1c4      	bne.n	8002e78 <pbuf_copy+0x24>
 8002eee:	e7e5      	b.n	8002ebc <pbuf_copy+0x68>

08002ef0 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8002ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ef4:	4688      	mov	r8, r1
 8002ef6:	4614      	mov	r4, r2
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8002ef8:	4605      	mov	r5, r0
 8002efa:	b1c0      	cbz	r0, 8002f2e <pbuf_take+0x3e>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8002efc:	b1b9      	cbz	r1, 8002f2e <pbuf_take+0x3e>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8002efe:	8903      	ldrh	r3, [r0, #8]
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d318      	bcc.n	8002f36 <pbuf_take+0x46>
 8002f04:	2600      	movs	r6, #0
  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
    return ERR_ARG;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8002f06:	b914      	cbnz	r4, 8002f0e <pbuf_take+0x1e>
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
    total_copy_len -= buf_copy_len;
    copied_total += buf_copy_len;
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
  return ERR_OK;
 8002f08:	4620      	mov	r0, r4
 8002f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f0e:	896f      	ldrh	r7, [r5, #10]
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
 8002f10:	6868      	ldr	r0, [r5, #4]
 8002f12:	42a7      	cmp	r7, r4
 8002f14:	bf28      	it	cs
 8002f16:	4627      	movcs	r7, r4
 8002f18:	eb08 0106 	add.w	r1, r8, r6
 8002f1c:	463a      	mov	r2, r7
    total_copy_len -= buf_copy_len;
 8002f1e:	1be4      	subs	r4, r4, r7
    copied_total += buf_copy_len;
 8002f20:	443e      	add	r6, r7
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
 8002f22:	f002 fd54 	bl	80059ce <memcpy>
    total_copy_len -= buf_copy_len;
 8002f26:	b2a4      	uxth	r4, r4
    copied_total += buf_copy_len;
 8002f28:	b2b6      	uxth	r6, r6
  for (p = buf; total_copy_len != 0; p = p->next) {
 8002f2a:	682d      	ldr	r5, [r5, #0]
 8002f2c:	e7eb      	b.n	8002f06 <pbuf_take+0x16>
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8002f2e:	f06f 000f 	mvn.w	r0, #15
 8002f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8002f36:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002f3e <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8002f3e:	4770      	bx	lr

08002f40 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8002f40:	b530      	push	{r4, r5, lr}
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8002f42:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8002f44:	8d05      	ldrh	r5, [r0, #40]	; 0x28
 8002f46:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8002f48:	4602      	mov	r2, r0
 8002f4a:	1a6b      	subs	r3, r5, r1
 8002f4c:	1918      	adds	r0, r3, r4
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8002f4e:	8e53      	ldrh	r3, [r2, #50]	; 0x32
 8002f50:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8002f54:	bf94      	ite	ls
 8002f56:	1ac3      	subls	r3, r0, r3
 8002f58:	f5a0 6386 	subhi.w	r3, r0, #1072	; 0x430
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	db01      	blt.n	8002f64 <tcp_update_rcv_ann_wnd+0x24>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8002f60:	8555      	strh	r5, [r2, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8002f62:	bd30      	pop	{r4, r5, pc}
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8002f64:	1a63      	subs	r3, r4, r1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f04f 0000 	mov.w	r0, #0
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8002f6c:	bfd6      	itet	le
 8002f6e:	1b09      	suble	r1, r1, r4
      pcb->rcv_ann_wnd = 0;
 8002f70:	8550      	strhgt	r0, [r2, #42]	; 0x2a
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8002f72:	8551      	strhle	r1, [r2, #42]	; 0x2a
    }
    return 0;
  }
}
 8002f74:	bd30      	pop	{r4, r5, pc}

08002f76 <tcp_recved>:

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8002f76:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8002f78:	4419      	add	r1, r3
 8002f7a:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8002f7c:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
{
 8002f80:	b510      	push	{r4, lr}
 8002f82:	4604      	mov	r4, r0
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8002f84:	d911      	bls.n	8002faa <tcp_recved+0x34>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8002f86:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8002f8a:	8523      	strh	r3, [r4, #40]	; 0x28
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8002f8c:	4620      	mov	r0, r4
 8002f8e:	f7ff ffd7 	bl	8002f40 <tcp_update_rcv_ann_wnd>

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8002f92:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 8002f96:	db11      	blt.n	8002fbc <tcp_recved+0x46>
    tcp_ack_now(pcb);
 8002f98:	7ea3      	ldrb	r3, [r4, #26]
 8002f9a:	f043 0302 	orr.w	r3, r3, #2
 8002f9e:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8002fa0:	4620      	mov	r0, r4
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8002fa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tcp_output(pcb);
 8002fa6:	f001 bcc7 	b.w	8004938 <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8002faa:	7d03      	ldrb	r3, [r0, #20]
  } else if (pcb->rcv_wnd == 0) {
 8002fac:	b109      	cbz	r1, 8002fb2 <tcp_recved+0x3c>
  pcb->rcv_wnd += len;
 8002fae:	8521      	strh	r1, [r4, #40]	; 0x28
 8002fb0:	e7ec      	b.n	8002f8c <tcp_recved+0x16>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8002fb2:	2b07      	cmp	r3, #7
 8002fb4:	d0e7      	beq.n	8002f86 <tcp_recved+0x10>
 8002fb6:	2b09      	cmp	r3, #9
 8002fb8:	d1f9      	bne.n	8002fae <tcp_recved+0x38>
 8002fba:	e7e4      	b.n	8002f86 <tcp_recved+0x10>
 8002fbc:	bd10      	pop	{r4, pc}

08002fbe <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8002fbe:	b510      	push	{r4, lr}
  if (seg != NULL) {
 8002fc0:	4604      	mov	r4, r0
 8002fc2:	b148      	cbz	r0, 8002fd8 <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 8002fc4:	6840      	ldr	r0, [r0, #4]
 8002fc6:	b108      	cbz	r0, 8002fcc <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8002fc8:	f7ff fe44 	bl	8002c54 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8002fcc:	4621      	mov	r1, r4
 8002fce:	2003      	movs	r0, #3
  }
}
 8002fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 8002fd4:	f7ff bd36 	b.w	8002a44 <memp_free>
 8002fd8:	bd10      	pop	{r4, pc}

08002fda <tcp_segs_free>:
{
 8002fda:	b510      	push	{r4, lr}
  while (seg != NULL) {
 8002fdc:	b900      	cbnz	r0, 8002fe0 <tcp_segs_free+0x6>
}
 8002fde:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 8002fe0:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8002fe2:	f7ff ffec 	bl	8002fbe <tcp_seg_free>
    seg = next;
 8002fe6:	4620      	mov	r0, r4
 8002fe8:	e7f8      	b.n	8002fdc <tcp_segs_free+0x2>

08002fea <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8002fea:	b538      	push	{r3, r4, r5, lr}
 8002fec:	4604      	mov	r4, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8002fee:	2003      	movs	r0, #3
 8002ff0:	f7ff fd18 	bl	8002a24 <memp_malloc>
  if (cseg == NULL) {
 8002ff4:	4605      	mov	r5, r0
 8002ff6:	b160      	cbz	r0, 8003012 <tcp_seg_copy+0x28>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8002ff8:	4620      	mov	r0, r4
 8002ffa:	462b      	mov	r3, r5
 8002ffc:	f104 0210 	add.w	r2, r4, #16
 8003000:	f850 1b04 	ldr.w	r1, [r0], #4
 8003004:	f843 1b04 	str.w	r1, [r3], #4
 8003008:	4290      	cmp	r0, r2
 800300a:	d1f9      	bne.n	8003000 <tcp_seg_copy+0x16>
  pbuf_ref(cseg->p);
 800300c:	6868      	ldr	r0, [r5, #4]
 800300e:	f7ff ff06 	bl	8002e1e <pbuf_ref>
  return cseg;
}
 8003012:	4628      	mov	r0, r5
 8003014:	bd38      	pop	{r3, r4, r5, pc}

08003016 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8003016:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 8003018:	7d03      	ldrb	r3, [r0, #20]
 800301a:	2b01      	cmp	r3, #1
{
 800301c:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 800301e:	d919      	bls.n	8003054 <tcp_pcb_purge+0x3e>
 8003020:	2b0a      	cmp	r3, #10
 8003022:	d017      	beq.n	8003054 <tcp_pcb_purge+0x3e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8003024:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8003026:	b118      	cbz	r0, 8003030 <tcp_pcb_purge+0x1a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8003028:	f7ff fe14 	bl	8002c54 <pbuf_free>
      pcb->refused_data = NULL;
 800302c:	2300      	movs	r3, #0
 800302e:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8003030:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8003032:	f7ff ffd2 	bl	8002fda <tcp_segs_free>
    pcb->ooseq = NULL;
 8003036:	2500      	movs	r5, #0
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8003038:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800303c:	8623      	strh	r3, [r4, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800303e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    pcb->ooseq = NULL;
 8003040:	6725      	str	r5, [r4, #112]	; 0x70
    tcp_segs_free(pcb->unsent);
 8003042:	f7ff ffca 	bl	8002fda <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8003046:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003048:	f7ff ffc7 	bl	8002fda <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800304c:	66a5      	str	r5, [r4, #104]	; 0x68
 800304e:	66e5      	str	r5, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8003050:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 8003054:	bd38      	pop	{r3, r4, r5, pc}

08003056 <tcp_pcb_remove>:
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  TCP_RMV(pcblist, pcb);
 8003056:	6803      	ldr	r3, [r0, #0]
 8003058:	428b      	cmp	r3, r1
{
 800305a:	b510      	push	{r4, lr}
 800305c:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 800305e:	d119      	bne.n	8003094 <tcp_pcb_remove+0x3e>
 8003060:	68cb      	ldr	r3, [r1, #12]
 8003062:	6003      	str	r3, [r0, #0]
 8003064:	2300      	movs	r3, #0
 8003066:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 8003068:	4620      	mov	r0, r4
 800306a:	f7ff ffd4 	bl	8003016 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800306e:	7d23      	ldrb	r3, [r4, #20]
 8003070:	2b0a      	cmp	r3, #10
 8003072:	d00a      	beq.n	800308a <tcp_pcb_remove+0x34>
 8003074:	2b01      	cmp	r3, #1
 8003076:	d008      	beq.n	800308a <tcp_pcb_remove+0x34>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 8003078:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 800307a:	07da      	lsls	r2, r3, #31
 800307c:	d505      	bpl.n	800308a <tcp_pcb_remove+0x34>
    pcb->flags |= TF_ACK_NOW;
 800307e:	f043 0302 	orr.w	r3, r3, #2
 8003082:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8003084:	4620      	mov	r0, r4
 8003086:	f001 fc57 	bl	8004938 <tcp_output>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800308a:	2300      	movs	r3, #0
 800308c:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800308e:	82e3      	strh	r3, [r4, #22]
 8003090:	bd10      	pop	{r4, pc}
 8003092:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0e5      	beq.n	8003064 <tcp_pcb_remove+0xe>
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	4294      	cmp	r4, r2
 800309c:	d1f9      	bne.n	8003092 <tcp_pcb_remove+0x3c>
 800309e:	68e2      	ldr	r2, [r4, #12]
 80030a0:	60da      	str	r2, [r3, #12]
 80030a2:	e7df      	b.n	8003064 <tcp_pcb_remove+0xe>

080030a4 <tcp_close_shutdown>:
{
 80030a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80030a6:	7d03      	ldrb	r3, [r0, #20]
 80030a8:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80030aa:	2900      	cmp	r1, #0
 80030ac:	d03f      	beq.n	800312e <tcp_close_shutdown+0x8a>
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d001      	beq.n	80030b6 <tcp_close_shutdown+0x12>
 80030b2:	2b07      	cmp	r3, #7
 80030b4:	d13b      	bne.n	800312e <tcp_close_shutdown+0x8a>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80030b6:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80030b8:	b91a      	cbnz	r2, 80030c2 <tcp_close_shutdown+0x1e>
 80030ba:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80030bc:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 80030c0:	d035      	beq.n	800312e <tcp_close_shutdown+0x8a>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80030c2:	8b23      	ldrh	r3, [r4, #24]
 80030c4:	9301      	str	r3, [sp, #4]
 80030c6:	8ae3      	ldrh	r3, [r4, #22]
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	4622      	mov	r2, r4
 80030cc:	1d23      	adds	r3, r4, #4
 80030ce:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80030d0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80030d2:	f001 fd73 	bl	8004bbc <tcp_rst>
      tcp_pcb_purge(pcb);
 80030d6:	4620      	mov	r0, r4
 80030d8:	f7ff ff9d 	bl	8003016 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80030dc:	4a43      	ldr	r2, [pc, #268]	; (80031ec <tcp_close_shutdown+0x148>)
 80030de:	6813      	ldr	r3, [r2, #0]
 80030e0:	429c      	cmp	r4, r3
 80030e2:	d115      	bne.n	8003110 <tcp_close_shutdown+0x6c>
 80030e4:	68e3      	ldr	r3, [r4, #12]
 80030e6:	6013      	str	r3, [r2, #0]
 80030e8:	4b41      	ldr	r3, [pc, #260]	; (80031f0 <tcp_close_shutdown+0x14c>)
 80030ea:	2201      	movs	r2, #1
 80030ec:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 80030ee:	7d23      	ldrb	r3, [r4, #20]
      TCP_RMV_ACTIVE(pcb);
 80030f0:	2500      	movs	r5, #0
      if (pcb->state == ESTABLISHED) {
 80030f2:	2b04      	cmp	r3, #4
      TCP_RMV_ACTIVE(pcb);
 80030f4:	60e5      	str	r5, [r4, #12]
      if (pcb->state == ESTABLISHED) {
 80030f6:	d113      	bne.n	8003120 <tcp_close_shutdown+0x7c>
        pcb->state = TIME_WAIT;
 80030f8:	230a      	movs	r3, #10
 80030fa:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80030fc:	4b3d      	ldr	r3, [pc, #244]	; (80031f4 <tcp_close_shutdown+0x150>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	60e2      	str	r2, [r4, #12]
 8003102:	601c      	str	r4, [r3, #0]
 8003104:	f001 fe0c 	bl	8004d20 <tcp_timer_needed>
    tcp_output(pcb);
 8003108:	2000      	movs	r0, #0
}
 800310a:	b003      	add	sp, #12
 800310c:	bd30      	pop	{r4, r5, pc}
 800310e:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0e9      	beq.n	80030e8 <tcp_close_shutdown+0x44>
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	4294      	cmp	r4, r2
 8003118:	d1f9      	bne.n	800310e <tcp_close_shutdown+0x6a>
 800311a:	68e2      	ldr	r2, [r4, #12]
 800311c:	60da      	str	r2, [r3, #12]
 800311e:	e7e3      	b.n	80030e8 <tcp_close_shutdown+0x44>
        if (tcp_input_pcb == pcb) {
 8003120:	4b35      	ldr	r3, [pc, #212]	; (80031f8 <tcp_close_shutdown+0x154>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	429c      	cmp	r4, r3
 8003126:	d121      	bne.n	800316c <tcp_close_shutdown+0xc8>
          tcp_trigger_input_pcb_close();
 8003128:	f001 fad6 	bl	80046d8 <tcp_trigger_input_pcb_close>
 800312c:	e7ec      	b.n	8003108 <tcp_close_shutdown+0x64>
  switch (pcb->state) {
 800312e:	2b07      	cmp	r3, #7
 8003130:	d8ea      	bhi.n	8003108 <tcp_close_shutdown+0x64>
 8003132:	a201      	add	r2, pc, #4	; (adr r2, 8003138 <tcp_close_shutdown+0x94>)
 8003134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003138:	08003159 	.word	0x08003159
 800313c:	08003189 	.word	0x08003189
 8003140:	080031b7 	.word	0x080031b7
 8003144:	080031c9 	.word	0x080031c9
 8003148:	080031c9 	.word	0x080031c9
 800314c:	08003109 	.word	0x08003109
 8003150:	08003109 	.word	0x08003109
 8003154:	080031df 	.word	0x080031df
    if (pcb->local_port != 0) {
 8003158:	8ae3      	ldrh	r3, [r4, #22]
 800315a:	b13b      	cbz	r3, 800316c <tcp_close_shutdown+0xc8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800315c:	4a27      	ldr	r2, [pc, #156]	; (80031fc <tcp_close_shutdown+0x158>)
 800315e:	6813      	ldr	r3, [r2, #0]
 8003160:	429c      	cmp	r4, r3
 8003162:	d109      	bne.n	8003178 <tcp_close_shutdown+0xd4>
 8003164:	68e3      	ldr	r3, [r4, #12]
 8003166:	6013      	str	r3, [r2, #0]
 8003168:	2300      	movs	r3, #0
 800316a:	60e3      	str	r3, [r4, #12]
          memp_free(MEMP_TCP_PCB, pcb);
 800316c:	4621      	mov	r1, r4
 800316e:	2001      	movs	r0, #1
    memp_free(MEMP_TCP_PCB, pcb);
 8003170:	f7ff fc68 	bl	8002a44 <memp_free>
 8003174:	e7c8      	b.n	8003108 <tcp_close_shutdown+0x64>
 8003176:	4613      	mov	r3, r2
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0f5      	beq.n	8003168 <tcp_close_shutdown+0xc4>
 800317c:	68da      	ldr	r2, [r3, #12]
 800317e:	4294      	cmp	r4, r2
 8003180:	d1f9      	bne.n	8003176 <tcp_close_shutdown+0xd2>
 8003182:	68e2      	ldr	r2, [r4, #12]
 8003184:	60da      	str	r2, [r3, #12]
 8003186:	e7ef      	b.n	8003168 <tcp_close_shutdown+0xc4>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8003188:	4a1d      	ldr	r2, [pc, #116]	; (8003200 <tcp_close_shutdown+0x15c>)
  switch (pcb->state) {
 800318a:	2301      	movs	r3, #1
         pcb->listener = NULL;
 800318c:	2100      	movs	r1, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800318e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003192:	6805      	ldr	r5, [r0, #0]
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8003194:	b94d      	cbnz	r5, 80031aa <tcp_close_shutdown+0x106>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8003196:	3301      	adds	r3, #1
 8003198:	2b04      	cmp	r3, #4
 800319a:	d1f8      	bne.n	800318e <tcp_close_shutdown+0xea>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800319c:	4621      	mov	r1, r4
 800319e:	4819      	ldr	r0, [pc, #100]	; (8003204 <tcp_close_shutdown+0x160>)
 80031a0:	f7ff ff59 	bl	8003056 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80031a4:	4621      	mov	r1, r4
 80031a6:	2002      	movs	r0, #2
 80031a8:	e7e2      	b.n	8003170 <tcp_close_shutdown+0xcc>
      if (pcb->listener == lpcb) {
 80031aa:	6fa8      	ldr	r0, [r5, #120]	; 0x78
 80031ac:	4284      	cmp	r4, r0
         pcb->listener = NULL;
 80031ae:	bf08      	it	eq
 80031b0:	67a9      	streq	r1, [r5, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80031b2:	68ed      	ldr	r5, [r5, #12]
 80031b4:	e7ee      	b.n	8003194 <tcp_close_shutdown+0xf0>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 80031b6:	4621      	mov	r1, r4
 80031b8:	480c      	ldr	r0, [pc, #48]	; (80031ec <tcp_close_shutdown+0x148>)
 80031ba:	f7ff ff4c 	bl	8003056 <tcp_pcb_remove>
 80031be:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <tcp_close_shutdown+0x14c>)
 80031c0:	2001      	movs	r0, #1
 80031c2:	7018      	strb	r0, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 80031c4:	4621      	mov	r1, r4
 80031c6:	e7d3      	b.n	8003170 <tcp_close_shutdown+0xcc>
    err = tcp_send_fin(pcb);
 80031c8:	4620      	mov	r0, r4
 80031ca:	f001 fb5d 	bl	8004888 <tcp_send_fin>
    if (err == ERR_OK) {
 80031ce:	2800      	cmp	r0, #0
 80031d0:	d19b      	bne.n	800310a <tcp_close_shutdown+0x66>
      pcb->state = FIN_WAIT_1;
 80031d2:	2305      	movs	r3, #5
      pcb->state = LAST_ACK;
 80031d4:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 80031d6:	4620      	mov	r0, r4
 80031d8:	f001 fbae 	bl	8004938 <tcp_output>
 80031dc:	e794      	b.n	8003108 <tcp_close_shutdown+0x64>
    err = tcp_send_fin(pcb);
 80031de:	4620      	mov	r0, r4
 80031e0:	f001 fb52 	bl	8004888 <tcp_send_fin>
    if (err == ERR_OK) {
 80031e4:	2800      	cmp	r0, #0
 80031e6:	d190      	bne.n	800310a <tcp_close_shutdown+0x66>
      pcb->state = LAST_ACK;
 80031e8:	2309      	movs	r3, #9
 80031ea:	e7f3      	b.n	80031d4 <tcp_close_shutdown+0x130>
 80031ec:	200036f8 	.word	0x200036f8
 80031f0:	200036f4 	.word	0x200036f4
 80031f4:	20003708 	.word	0x20003708
 80031f8:	2000370c 	.word	0x2000370c
 80031fc:	20003704 	.word	0x20003704
 8003200:	080062f8 	.word	0x080062f8
 8003204:	20003700 	.word	0x20003700

08003208 <tcp_close>:
  if (pcb->state != LISTEN) {
 8003208:	7d03      	ldrb	r3, [r0, #20]
 800320a:	2b01      	cmp	r3, #1
    pcb->flags |= TF_RXCLOSED;
 800320c:	bf1e      	ittt	ne
 800320e:	7e83      	ldrbne	r3, [r0, #26]
 8003210:	f043 0310 	orrne.w	r3, r3, #16
 8003214:	7683      	strbne	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 8003216:	2101      	movs	r1, #1
 8003218:	f7ff bf44 	b.w	80030a4 <tcp_close_shutdown>

0800321c <tcp_recv_null>:
{
 800321c:	b510      	push	{r4, lr}
 800321e:	4608      	mov	r0, r1
  if (p != NULL) {
 8003220:	4614      	mov	r4, r2
 8003222:	b13a      	cbz	r2, 8003234 <tcp_recv_null+0x18>
    tcp_recved(pcb, p->tot_len);
 8003224:	8911      	ldrh	r1, [r2, #8]
 8003226:	f7ff fea6 	bl	8002f76 <tcp_recved>
    pbuf_free(p);
 800322a:	4620      	mov	r0, r4
 800322c:	f7ff fd12 	bl	8002c54 <pbuf_free>
}
 8003230:	2000      	movs	r0, #0
 8003232:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1fb      	bne.n	8003230 <tcp_recv_null+0x14>
}
 8003238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 800323c:	f7ff bfe4 	b.w	8003208 <tcp_close>

08003240 <tcp_process_refused_data>:
{
 8003240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    u8_t refused_flags = pcb->refused_data->flags;
 8003242:	6f46      	ldr	r6, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8003244:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
    u8_t refused_flags = pcb->refused_data->flags;
 8003248:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 800324a:	2300      	movs	r3, #0
{
 800324c:	4604      	mov	r4, r0
    pcb->refused_data = NULL;
 800324e:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8003250:	b1dd      	cbz	r5, 800328a <tcp_process_refused_data+0x4a>
 8003252:	4601      	mov	r1, r0
 8003254:	4632      	mov	r2, r6
 8003256:	6900      	ldr	r0, [r0, #16]
 8003258:	47a8      	blx	r5
 800325a:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 800325c:	b9e0      	cbnz	r0, 8003298 <tcp_process_refused_data+0x58>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800325e:	06bb      	lsls	r3, r7, #26
 8003260:	d511      	bpl.n	8003286 <tcp_process_refused_data+0x46>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8003262:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8003264:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8003268:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
          pcb->rcv_wnd++;
 800326c:	bf1c      	itt	ne
 800326e:	3301      	addne	r3, #1
 8003270:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8003272:	b146      	cbz	r6, 8003286 <tcp_process_refused_data+0x46>
 8003274:	2300      	movs	r3, #0
 8003276:	461a      	mov	r2, r3
 8003278:	4621      	mov	r1, r4
 800327a:	6920      	ldr	r0, [r4, #16]
 800327c:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 800327e:	300d      	adds	r0, #13
 8003280:	d101      	bne.n	8003286 <tcp_process_refused_data+0x46>
          return ERR_ABRT;
 8003282:	f06f 050c 	mvn.w	r5, #12
}
 8003286:	4628      	mov	r0, r5
 8003288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800328a:	4601      	mov	r1, r0
 800328c:	462b      	mov	r3, r5
 800328e:	4632      	mov	r2, r6
 8003290:	4628      	mov	r0, r5
 8003292:	f7ff ffc3 	bl	800321c <tcp_recv_null>
 8003296:	e7e0      	b.n	800325a <tcp_process_refused_data+0x1a>
    } else if (err == ERR_ABRT) {
 8003298:	f110 050d 	adds.w	r5, r0, #13
 800329c:	d0f1      	beq.n	8003282 <tcp_process_refused_data+0x42>
      pcb->refused_data = refused_data;
 800329e:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 80032a0:	f06f 0504 	mvn.w	r5, #4
 80032a4:	e7ef      	b.n	8003286 <tcp_process_refused_data+0x46>
	...

080032a8 <tcp_abandon>:
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80032a8:	7d03      	ldrb	r3, [r0, #20]
  if (pcb->state == TIME_WAIT) {
 80032aa:	2b0a      	cmp	r3, #10
{
 80032ac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80032b0:	4604      	mov	r4, r0
 80032b2:	460e      	mov	r6, r1
  if (pcb->state == TIME_WAIT) {
 80032b4:	d10a      	bne.n	80032cc <tcp_abandon+0x24>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80032b6:	4601      	mov	r1, r0
 80032b8:	482a      	ldr	r0, [pc, #168]	; (8003364 <tcp_abandon+0xbc>)
 80032ba:	f7ff fecc 	bl	8003056 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80032be:	4621      	mov	r1, r4
 80032c0:	2001      	movs	r0, #1
}
 80032c2:	b002      	add	sp, #8
 80032c4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    memp_free(MEMP_TCP_PCB, pcb);
 80032c8:	f7ff bbbc 	b.w	8002a44 <memp_free>
    seqno = pcb->snd_nxt;
 80032cc:	f8d0 904c 	ldr.w	r9, [r0, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 80032d0:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
    errf = pcb->errf;
 80032d4:	f8d0 708c 	ldr.w	r7, [r0, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 80032d8:	f8d0 8010 	ldr.w	r8, [r0, #16]
 80032dc:	8ac5      	ldrh	r5, [r0, #22]
    if (pcb->state == CLOSED) {
 80032de:	b99b      	cbnz	r3, 8003308 <tcp_abandon+0x60>
      if (pcb->local_port != 0) {
 80032e0:	b13d      	cbz	r5, 80032f2 <tcp_abandon+0x4a>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80032e2:	4a21      	ldr	r2, [pc, #132]	; (8003368 <tcp_abandon+0xc0>)
 80032e4:	6813      	ldr	r3, [r2, #0]
 80032e6:	4298      	cmp	r0, r3
 80032e8:	d106      	bne.n	80032f8 <tcp_abandon+0x50>
 80032ea:	68c3      	ldr	r3, [r0, #12]
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	2500      	movs	r5, #0
 80032f0:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 80032f2:	462e      	mov	r6, r5
 80032f4:	e00f      	b.n	8003316 <tcp_abandon+0x6e>
 80032f6:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0f8      	beq.n	80032ee <tcp_abandon+0x46>
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	4294      	cmp	r4, r2
 8003300:	d1f9      	bne.n	80032f6 <tcp_abandon+0x4e>
 8003302:	68e2      	ldr	r2, [r4, #12]
 8003304:	60da      	str	r2, [r3, #12]
 8003306:	e7f2      	b.n	80032ee <tcp_abandon+0x46>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8003308:	4601      	mov	r1, r0
 800330a:	4818      	ldr	r0, [pc, #96]	; (800336c <tcp_abandon+0xc4>)
 800330c:	f7ff fea3 	bl	8003056 <tcp_pcb_remove>
 8003310:	4b17      	ldr	r3, [pc, #92]	; (8003370 <tcp_abandon+0xc8>)
 8003312:	2201      	movs	r2, #1
 8003314:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8003316:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003318:	b108      	cbz	r0, 800331e <tcp_abandon+0x76>
      tcp_segs_free(pcb->unacked);
 800331a:	f7ff fe5e 	bl	8002fda <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800331e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8003320:	b108      	cbz	r0, 8003326 <tcp_abandon+0x7e>
      tcp_segs_free(pcb->unsent);
 8003322:	f7ff fe5a 	bl	8002fda <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8003326:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8003328:	b108      	cbz	r0, 800332e <tcp_abandon+0x86>
      tcp_segs_free(pcb->ooseq);
 800332a:	f7ff fe56 	bl	8002fda <tcp_segs_free>
    if (send_rst) {
 800332e:	b146      	cbz	r6, 8003342 <tcp_abandon+0x9a>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8003330:	8b23      	ldrh	r3, [r4, #24]
 8003332:	9301      	str	r3, [sp, #4]
 8003334:	9500      	str	r5, [sp, #0]
 8003336:	1d23      	adds	r3, r4, #4
 8003338:	4622      	mov	r2, r4
 800333a:	4651      	mov	r1, sl
 800333c:	4648      	mov	r0, r9
 800333e:	f001 fc3d 	bl	8004bbc <tcp_rst>
    memp_free(MEMP_TCP_PCB, pcb);
 8003342:	4621      	mov	r1, r4
 8003344:	2001      	movs	r0, #1
 8003346:	f7ff fb7d 	bl	8002a44 <memp_free>
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
 800334a:	b13f      	cbz	r7, 800335c <tcp_abandon+0xb4>
 800334c:	f06f 010c 	mvn.w	r1, #12
 8003350:	4640      	mov	r0, r8
 8003352:	463b      	mov	r3, r7
}
 8003354:	b002      	add	sp, #8
 8003356:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
 800335a:	4718      	bx	r3
}
 800335c:	b002      	add	sp, #8
 800335e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003362:	bf00      	nop
 8003364:	20003708 	.word	0x20003708
 8003368:	20003704 	.word	0x20003704
 800336c:	200036f8 	.word	0x200036f8
 8003370:	200036f4 	.word	0x200036f4

08003374 <tcp_abort>:
  tcp_abandon(pcb, 1);
 8003374:	2101      	movs	r1, #1
 8003376:	f7ff bf97 	b.w	80032a8 <tcp_abandon>

0800337a <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800337a:	b538      	push	{r3, r4, r5, lr}
 800337c:	4605      	mov	r5, r0
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 800337e:	b901      	cbnz	r1, 8003382 <tcp_netif_ip_addr_changed_pcblist+0x8>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 8003380:	bd38      	pop	{r3, r4, r5, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8003382:	680a      	ldr	r2, [r1, #0]
 8003384:	682b      	ldr	r3, [r5, #0]
 8003386:	68cc      	ldr	r4, [r1, #12]
 8003388:	429a      	cmp	r2, r3
 800338a:	d102      	bne.n	8003392 <tcp_netif_ip_addr_changed_pcblist+0x18>
      tcp_abort(pcb);
 800338c:	4608      	mov	r0, r1
 800338e:	f7ff fff1 	bl	8003374 <tcp_abort>
      pcb = pcb->next;
 8003392:	4621      	mov	r1, r4
 8003394:	e7f3      	b.n	800337e <tcp_netif_ip_addr_changed_pcblist+0x4>
	...

08003398 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8003398:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <tcp_kill_state+0x34>)
 800339a:	6819      	ldr	r1, [r3, #0]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800339c:	4b0c      	ldr	r3, [pc, #48]	; (80033d0 <tcp_kill_state+0x38>)
{
 800339e:	b430      	push	{r4, r5}
  inactivity = 0;
 80033a0:	2400      	movs	r4, #0
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80033a2:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 80033a4:	4622      	mov	r2, r4
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80033a6:	b921      	cbnz	r1, 80033b2 <tcp_kill_state+0x1a>
  if (inactive != NULL) {
 80033a8:	b172      	cbz	r2, 80033c8 <tcp_kill_state+0x30>
    tcp_abandon(inactive, 0);
 80033aa:	4610      	mov	r0, r2
}
 80033ac:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 80033ae:	f7ff bf7b 	b.w	80032a8 <tcp_abandon>
    if (pcb->state == state) {
 80033b2:	7d0b      	ldrb	r3, [r1, #20]
 80033b4:	4283      	cmp	r3, r0
 80033b6:	d105      	bne.n	80033c4 <tcp_kill_state+0x2c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80033b8:	6a0b      	ldr	r3, [r1, #32]
 80033ba:	1aeb      	subs	r3, r5, r3
 80033bc:	429c      	cmp	r4, r3
 80033be:	bf9c      	itt	ls
 80033c0:	461c      	movls	r4, r3
 80033c2:	460a      	movls	r2, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80033c4:	68c9      	ldr	r1, [r1, #12]
 80033c6:	e7ee      	b.n	80033a6 <tcp_kill_state+0xe>
}
 80033c8:	bc30      	pop	{r4, r5}
 80033ca:	4770      	bx	lr
 80033cc:	200036f8 	.word	0x200036f8
 80033d0:	200036fc 	.word	0x200036fc

080033d4 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 80033d4:	4b03      	ldr	r3, [pc, #12]	; (80033e4 <tcp_next_iss+0x10>)
 80033d6:	4a04      	ldr	r2, [pc, #16]	; (80033e8 <tcp_next_iss+0x14>)
 80033d8:	6818      	ldr	r0, [r3, #0]
 80033da:	6812      	ldr	r2, [r2, #0]
 80033dc:	4410      	add	r0, r2
 80033de:	6018      	str	r0, [r3, #0]
}
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	20000000 	.word	0x20000000
 80033e8:	200036fc 	.word	0x200036fc

080033ec <tcp_alloc>:
{
 80033ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ee:	4606      	mov	r6, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80033f0:	2001      	movs	r0, #1
 80033f2:	f7ff fb17 	bl	8002a24 <memp_malloc>
 80033f6:	4d3d      	ldr	r5, [pc, #244]	; (80034ec <tcp_alloc+0x100>)
  if (pcb == NULL) {
 80033f8:	4604      	mov	r4, r0
 80033fa:	bb90      	cbnz	r0, 8003462 <tcp_alloc+0x76>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80033fc:	4b3c      	ldr	r3, [pc, #240]	; (80034f0 <tcp_alloc+0x104>)
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80033fe:	6828      	ldr	r0, [r5, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8003400:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8003402:	4621      	mov	r1, r4
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8003404:	2b00      	cmp	r3, #0
 8003406:	d15c      	bne.n	80034c2 <tcp_alloc+0xd6>
  if (inactive != NULL) {
 8003408:	b114      	cbz	r4, 8003410 <tcp_alloc+0x24>
    tcp_abort(inactive);
 800340a:	4620      	mov	r0, r4
 800340c:	f7ff ffb2 	bl	8003374 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8003410:	2001      	movs	r0, #1
 8003412:	f7ff fb07 	bl	8002a24 <memp_malloc>
    if (pcb == NULL) {
 8003416:	4604      	mov	r4, r0
 8003418:	bb18      	cbnz	r0, 8003462 <tcp_alloc+0x76>
      tcp_kill_state(LAST_ACK);
 800341a:	2009      	movs	r0, #9
 800341c:	f7ff ffbc 	bl	8003398 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8003420:	2001      	movs	r0, #1
 8003422:	f7ff faff 	bl	8002a24 <memp_malloc>
      if (pcb == NULL) {
 8003426:	4604      	mov	r4, r0
 8003428:	b9d8      	cbnz	r0, 8003462 <tcp_alloc+0x76>
        tcp_kill_state(CLOSING);
 800342a:	2008      	movs	r0, #8
 800342c:	f7ff ffb4 	bl	8003398 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8003430:	2001      	movs	r0, #1
 8003432:	f7ff faf7 	bl	8002a24 <memp_malloc>
        if (pcb == NULL) {
 8003436:	4604      	mov	r4, r0
 8003438:	b998      	cbnz	r0, 8003462 <tcp_alloc+0x76>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800343a:	4b2e      	ldr	r3, [pc, #184]	; (80034f4 <tcp_alloc+0x108>)
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800343c:	f8d5 e000 	ldr.w	lr, [r5]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8003440:	681b      	ldr	r3, [r3, #0]
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8003442:	f016 0f80 	tst.w	r6, #128	; 0x80
 8003446:	bf0c      	ite	eq
 8003448:	4631      	moveq	r1, r6
 800344a:	217f      	movne	r1, #127	; 0x7f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800344c:	2b00      	cmp	r3, #0
 800344e:	d140      	bne.n	80034d2 <tcp_alloc+0xe6>
  if (inactive != NULL) {
 8003450:	b114      	cbz	r4, 8003458 <tcp_alloc+0x6c>
    tcp_abort(inactive);
 8003452:	4620      	mov	r0, r4
 8003454:	f7ff ff8e 	bl	8003374 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8003458:	2001      	movs	r0, #1
 800345a:	f7ff fae3 	bl	8002a24 <memp_malloc>
  if (pcb != NULL) {
 800345e:	4604      	mov	r4, r0
 8003460:	b368      	cbz	r0, 80034be <tcp_alloc+0xd2>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8003462:	2298      	movs	r2, #152	; 0x98
 8003464:	2100      	movs	r1, #0
 8003466:	4620      	mov	r0, r4
 8003468:	f002 fabc 	bl	80059e4 <memset>
    pcb->snd_buf = TCP_SND_BUF;
 800346c:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8003470:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8003474:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8003478:	8563      	strh	r3, [r4, #42]	; 0x2a
 800347a:	8523      	strh	r3, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800347c:	23ff      	movs	r3, #255	; 0xff
 800347e:	72a3      	strb	r3, [r4, #10]
    pcb->mss = INITIAL_MSS;
 8003480:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003484:	8663      	strh	r3, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8003486:	2306      	movs	r3, #6
 8003488:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800348c:	87e3      	strh	r3, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 800348e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003492:	8623      	strh	r3, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 8003494:	2301      	movs	r3, #1
 8003496:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->prio = prio;
 800349a:	7566      	strb	r6, [r4, #21]
    iss = tcp_next_iss();
 800349c:	f7ff ff9a 	bl	80033d4 <tcp_next_iss>
    pcb->tmr = tcp_ticks;
 80034a0:	682b      	ldr	r3, [r5, #0]
 80034a2:	6223      	str	r3, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 80034a4:	4b14      	ldr	r3, [pc, #80]	; (80034f8 <tcp_alloc+0x10c>)
    pcb->snd_wl2 = iss;
 80034a6:	6560      	str	r0, [r4, #84]	; 0x54
    pcb->last_timer = tcp_timer_ctr;
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	7763      	strb	r3, [r4, #29]
    pcb->recv = tcp_recv_null;
 80034ac:	4b13      	ldr	r3, [pc, #76]	; (80034fc <tcp_alloc+0x110>)
 80034ae:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80034b2:	4b13      	ldr	r3, [pc, #76]	; (8003500 <tcp_alloc+0x114>)
    pcb->snd_nxt = iss;
 80034b4:	64e0      	str	r0, [r4, #76]	; 0x4c
    pcb->lastack = iss;
 80034b6:	6460      	str	r0, [r4, #68]	; 0x44
    pcb->snd_lbb = iss;
 80034b8:	65a0      	str	r0, [r4, #88]	; 0x58
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80034ba:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}
 80034be:	4620      	mov	r0, r4
 80034c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80034c2:	6a1a      	ldr	r2, [r3, #32]
 80034c4:	1a82      	subs	r2, r0, r2
 80034c6:	428a      	cmp	r2, r1
 80034c8:	bf24      	itt	cs
 80034ca:	461c      	movcs	r4, r3
 80034cc:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	e798      	b.n	8003404 <tcp_alloc+0x18>
    if (pcb->prio <= mprio &&
 80034d2:	7d5f      	ldrb	r7, [r3, #21]
 80034d4:	428f      	cmp	r7, r1
 80034d6:	d807      	bhi.n	80034e8 <tcp_alloc+0xfc>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80034d8:	6a1a      	ldr	r2, [r3, #32]
 80034da:	ebae 0202 	sub.w	r2, lr, r2
    if (pcb->prio <= mprio &&
 80034de:	4282      	cmp	r2, r0
 80034e0:	bf22      	ittt	cs
 80034e2:	4639      	movcs	r1, r7
 80034e4:	4610      	movcs	r0, r2
 80034e6:	461c      	movcs	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	e7af      	b.n	800344c <tcp_alloc+0x60>
 80034ec:	200036fc 	.word	0x200036fc
 80034f0:	20003708 	.word	0x20003708
 80034f4:	200036f8 	.word	0x200036f8
 80034f8:	200001b5 	.word	0x200001b5
 80034fc:	0800321d 	.word	0x0800321d
 8003500:	006ddd00 	.word	0x006ddd00

08003504 <tcp_eff_send_mss_impl>:
{
 8003504:	b510      	push	{r4, lr}
 8003506:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 8003508:	4608      	mov	r0, r1
 800350a:	f7fe fd35 	bl	8001f78 <ip4_route>
    if (outif == NULL) {
 800350e:	b130      	cbz	r0, 800351e <tcp_eff_send_mss_impl+0x1a>
    mtu = outif->mtu;
 8003510:	8c43      	ldrh	r3, [r0, #34]	; 0x22
  if (mtu != 0) {
 8003512:	b123      	cbz	r3, 800351e <tcp_eff_send_mss_impl+0x1a>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8003514:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 8003516:	b29b      	uxth	r3, r3
 8003518:	429c      	cmp	r4, r3
 800351a:	bf28      	it	cs
 800351c:	461c      	movcs	r4, r3
}
 800351e:	4620      	mov	r0, r4
 8003520:	bd10      	pop	{r4, pc}
	...

08003524 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8003524:	b538      	push	{r3, r4, r5, lr}
 8003526:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8003528:	4604      	mov	r4, r0
 800352a:	b180      	cbz	r0, 800354e <tcp_netif_ip_addr_changed+0x2a>
 800352c:	6803      	ldr	r3, [r0, #0]
 800352e:	b173      	cbz	r3, 800354e <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8003530:	4b0c      	ldr	r3, [pc, #48]	; (8003564 <tcp_netif_ip_addr_changed+0x40>)
 8003532:	6819      	ldr	r1, [r3, #0]
 8003534:	f7ff ff21 	bl	800337a <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8003538:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <tcp_netif_ip_addr_changed+0x44>)
 800353a:	4620      	mov	r0, r4
 800353c:	6819      	ldr	r1, [r3, #0]
 800353e:	f7ff ff1c 	bl	800337a <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8003542:	b125      	cbz	r5, 800354e <tcp_netif_ip_addr_changed+0x2a>
 8003544:	682b      	ldr	r3, [r5, #0]
 8003546:	b113      	cbz	r3, 800354e <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8003548:	4b08      	ldr	r3, [pc, #32]	; (800356c <tcp_netif_ip_addr_changed+0x48>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	b903      	cbnz	r3, 8003550 <tcp_netif_ip_addr_changed+0x2c>
 800354e:	bd38      	pop	{r3, r4, r5, pc}
        next = lpcb->next;
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8003550:	6818      	ldr	r0, [r3, #0]
 8003552:	6821      	ldr	r1, [r4, #0]
        next = lpcb->next;
 8003554:	68da      	ldr	r2, [r3, #12]
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8003556:	4288      	cmp	r0, r1
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8003558:	bf04      	itt	eq
 800355a:	6829      	ldreq	r1, [r5, #0]
 800355c:	6019      	streq	r1, [r3, #0]
{
 800355e:	4613      	mov	r3, r2
 8003560:	e7f4      	b.n	800354c <tcp_netif_ip_addr_changed+0x28>
 8003562:	bf00      	nop
 8003564:	200036f8 	.word	0x200036f8
 8003568:	20003704 	.word	0x20003704
 800356c:	20003700 	.word	0x20003700

08003570 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8003570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8003574:	68c3      	ldr	r3, [r0, #12]
{
 8003576:	4605      	mov	r5, r0
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8003578:	8998      	ldrh	r0, [r3, #12]
{
 800357a:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800357c:	f7fe f980 	bl	8001880 <lwip_htons>
 8003580:	07c2      	lsls	r2, r0, #31
 8003582:	d415      	bmi.n	80035b0 <tcp_oos_insert_segment+0x40>
    next = NULL;
  } else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
 8003584:	4e18      	ldr	r6, [pc, #96]	; (80035e8 <tcp_oos_insert_segment+0x78>)
    while (next &&
 8003586:	b1bc      	cbz	r4, 80035b8 <tcp_oos_insert_segment+0x48>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8003588:	68e7      	ldr	r7, [r4, #12]
 800358a:	6830      	ldr	r0, [r6, #0]
 800358c:	892b      	ldrh	r3, [r5, #8]
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	8922      	ldrh	r2, [r4, #8]
 8003592:	4403      	add	r3, r0
 8003594:	440a      	add	r2, r1
 8003596:	1a9a      	subs	r2, r3, r2
    while (next &&
 8003598:	2a00      	cmp	r2, #0
 800359a:	da10      	bge.n	80035be <tcp_oos_insert_segment+0x4e>
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800359c:	1a5b      	subs	r3, r3, r1
    if (next &&
 800359e:	2b00      	cmp	r3, #0
 80035a0:	dd0a      	ble.n	80035b8 <tcp_oos_insert_segment+0x48>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80035a2:	1a09      	subs	r1, r1, r0
 80035a4:	b289      	uxth	r1, r1
 80035a6:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80035a8:	6868      	ldr	r0, [r5, #4]
 80035aa:	f7ff fc07 	bl	8002dbc <pbuf_realloc>
 80035ae:	e003      	b.n	80035b8 <tcp_oos_insert_segment+0x48>
    tcp_segs_free(next);
 80035b0:	4620      	mov	r0, r4
 80035b2:	f7ff fd12 	bl	8002fda <tcp_segs_free>
    next = NULL;
 80035b6:	2400      	movs	r4, #0
    }
  }
  cseg->next = next;
 80035b8:	602c      	str	r4, [r5, #0]
}
 80035ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80035be:	89b8      	ldrh	r0, [r7, #12]
 80035c0:	f7fe f95e 	bl	8001880 <lwip_htons>
 80035c4:	07c3      	lsls	r3, r0, #31
 80035c6:	d509      	bpl.n	80035dc <tcp_oos_insert_segment+0x6c>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80035c8:	f8d5 800c 	ldr.w	r8, [r5, #12]
 80035cc:	2001      	movs	r0, #1
 80035ce:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 80035d2:	f7fe f955 	bl	8001880 <lwip_htons>
 80035d6:	4338      	orrs	r0, r7
 80035d8:	f8a8 000c 	strh.w	r0, [r8, #12]
      next = next->next;
 80035dc:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 80035de:	4620      	mov	r0, r4
 80035e0:	f7ff fced 	bl	8002fbe <tcp_seg_free>
      next = next->next;
 80035e4:	463c      	mov	r4, r7
 80035e6:	e7ce      	b.n	8003586 <tcp_oos_insert_segment+0x16>
 80035e8:	200001dc 	.word	0x200001dc

080035ec <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80035ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);

  if (flags & TCP_ACK) {
 80035f0:	4ba9      	ldr	r3, [pc, #676]	; (8003898 <tcp_receive+0x2ac>)
 80035f2:	4eaa      	ldr	r6, [pc, #680]	; (800389c <tcp_receive+0x2b0>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	f013 0f10 	tst.w	r3, #16
{
 80035fa:	4604      	mov	r4, r0
  if (flags & TCP_ACK) {
 80035fc:	d074      	beq.n	80036e8 <tcp_receive+0xfc>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80035fe:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003600:	6835      	ldr	r5, [r6, #0]
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8003602:	7d00      	ldrb	r0, [r0, #20]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8003604:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 8003608:	6d61      	ldr	r1, [r4, #84]	; 0x54
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800360a:	1b5f      	subs	r7, r3, r5
 800360c:	2f00      	cmp	r7, #0
 800360e:	4fa4      	ldr	r7, [pc, #656]	; (80038a0 <tcp_receive+0x2b4>)
 8003610:	db0d      	blt.n	800362e <tcp_receive+0x42>
 8003612:	42ab      	cmp	r3, r5
 8003614:	d103      	bne.n	800361e <tcp_receive+0x32>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	1acb      	subs	r3, r1, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	db07      	blt.n	800362e <tcp_receive+0x42>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	4299      	cmp	r1, r3
 8003622:	d11f      	bne.n	8003664 <tcp_receive+0x78>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8003624:	4b9f      	ldr	r3, [pc, #636]	; (80038a4 <tcp_receive+0x2b8>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	89db      	ldrh	r3, [r3, #14]
 800362a:	4293      	cmp	r3, r2
 800362c:	d91a      	bls.n	8003664 <tcp_receive+0x78>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800362e:	4b9d      	ldr	r3, [pc, #628]	; (80038a4 <tcp_receive+0x2b8>)
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8003630:	f8b4 c05e 	ldrh.w	ip, [r4, #94]	; 0x5e
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f8b3 e00e 	ldrh.w	lr, [r3, #14]
        pcb->snd_wnd_max = pcb->snd_wnd;
      }
      pcb->snd_wl1 = seqno;
 800363a:	6525      	str	r5, [r4, #80]	; 0x50
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800363c:	45f4      	cmp	ip, lr
      pcb->snd_wl2 = ackno;
 800363e:	683d      	ldr	r5, [r7, #0]
 8003640:	6565      	str	r5, [r4, #84]	; 0x54
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8003642:	4673      	mov	r3, lr
 8003644:	f8a4 e05c 	strh.w	lr, [r4, #92]	; 0x5c
        pcb->snd_wnd_max = pcb->snd_wnd;
 8003648:	bf38      	it	cc
 800364a:	f8a4 e05e 	strhcc.w	lr, [r4, #94]	; 0x5e
 800364e:	f894 5095 	ldrb.w	r5, [r4, #149]	; 0x95
      if (pcb->snd_wnd == 0) {
 8003652:	2b00      	cmp	r3, #0
 8003654:	f040 8115 	bne.w	8003882 <tcp_receive+0x296>
        if (pcb->persist_backoff == 0) {
 8003658:	b925      	cbnz	r5, 8003664 <tcp_receive+0x78>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800365a:	f884 e094 	strb.w	lr, [r4, #148]	; 0x94
          pcb->persist_backoff = 1;
 800365e:	2301      	movs	r3, #1
        }
      } else if (pcb->persist_backoff > 0) {
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8003660:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	f8d4 e044 	ldr.w	lr, [r4, #68]	; 0x44
 800366a:	eba3 050e 	sub.w	r5, r3, lr
 800366e:	2d00      	cmp	r5, #0
 8003670:	4d8d      	ldr	r5, [pc, #564]	; (80038a8 <tcp_receive+0x2bc>)
 8003672:	f300 811f 	bgt.w	80038b4 <tcp_receive+0x2c8>
      /* Clause 2 */
      if (tcplen == 0) {
 8003676:	488d      	ldr	r0, [pc, #564]	; (80038ac <tcp_receive+0x2c0>)
 8003678:	8800      	ldrh	r0, [r0, #0]
 800367a:	2800      	cmp	r0, #0
 800367c:	f040 8386 	bne.w	8003d8c <tcp_receive+0x7a0>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8003680:	440a      	add	r2, r1
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8003682:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003684:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8003688:	4401      	add	r1, r0
 800368a:	428a      	cmp	r2, r1
 800368c:	f040 837e 	bne.w	8003d8c <tcp_receive+0x7a0>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8003690:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8003694:	2a00      	cmp	r2, #0
 8003696:	f2c0 8379 	blt.w	8003d8c <tcp_receive+0x7a0>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800369a:	4573      	cmp	r3, lr
 800369c:	f040 8376 	bne.w	8003d8c <tcp_receive+0x7a0>
              found_dupack = 1;
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80036a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036a4:	1c53      	adds	r3, r2, #1
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	429a      	cmp	r2, r3
                ++pcb->dupacks;
 80036aa:	bf38      	it	cc
 80036ac:	f884 3043 	strbcc.w	r3, [r4, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80036b0:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80036b4:	2b03      	cmp	r3, #3
 80036b6:	f240 80e9 	bls.w	800388c <tcp_receive+0x2a0>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80036ba:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 80036be:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80036c0:	4413      	add	r3, r2
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d201      	bcs.n	80036cc <tcp_receive+0xe0>
                  pcb->cwnd += pcb->mss;
 80036c8:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 80036cc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f040 8161 	bne.w	8003996 <tcp_receive+0x3aa>
      if (pcb->snd_queuelen != 0) {
        LWIP_ASSERT("tcp_receive: valid queue length",
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 80036d4:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 80036d8:	882a      	ldrh	r2, [r5, #0]
 80036da:	4413      	add	r3, r2
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80036dc:	6b62      	ldr	r2, [r4, #52]	; 0x34
    pcb->snd_buf += recv_acked;
 80036de:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80036e2:	2a00      	cmp	r2, #0
 80036e4:	f040 8197 	bne.w	8003a16 <tcp_receive+0x42a>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80036e8:	4f70      	ldr	r7, [pc, #448]	; (80038ac <tcp_receive+0x2c0>)
 80036ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80036ec:	8838      	ldrh	r0, [r7, #0]
 80036ee:	2800      	cmp	r0, #0
 80036f0:	f000 8340 	beq.w	8003d74 <tcp_receive+0x788>
 80036f4:	7d23      	ldrb	r3, [r4, #20]
 80036f6:	2b06      	cmp	r3, #6
 80036f8:	f200 833c 	bhi.w	8003d74 <tcp_receive+0x788>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80036fc:	6833      	ldr	r3, [r6, #0]
 80036fe:	eba2 0e03 	sub.w	lr, r2, r3
 8003702:	f1be 0f01 	cmp.w	lr, #1
 8003706:	f100 81b3 	bmi.w	8003a70 <tcp_receive+0x484>
 800370a:	f1c3 0101 	rsb	r1, r3, #1
 800370e:	1a09      	subs	r1, r1, r0
 8003710:	4411      	add	r1, r2
 8003712:	2900      	cmp	r1, #0
 8003714:	f300 81ac 	bgt.w	8003a70 <tcp_receive+0x484>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8003718:	4d65      	ldr	r5, [pc, #404]	; (80038b0 <tcp_receive+0x2c4>)
 800371a:	6868      	ldr	r0, [r5, #4]
      off = pcb->rcv_nxt - seqno;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
 800371c:	8943      	ldrh	r3, [r0, #10]
 800371e:	459e      	cmp	lr, r3
      off = pcb->rcv_nxt - seqno;
 8003720:	4671      	mov	r1, lr
      if (inseg.p->len < off) {
 8003722:	f340 81a2 	ble.w	8003a6a <tcp_receive+0x47e>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8003726:	8903      	ldrh	r3, [r0, #8]
 8003728:	1a5b      	subs	r3, r3, r1
 800372a:	b29b      	uxth	r3, r3
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
 800372c:	f04f 0e00 	mov.w	lr, #0
        while (p->len < off) {
 8003730:	8942      	ldrh	r2, [r0, #10]
 8003732:	4291      	cmp	r1, r2
 8003734:	f300 8193 	bgt.w	8003a5e <tcp_receive+0x472>
          p = p->next;
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8003738:	4249      	negs	r1, r1
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800373a:	b209      	sxth	r1, r1
 800373c:	f7ff fa7c 	bl	8002c38 <pbuf_header>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8003740:	8929      	ldrh	r1, [r5, #8]
 8003742:	6833      	ldr	r3, [r6, #0]
 8003744:	6a62      	ldr	r2, [r4, #36]	; 0x24
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8003746:	6032      	str	r2, [r6, #0]
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8003748:	440b      	add	r3, r1
 800374a:	1a9b      	subs	r3, r3, r2
 800374c:	812b      	strh	r3, [r5, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800374e:	68eb      	ldr	r3, [r5, #12]
 8003750:	605a      	str	r2, [r3, #4]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8003752:	6831      	ldr	r1, [r6, #0]
 8003754:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003756:	1a8b      	subs	r3, r1, r2
 8003758:	2b00      	cmp	r3, #0
 800375a:	f2c0 8306 	blt.w	8003d6a <tcp_receive+0x77e>
 800375e:	1c4b      	adds	r3, r1, #1
 8003760:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8003762:	1a9b      	subs	r3, r3, r2
 8003764:	1a1b      	subs	r3, r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	f300 82ff 	bgt.w	8003d6a <tcp_receive+0x77e>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800376c:	4291      	cmp	r1, r2
 800376e:	f040 8233 	bne.w	8003bd8 <tcp_receive+0x5ec>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8003772:	4d4f      	ldr	r5, [pc, #316]	; (80038b0 <tcp_receive+0x2c4>)
 8003774:	68eb      	ldr	r3, [r5, #12]
 8003776:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800377a:	8998      	ldrh	r0, [r3, #12]
 800377c:	f7fe f880 	bl	8001880 <lwip_htons>
 8003780:	f010 0003 	ands.w	r0, r0, #3
 8003784:	bf18      	it	ne
 8003786:	2001      	movne	r0, #1
 8003788:	4440      	add	r0, r8

        if (tcplen > pcb->rcv_wnd) {
 800378a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 800378c:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 800378e:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 8003790:	8038      	strh	r0, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 8003792:	d234      	bcs.n	80037fe <tcp_receive+0x212>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8003794:	68eb      	ldr	r3, [r5, #12]
 8003796:	8998      	ldrh	r0, [r3, #12]
 8003798:	f7fe f872 	bl	8001880 <lwip_htons>
 800379c:	07c2      	lsls	r2, r0, #31
 800379e:	d510      	bpl.n	80037c2 <tcp_receive+0x1d6>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80037a0:	f8d5 900c 	ldr.w	r9, [r5, #12]
 80037a4:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 80037a8:	4640      	mov	r0, r8
 80037aa:	f7fe f869 	bl	8001880 <lwip_htons>
 80037ae:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 80037b2:	f7fe f865 	bl	8001880 <lwip_htons>
 80037b6:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 80037ba:	ea40 0808 	orr.w	r8, r0, r8
 80037be:	f8a9 800c 	strh.w	r8, [r9, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80037c2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80037c4:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80037c6:	68eb      	ldr	r3, [r5, #12]
 80037c8:	8998      	ldrh	r0, [r3, #12]
 80037ca:	f7fe f859 	bl	8001880 <lwip_htons>
 80037ce:	0783      	lsls	r3, r0, #30
            inseg.len -= 1;
 80037d0:	bf48      	it	mi
 80037d2:	892b      	ldrhmi	r3, [r5, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80037d4:	6868      	ldr	r0, [r5, #4]
            inseg.len -= 1;
 80037d6:	bf44      	itt	mi
 80037d8:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80037dc:	812b      	strhmi	r3, [r5, #8]
          pbuf_realloc(inseg.p, inseg.len);
 80037de:	8929      	ldrh	r1, [r5, #8]
 80037e0:	f7ff faec 	bl	8002dbc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80037e4:	68eb      	ldr	r3, [r5, #12]
 80037e6:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 80037ea:	8998      	ldrh	r0, [r3, #12]
 80037ec:	f7fe f848 	bl	8001880 <lwip_htons>
 80037f0:	f010 0003 	ands.w	r0, r0, #3
 80037f4:	bf18      	it	ne
 80037f6:	2001      	movne	r0, #1
 80037f8:	4480      	add	r8, r0
 80037fa:	f8a7 8000 	strh.w	r8, [r7]
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80037fe:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 8144 	beq.w	8003a8e <tcp_receive+0x4a2>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8003806:	68eb      	ldr	r3, [r5, #12]
 8003808:	8998      	ldrh	r0, [r3, #12]
 800380a:	f7fe f839 	bl	8001880 <lwip_htons>
 800380e:	07c0      	lsls	r0, r0, #31
 8003810:	f100 813a 	bmi.w	8003a88 <tcp_receive+0x49c>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          } else {
            next = pcb->ooseq;
 8003814:	f8d4 8070 	ldr.w	r8, [r4, #112]	; 0x70
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8003818:	f1b8 0f00 	cmp.w	r8, #0
 800381c:	d02e      	beq.n	800387c <tcp_receive+0x290>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800381e:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 8003822:	6830      	ldr	r0, [r6, #0]
 8003824:	883b      	ldrh	r3, [r7, #0]
 8003826:	f8de 2004 	ldr.w	r2, [lr, #4]
 800382a:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 800382e:	4403      	add	r3, r0
 8003830:	4411      	add	r1, r2
 8003832:	1a59      	subs	r1, r3, r1
            while (next &&
 8003834:	2900      	cmp	r1, #0
 8003836:	f280 815a 	bge.w	8003aee <tcp_receive+0x502>
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
                TCP_SEQ_GT(seqno + tcplen,
 800383a:	1a9b      	subs	r3, r3, r2
            if (next &&
 800383c:	2b00      	cmp	r3, #0
 800383e:	dd1d      	ble.n	800387c <tcp_receive+0x290>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8003840:	68eb      	ldr	r3, [r5, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8003842:	1a12      	subs	r2, r2, r0
 8003844:	812a      	strh	r2, [r5, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8003846:	8998      	ldrh	r0, [r3, #12]
 8003848:	f7fe f81a 	bl	8001880 <lwip_htons>
 800384c:	0783      	lsls	r3, r0, #30
                inseg.len -= 1;
 800384e:	bf48      	it	mi
 8003850:	892b      	ldrhmi	r3, [r5, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8003852:	6868      	ldr	r0, [r5, #4]
                inseg.len -= 1;
 8003854:	bf44      	itt	mi
 8003856:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800385a:	812b      	strhmi	r3, [r5, #8]
              pbuf_realloc(inseg.p, inseg.len);
 800385c:	8929      	ldrh	r1, [r5, #8]
 800385e:	f7ff faad 	bl	8002dbc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8003862:	68eb      	ldr	r3, [r5, #12]
 8003864:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8003868:	8998      	ldrh	r0, [r3, #12]
 800386a:	f7fe f809 	bl	8001880 <lwip_htons>
 800386e:	f010 0003 	ands.w	r0, r0, #3
 8003872:	bf18      	it	ne
 8003874:	2001      	movne	r0, #1
 8003876:	4481      	add	r9, r0
 8003878:	f8a7 9000 	strh.w	r9, [r7]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800387c:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
 8003880:	e105      	b.n	8003a8e <tcp_receive+0x4a2>
      } else if (pcb->persist_backoff > 0) {
 8003882:	2d00      	cmp	r5, #0
 8003884:	f43f aeee 	beq.w	8003664 <tcp_receive+0x78>
          pcb->persist_backoff = 0;
 8003888:	2300      	movs	r3, #0
 800388a:	e6e9      	b.n	8003660 <tcp_receive+0x74>
              } else if (pcb->dupacks == 3) {
 800388c:	f47f af1e 	bne.w	80036cc <tcp_receive+0xe0>
                tcp_rexmit_fast(pcb);
 8003890:	4620      	mov	r0, r4
 8003892:	f001 fa1b 	bl	8004ccc <tcp_rexmit_fast>
 8003896:	e719      	b.n	80036cc <tcp_receive+0xe0>
 8003898:	200001bc 	.word	0x200001bc
 800389c:	200001dc 	.word	0x200001dc
 80038a0:	200001b8 	.word	0x200001b8
 80038a4:	200001e4 	.word	0x200001e4
 80038a8:	200001d0 	.word	0x200001d0
 80038ac:	200001f2 	.word	0x200001f2
 80038b0:	200001c0 	.word	0x200001c0
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80038b4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80038b6:	1a9a      	subs	r2, r3, r2
 80038b8:	2a00      	cmp	r2, #0
 80038ba:	dc68      	bgt.n	800398e <tcp_receive+0x3a2>
      if (pcb->flags & TF_INFR) {
 80038bc:	7ea2      	ldrb	r2, [r4, #26]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80038be:	f9b4 e03c 	ldrsh.w	lr, [r4, #60]	; 0x3c
      pcb->lastack = ackno;
 80038c2:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->flags & TF_INFR) {
 80038c4:	0751      	lsls	r1, r2, #29
        pcb->flags &= ~TF_INFR;
 80038c6:	bf41      	itttt	mi
 80038c8:	f022 0204 	bicmi.w	r2, r2, #4
 80038cc:	76a2      	strbmi	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 80038ce:	f8b4 204a 	ldrhmi.w	r2, [r4, #74]	; 0x4a
 80038d2:	f8a4 2048 	strhmi.w	r2, [r4, #72]	; 0x48
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80038d6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
      pcb->nrtx = 0;
 80038d8:	2100      	movs	r1, #0
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80038da:	eb02 02ee 	add.w	r2, r2, lr, asr #3
      if (pcb->state >= ESTABLISHED) {
 80038de:	2803      	cmp	r0, #3
      pcb->nrtx = 0;
 80038e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80038e4:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 80038e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
      if (pcb->state >= ESTABLISHED) {
 80038ec:	d90f      	bls.n	800390e <tcp_receive+0x322>
        if (pcb->cwnd < pcb->ssthresh) {
 80038ee:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 80038f2:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 80038f6:	4293      	cmp	r3, r2
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80038f8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 80038fa:	bf9c      	itt	ls
 80038fc:	435b      	mulls	r3, r3
 80038fe:	fb93 f3f2 	sdivls	r3, r3, r2
 8003902:	4413      	add	r3, r2
 8003904:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 8003906:	429a      	cmp	r2, r3
 8003908:	d201      	bcs.n	800390e <tcp_receive+0x322>
            pcb->cwnd = new_cwnd;
 800390a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      while (pcb->unacked != NULL &&
 800390e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003910:	b943      	cbnz	r3, 8003924 <tcp_receive+0x338>
      if (pcb->unacked == NULL) {
 8003912:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003914:	2300      	movs	r3, #0
 8003916:	2a00      	cmp	r2, #0
 8003918:	d137      	bne.n	800398a <tcp_receive+0x39e>
        pcb->rtime = -1;
 800391a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800391e:	8622      	strh	r2, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 8003920:	76e3      	strb	r3, [r4, #27]
 8003922:	e6d3      	b.n	80036cc <tcp_receive+0xe0>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	6858      	ldr	r0, [r3, #4]
 8003928:	f7fd ffad 	bl	8001886 <lwip_htonl>
 800392c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800392e:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	4681      	mov	r9, r0
 8003936:	8998      	ldrh	r0, [r3, #12]
 8003938:	f7fd ffa2 	bl	8001880 <lwip_htons>
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	f010 0003 	ands.w	r0, r0, #3
 8003942:	eba8 0803 	sub.w	r8, r8, r3
 8003946:	bf18      	it	ne
 8003948:	2001      	movne	r0, #1
 800394a:	44c8      	add	r8, r9
 800394c:	4480      	add	r8, r0
      while (pcb->unacked != NULL &&
 800394e:	f1b8 0f00 	cmp.w	r8, #0
 8003952:	dcde      	bgt.n	8003912 <tcp_receive+0x326>
        next = pcb->unacked;
 8003954:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
        pcb->unacked = pcb->unacked->next;
 8003958:	f8d8 3000 	ldr.w	r3, [r8]
 800395c:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800395e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8003962:	f7ff fa54 	bl	8002e0e <pbuf_clen>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8003966:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800396a:	f7ff fa50 	bl	8002e0e <pbuf_clen>
 800396e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        recv_acked += next->len;
 8003972:	882a      	ldrh	r2, [r5, #0]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8003974:	1a18      	subs	r0, r3, r0
        recv_acked += next->len;
 8003976:	f8b8 3008 	ldrh.w	r3, [r8, #8]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 800397a:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        recv_acked += next->len;
 800397e:	4413      	add	r3, r2
        tcp_seg_free(next);
 8003980:	4640      	mov	r0, r8
        recv_acked += next->len;
 8003982:	802b      	strh	r3, [r5, #0]
        tcp_seg_free(next);
 8003984:	f7ff fb1b 	bl	8002fbe <tcp_seg_free>
 8003988:	e7c1      	b.n	800390e <tcp_receive+0x322>
        pcb->rtime = 0;
 800398a:	8623      	strh	r3, [r4, #48]	; 0x30
 800398c:	e7c8      	b.n	8003920 <tcp_receive+0x334>
      tcp_send_empty_ack(pcb);
 800398e:	4620      	mov	r0, r4
 8003990:	f000 ff9c 	bl	80048cc <tcp_send_empty_ack>
 8003994:	e69a      	b.n	80036cc <tcp_receive+0xe0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f8d7 8000 	ldr.w	r8, [r7]
 800399c:	6858      	ldr	r0, [r3, #4]
 800399e:	f7fd ff72 	bl	8001886 <lwip_htonl>
 80039a2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80039a4:	f8b3 a008 	ldrh.w	sl, [r3, #8]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	4681      	mov	r9, r0
 80039ac:	8998      	ldrh	r0, [r3, #12]
 80039ae:	f7fd ff67 	bl	8001880 <lwip_htons>
 80039b2:	eba8 080a 	sub.w	r8, r8, sl
 80039b6:	f010 0003 	ands.w	r0, r0, #3
 80039ba:	bf18      	it	ne
 80039bc:	2001      	movne	r0, #1
 80039be:	eba8 0809 	sub.w	r8, r8, r9
 80039c2:	eba8 0800 	sub.w	r8, r8, r0
    while (pcb->unsent != NULL &&
 80039c6:	f1b8 0f00 	cmp.w	r8, #0
 80039ca:	f6ff ae83 	blt.w	80036d4 <tcp_receive+0xe8>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80039d2:	1a9b      	subs	r3, r3, r2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f73f ae7d 	bgt.w	80036d4 <tcp_receive+0xe8>
      next = pcb->unsent;
 80039da:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 80039de:	f8d8 3000 	ldr.w	r3, [r8]
 80039e2:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 80039e4:	b90b      	cbnz	r3, 80039ea <tcp_receive+0x3fe>
        pcb->unsent_oversize = 0;
 80039e6:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80039ea:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80039ee:	f7ff fa0e 	bl	8002e0e <pbuf_clen>
      pcb->snd_queuelen -= pbuf_clen(next->p);
 80039f2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80039f6:	f7ff fa0a 	bl	8002e0e <pbuf_clen>
 80039fa:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      recv_acked += next->len;
 80039fe:	882a      	ldrh	r2, [r5, #0]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8003a00:	1a18      	subs	r0, r3, r0
      recv_acked += next->len;
 8003a02:	f8b8 3008 	ldrh.w	r3, [r8, #8]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8003a06:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      recv_acked += next->len;
 8003a0a:	4413      	add	r3, r2
      tcp_seg_free(next);
 8003a0c:	4640      	mov	r0, r8
      recv_acked += next->len;
 8003a0e:	802b      	strh	r3, [r5, #0]
      tcp_seg_free(next);
 8003a10:	f7ff fad5 	bl	8002fbe <tcp_seg_free>
 8003a14:	e65a      	b.n	80036cc <tcp_receive+0xe0>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8003a16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a18:	6839      	ldr	r1, [r7, #0]
 8003a1a:	1a5b      	subs	r3, r3, r1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f6bf ae63 	bge.w	80036e8 <tcp_receive+0xfc>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8003a22:	4ba0      	ldr	r3, [pc, #640]	; (8003ca4 <tcp_receive+0x6b8>)
      m = m - (pcb->sa >> 3);
 8003a24:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8003a28:	6819      	ldr	r1, [r3, #0]
 8003a2a:	1a89      	subs	r1, r1, r2
      m = m - (pcb->sa >> 3);
 8003a2c:	eba1 01e0 	sub.w	r1, r1, r0, asr #3
 8003a30:	b289      	uxth	r1, r1
 8003a32:	b20b      	sxth	r3, r1
      if (m < 0) {
 8003a34:	2b00      	cmp	r3, #0
      m = m - (pcb->sv >> 2);
 8003a36:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      pcb->sa += m;
 8003a3a:	4408      	add	r0, r1
        m = -m;
 8003a3c:	bfbc      	itt	lt
 8003a3e:	4249      	neglt	r1, r1
 8003a40:	b20b      	sxthlt	r3, r1
      pcb->sv += m;
 8003a42:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
 8003a46:	4413      	add	r3, r2
      pcb->sa += m;
 8003a48:	b200      	sxth	r0, r0
      pcb->sv += m;
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8003a4e:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 8003a52:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 8003a56:	2300      	movs	r3, #0
      pcb->sa += m;
 8003a58:	87a0      	strh	r0, [r4, #60]	; 0x3c
      pcb->rttest = 0;
 8003a5a:	6363      	str	r3, [r4, #52]	; 0x34
 8003a5c:	e644      	b.n	80036e8 <tcp_receive+0xfc>
          p->tot_len = new_tot_len;
 8003a5e:	8103      	strh	r3, [r0, #8]
          p->len = 0;
 8003a60:	f8a0 e00a 	strh.w	lr, [r0, #10]
          off -= p->len;
 8003a64:	1a89      	subs	r1, r1, r2
          p = p->next;
 8003a66:	6800      	ldr	r0, [r0, #0]
 8003a68:	e662      	b.n	8003730 <tcp_receive+0x144>
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8003a6a:	f1ce 0100 	rsb	r1, lr, #0
 8003a6e:	e664      	b.n	800373a <tcp_receive+0x14e>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8003a70:	1a9b      	subs	r3, r3, r2
 8003a72:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 8003a74:	bfbe      	ittt	lt
 8003a76:	7ea3      	ldrblt	r3, [r4, #26]
 8003a78:	f043 0302 	orrlt.w	r3, r3, #2
 8003a7c:	76a3      	strblt	r3, [r4, #26]
 8003a7e:	e668      	b.n	8003752 <tcp_receive+0x166>
              pcb->ooseq = pcb->ooseq->next;
 8003a80:	6803      	ldr	r3, [r0, #0]
 8003a82:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8003a84:	f7ff fa9b 	bl	8002fbe <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8003a88:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8003a8a:	2800      	cmp	r0, #0
 8003a8c:	d1f8      	bne.n	8003a80 <tcp_receive+0x494>
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8003a8e:	8839      	ldrh	r1, [r7, #0]

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
        pcb->rcv_wnd -= tcplen;
 8003a90:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        pcb->rcv_nxt = seqno + tcplen;
 8003a92:	6832      	ldr	r2, [r6, #0]
        pcb->rcv_wnd -= tcplen;
 8003a94:	1a5b      	subs	r3, r3, r1
        pcb->rcv_nxt = seqno + tcplen;
 8003a96:	440a      	add	r2, r1
 8003a98:	6262      	str	r2, [r4, #36]	; 0x24
        pcb->rcv_wnd -= tcplen;
 8003a9a:	8523      	strh	r3, [r4, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8003a9c:	4620      	mov	r0, r4
 8003a9e:	f7ff fa4f 	bl	8002f40 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8003aa2:	686b      	ldr	r3, [r5, #4]
 8003aa4:	891a      	ldrh	r2, [r3, #8]
 8003aa6:	b11a      	cbz	r2, 8003ab0 <tcp_receive+0x4c4>
          recv_data = inseg.p;
 8003aa8:	4a7f      	ldr	r2, [pc, #508]	; (8003ca8 <tcp_receive+0x6bc>)
 8003aaa:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8003aac:	2300      	movs	r3, #0
 8003aae:	606b      	str	r3, [r5, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8003ab0:	68eb      	ldr	r3, [r5, #12]
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8003ab2:	4f7d      	ldr	r7, [pc, #500]	; (8003ca8 <tcp_receive+0x6bc>)
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8003ab4:	8998      	ldrh	r0, [r3, #12]
            }
            cseg->p = NULL;
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8003ab6:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 8003cac <tcp_receive+0x6c0>
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8003aba:	f7fd fee1 	bl	8001880 <lwip_htons>
 8003abe:	07c5      	lsls	r5, r0, #31
          recv_flags |= TF_GOT_FIN;
 8003ac0:	bf41      	itttt	mi
 8003ac2:	4a7a      	ldrmi	r2, [pc, #488]	; (8003cac <tcp_receive+0x6c0>)
 8003ac4:	7813      	ldrbmi	r3, [r2, #0]
 8003ac6:	f043 0320 	orrmi.w	r3, r3, #32
 8003aca:	7013      	strbmi	r3, [r2, #0]
            cseg->p = NULL;
 8003acc:	f04f 0900 	mov.w	r9, #0
        while (pcb->ooseq != NULL &&
 8003ad0:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8003ad2:	b125      	cbz	r5, 8003ade <tcp_receive+0x4f2>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8003ad4:	68e9      	ldr	r1, [r5, #12]
        while (pcb->ooseq != NULL &&
 8003ad6:	6a62      	ldr	r2, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8003ad8:	684b      	ldr	r3, [r1, #4]
        while (pcb->ooseq != NULL &&
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d032      	beq.n	8003b44 <tcp_receive+0x558>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8003ade:	7ea3      	ldrb	r3, [r4, #26]
 8003ae0:	07d9      	lsls	r1, r3, #31
 8003ae2:	d574      	bpl.n	8003bce <tcp_receive+0x5e2>
 8003ae4:	f023 0301 	bic.w	r3, r3, #1
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
 8003ae8:	f043 0302 	orr.w	r3, r3, #2
 8003aec:	e071      	b.n	8003bd2 <tcp_receive+0x5e6>
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
 8003aee:	f8be 000c 	ldrh.w	r0, [lr, #12]
 8003af2:	f7fd fec5 	bl	8001880 <lwip_htons>
 8003af6:	07c1      	lsls	r1, r0, #31
 8003af8:	d51d      	bpl.n	8003b36 <tcp_receive+0x54a>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8003afa:	68eb      	ldr	r3, [r5, #12]
 8003afc:	8998      	ldrh	r0, [r3, #12]
 8003afe:	f7fd febf 	bl	8001880 <lwip_htons>
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
 8003b02:	0782      	lsls	r2, r0, #30
 8003b04:	d417      	bmi.n	8003b36 <tcp_receive+0x54a>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8003b06:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8003b0a:	2001      	movs	r0, #1
 8003b0c:	f8ba 900c 	ldrh.w	r9, [sl, #12]
 8003b10:	f7fd feb6 	bl	8001880 <lwip_htons>
                tcplen = TCP_TCPLEN(&inseg);
 8003b14:	68eb      	ldr	r3, [r5, #12]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8003b16:	ea49 0000 	orr.w	r0, r9, r0
 8003b1a:	f8aa 000c 	strh.w	r0, [sl, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8003b1e:	8998      	ldrh	r0, [r3, #12]
 8003b20:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8003b24:	f7fd feac 	bl	8001880 <lwip_htons>
 8003b28:	f010 0003 	ands.w	r0, r0, #3
 8003b2c:	bf18      	it	ne
 8003b2e:	2001      	movne	r0, #1
 8003b30:	4481      	add	r9, r0
 8003b32:	f8a7 9000 	strh.w	r9, [r7]
              next = next->next;
 8003b36:	f8d8 9000 	ldr.w	r9, [r8]
              tcp_seg_free(prev);
 8003b3a:	4640      	mov	r0, r8
 8003b3c:	f7ff fa3f 	bl	8002fbe <tcp_seg_free>
              next = next->next;
 8003b40:	46c8      	mov	r8, r9
 8003b42:	e669      	b.n	8003818 <tcp_receive+0x22c>
          seqno = pcb->ooseq->tcphdr->seqno;
 8003b44:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8003b46:	8988      	ldrh	r0, [r1, #12]
 8003b48:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8003b4c:	f7fd fe98 	bl	8001880 <lwip_htons>
 8003b50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b52:	f010 0003 	ands.w	r0, r0, #3
 8003b56:	bf18      	it	ne
 8003b58:	2001      	movne	r0, #1
 8003b5a:	4453      	add	r3, sl
 8003b5c:	4418      	add	r0, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8003b5e:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8003b60:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8003b62:	8998      	ldrh	r0, [r3, #12]
 8003b64:	f7fd fe8c 	bl	8001880 <lwip_htons>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8003b68:	68eb      	ldr	r3, [r5, #12]
 8003b6a:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8003b6e:	8998      	ldrh	r0, [r3, #12]
 8003b70:	f7fd fe86 	bl	8001880 <lwip_htons>
 8003b74:	f010 0003 	ands.w	r0, r0, #3
 8003b78:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003b7a:	bf18      	it	ne
 8003b7c:	2001      	movne	r0, #1
 8003b7e:	4450      	add	r0, sl
 8003b80:	1a18      	subs	r0, r3, r0
 8003b82:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 8003b84:	4620      	mov	r0, r4
 8003b86:	f7ff f9db 	bl	8002f40 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 8003b8a:	6869      	ldr	r1, [r5, #4]
 8003b8c:	890b      	ldrh	r3, [r1, #8]
 8003b8e:	b12b      	cbz	r3, 8003b9c <tcp_receive+0x5b0>
            if (recv_data) {
 8003b90:	6838      	ldr	r0, [r7, #0]
 8003b92:	b1d0      	cbz	r0, 8003bca <tcp_receive+0x5de>
              pbuf_cat(recv_data, cseg->p);
 8003b94:	f7ff f948 	bl	8002e28 <pbuf_cat>
            cseg->p = NULL;
 8003b98:	f8c5 9004 	str.w	r9, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8003b9c:	68eb      	ldr	r3, [r5, #12]
 8003b9e:	8998      	ldrh	r0, [r3, #12]
 8003ba0:	f7fd fe6e 	bl	8001880 <lwip_htons>
 8003ba4:	07c0      	lsls	r0, r0, #31
 8003ba6:	d50a      	bpl.n	8003bbe <tcp_receive+0x5d2>
            recv_flags |= TF_GOT_FIN;
 8003ba8:	f898 3000 	ldrb.w	r3, [r8]
 8003bac:	f043 0320 	orr.w	r3, r3, #32
 8003bb0:	f888 3000 	strb.w	r3, [r8]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8003bb4:	7d23      	ldrb	r3, [r4, #20]
 8003bb6:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 8003bb8:	bf04      	itt	eq
 8003bba:	2307      	moveq	r3, #7
 8003bbc:	7523      	strbeq	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 8003bbe:	682b      	ldr	r3, [r5, #0]
 8003bc0:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 8003bc2:	4628      	mov	r0, r5
 8003bc4:	f7ff f9fb 	bl	8002fbe <tcp_seg_free>
 8003bc8:	e782      	b.n	8003ad0 <tcp_receive+0x4e4>
              recv_data = cseg->p;
 8003bca:	6039      	str	r1, [r7, #0]
 8003bcc:	e7e4      	b.n	8003b98 <tcp_receive+0x5ac>
        tcp_ack(pcb);
 8003bce:	f043 0301 	orr.w	r3, r3, #1
      tcp_ack_now(pcb);
 8003bd2:	76a3      	strb	r3, [r4, #26]
    }
  }
}
 8003bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        tcp_send_empty_ack(pcb);
 8003bd8:	4620      	mov	r0, r4
 8003bda:	f000 fe77 	bl	80048cc <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 8003bde:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8003be0:	b92d      	cbnz	r5, 8003bee <tcp_receive+0x602>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8003be2:	4833      	ldr	r0, [pc, #204]	; (8003cb0 <tcp_receive+0x6c4>)
 8003be4:	f7ff fa01 	bl	8002fea <tcp_seg_copy>
 8003be8:	6720      	str	r0, [r4, #112]	; 0x70
 8003bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (seqno == next->tcphdr->seqno) {
 8003bee:	6833      	ldr	r3, [r6, #0]
 8003bf0:	f04f 0800 	mov.w	r8, #0
 8003bf4:	f103 3eff 	add.w	lr, r3, #4294967295
 8003bf8:	f103 0c01 	add.w	ip, r3, #1
 8003bfc:	68e8      	ldr	r0, [r5, #12]
 8003bfe:	6842      	ldr	r2, [r0, #4]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d118      	bne.n	8003c36 <tcp_receive+0x64a>
              if (inseg.len > next->len) {
 8003c04:	482a      	ldr	r0, [pc, #168]	; (8003cb0 <tcp_receive+0x6c4>)
 8003c06:	892b      	ldrh	r3, [r5, #8]
 8003c08:	8902      	ldrh	r2, [r0, #8]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	f240 80c2 	bls.w	8003d94 <tcp_receive+0x7a8>
                cseg = tcp_seg_copy(&inseg);
 8003c10:	f7ff f9eb 	bl	8002fea <tcp_seg_copy>
                if (cseg != NULL) {
 8003c14:	2800      	cmp	r0, #0
 8003c16:	f000 80bd 	beq.w	8003d94 <tcp_receive+0x7a8>
                  if (prev != NULL) {
 8003c1a:	f1b8 0f00 	cmp.w	r8, #0
 8003c1e:	d008      	beq.n	8003c32 <tcp_receive+0x646>
                    prev->next = cseg;
 8003c20:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8003c24:	4629      	mov	r1, r5
}
 8003c26:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                    tcp_oos_insert_segment(cseg, next);
 8003c2a:	f7ff bca1 	b.w	8003570 <tcp_oos_insert_segment>
 8003c2e:	460d      	mov	r5, r1
 8003c30:	e7e4      	b.n	8003bfc <tcp_receive+0x610>
                    pcb->ooseq = cseg;
 8003c32:	6720      	str	r0, [r4, #112]	; 0x70
 8003c34:	e7f6      	b.n	8003c24 <tcp_receive+0x638>
              if (prev == NULL) {
 8003c36:	f1b8 0f00 	cmp.w	r8, #0
 8003c3a:	d10a      	bne.n	8003c52 <tcp_receive+0x666>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8003c3c:	1a99      	subs	r1, r3, r2
 8003c3e:	2900      	cmp	r1, #0
 8003c40:	da38      	bge.n	8003cb4 <tcp_receive+0x6c8>
                  cseg = tcp_seg_copy(&inseg);
 8003c42:	481b      	ldr	r0, [pc, #108]	; (8003cb0 <tcp_receive+0x6c4>)
 8003c44:	f7ff f9d1 	bl	8002fea <tcp_seg_copy>
                  if (cseg != NULL) {
 8003c48:	2800      	cmp	r0, #0
 8003c4a:	f000 80a3 	beq.w	8003d94 <tcp_receive+0x7a8>
                    pcb->ooseq = cseg;
 8003c4e:	6720      	str	r0, [r4, #112]	; 0x70
 8003c50:	e7e8      	b.n	8003c24 <tcp_receive+0x638>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8003c52:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8003c56:	6849      	ldr	r1, [r1, #4]
 8003c58:	ebae 0101 	sub.w	r1, lr, r1
 8003c5c:	2900      	cmp	r1, #0
 8003c5e:	db29      	blt.n	8003cb4 <tcp_receive+0x6c8>
 8003c60:	ebac 0102 	sub.w	r1, ip, r2
 8003c64:	2900      	cmp	r1, #0
 8003c66:	dc25      	bgt.n	8003cb4 <tcp_receive+0x6c8>
                  cseg = tcp_seg_copy(&inseg);
 8003c68:	4811      	ldr	r0, [pc, #68]	; (8003cb0 <tcp_receive+0x6c4>)
 8003c6a:	f7ff f9be 	bl	8002fea <tcp_seg_copy>
                  if (cseg != NULL) {
 8003c6e:	4604      	mov	r4, r0
 8003c70:	2800      	cmp	r0, #0
 8003c72:	f000 808f 	beq.w	8003d94 <tcp_receive+0x7a8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8003c76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8003c7a:	6831      	ldr	r1, [r6, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8003c82:	4413      	add	r3, r2
 8003c84:	1a5b      	subs	r3, r3, r1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	dd07      	ble.n	8003c9a <tcp_receive+0x6ae>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8003c8a:	1a89      	subs	r1, r1, r2
 8003c8c:	b289      	uxth	r1, r1
 8003c8e:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 8003c92:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8003c96:	f7ff f891 	bl	8002dbc <pbuf_realloc>
                    prev->next = cseg;
 8003c9a:	f8c8 4000 	str.w	r4, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8003c9e:	4629      	mov	r1, r5
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	e7c0      	b.n	8003c26 <tcp_receive+0x63a>
 8003ca4:	200036fc 	.word	0x200036fc
 8003ca8:	200001d4 	.word	0x200001d4
 8003cac:	200001d8 	.word	0x200001d8
 8003cb0:	200001c0 	.word	0x200001c0
              if (next->next == NULL &&
 8003cb4:	6829      	ldr	r1, [r5, #0]
 8003cb6:	46a8      	mov	r8, r5
 8003cb8:	2900      	cmp	r1, #0
 8003cba:	d1b8      	bne.n	8003c2e <tcp_receive+0x642>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8003cbc:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	dd68      	ble.n	8003d94 <tcp_receive+0x7a8>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8003cc2:	8980      	ldrh	r0, [r0, #12]
 8003cc4:	f7fd fddc 	bl	8001880 <lwip_htons>
 8003cc8:	07c2      	lsls	r2, r0, #31
 8003cca:	d463      	bmi.n	8003d94 <tcp_receive+0x7a8>
                next->next = tcp_seg_copy(&inseg);
 8003ccc:	4832      	ldr	r0, [pc, #200]	; (8003d98 <tcp_receive+0x7ac>)
 8003cce:	f7ff f98c 	bl	8002fea <tcp_seg_copy>
 8003cd2:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 8003cd4:	2800      	cmp	r0, #0
 8003cd6:	d05d      	beq.n	8003d94 <tcp_receive+0x7a8>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8003cd8:	68eb      	ldr	r3, [r5, #12]
 8003cda:	6831      	ldr	r1, [r6, #0]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	892b      	ldrh	r3, [r5, #8]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	1a5b      	subs	r3, r3, r1
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	dd05      	ble.n	8003cf4 <tcp_receive+0x708>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8003ce8:	1a89      	subs	r1, r1, r2
 8003cea:	b289      	uxth	r1, r1
 8003cec:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 8003cee:	6868      	ldr	r0, [r5, #4]
 8003cf0:	f7ff f864 	bl	8002dbc <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8003cf4:	6832      	ldr	r2, [r6, #0]
 8003cf6:	883b      	ldrh	r3, [r7, #0]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003cfc:	1a9b      	subs	r3, r3, r2
 8003cfe:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003d00:	1a9b      	subs	r3, r3, r2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	dd46      	ble.n	8003d94 <tcp_receive+0x7a8>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8003d06:	682b      	ldr	r3, [r5, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	8998      	ldrh	r0, [r3, #12]
 8003d0c:	f7fd fdb8 	bl	8001880 <lwip_htons>
 8003d10:	07c3      	lsls	r3, r0, #31
 8003d12:	d511      	bpl.n	8003d38 <tcp_receive+0x74c>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8003d14:	682b      	ldr	r3, [r5, #0]
 8003d16:	f8d3 900c 	ldr.w	r9, [r3, #12]
 8003d1a:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 8003d1e:	4640      	mov	r0, r8
 8003d20:	f7fd fdae 	bl	8001880 <lwip_htons>
 8003d24:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8003d28:	f7fd fdaa 	bl	8001880 <lwip_htons>
 8003d2c:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 8003d30:	ea40 0808 	orr.w	r8, r0, r8
 8003d34:	f8a9 800c 	strh.w	r8, [r9, #12]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8003d38:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8003d3a:	6832      	ldr	r2, [r6, #0]
 8003d3c:	682b      	ldr	r3, [r5, #0]
 8003d3e:	1a89      	subs	r1, r1, r2
 8003d40:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    pbuf_realloc(next->next->p, next->next->len);
 8003d42:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8003d44:	4411      	add	r1, r2
 8003d46:	b289      	uxth	r1, r1
 8003d48:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8003d4a:	f7ff f837 	bl	8002dbc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8003d4e:	682b      	ldr	r3, [r5, #0]
 8003d50:	891c      	ldrh	r4, [r3, #8]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	8998      	ldrh	r0, [r3, #12]
 8003d56:	f7fd fd93 	bl	8001880 <lwip_htons>
 8003d5a:	f010 0003 	ands.w	r0, r0, #3
 8003d5e:	bf18      	it	ne
 8003d60:	2001      	movne	r0, #1
 8003d62:	4404      	add	r4, r0
 8003d64:	803c      	strh	r4, [r7, #0]
 8003d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      tcp_send_empty_ack(pcb);
 8003d6a:	4620      	mov	r0, r4
}
 8003d6c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      tcp_send_empty_ack(pcb);
 8003d70:	f000 bdac 	b.w	80048cc <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8003d74:	6833      	ldr	r3, [r6, #0]
 8003d76:	1a99      	subs	r1, r3, r2
 8003d78:	2900      	cmp	r1, #0
 8003d7a:	db05      	blt.n	8003d88 <tcp_receive+0x79c>
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	1a9b      	subs	r3, r3, r2
 8003d80:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003d82:	1a9b      	subs	r3, r3, r2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	dd05      	ble.n	8003d94 <tcp_receive+0x7a8>
      tcp_ack_now(pcb);
 8003d88:	7ea3      	ldrb	r3, [r4, #26]
 8003d8a:	e6ad      	b.n	8003ae8 <tcp_receive+0x4fc>
        pcb->dupacks = 0;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d92:	e49b      	b.n	80036cc <tcp_receive+0xe0>
 8003d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d98:	200001c0 	.word	0x200001c0

08003d9c <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <tcp_getoptbyte+0x30>)
 8003d9e:	4a0c      	ldr	r2, [pc, #48]	; (8003dd0 <tcp_getoptbyte+0x34>)
 8003da0:	6819      	ldr	r1, [r3, #0]
{
 8003da2:	b510      	push	{r4, lr}
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8003da4:	b121      	cbz	r1, 8003db0 <tcp_getoptbyte+0x14>
 8003da6:	480b      	ldr	r0, [pc, #44]	; (8003dd4 <tcp_getoptbyte+0x38>)
 8003da8:	8813      	ldrh	r3, [r2, #0]
 8003daa:	8800      	ldrh	r0, [r0, #0]
 8003dac:	4283      	cmp	r3, r0
 8003dae:	d207      	bcs.n	8003dc0 <tcp_getoptbyte+0x24>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8003db0:	4b09      	ldr	r3, [pc, #36]	; (8003dd8 <tcp_getoptbyte+0x3c>)
    return opts[tcp_optidx++];
 8003db2:	8811      	ldrh	r1, [r2, #0]
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8003db4:	681b      	ldr	r3, [r3, #0]
    return opts[tcp_optidx++];
 8003db6:	440b      	add	r3, r1
 8003db8:	1c48      	adds	r0, r1, #1
 8003dba:	8010      	strh	r0, [r2, #0]
 8003dbc:	7d18      	ldrb	r0, [r3, #20]
 8003dbe:	bd10      	pop	{r4, pc}
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8003dc0:	1c5c      	adds	r4, r3, #1
 8003dc2:	1a1b      	subs	r3, r3, r0
    return tcphdr_opt2[idx];
 8003dc4:	b2db      	uxtb	r3, r3
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8003dc6:	8014      	strh	r4, [r2, #0]
    return tcphdr_opt2[idx];
 8003dc8:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 8003dca:	bd10      	pop	{r4, pc}
 8003dcc:	200001ec 	.word	0x200001ec
 8003dd0:	200001e0 	.word	0x200001e0
 8003dd4:	200001e8 	.word	0x200001e8
 8003dd8:	200001e4 	.word	0x200001e4

08003ddc <tcp_parseopt.isra.1.part.2>:
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 8003ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8003dde:	4d19      	ldr	r5, [pc, #100]	; (8003e44 <tcp_parseopt.isra.1.part.2+0x68>)
 8003de0:	4e19      	ldr	r6, [pc, #100]	; (8003e48 <tcp_parseopt.isra.1.part.2+0x6c>)
 8003de2:	2300      	movs	r3, #0
tcp_parseopt(struct tcp_pcb *pcb)
 8003de4:	4607      	mov	r7, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8003de6:	802b      	strh	r3, [r5, #0]
 8003de8:	8834      	ldrh	r4, [r6, #0]
 8003dea:	882b      	ldrh	r3, [r5, #0]
 8003dec:	42a3      	cmp	r3, r4
 8003dee:	d300      	bcc.n	8003df2 <tcp_parseopt.isra.1.part.2+0x16>
 8003df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8_t opt = tcp_getoptbyte();
 8003df2:	f7ff ffd3 	bl	8003d9c <tcp_getoptbyte>
      switch (opt) {
 8003df6:	2801      	cmp	r0, #1
 8003df8:	d0f6      	beq.n	8003de8 <tcp_parseopt.isra.1.part.2+0xc>
 8003dfa:	d3f9      	bcc.n	8003df0 <tcp_parseopt.isra.1.part.2+0x14>
 8003dfc:	2802      	cmp	r0, #2
 8003dfe:	d117      	bne.n	8003e30 <tcp_parseopt.isra.1.part.2+0x54>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8003e00:	f7ff ffcc 	bl	8003d9c <tcp_getoptbyte>
 8003e04:	2804      	cmp	r0, #4
 8003e06:	d1f3      	bne.n	8003df0 <tcp_parseopt.isra.1.part.2+0x14>
 8003e08:	882b      	ldrh	r3, [r5, #0]
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	42a3      	cmp	r3, r4
 8003e0e:	daef      	bge.n	8003df0 <tcp_parseopt.isra.1.part.2+0x14>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8003e10:	f7ff ffc4 	bl	8003d9c <tcp_getoptbyte>
 8003e14:	0200      	lsls	r0, r0, #8
 8003e16:	b284      	uxth	r4, r0
        mss |= tcp_getoptbyte();
 8003e18:	f7ff ffc0 	bl	8003d9c <tcp_getoptbyte>
 8003e1c:	4320      	orrs	r0, r4
 8003e1e:	b280      	uxth	r0, r0
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8003e20:	1e43      	subs	r3, r0, #1
 8003e22:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8003e26:	bf28      	it	cs
 8003e28:	f44f 7006 	movcs.w	r0, #536	; 0x218
 8003e2c:	8038      	strh	r0, [r7, #0]
 8003e2e:	e7db      	b.n	8003de8 <tcp_parseopt.isra.1.part.2+0xc>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8003e30:	f7ff ffb4 	bl	8003d9c <tcp_getoptbyte>
        if (data < 2) {
 8003e34:	2801      	cmp	r0, #1
 8003e36:	d9db      	bls.n	8003df0 <tcp_parseopt.isra.1.part.2+0x14>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8003e38:	882b      	ldrh	r3, [r5, #0]
 8003e3a:	3b02      	subs	r3, #2
 8003e3c:	4418      	add	r0, r3
 8003e3e:	8028      	strh	r0, [r5, #0]
 8003e40:	e7d2      	b.n	8003de8 <tcp_parseopt.isra.1.part.2+0xc>
 8003e42:	bf00      	nop
 8003e44:	200001e0 	.word	0x200001e0
 8003e48:	200001f0 	.word	0x200001f0

08003e4c <tcp_input>:
{
 8003e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tcphdr = (struct tcp_hdr *)p->payload;
 8003e50:	4da9      	ldr	r5, [pc, #676]	; (80040f8 <tcp_input+0x2ac>)
 8003e52:	6843      	ldr	r3, [r0, #4]
 8003e54:	602b      	str	r3, [r5, #0]
  if (p->len < TCP_HLEN) {
 8003e56:	8943      	ldrh	r3, [r0, #10]
 8003e58:	2b13      	cmp	r3, #19
{
 8003e5a:	b089      	sub	sp, #36	; 0x24
 8003e5c:	4681      	mov	r9, r0
  if (p->len < TCP_HLEN) {
 8003e5e:	f240 8144 	bls.w	80040ea <tcp_input+0x29e>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8003e62:	4ea6      	ldr	r6, [pc, #664]	; (80040fc <tcp_input+0x2b0>)
 8003e64:	6831      	ldr	r1, [r6, #0]
 8003e66:	6970      	ldr	r0, [r6, #20]
 8003e68:	f7fe f9dd 	bl	8002226 <ip4_addr_isbroadcast_u32>
 8003e6c:	4604      	mov	r4, r0
 8003e6e:	2800      	cmp	r0, #0
 8003e70:	f040 813b 	bne.w	80040ea <tcp_input+0x29e>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8003e74:	6973      	ldr	r3, [r6, #20]
 8003e76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8003e7a:	2be0      	cmp	r3, #224	; 0xe0
 8003e7c:	f000 8135 	beq.w	80040ea <tcp_input+0x29e>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8003e80:	682b      	ldr	r3, [r5, #0]
 8003e82:	8998      	ldrh	r0, [r3, #12]
 8003e84:	f7fd fcfc 	bl	8001880 <lwip_htons>
 8003e88:	0a81      	lsrs	r1, r0, #10
 8003e8a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8003e8e:	2913      	cmp	r1, #19
 8003e90:	f240 812b 	bls.w	80040ea <tcp_input+0x29e>
 8003e94:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 8003e98:	b289      	uxth	r1, r1
 8003e9a:	428b      	cmp	r3, r1
 8003e9c:	f0c0 8125 	bcc.w	80040ea <tcp_input+0x29e>
  if (p->len >= hdrlen_bytes) {
 8003ea0:	f8b9 200a 	ldrh.w	r2, [r9, #10]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8003ea4:	f8df 8284 	ldr.w	r8, [pc, #644]	; 800412c <tcp_input+0x2e0>
  tcphdr_opt2 = NULL;
 8003ea8:	4f95      	ldr	r7, [pc, #596]	; (8004100 <tcp_input+0x2b4>)
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8003eaa:	f1a1 0314 	sub.w	r3, r1, #20
 8003eae:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 8003eb0:	428a      	cmp	r2, r1
  tcphdr_opt2 = NULL;
 8003eb2:	603c      	str	r4, [r7, #0]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8003eb4:	f8a8 3000 	strh.w	r3, [r8]
 8003eb8:	4c92      	ldr	r4, [pc, #584]	; (8004104 <tcp_input+0x2b8>)
  if (p->len >= hdrlen_bytes) {
 8003eba:	d34b      	bcc.n	8003f54 <tcp_input+0x108>
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8003ebc:	4249      	negs	r1, r1
 8003ebe:	4648      	mov	r0, r9
    tcphdr_opt1len = tcphdr_optlen;
 8003ec0:	8023      	strh	r3, [r4, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8003ec2:	f7fe feb9 	bl	8002c38 <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8003ec6:	682c      	ldr	r4, [r5, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8003ec8:	f8df b268 	ldr.w	fp, [pc, #616]	; 8004134 <tcp_input+0x2e8>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8003ecc:	8820      	ldrh	r0, [r4, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8003ece:	f8df 8268 	ldr.w	r8, [pc, #616]	; 8004138 <tcp_input+0x2ec>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8003ed2:	f7fd fcd5 	bl	8001880 <lwip_htons>
 8003ed6:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8003ed8:	682c      	ldr	r4, [r5, #0]
 8003eda:	8860      	ldrh	r0, [r4, #2]
 8003edc:	f7fd fcd0 	bl	8001880 <lwip_htons>
 8003ee0:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8003ee2:	682c      	ldr	r4, [r5, #0]
 8003ee4:	6860      	ldr	r0, [r4, #4]
 8003ee6:	f7fd fcce 	bl	8001886 <lwip_htonl>
 8003eea:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8003eec:	682c      	ldr	r4, [r5, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8003eee:	f8cb 0000 	str.w	r0, [fp]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8003ef2:	68a0      	ldr	r0, [r4, #8]
 8003ef4:	f7fd fcc7 	bl	8001886 <lwip_htonl>
 8003ef8:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8003efa:	682c      	ldr	r4, [r5, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8003efc:	f8c8 0000 	str.w	r0, [r8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8003f00:	89e0      	ldrh	r0, [r4, #14]
 8003f02:	f7fd fcbd 	bl	8001880 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 8003f06:	682b      	ldr	r3, [r5, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8003f08:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 8003f0a:	8998      	ldrh	r0, [r3, #12]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8003f0c:	4c7e      	ldr	r4, [pc, #504]	; (8004108 <tcp_input+0x2bc>)
  flags = TCPH_FLAGS(tcphdr);
 8003f0e:	f7fd fcb7 	bl	8001880 <lwip_htons>
 8003f12:	4a7e      	ldr	r2, [pc, #504]	; (800410c <tcp_input+0x2c0>)
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8003f14:	6824      	ldr	r4, [r4, #0]
 8003f16:	9406      	str	r4, [sp, #24]
  flags = TCPH_FLAGS(tcphdr);
 8003f18:	b2c3      	uxtb	r3, r0
 8003f1a:	f003 013f 	and.w	r1, r3, #63	; 0x3f
 8003f1e:	7011      	strb	r1, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8003f20:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 8003f24:	487a      	ldr	r0, [pc, #488]	; (8004110 <tcp_input+0x2c4>)
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8003f26:	6934      	ldr	r4, [r6, #16]
 8003f28:	9407      	str	r4, [sp, #28]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8003f2a:	f013 0103 	ands.w	r1, r3, #3
 8003f2e:	bf18      	it	ne
 8003f30:	2101      	movne	r1, #1
 8003f32:	4411      	add	r1, r2
 8003f34:	b289      	uxth	r1, r1
    if (pcb->remote_port == tcphdr->src &&
 8003f36:	682f      	ldr	r7, [r5, #0]
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8003f38:	f8d6 a014 	ldr.w	sl, [r6, #20]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8003f3c:	9c06      	ldr	r4, [sp, #24]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8003f3e:	9205      	str	r2, [sp, #20]
 8003f40:	8001      	strh	r1, [r0, #0]
  prev = NULL;
 8003f42:	f04f 0e00 	mov.w	lr, #0
 8003f46:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f4a:	9004      	str	r0, [sp, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8003f4c:	bb2c      	cbnz	r4, 8003f9a <tcp_input+0x14e>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8003f4e:	4871      	ldr	r0, [pc, #452]	; (8004114 <tcp_input+0x2c8>)
 8003f50:	6800      	ldr	r0, [r0, #0]
 8003f52:	e0f6      	b.n	8004142 <tcp_input+0x2f6>
    pbuf_header(p, -TCP_HLEN);
 8003f54:	f06f 0113 	mvn.w	r1, #19
 8003f58:	4648      	mov	r0, r9
 8003f5a:	f7fe fe6d 	bl	8002c38 <pbuf_header>
    tcphdr_opt1len = p->len;
 8003f5e:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 8003f62:	8021      	strh	r1, [r4, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8003f64:	f8b8 4000 	ldrh.w	r4, [r8]
 8003f68:	1a64      	subs	r4, r4, r1
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8003f6a:	4249      	negs	r1, r1
 8003f6c:	b209      	sxth	r1, r1
 8003f6e:	4648      	mov	r0, r9
 8003f70:	f7fe fe62 	bl	8002c38 <pbuf_header>
    if (opt2len > p->next->len) {
 8003f74:	f8d9 0000 	ldr.w	r0, [r9]
 8003f78:	8943      	ldrh	r3, [r0, #10]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8003f7a:	b2a4      	uxth	r4, r4
    if (opt2len > p->next->len) {
 8003f7c:	42a3      	cmp	r3, r4
 8003f7e:	f0c0 80b4 	bcc.w	80040ea <tcp_input+0x29e>
    pbuf_header(p->next, -(s16_t)opt2len);
 8003f82:	4261      	negs	r1, r4
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8003f84:	6843      	ldr	r3, [r0, #4]
 8003f86:	603b      	str	r3, [r7, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 8003f88:	b209      	sxth	r1, r1
 8003f8a:	f7fe fe55 	bl	8002c38 <pbuf_header>
    p->tot_len -= opt2len;
 8003f8e:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 8003f92:	1b1c      	subs	r4, r3, r4
 8003f94:	f8a9 4008 	strh.w	r4, [r9, #8]
 8003f98:	e795      	b.n	8003ec6 <tcp_input+0x7a>
    if (pcb->remote_port == tcphdr->src &&
 8003f9a:	f8b4 c018 	ldrh.w	ip, [r4, #24]
 8003f9e:	8838      	ldrh	r0, [r7, #0]
 8003fa0:	4584      	cmp	ip, r0
 8003fa2:	d169      	bne.n	8004078 <tcp_input+0x22c>
 8003fa4:	f8b4 c016 	ldrh.w	ip, [r4, #22]
 8003fa8:	8878      	ldrh	r0, [r7, #2]
 8003faa:	4584      	cmp	ip, r0
 8003fac:	d164      	bne.n	8004078 <tcp_input+0x22c>
        pcb->local_port == tcphdr->dest &&
 8003fae:	6862      	ldr	r2, [r4, #4]
 8003fb0:	9807      	ldr	r0, [sp, #28]
 8003fb2:	4282      	cmp	r2, r0
 8003fb4:	d160      	bne.n	8004078 <tcp_input+0x22c>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8003fb6:	6820      	ldr	r0, [r4, #0]
 8003fb8:	4550      	cmp	r0, sl
 8003fba:	d15d      	bne.n	8004078 <tcp_input+0x22c>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8003fbc:	68e1      	ldr	r1, [r4, #12]
      if (prev != NULL) {
 8003fbe:	f1be 0f00 	cmp.w	lr, #0
 8003fc2:	d005      	beq.n	8003fd0 <tcp_input+0x184>
        prev->next = pcb->next;
 8003fc4:	f8ce 100c 	str.w	r1, [lr, #12]
        pcb->next = tcp_active_pcbs;
 8003fc8:	9906      	ldr	r1, [sp, #24]
 8003fca:	60e1      	str	r1, [r4, #12]
        tcp_active_pcbs = pcb;
 8003fcc:	494e      	ldr	r1, [pc, #312]	; (8004108 <tcp_input+0x2bc>)
 8003fce:	600c      	str	r4, [r1, #0]
    inseg.next = NULL;
 8003fd0:	4851      	ldr	r0, [pc, #324]	; (8004118 <tcp_input+0x2cc>)
    recv_flags = 0;
 8003fd2:	4e52      	ldr	r6, [pc, #328]	; (800411c <tcp_input+0x2d0>)
    inseg.tcphdr = tcphdr;
 8003fd4:	60c7      	str	r7, [r0, #12]
    recv_acked = 0;
 8003fd6:	f8df 8164 	ldr.w	r8, [pc, #356]	; 800413c <tcp_input+0x2f0>
    recv_data = NULL;
 8003fda:	4f51      	ldr	r7, [pc, #324]	; (8004120 <tcp_input+0x2d4>)
    inseg.len = p->tot_len;
 8003fdc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8003fe0:	8102      	strh	r2, [r0, #8]
    inseg.next = NULL;
 8003fe2:	2100      	movs	r1, #0
    if (flags & TCP_PSH) {
 8003fe4:	f013 0f08 	tst.w	r3, #8
    recv_data = NULL;
 8003fe8:	6039      	str	r1, [r7, #0]
 8003fea:	46ba      	mov	sl, r7
    inseg.next = NULL;
 8003fec:	6001      	str	r1, [r0, #0]
    inseg.p = p;
 8003fee:	f8c0 9004 	str.w	r9, [r0, #4]
    recv_flags = 0;
 8003ff2:	7031      	strb	r1, [r6, #0]
    recv_acked = 0;
 8003ff4:	f8a8 1000 	strh.w	r1, [r8]
 8003ff8:	4607      	mov	r7, r0
    if (flags & TCP_PSH) {
 8003ffa:	d005      	beq.n	8004008 <tcp_input+0x1bc>
      p->flags |= PBUF_FLAG_PUSH;
 8003ffc:	f899 300d 	ldrb.w	r3, [r9, #13]
 8004000:	f043 0301 	orr.w	r3, r3, #1
 8004004:	f889 300d 	strb.w	r3, [r9, #13]
    if (pcb->refused_data != NULL) {
 8004008:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800400a:	2b00      	cmp	r3, #0
 800400c:	f040 8116 	bne.w	800423c <tcp_input+0x3f0>
    tcp_input_pcb = pcb;
 8004010:	4b44      	ldr	r3, [pc, #272]	; (8004124 <tcp_input+0x2d8>)
  if (flags & TCP_RST) {
 8004012:	493e      	ldr	r1, [pc, #248]	; (800410c <tcp_input+0x2c0>)
    tcp_input_pcb = pcb;
 8004014:	601c      	str	r4, [r3, #0]
  if (flags & TCP_RST) {
 8004016:	780b      	ldrb	r3, [r1, #0]
 8004018:	f013 0f04 	tst.w	r3, #4
 800401c:	4689      	mov	r9, r1
 800401e:	f040 8128 	bne.w	8004272 <tcp_input+0x426>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8004022:	f013 0102 	ands.w	r1, r3, #2
 8004026:	d004      	beq.n	8004032 <tcp_input+0x1e6>
 8004028:	7d20      	ldrb	r0, [r4, #20]
 800402a:	3802      	subs	r0, #2
 800402c:	2801      	cmp	r0, #1
 800402e:	f200 813c 	bhi.w	80042aa <tcp_input+0x45e>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8004032:	7ea0      	ldrb	r0, [r4, #26]
 8004034:	06c0      	lsls	r0, r0, #27
    pcb->tmr = tcp_ticks;
 8004036:	bf5e      	ittt	pl
 8004038:	483b      	ldrpl	r0, [pc, #236]	; (8004128 <tcp_input+0x2dc>)
 800403a:	6800      	ldrpl	r0, [r0, #0]
 800403c:	6220      	strpl	r0, [r4, #32]
  pcb->keep_cnt_sent = 0;
 800403e:	2000      	movs	r0, #0
 8004040:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
  if (tcphdr_optlen != 0) {
 8004044:	4839      	ldr	r0, [pc, #228]	; (800412c <tcp_input+0x2e0>)
 8004046:	8800      	ldrh	r0, [r0, #0]
 8004048:	b138      	cbz	r0, 800405a <tcp_input+0x20e>
 800404a:	f104 0032 	add.w	r0, r4, #50	; 0x32
 800404e:	9106      	str	r1, [sp, #24]
 8004050:	9305      	str	r3, [sp, #20]
 8004052:	f7ff fec3 	bl	8003ddc <tcp_parseopt.isra.1.part.2>
 8004056:	9906      	ldr	r1, [sp, #24]
 8004058:	9b05      	ldr	r3, [sp, #20]
  switch (pcb->state) {
 800405a:	7d20      	ldrb	r0, [r4, #20]
 800405c:	3802      	subs	r0, #2
 800405e:	2807      	cmp	r0, #7
 8004060:	f200 8192 	bhi.w	8004388 <tcp_input+0x53c>
 8004064:	e8df f010 	tbh	[pc, r0, lsl #1]
 8004068:	01a40126 	.word	0x01a40126
 800406c:	02190215 	.word	0x02190215
 8004070:	02150263 	.word	0x02150263
 8004074:	029c027c 	.word	0x029c027c
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8004078:	46a6      	mov	lr, r4
 800407a:	68e4      	ldr	r4, [r4, #12]
 800407c:	e766      	b.n	8003f4c <tcp_input+0x100>
      if (pcb->remote_port == tcphdr->src &&
 800407e:	8b04      	ldrh	r4, [r0, #24]
 8004080:	f8b7 c000 	ldrh.w	ip, [r7]
 8004084:	45a4      	cmp	ip, r4
 8004086:	d15b      	bne.n	8004140 <tcp_input+0x2f4>
          pcb->local_port == tcphdr->dest &&
 8004088:	8ac4      	ldrh	r4, [r0, #22]
      if (pcb->remote_port == tcphdr->src &&
 800408a:	f8b7 e002 	ldrh.w	lr, [r7, #2]
 800408e:	45a6      	cmp	lr, r4
 8004090:	d156      	bne.n	8004140 <tcp_input+0x2f4>
          pcb->local_port == tcphdr->dest &&
 8004092:	6844      	ldr	r4, [r0, #4]
 8004094:	9a07      	ldr	r2, [sp, #28]
 8004096:	42a2      	cmp	r2, r4
 8004098:	d152      	bne.n	8004140 <tcp_input+0x2f4>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800409a:	6804      	ldr	r4, [r0, #0]
 800409c:	45a2      	cmp	sl, r4
 800409e:	d14f      	bne.n	8004140 <tcp_input+0x2f4>
  if (flags & TCP_RST) {
 80040a0:	075e      	lsls	r6, r3, #29
 80040a2:	d422      	bmi.n	80040ea <tcp_input+0x29e>
  if (flags & TCP_SYN) {
 80040a4:	079d      	lsls	r5, r3, #30
 80040a6:	d514      	bpl.n	80040d2 <tcp_input+0x286>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80040a8:	f8db 4000 	ldr.w	r4, [fp]
 80040ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80040ae:	1ae3      	subs	r3, r4, r3
 80040b0:	d414      	bmi.n	80040dc <tcp_input+0x290>
 80040b2:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 80040b4:	1a9b      	subs	r3, r3, r2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	dc10      	bgt.n	80040dc <tcp_input+0x290>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80040ba:	4b1d      	ldr	r3, [pc, #116]	; (8004130 <tcp_input+0x2e4>)
 80040bc:	f8cd c004 	str.w	ip, [sp, #4]
 80040c0:	f8cd e000 	str.w	lr, [sp]
 80040c4:	1d1a      	adds	r2, r3, #4
 80040c6:	4421      	add	r1, r4
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80040c8:	9803      	ldr	r0, [sp, #12]
 80040ca:	6800      	ldr	r0, [r0, #0]
 80040cc:	f000 fd76 	bl	8004bbc <tcp_rst>
 80040d0:	e00b      	b.n	80040ea <tcp_input+0x29e>
  } else if (flags & TCP_FIN) {
 80040d2:	07dc      	lsls	r4, r3, #31
    pcb->tmr = tcp_ticks;
 80040d4:	bf42      	ittt	mi
 80040d6:	4b14      	ldrmi	r3, [pc, #80]	; (8004128 <tcp_input+0x2dc>)
 80040d8:	681b      	ldrmi	r3, [r3, #0]
 80040da:	6203      	strmi	r3, [r0, #32]
  if ((tcplen > 0)) {
 80040dc:	b129      	cbz	r1, 80040ea <tcp_input+0x29e>
    pcb->flags |= TF_ACK_NOW;
 80040de:	7e83      	ldrb	r3, [r0, #26]
 80040e0:	f043 0302 	orr.w	r3, r3, #2
 80040e4:	7683      	strb	r3, [r0, #26]
    tcp_output(pcb);
 80040e6:	f000 fc27 	bl	8004938 <tcp_output>
  pbuf_free(p);
 80040ea:	4648      	mov	r0, r9
}
 80040ec:	b009      	add	sp, #36	; 0x24
 80040ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 80040f2:	f7fe bdaf 	b.w	8002c54 <pbuf_free>
 80040f6:	bf00      	nop
 80040f8:	200001e4 	.word	0x200001e4
 80040fc:	20000204 	.word	0x20000204
 8004100:	200001ec 	.word	0x200001ec
 8004104:	200001e8 	.word	0x200001e8
 8004108:	200036f8 	.word	0x200036f8
 800410c:	200001bc 	.word	0x200001bc
 8004110:	200001f2 	.word	0x200001f2
 8004114:	20003708 	.word	0x20003708
 8004118:	200001c0 	.word	0x200001c0
 800411c:	200001d8 	.word	0x200001d8
 8004120:	200001d4 	.word	0x200001d4
 8004124:	2000370c 	.word	0x2000370c
 8004128:	200036fc 	.word	0x200036fc
 800412c:	200001f0 	.word	0x200001f0
 8004130:	20000214 	.word	0x20000214
 8004134:	200001dc 	.word	0x200001dc
 8004138:	200001b8 	.word	0x200001b8
 800413c:	200001d0 	.word	0x200001d0
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8004140:	68c0      	ldr	r0, [r0, #12]
 8004142:	2800      	cmp	r0, #0
 8004144:	d19b      	bne.n	800407e <tcp_input+0x232>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8004146:	4ca4      	ldr	r4, [pc, #656]	; (80043d8 <tcp_input+0x58c>)
 8004148:	f8d4 c000 	ldr.w	ip, [r4]
 800414c:	4664      	mov	r4, ip
 800414e:	b974      	cbnz	r4, 800416e <tcp_input+0x322>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8004150:	89b8      	ldrh	r0, [r7, #12]
 8004152:	f7fd fb95 	bl	8001880 <lwip_htons>
 8004156:	0743      	lsls	r3, r0, #29
 8004158:	d4c7      	bmi.n	80040ea <tcp_input+0x29e>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800415a:	682b      	ldr	r3, [r5, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800415c:	9a04      	ldr	r2, [sp, #16]
 800415e:	f8db 1000 	ldr.w	r1, [fp]
 8004162:	8810      	ldrh	r0, [r2, #0]
 8004164:	881a      	ldrh	r2, [r3, #0]
 8004166:	9201      	str	r2, [sp, #4]
 8004168:	885b      	ldrh	r3, [r3, #2]
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	e2a0      	b.n	80046b0 <tcp_input+0x864>
      if (lpcb->local_port == tcphdr->dest) {
 800416e:	f8b4 e016 	ldrh.w	lr, [r4, #22]
 8004172:	f8b7 8002 	ldrh.w	r8, [r7, #2]
 8004176:	45f0      	cmp	r8, lr
 8004178:	d108      	bne.n	800418c <tcp_input+0x340>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800417a:	f8d4 8000 	ldr.w	r8, [r4]
 800417e:	45c2      	cmp	sl, r8
 8004180:	f000 8283 	beq.w	800468a <tcp_input+0x83e>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8004184:	f1b8 0f00 	cmp.w	r8, #0
 8004188:	f000 827f 	beq.w	800468a <tcp_input+0x83e>
 800418c:	4620      	mov	r0, r4
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800418e:	68e4      	ldr	r4, [r4, #12]
 8004190:	e7dd      	b.n	800414e <tcp_input+0x302>
  } else if (flags & TCP_SYN) {
 8004192:	079f      	lsls	r7, r3, #30
 8004194:	d5a9      	bpl.n	80040ea <tcp_input+0x29e>
    npcb = tcp_alloc(pcb->prio);
 8004196:	7d60      	ldrb	r0, [r4, #21]
 8004198:	f7ff f928 	bl	80033ec <tcp_alloc>
    if (npcb == NULL) {
 800419c:	4607      	mov	r7, r0
 800419e:	b940      	cbnz	r0, 80041b2 <tcp_input+0x366>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80041a0:	69a3      	ldr	r3, [r4, #24]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0a1      	beq.n	80040ea <tcp_input+0x29e>
 80041a6:	4601      	mov	r1, r0
 80041a8:	f04f 32ff 	mov.w	r2, #4294967295
 80041ac:	6920      	ldr	r0, [r4, #16]
 80041ae:	4798      	blx	r3
 80041b0:	e79b      	b.n	80040ea <tcp_input+0x29e>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80041b2:	6973      	ldr	r3, [r6, #20]
 80041b4:	6003      	str	r3, [r0, #0]
    npcb->remote_port = tcphdr->src;
 80041b6:	6829      	ldr	r1, [r5, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80041b8:	6933      	ldr	r3, [r6, #16]
 80041ba:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 80041bc:	8ae3      	ldrh	r3, [r4, #22]
 80041be:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 80041c0:	780b      	ldrb	r3, [r1, #0]
 80041c2:	7849      	ldrb	r1, [r1, #1]
 80041c4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80041c8:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 80041ca:	2303      	movs	r3, #3
 80041cc:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 80041ce:	f8db 3000 	ldr.w	r3, [fp]
 80041d2:	1c5a      	adds	r2, r3, #1
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80041d4:	3b01      	subs	r3, #1
 80041d6:	6503      	str	r3, [r0, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 80041d8:	6923      	ldr	r3, [r4, #16]
    npcb->rcv_nxt = seqno + 1;
 80041da:	6242      	str	r2, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80041dc:	62c2      	str	r2, [r0, #44]	; 0x2c
    npcb->callback_arg = pcb->callback_arg;
 80041de:	6103      	str	r3, [r0, #16]
    npcb->listener = pcb;
 80041e0:	6784      	str	r4, [r0, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80041e2:	7a23      	ldrb	r3, [r4, #8]
 80041e4:	f003 030c 	and.w	r3, r3, #12
 80041e8:	7203      	strb	r3, [r0, #8]
    TCP_REG_ACTIVE(npcb);
 80041ea:	4b7c      	ldr	r3, [pc, #496]	; (80043dc <tcp_input+0x590>)
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	60c2      	str	r2, [r0, #12]
 80041f0:	6018      	str	r0, [r3, #0]
 80041f2:	f000 fd95 	bl	8004d20 <tcp_timer_needed>
 80041f6:	4b7a      	ldr	r3, [pc, #488]	; (80043e0 <tcp_input+0x594>)
 80041f8:	2201      	movs	r2, #1
 80041fa:	701a      	strb	r2, [r3, #0]
  if (tcphdr_optlen != 0) {
 80041fc:	4b79      	ldr	r3, [pc, #484]	; (80043e4 <tcp_input+0x598>)
 80041fe:	881b      	ldrh	r3, [r3, #0]
 8004200:	b11b      	cbz	r3, 800420a <tcp_input+0x3be>
 8004202:	f107 0032 	add.w	r0, r7, #50	; 0x32
 8004206:	f7ff fde9 	bl	8003ddc <tcp_parseopt.isra.1.part.2>
    npcb->snd_wnd = SND_WND_SCALE(npcb, tcphdr->wnd);
 800420a:	682b      	ldr	r3, [r5, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800420c:	8e78      	ldrh	r0, [r7, #50]	; 0x32
    npcb->snd_wnd = SND_WND_SCALE(npcb, tcphdr->wnd);
 800420e:	89db      	ldrh	r3, [r3, #14]
 8004210:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8004214:	1d39      	adds	r1, r7, #4
    npcb->snd_wnd_max = npcb->snd_wnd;
 8004216:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    npcb->ssthresh = LWIP_TCP_INITIAL_SSTHRESH(npcb);
 800421a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800421e:	f7ff f971 	bl	8003504 <tcp_eff_send_mss_impl>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8004222:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8004224:	8678      	strh	r0, [r7, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8004226:	4638      	mov	r0, r7
 8004228:	f000 fae2 	bl	80047f0 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800422c:	b120      	cbz	r0, 8004238 <tcp_input+0x3ec>
      tcp_abandon(npcb, 0);
 800422e:	2100      	movs	r1, #0
 8004230:	4638      	mov	r0, r7
 8004232:	f7ff f839 	bl	80032a8 <tcp_abandon>
 8004236:	e758      	b.n	80040ea <tcp_input+0x29e>
    tcp_output(npcb);
 8004238:	4638      	mov	r0, r7
 800423a:	e754      	b.n	80040e6 <tcp_input+0x29a>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800423c:	4620      	mov	r0, r4
 800423e:	f7fe ffff 	bl	8003240 <tcp_process_refused_data>
 8004242:	300d      	adds	r0, #13
 8004244:	d008      	beq.n	8004258 <tcp_input+0x40c>
 8004246:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004248:	2b00      	cmp	r3, #0
 800424a:	f43f aee1 	beq.w	8004010 <tcp_input+0x1c4>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800424e:	4b66      	ldr	r3, [pc, #408]	; (80043e8 <tcp_input+0x59c>)
 8004250:	881b      	ldrh	r3, [r3, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	f43f aedc 	beq.w	8004010 <tcp_input+0x1c4>
    tcp_input_pcb = NULL;
 8004258:	4b64      	ldr	r3, [pc, #400]	; (80043ec <tcp_input+0x5a0>)
    if (inseg.p != NULL)
 800425a:	6878      	ldr	r0, [r7, #4]
    tcp_input_pcb = NULL;
 800425c:	2400      	movs	r4, #0
 800425e:	601c      	str	r4, [r3, #0]
    recv_data = NULL;
 8004260:	f8ca 4000 	str.w	r4, [sl]
    if (inseg.p != NULL)
 8004264:	b110      	cbz	r0, 800426c <tcp_input+0x420>
      pbuf_free(inseg.p);
 8004266:	f7fe fcf5 	bl	8002c54 <pbuf_free>
      inseg.p = NULL;
 800426a:	607c      	str	r4, [r7, #4]
}
 800426c:	b009      	add	sp, #36	; 0x24
 800426e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (pcb->state == SYN_SENT) {
 8004272:	7d23      	ldrb	r3, [r4, #20]
 8004274:	2b02      	cmp	r3, #2
 8004276:	d10d      	bne.n	8004294 <tcp_input+0x448>
      if (ackno == pcb->snd_nxt) {
 8004278:	4b5d      	ldr	r3, [pc, #372]	; (80043f0 <tcp_input+0x5a4>)
 800427a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	429a      	cmp	r2, r3
 8004280:	f040 8082 	bne.w	8004388 <tcp_input+0x53c>
      recv_flags |= TF_RESET;
 8004284:	7833      	ldrb	r3, [r6, #0]
 8004286:	f043 0308 	orr.w	r3, r3, #8
 800428a:	7033      	strb	r3, [r6, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800428c:	7ea3      	ldrb	r3, [r4, #26]
 800428e:	f023 0301 	bic.w	r3, r3, #1
 8004292:	e00d      	b.n	80042b0 <tcp_input+0x464>
      if (seqno == pcb->rcv_nxt) {
 8004294:	4b57      	ldr	r3, [pc, #348]	; (80043f4 <tcp_input+0x5a8>)
 8004296:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d0f2      	beq.n	8004284 <tcp_input+0x438>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800429e:	1a9b      	subs	r3, r3, r2
 80042a0:	d472      	bmi.n	8004388 <tcp_input+0x53c>
 80042a2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80042a4:	1a9b      	subs	r3, r3, r2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	dc6e      	bgt.n	8004388 <tcp_input+0x53c>
      tcp_ack_now(pcb);
 80042aa:	7ea3      	ldrb	r3, [r4, #26]
 80042ac:	f043 0302 	orr.w	r3, r3, #2
      pcb->flags &= ~TF_ACK_DELAY;
 80042b0:	76a3      	strb	r3, [r4, #26]
 80042b2:	e069      	b.n	8004388 <tcp_input+0x53c>
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80042b4:	f003 0112 	and.w	r1, r3, #18
 80042b8:	2912      	cmp	r1, #18
 80042ba:	d14e      	bne.n	800435a <tcp_input+0x50e>
        && (ackno == pcb->lastack + 1)) {
 80042bc:	484c      	ldr	r0, [pc, #304]	; (80043f0 <tcp_input+0x5a4>)
 80042be:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80042c0:	6800      	ldr	r0, [r0, #0]
 80042c2:	3101      	adds	r1, #1
 80042c4:	4281      	cmp	r1, r0
 80042c6:	d148      	bne.n	800435a <tcp_input+0x50e>
      pcb->rcv_nxt = seqno + 1;
 80042c8:	f8db 3000 	ldr.w	r3, [fp]
      pcb->lastack = ackno;
 80042cc:	6461      	str	r1, [r4, #68]	; 0x44
      pcb->rcv_nxt = seqno + 1;
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	6262      	str	r2, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80042d2:	62e2      	str	r2, [r4, #44]	; 0x2c
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80042d4:	682a      	ldr	r2, [r5, #0]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80042d6:	8e60      	ldrh	r0, [r4, #50]	; 0x32
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80042d8:	89d2      	ldrh	r2, [r2, #14]
 80042da:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80042de:	3b01      	subs	r3, #1
 80042e0:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 80042e2:	2304      	movs	r3, #4
      pcb->snd_wnd_max = pcb->snd_wnd;
 80042e4:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->state = ESTABLISHED;
 80042e8:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80042ea:	18e1      	adds	r1, r4, r3
 80042ec:	f7ff f90a 	bl	8003504 <tcp_eff_send_mss_impl>
      pcb->ssthresh = LWIP_TCP_INITIAL_SSTHRESH(pcb);
 80042f0:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 80042f4:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80042f8:	f241 121c 	movw	r2, #4380	; 0x111c
 80042fc:	0043      	lsls	r3, r0, #1
 80042fe:	4293      	cmp	r3, r2
 8004300:	bf38      	it	cc
 8004302:	4613      	movcc	r3, r2
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8004304:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8004306:	0080      	lsls	r0, r0, #2
 8004308:	4283      	cmp	r3, r0
 800430a:	bf28      	it	cs
 800430c:	4603      	movcs	r3, r0
 800430e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      --pcb->snd_queuelen;
 8004312:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 8004316:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
      --pcb->snd_queuelen;
 8004318:	3b01      	subs	r3, #1
 800431a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if (rseg == NULL) {
 800431e:	b9a0      	cbnz	r0, 800434a <tcp_input+0x4fe>
        rseg = pcb->unsent;
 8004320:	6ea0      	ldr	r0, [r4, #104]	; 0x68
        pcb->unsent = rseg->next;
 8004322:	6803      	ldr	r3, [r0, #0]
 8004324:	66a3      	str	r3, [r4, #104]	; 0x68
      tcp_seg_free(rseg);
 8004326:	f7fe fe4a 	bl	8002fbe <tcp_seg_free>
      if (pcb->unacked == NULL) {
 800432a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800432c:	b983      	cbnz	r3, 8004350 <tcp_input+0x504>
        pcb->rtime = -1;
 800432e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004332:	8623      	strh	r3, [r4, #48]	; 0x30
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8004334:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0b6      	beq.n	80042aa <tcp_input+0x45e>
 800433c:	2200      	movs	r2, #0
 800433e:	4621      	mov	r1, r4
 8004340:	6920      	ldr	r0, [r4, #16]
 8004342:	4798      	blx	r3
      if (err == ERR_ABRT) {
 8004344:	300d      	adds	r0, #13
 8004346:	d1b0      	bne.n	80042aa <tcp_input+0x45e>
 8004348:	e786      	b.n	8004258 <tcp_input+0x40c>
        pcb->unacked = rseg->next;
 800434a:	6803      	ldr	r3, [r0, #0]
 800434c:	66e3      	str	r3, [r4, #108]	; 0x6c
 800434e:	e7ea      	b.n	8004326 <tcp_input+0x4da>
        pcb->rtime = 0;
 8004350:	2300      	movs	r3, #0
 8004352:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 8004354:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004358:	e7ec      	b.n	8004334 <tcp_input+0x4e8>
    else if (flags & TCP_ACK) {
 800435a:	06da      	lsls	r2, r3, #27
 800435c:	d514      	bpl.n	8004388 <tcp_input+0x53c>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800435e:	682b      	ldr	r3, [r5, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8004360:	9a04      	ldr	r2, [sp, #16]
 8004362:	f8db 1000 	ldr.w	r1, [fp]
 8004366:	8810      	ldrh	r0, [r2, #0]
 8004368:	881a      	ldrh	r2, [r3, #0]
 800436a:	9201      	str	r2, [sp, #4]
 800436c:	885b      	ldrh	r3, [r3, #2]
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	4401      	add	r1, r0
 8004372:	4b21      	ldr	r3, [pc, #132]	; (80043f8 <tcp_input+0x5ac>)
 8004374:	9803      	ldr	r0, [sp, #12]
 8004376:	1d1a      	adds	r2, r3, #4
 8004378:	6800      	ldr	r0, [r0, #0]
 800437a:	f000 fc1f 	bl	8004bbc <tcp_rst>
      pcb->rtime = 0;
 800437e:	2300      	movs	r3, #0
 8004380:	8623      	strh	r3, [r4, #48]	; 0x30
      tcp_rexmit_rto(pcb);
 8004382:	4620      	mov	r0, r4
 8004384:	f000 fc62 	bl	8004c4c <tcp_rexmit_rto>
      if (recv_flags & TF_RESET) {
 8004388:	7833      	ldrb	r3, [r6, #0]
 800438a:	071d      	lsls	r5, r3, #28
 800438c:	f140 811f 	bpl.w	80045ce <tcp_input+0x782>
        TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_RST);
 8004390:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004394:	b11b      	cbz	r3, 800439e <tcp_input+0x552>
 8004396:	f06f 010d 	mvn.w	r1, #13
            TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_CLSD);
 800439a:	6920      	ldr	r0, [r4, #16]
 800439c:	4798      	blx	r3
          tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800439e:	4621      	mov	r1, r4
 80043a0:	480e      	ldr	r0, [pc, #56]	; (80043dc <tcp_input+0x590>)
 80043a2:	f7fe fe58 	bl	8003056 <tcp_pcb_remove>
          memp_free(MEMP_TCP_PCB, pcb);
 80043a6:	4621      	mov	r1, r4
 80043a8:	2001      	movs	r0, #1
 80043aa:	f7fe fb4b 	bl	8002a44 <memp_free>
          goto aborted;
 80043ae:	e753      	b.n	8004258 <tcp_input+0x40c>
    if (flags & TCP_ACK) {
 80043b0:	06db      	lsls	r3, r3, #27
 80043b2:	d561      	bpl.n	8004478 <tcp_input+0x62c>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80043b4:	4b0e      	ldr	r3, [pc, #56]	; (80043f0 <tcp_input+0x5a4>)
 80043b6:	6818      	ldr	r0, [r3, #0]
 80043b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80043ba:	43db      	mvns	r3, r3
 80043bc:	42c3      	cmn	r3, r0
 80043be:	d44c      	bmi.n	800445a <tcp_input+0x60e>
 80043c0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80043c2:	1ac3      	subs	r3, r0, r3
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	dc48      	bgt.n	800445a <tcp_input+0x60e>
        pcb->state = ESTABLISHED;
 80043c8:	2304      	movs	r3, #4
 80043ca:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 80043cc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
        if (pcb->listener == NULL) {
 80043ce:	b9ab      	cbnz	r3, 80043fc <tcp_input+0x5b0>
            tcp_abort(pcb);
 80043d0:	4620      	mov	r0, r4
 80043d2:	f7fe ffcf 	bl	8003374 <tcp_abort>
            goto aborted;
 80043d6:	e73f      	b.n	8004258 <tcp_input+0x40c>
 80043d8:	20003700 	.word	0x20003700
 80043dc:	200036f8 	.word	0x200036f8
 80043e0:	200036f4 	.word	0x200036f4
 80043e4:	200001f0 	.word	0x200001f0
 80043e8:	200001f2 	.word	0x200001f2
 80043ec:	2000370c 	.word	0x2000370c
 80043f0:	200001b8 	.word	0x200001b8
 80043f4:	200001dc 	.word	0x200001dc
 80043f8:	20000214 	.word	0x20000214
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0e6      	beq.n	80043d0 <tcp_input+0x584>
 8004402:	2200      	movs	r2, #0
 8004404:	4621      	mov	r1, r4
 8004406:	6920      	ldr	r0, [r4, #16]
 8004408:	4798      	blx	r3
        if (err != ERR_OK) {
 800440a:	b110      	cbz	r0, 8004412 <tcp_input+0x5c6>
          if (err != ERR_ABRT) {
 800440c:	300d      	adds	r0, #13
 800440e:	d1df      	bne.n	80043d0 <tcp_input+0x584>
 8004410:	e722      	b.n	8004258 <tcp_input+0x40c>
        tcp_receive(pcb);
 8004412:	4620      	mov	r0, r4
 8004414:	f7ff f8ea 	bl	80035ec <tcp_receive>
        pcb->ssthresh = LWIP_TCP_INITIAL_SSTHRESH(pcb);
 8004418:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 800441c:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
        if (recv_acked != 0) {
 8004420:	f8b8 3000 	ldrh.w	r3, [r8]
 8004424:	b113      	cbz	r3, 800442c <tcp_input+0x5e0>
          recv_acked--;
 8004426:	3b01      	subs	r3, #1
 8004428:	f8a8 3000 	strh.w	r3, [r8]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800442c:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 800442e:	f241 111c 	movw	r1, #4380	; 0x111c
 8004432:	0053      	lsls	r3, r2, #1
 8004434:	428b      	cmp	r3, r1
 8004436:	bf38      	it	cc
 8004438:	460b      	movcc	r3, r1
 800443a:	0092      	lsls	r2, r2, #2
 800443c:	4293      	cmp	r3, r2
 800443e:	bf28      	it	cs
 8004440:	4613      	movcs	r3, r2
 8004442:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8004446:	7833      	ldrb	r3, [r6, #0]
 8004448:	069d      	lsls	r5, r3, #26
 800444a:	d59d      	bpl.n	8004388 <tcp_input+0x53c>
      tcp_ack_now(pcb);
 800444c:	7ea3      	ldrb	r3, [r4, #26]
 800444e:	f043 0302 	orr.w	r3, r3, #2
 8004452:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 8004454:	2307      	movs	r3, #7
      pcb->state = FIN_WAIT_2;
 8004456:	7523      	strb	r3, [r4, #20]
 8004458:	e796      	b.n	8004388 <tcp_input+0x53c>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800445a:	682b      	ldr	r3, [r5, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800445c:	9a04      	ldr	r2, [sp, #16]
 800445e:	f8db 1000 	ldr.w	r1, [fp]
 8004462:	8815      	ldrh	r5, [r2, #0]
 8004464:	881a      	ldrh	r2, [r3, #0]
 8004466:	9201      	str	r2, [sp, #4]
 8004468:	885b      	ldrh	r3, [r3, #2]
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	4b92      	ldr	r3, [pc, #584]	; (80046b8 <tcp_input+0x86c>)
 800446e:	4429      	add	r1, r5
 8004470:	1d1a      	adds	r2, r3, #4
 8004472:	f000 fba3 	bl	8004bbc <tcp_rst>
 8004476:	e787      	b.n	8004388 <tcp_input+0x53c>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8004478:	2900      	cmp	r1, #0
 800447a:	d085      	beq.n	8004388 <tcp_input+0x53c>
 800447c:	4a8f      	ldr	r2, [pc, #572]	; (80046bc <tcp_input+0x870>)
 800447e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004480:	6812      	ldr	r2, [r2, #0]
 8004482:	3b01      	subs	r3, #1
 8004484:	4293      	cmp	r3, r2
 8004486:	f47f af7f 	bne.w	8004388 <tcp_input+0x53c>
      tcp_rexmit(pcb);
 800448a:	4620      	mov	r0, r4
 800448c:	f000 fbf7 	bl	8004c7e <tcp_rexmit>
 8004490:	e77a      	b.n	8004388 <tcp_input+0x53c>
    tcp_receive(pcb);
 8004492:	4620      	mov	r0, r4
 8004494:	f7ff f8aa 	bl	80035ec <tcp_receive>
 8004498:	e7d5      	b.n	8004446 <tcp_input+0x5fa>
    tcp_receive(pcb);
 800449a:	4620      	mov	r0, r4
 800449c:	f7ff f8a6 	bl	80035ec <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80044a0:	7833      	ldrb	r3, [r6, #0]
 80044a2:	f013 0f20 	tst.w	r3, #32
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80044a6:	f899 3000 	ldrb.w	r3, [r9]
    if (recv_flags & TF_GOT_FIN) {
 80044aa:	d031      	beq.n	8004510 <tcp_input+0x6c4>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80044ac:	f013 0f10 	tst.w	r3, #16
 80044b0:	7ea3      	ldrb	r3, [r4, #26]
 80044b2:	d028      	beq.n	8004506 <tcp_input+0x6ba>
 80044b4:	4a82      	ldr	r2, [pc, #520]	; (80046c0 <tcp_input+0x874>)
 80044b6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80044b8:	6812      	ldr	r2, [r2, #0]
 80044ba:	4291      	cmp	r1, r2
 80044bc:	d123      	bne.n	8004506 <tcp_input+0x6ba>
 80044be:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80044c0:	bb0a      	cbnz	r2, 8004506 <tcp_input+0x6ba>
        tcp_ack_now(pcb);
 80044c2:	f043 0302 	orr.w	r3, r3, #2
 80044c6:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 80044c8:	4620      	mov	r0, r4
 80044ca:	f7fe fda4 	bl	8003016 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80044ce:	4a7d      	ldr	r2, [pc, #500]	; (80046c4 <tcp_input+0x878>)
 80044d0:	6813      	ldr	r3, [r2, #0]
 80044d2:	429c      	cmp	r4, r3
 80044d4:	d109      	bne.n	80044ea <tcp_input+0x69e>
      TCP_RMV_ACTIVE(pcb);
 80044d6:	68e3      	ldr	r3, [r4, #12]
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	e008      	b.n	80044ee <tcp_input+0x6a2>
        TCP_RMV_ACTIVE(pcb);
 80044dc:	68da      	ldr	r2, [r3, #12]
 80044de:	4294      	cmp	r4, r2
 80044e0:	d102      	bne.n	80044e8 <tcp_input+0x69c>
      TCP_RMV_ACTIVE(pcb);
 80044e2:	68e2      	ldr	r2, [r4, #12]
 80044e4:	60da      	str	r2, [r3, #12]
 80044e6:	e002      	b.n	80044ee <tcp_input+0x6a2>
        TCP_RMV_ACTIVE(pcb);
 80044e8:	4613      	mov	r3, r2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1f6      	bne.n	80044dc <tcp_input+0x690>
      TCP_RMV_ACTIVE(pcb);
 80044ee:	4b76      	ldr	r3, [pc, #472]	; (80046c8 <tcp_input+0x87c>)
 80044f0:	2201      	movs	r2, #1
 80044f2:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80044f4:	230a      	movs	r3, #10
 80044f6:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80044f8:	4b74      	ldr	r3, [pc, #464]	; (80046cc <tcp_input+0x880>)
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	60e2      	str	r2, [r4, #12]
 80044fe:	601c      	str	r4, [r3, #0]
 8004500:	f000 fc0e 	bl	8004d20 <tcp_timer_needed>
 8004504:	e740      	b.n	8004388 <tcp_input+0x53c>
        tcp_ack_now(pcb);
 8004506:	f043 0302 	orr.w	r3, r3, #2
 800450a:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 800450c:	2308      	movs	r3, #8
 800450e:	e7a2      	b.n	8004456 <tcp_input+0x60a>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8004510:	06d8      	lsls	r0, r3, #27
 8004512:	f57f af39 	bpl.w	8004388 <tcp_input+0x53c>
 8004516:	4b6a      	ldr	r3, [pc, #424]	; (80046c0 <tcp_input+0x874>)
 8004518:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	429a      	cmp	r2, r3
 800451e:	f47f af33 	bne.w	8004388 <tcp_input+0x53c>
 8004522:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8004524:	2b00      	cmp	r3, #0
 8004526:	f47f af2f 	bne.w	8004388 <tcp_input+0x53c>
      pcb->state = FIN_WAIT_2;
 800452a:	2306      	movs	r3, #6
 800452c:	e793      	b.n	8004456 <tcp_input+0x60a>
    tcp_receive(pcb);
 800452e:	4620      	mov	r0, r4
 8004530:	f7ff f85c 	bl	80035ec <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8004534:	7833      	ldrb	r3, [r6, #0]
 8004536:	0699      	lsls	r1, r3, #26
 8004538:	f57f af26 	bpl.w	8004388 <tcp_input+0x53c>
      tcp_ack_now(pcb);
 800453c:	7ea3      	ldrb	r3, [r4, #26]
 800453e:	f043 0302 	orr.w	r3, r3, #2
 8004542:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 8004544:	4620      	mov	r0, r4
 8004546:	f7fe fd66 	bl	8003016 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800454a:	4a5e      	ldr	r2, [pc, #376]	; (80046c4 <tcp_input+0x878>)
 800454c:	6813      	ldr	r3, [r2, #0]
 800454e:	429c      	cmp	r4, r3
 8004550:	d0c1      	beq.n	80044d6 <tcp_input+0x68a>
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0cb      	beq.n	80044ee <tcp_input+0x6a2>
 8004556:	68da      	ldr	r2, [r3, #12]
 8004558:	4294      	cmp	r4, r2
 800455a:	d0c2      	beq.n	80044e2 <tcp_input+0x696>
 800455c:	4613      	mov	r3, r2
 800455e:	e7f8      	b.n	8004552 <tcp_input+0x706>
    tcp_receive(pcb);
 8004560:	4620      	mov	r0, r4
 8004562:	f7ff f843 	bl	80035ec <tcp_receive>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8004566:	f899 3000 	ldrb.w	r3, [r9]
 800456a:	06da      	lsls	r2, r3, #27
 800456c:	f57f af0c 	bpl.w	8004388 <tcp_input+0x53c>
 8004570:	4b53      	ldr	r3, [pc, #332]	; (80046c0 <tcp_input+0x874>)
 8004572:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	429a      	cmp	r2, r3
 8004578:	f47f af06 	bne.w	8004388 <tcp_input+0x53c>
 800457c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800457e:	2b00      	cmp	r3, #0
 8004580:	f47f af02 	bne.w	8004388 <tcp_input+0x53c>
      tcp_pcb_purge(pcb);
 8004584:	4620      	mov	r0, r4
 8004586:	f7fe fd46 	bl	8003016 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800458a:	4a4e      	ldr	r2, [pc, #312]	; (80046c4 <tcp_input+0x878>)
 800458c:	6813      	ldr	r3, [r2, #0]
 800458e:	429c      	cmp	r4, r3
 8004590:	d0a1      	beq.n	80044d6 <tcp_input+0x68a>
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0ab      	beq.n	80044ee <tcp_input+0x6a2>
 8004596:	68da      	ldr	r2, [r3, #12]
 8004598:	4294      	cmp	r4, r2
 800459a:	d0a2      	beq.n	80044e2 <tcp_input+0x696>
 800459c:	4613      	mov	r3, r2
 800459e:	e7f8      	b.n	8004592 <tcp_input+0x746>
    tcp_receive(pcb);
 80045a0:	4620      	mov	r0, r4
 80045a2:	f7ff f823 	bl	80035ec <tcp_receive>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80045a6:	f899 3000 	ldrb.w	r3, [r9]
 80045aa:	06db      	lsls	r3, r3, #27
 80045ac:	f57f aeec 	bpl.w	8004388 <tcp_input+0x53c>
 80045b0:	4b43      	ldr	r3, [pc, #268]	; (80046c0 <tcp_input+0x874>)
 80045b2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	f47f aee6 	bne.w	8004388 <tcp_input+0x53c>
 80045bc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f47f aee2 	bne.w	8004388 <tcp_input+0x53c>
      recv_flags |= TF_CLOSED;
 80045c4:	7833      	ldrb	r3, [r6, #0]
 80045c6:	f043 0310 	orr.w	r3, r3, #16
 80045ca:	7033      	strb	r3, [r6, #0]
 80045cc:	e6dc      	b.n	8004388 <tcp_input+0x53c>
        if (recv_acked > 0) {
 80045ce:	f8b8 2000 	ldrh.w	r2, [r8]
 80045d2:	b122      	cbz	r2, 80045de <tcp_input+0x792>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80045d4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80045d6:	b98b      	cbnz	r3, 80045fc <tcp_input+0x7b0>
          recv_acked = 0;
 80045d8:	2300      	movs	r3, #0
 80045da:	f8a8 3000 	strh.w	r3, [r8]
        if (recv_flags & TF_CLOSED) {
 80045de:	7833      	ldrb	r3, [r6, #0]
 80045e0:	06d8      	lsls	r0, r3, #27
 80045e2:	d511      	bpl.n	8004608 <tcp_input+0x7bc>
          if (!(pcb->flags & TF_RXCLOSED)) {
 80045e4:	7ea3      	ldrb	r3, [r4, #26]
 80045e6:	06d9      	lsls	r1, r3, #27
 80045e8:	f53f aed9 	bmi.w	800439e <tcp_input+0x552>
            TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_CLSD);
 80045ec:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f43f aed4 	beq.w	800439e <tcp_input+0x552>
 80045f6:	f06f 010e 	mvn.w	r1, #14
 80045fa:	e6ce      	b.n	800439a <tcp_input+0x54e>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80045fc:	4621      	mov	r1, r4
 80045fe:	6920      	ldr	r0, [r4, #16]
 8004600:	4798      	blx	r3
            if (err == ERR_ABRT) {
 8004602:	300d      	adds	r0, #13
 8004604:	d1e8      	bne.n	80045d8 <tcp_input+0x78c>
 8004606:	e627      	b.n	8004258 <tcp_input+0x40c>
        if (recv_data != NULL) {
 8004608:	f8da 2000 	ldr.w	r2, [sl]
 800460c:	b1aa      	cbz	r2, 800463a <tcp_input+0x7ee>
          if (pcb->flags & TF_RXCLOSED) {
 800460e:	7ea3      	ldrb	r3, [r4, #26]
 8004610:	f013 0310 	ands.w	r3, r3, #16
 8004614:	d003      	beq.n	800461e <tcp_input+0x7d2>
            pbuf_free(recv_data);
 8004616:	4610      	mov	r0, r2
 8004618:	f7fe fb1c 	bl	8002c54 <pbuf_free>
 800461c:	e6d8      	b.n	80043d0 <tcp_input+0x584>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800461e:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8004622:	b1d5      	cbz	r5, 800465a <tcp_input+0x80e>
 8004624:	4621      	mov	r1, r4
 8004626:	6920      	ldr	r0, [r4, #16]
 8004628:	47a8      	blx	r5
          if (err == ERR_ABRT) {
 800462a:	f110 0f0d 	cmn.w	r0, #13
 800462e:	f43f ae13 	beq.w	8004258 <tcp_input+0x40c>
          if (err != ERR_OK) {
 8004632:	b110      	cbz	r0, 800463a <tcp_input+0x7ee>
            pcb->refused_data = recv_data;
 8004634:	f8da 3000 	ldr.w	r3, [sl]
 8004638:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 800463a:	7833      	ldrb	r3, [r6, #0]
 800463c:	069a      	lsls	r2, r3, #26
 800463e:	d505      	bpl.n	800464c <tcp_input+0x800>
          if (pcb->refused_data != NULL) {
 8004640:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004642:	b183      	cbz	r3, 8004666 <tcp_input+0x81a>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8004644:	7b5a      	ldrb	r2, [r3, #13]
 8004646:	f042 0220 	orr.w	r2, r2, #32
 800464a:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800464c:	4a20      	ldr	r2, [pc, #128]	; (80046d0 <tcp_input+0x884>)
 800464e:	2300      	movs	r3, #0
        tcp_output(pcb);
 8004650:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 8004652:	6013      	str	r3, [r2, #0]
        tcp_output(pcb);
 8004654:	f000 f970 	bl	8004938 <tcp_output>
 8004658:	e5fe      	b.n	8004258 <tcp_input+0x40c>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800465a:	462b      	mov	r3, r5
 800465c:	4621      	mov	r1, r4
 800465e:	4628      	mov	r0, r5
 8004660:	f7fe fddc 	bl	800321c <tcp_recv_null>
 8004664:	e7e1      	b.n	800462a <tcp_input+0x7de>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8004666:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8004668:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800466c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
              pcb->rcv_wnd++;
 8004670:	bf1c      	itt	ne
 8004672:	3301      	addne	r3, #1
 8004674:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8004676:	2d00      	cmp	r5, #0
 8004678:	d0e8      	beq.n	800464c <tcp_input+0x800>
 800467a:	2300      	movs	r3, #0
 800467c:	461a      	mov	r2, r3
 800467e:	4621      	mov	r1, r4
 8004680:	6920      	ldr	r0, [r4, #16]
 8004682:	47a8      	blx	r5
            if (err == ERR_ABRT) {
 8004684:	300d      	adds	r0, #13
 8004686:	d1e1      	bne.n	800464c <tcp_input+0x800>
 8004688:	e5e6      	b.n	8004258 <tcp_input+0x40c>
      if (prev != NULL) {
 800468a:	b128      	cbz	r0, 8004698 <tcp_input+0x84c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800468c:	68e2      	ldr	r2, [r4, #12]
 800468e:	60c2      	str	r2, [r0, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8004690:	4810      	ldr	r0, [pc, #64]	; (80046d4 <tcp_input+0x888>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8004692:	f8c4 c00c 	str.w	ip, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8004696:	6004      	str	r4, [r0, #0]
  if (flags & TCP_RST) {
 8004698:	0758      	lsls	r0, r3, #29
 800469a:	f53f ad26 	bmi.w	80040ea <tcp_input+0x29e>
  if (flags & TCP_ACK) {
 800469e:	06da      	lsls	r2, r3, #27
 80046a0:	f57f ad77 	bpl.w	8004192 <tcp_input+0x346>
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80046a4:	883b      	ldrh	r3, [r7, #0]
 80046a6:	f8db 0000 	ldr.w	r0, [fp]
 80046aa:	9301      	str	r3, [sp, #4]
 80046ac:	f8cd e000 	str.w	lr, [sp]
 80046b0:	4b01      	ldr	r3, [pc, #4]	; (80046b8 <tcp_input+0x86c>)
 80046b2:	4401      	add	r1, r0
 80046b4:	1d1a      	adds	r2, r3, #4
 80046b6:	e507      	b.n	80040c8 <tcp_input+0x27c>
 80046b8:	20000214 	.word	0x20000214
 80046bc:	200001dc 	.word	0x200001dc
 80046c0:	200001b8 	.word	0x200001b8
 80046c4:	200036f8 	.word	0x200036f8
 80046c8:	200036f4 	.word	0x200036f4
 80046cc:	20003708 	.word	0x20003708
 80046d0:	2000370c 	.word	0x2000370c
 80046d4:	20003700 	.word	0x20003700

080046d8 <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 80046d8:	4a02      	ldr	r2, [pc, #8]	; (80046e4 <tcp_trigger_input_pcb_close+0xc>)
 80046da:	7813      	ldrb	r3, [r2, #0]
 80046dc:	f043 0310 	orr.w	r3, r3, #16
 80046e0:	7013      	strb	r3, [r2, #0]
 80046e2:	4770      	bx	lr
 80046e4:	200001d8 	.word	0x200001d8

080046e8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 80046e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046ec:	f89d 9020 	ldrb.w	r9, [sp, #32]
 80046f0:	4680      	mov	r8, r0
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80046f2:	f019 0f01 	tst.w	r9, #1

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80046f6:	f04f 0003 	mov.w	r0, #3
{
 80046fa:	460f      	mov	r7, r1
 80046fc:	4616      	mov	r6, r2
 80046fe:	469a      	mov	sl, r3
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8004700:	bf14      	ite	ne
 8004702:	2504      	movne	r5, #4
 8004704:	2500      	moveq	r5, #0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8004706:	f7fe f98d 	bl	8002a24 <memp_malloc>
 800470a:	4604      	mov	r4, r0
 800470c:	b928      	cbnz	r0, 800471a <tcp_create_segment+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800470e:	4638      	mov	r0, r7
 8004710:	f7fe faa0 	bl	8002c54 <pbuf_free>
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
  return seg;
}
 8004714:	4620      	mov	r0, r4
 8004716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->flags = optflags;
 800471a:	f880 900a 	strb.w	r9, [r0, #10]
  seg->len = p->tot_len - optlen;
 800471e:	893b      	ldrh	r3, [r7, #8]
  seg->p = p;
 8004720:	6047      	str	r7, [r0, #4]
  seg->len = p->tot_len - optlen;
 8004722:	1b5b      	subs	r3, r3, r5
  seg->next = NULL;
 8004724:	f04f 0900 	mov.w	r9, #0
 8004728:	f8c0 9000 	str.w	r9, [r0]
  seg->len = p->tot_len - optlen;
 800472c:	8103      	strh	r3, [r0, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 800472e:	2114      	movs	r1, #20
 8004730:	4638      	mov	r0, r7
 8004732:	f7fe fa81 	bl	8002c38 <pbuf_header>
 8004736:	4607      	mov	r7, r0
 8004738:	b120      	cbz	r0, 8004744 <tcp_create_segment+0x5c>
    tcp_seg_free(seg);
 800473a:	4620      	mov	r0, r4
 800473c:	f7fe fc3f 	bl	8002fbe <tcp_seg_free>
    return NULL;
 8004740:	464c      	mov	r4, r9
 8004742:	e7e7      	b.n	8004714 <tcp_create_segment+0x2c>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8004744:	6863      	ldr	r3, [r4, #4]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8004746:	f8b8 0016 	ldrh.w	r0, [r8, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800474a:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800474e:	f8c4 900c 	str.w	r9, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8004752:	f7fd f895 	bl	8001880 <lwip_htons>
 8004756:	f8a9 0000 	strh.w	r0, [r9]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800475a:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 800475e:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8004762:	f7fd f88d 	bl	8001880 <lwip_htons>
 8004766:	f8a9 0002 	strh.w	r0, [r9, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800476a:	4650      	mov	r0, sl
 800476c:	f8d4 800c 	ldr.w	r8, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8004770:	08ad      	lsrs	r5, r5, #2
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8004772:	f7fd f888 	bl	8001886 <lwip_htonl>
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8004776:	3505      	adds	r5, #5
 8004778:	ea46 3505 	orr.w	r5, r6, r5, lsl #12
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800477c:	f8c8 0004 	str.w	r0, [r8, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8004780:	b2a8      	uxth	r0, r5
 8004782:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8004786:	f7fd f87b 	bl	8001880 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800478a:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800478c:	f8a8 000c 	strh.w	r0, [r8, #12]
  seg->tcphdr->urgp = 0;
 8004790:	749f      	strb	r7, [r3, #18]
 8004792:	74df      	strb	r7, [r3, #19]
  return seg;
 8004794:	e7be      	b.n	8004714 <tcp_create_segment+0x2c>

08004796 <tcp_output_alloc_header.constprop.0>:
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8004796:	3114      	adds	r1, #20
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8004798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800479a:	b289      	uxth	r1, r1
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800479c:	4605      	mov	r5, r0
 800479e:	4617      	mov	r7, r2
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80047a0:	2001      	movs	r0, #1
 80047a2:	2200      	movs	r2, #0
 80047a4:	f7fe fa7e 	bl	8002ca4 <pbuf_alloc>
  if (p != NULL) {
 80047a8:	4606      	mov	r6, r0
 80047aa:	b1f8      	cbz	r0, 80047ec <tcp_output_alloc_header.constprop.0+0x56>
    tcphdr = (struct tcp_hdr *)p->payload;
 80047ac:	6844      	ldr	r4, [r0, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 80047ae:	8ae8      	ldrh	r0, [r5, #22]
 80047b0:	f7fd f866 	bl	8001880 <lwip_htons>
 80047b4:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 80047b6:	8b28      	ldrh	r0, [r5, #24]
 80047b8:	f7fd f862 	bl	8001880 <lwip_htons>
    tcphdr->seqno = seqno_be;
 80047bc:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 80047be:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80047c0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80047c2:	f7fd f860 	bl	8001886 <lwip_htonl>
 80047c6:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 80047c8:	f245 0010 	movw	r0, #20496	; 0x5010
 80047cc:	f7fd f858 	bl	8001880 <lwip_htons>
 80047d0:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80047d2:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 80047d4:	f7fd f854 	bl	8001880 <lwip_htons>
    tcphdr->chksum = 0;
 80047d8:	2300      	movs	r3, #0
 80047da:	7423      	strb	r3, [r4, #16]
 80047dc:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 80047de:	74a3      	strb	r3, [r4, #18]
 80047e0:	74e3      	strb	r3, [r4, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80047e2:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 80047e4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80047e6:	81e0      	strh	r0, [r4, #14]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80047e8:	4413      	add	r3, r2
 80047ea:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 80047ec:	4630      	mov	r0, r6
 80047ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080047f0 <tcp_enqueue_flags>:

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 80047f0:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 80047f4:	2b08      	cmp	r3, #8
{
 80047f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047f8:	4604      	mov	r4, r0
 80047fa:	460d      	mov	r5, r1
 80047fc:	f001 0603 	and.w	r6, r1, #3
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8004800:	d909      	bls.n	8004816 <tcp_enqueue_flags+0x26>
 8004802:	07ca      	lsls	r2, r1, #31
 8004804:	d407      	bmi.n	8004816 <tcp_enqueue_flags+0x26>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
    pcb->flags |= TF_NAGLEMEMERR;
 8004806:	7ea3      	ldrb	r3, [r4, #26]
 8004808:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800480c:	76a3      	strb	r3, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800480e:	f04f 30ff 	mov.w	r0, #4294967295
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
}
 8004812:	b003      	add	sp, #12
 8004814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004816:	f005 0302 	and.w	r3, r5, #2
  if (flags & TCP_SYN) {
 800481a:	2b00      	cmp	r3, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800481c:	f04f 0200 	mov.w	r2, #0
 8004820:	bf14      	ite	ne
 8004822:	2104      	movne	r1, #4
 8004824:	4611      	moveq	r1, r2
 8004826:	4610      	mov	r0, r2
  u8_t optflags = 0;
 8004828:	bf14      	ite	ne
 800482a:	2701      	movne	r7, #1
 800482c:	2700      	moveq	r7, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800482e:	f7fe fa39 	bl	8002ca4 <pbuf_alloc>
 8004832:	4601      	mov	r1, r0
 8004834:	2800      	cmp	r0, #0
 8004836:	d0e6      	beq.n	8004806 <tcp_enqueue_flags+0x16>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8004838:	9700      	str	r7, [sp, #0]
 800483a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800483c:	462a      	mov	r2, r5
 800483e:	4620      	mov	r0, r4
 8004840:	f7ff ff52 	bl	80046e8 <tcp_create_segment>
 8004844:	2800      	cmp	r0, #0
 8004846:	d0de      	beq.n	8004806 <tcp_enqueue_flags+0x16>
  if (pcb->unsent == NULL) {
 8004848:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800484a:	b9c3      	cbnz	r3, 800487e <tcp_enqueue_flags+0x8e>
    pcb->unsent = seg;
 800484c:	66a0      	str	r0, [r4, #104]	; 0x68
  pcb->unsent_oversize = 0;
 800484e:	2300      	movs	r3, #0
 8004850:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8004854:	b116      	cbz	r6, 800485c <tcp_enqueue_flags+0x6c>
    pcb->snd_lbb++;
 8004856:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004858:	3301      	adds	r3, #1
 800485a:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 800485c:	07eb      	lsls	r3, r5, #31
    pcb->flags |= TF_FIN;
 800485e:	bf42      	ittt	mi
 8004860:	7ea3      	ldrbmi	r3, [r4, #26]
 8004862:	f043 0320 	orrmi.w	r3, r3, #32
 8004866:	76a3      	strbmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8004868:	6840      	ldr	r0, [r0, #4]
 800486a:	f7fe fad0 	bl	8002e0e <pbuf_clen>
 800486e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8004872:	4418      	add	r0, r3
 8004874:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  return ERR_OK;
 8004878:	2000      	movs	r0, #0
 800487a:	e7ca      	b.n	8004812 <tcp_enqueue_flags+0x22>
 800487c:	4613      	mov	r3, r2
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	2a00      	cmp	r2, #0
 8004882:	d1fb      	bne.n	800487c <tcp_enqueue_flags+0x8c>
    useg->next = seg;
 8004884:	6018      	str	r0, [r3, #0]
 8004886:	e7e2      	b.n	800484e <tcp_enqueue_flags+0x5e>

08004888 <tcp_send_fin>:
{
 8004888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pcb->unsent != NULL) {
 800488a:	6e84      	ldr	r4, [r0, #104]	; 0x68
{
 800488c:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 800488e:	b934      	cbnz	r4, 800489e <tcp_send_fin+0x16>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8004890:	4628      	mov	r0, r5
 8004892:	2101      	movs	r1, #1
}
 8004894:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8004898:	f7ff bfaa 	b.w	80047f0 <tcp_enqueue_flags>
 800489c:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800489e:	6823      	ldr	r3, [r4, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1fb      	bne.n	800489c <tcp_send_fin+0x14>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80048a4:	68e3      	ldr	r3, [r4, #12]
 80048a6:	8998      	ldrh	r0, [r3, #12]
 80048a8:	f7fc ffea 	bl	8001880 <lwip_htons>
 80048ac:	f010 0707 	ands.w	r7, r0, #7
 80048b0:	d1ee      	bne.n	8004890 <tcp_send_fin+0x8>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80048b2:	68e6      	ldr	r6, [r4, #12]
 80048b4:	2001      	movs	r0, #1
 80048b6:	89b4      	ldrh	r4, [r6, #12]
 80048b8:	f7fc ffe2 	bl	8001880 <lwip_htons>
 80048bc:	4320      	orrs	r0, r4
 80048be:	81b0      	strh	r0, [r6, #12]
      pcb->flags |= TF_FIN;
 80048c0:	7eab      	ldrb	r3, [r5, #26]
 80048c2:	f043 0320 	orr.w	r3, r3, #32
 80048c6:	76ab      	strb	r3, [r5, #26]
}
 80048c8:	4638      	mov	r0, r7
 80048ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080048cc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80048cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80048ce:	4604      	mov	r4, r0
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80048d0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80048d2:	f7fc ffd8 	bl	8001886 <lwip_htonl>
 80048d6:	2100      	movs	r1, #0
 80048d8:	4602      	mov	r2, r0
 80048da:	4620      	mov	r0, r4
 80048dc:	f7ff ff5b 	bl	8004796 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 80048e0:	4606      	mov	r6, r0
 80048e2:	b940      	cbnz	r0, 80048f6 <tcp_send_empty_ack+0x2a>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80048e4:	7ea3      	ldrb	r3, [r4, #26]
 80048e6:	f043 0303 	orr.w	r3, r3, #3
 80048ea:	76a3      	strb	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80048ec:	f06f 0501 	mvn.w	r5, #1
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 80048f0:	4628      	mov	r0, r5
 80048f2:	b004      	add	sp, #16
 80048f4:	bd70      	pop	{r4, r5, r6, pc}
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80048f6:	1d25      	adds	r5, r4, #4
 80048f8:	4628      	mov	r0, r5
 80048fa:	f7fd fb3d 	bl	8001f78 <ip4_route>
  if (netif == NULL) {
 80048fe:	b1a0      	cbz	r0, 800492a <tcp_send_empty_ack+0x5e>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8004900:	2206      	movs	r2, #6
 8004902:	9201      	str	r2, [sp, #4]
 8004904:	7a62      	ldrb	r2, [r4, #9]
 8004906:	9002      	str	r0, [sp, #8]
 8004908:	9200      	str	r2, [sp, #0]
 800490a:	7aa3      	ldrb	r3, [r4, #10]
 800490c:	462a      	mov	r2, r5
 800490e:	4621      	mov	r1, r4
 8004910:	4630      	mov	r0, r6
 8004912:	f7fd fc77 	bl	8002204 <ip4_output_if>
 8004916:	4605      	mov	r5, r0
  pbuf_free(p);
 8004918:	4630      	mov	r0, r6
 800491a:	f7fe f99b 	bl	8002c54 <pbuf_free>
 800491e:	7ea3      	ldrb	r3, [r4, #26]
  if (err != ERR_OK) {
 8004920:	b135      	cbz	r5, 8004930 <tcp_send_empty_ack+0x64>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8004922:	f043 0303 	orr.w	r3, r3, #3
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8004926:	76a3      	strb	r3, [r4, #26]
 8004928:	e7e2      	b.n	80048f0 <tcp_send_empty_ack+0x24>
    err = ERR_RTE;
 800492a:	f06f 0503 	mvn.w	r5, #3
 800492e:	e7f3      	b.n	8004918 <tcp_send_empty_ack+0x4c>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8004930:	f023 0303 	bic.w	r3, r3, #3
 8004934:	e7f7      	b.n	8004926 <tcp_send_empty_ack+0x5a>
	...

08004938 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8004938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800493c:	4b9d      	ldr	r3, [pc, #628]	; (8004bb4 <tcp_output+0x27c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4298      	cmp	r0, r3
{
 8004942:	b087      	sub	sp, #28
 8004944:	4604      	mov	r4, r0
  if (tcp_input_pcb == pcb) {
 8004946:	d038      	beq.n	80049ba <tcp_output+0x82>
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8004948:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
 800494c:	f8b0 705c 	ldrh.w	r7, [r0, #92]	; 0x5c

  seg = pcb->unsent;
 8004950:	6e85      	ldr	r5, [r0, #104]	; 0x68
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8004952:	429f      	cmp	r7, r3
 8004954:	bf28      	it	cs
 8004956:	461f      	movcs	r7, r3
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8004958:	7e83      	ldrb	r3, [r0, #26]
 800495a:	079a      	lsls	r2, r3, #30
 800495c:	d510      	bpl.n	8004980 <tcp_output+0x48>
 800495e:	b92d      	cbnz	r5, 800496c <tcp_output+0x34>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 8004960:	4620      	mov	r0, r4
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
 8004962:	b007      	add	sp, #28
 8004964:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     return tcp_send_empty_ack(pcb);
 8004968:	f7ff bfb0 	b.w	80048cc <tcp_send_empty_ack>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800496c:	68eb      	ldr	r3, [r5, #12]
 800496e:	6858      	ldr	r0, [r3, #4]
 8004970:	f7fc ff89 	bl	8001886 <lwip_htonl>
 8004974:	892b      	ldrh	r3, [r5, #8]
 8004976:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004978:	1a9b      	subs	r3, r3, r2
 800497a:	4418      	add	r0, r3
     (seg == NULL ||
 800497c:	4287      	cmp	r7, r0
 800497e:	d3ef      	bcc.n	8004960 <tcp_output+0x28>
  useg = pcb->unacked;
 8004980:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  if (useg != NULL) {
 8004982:	b9ee      	cbnz	r6, 80049c0 <tcp_output+0x88>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8004984:	f104 0904 	add.w	r9, r4, #4
 8004988:	4648      	mov	r0, r9
 800498a:	f7fd faf5 	bl	8001f78 <ip4_route>
  if (netif == NULL) {
 800498e:	4682      	mov	sl, r0
 8004990:	2800      	cmp	r0, #0
 8004992:	f000 8108 	beq.w	8004ba6 <tcp_output+0x26e>
  if (ip_addr_isany(&pcb->local_ip)) {
 8004996:	6823      	ldr	r3, [r4, #0]
 8004998:	b90b      	cbnz	r3, 800499e <tcp_output+0x66>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800499a:	6843      	ldr	r3, [r0, #4]
 800499c:	6023      	str	r3, [r4, #0]
  if (pcb->rtime < 0) {
    pcb->rtime = 0;
  }

  if (pcb->rttest == 0) {
    pcb->rttest = tcp_ticks;
 800499e:	f8df b218 	ldr.w	fp, [pc, #536]	; 8004bb8 <tcp_output+0x280>
  seg->p->len -= len;
  seg->p->tot_len -= len;

  seg->p->payload = seg->tcphdr;

  seg->tcphdr->chksum = 0;
 80049a2:	f04f 0800 	mov.w	r8, #0
  while (seg != NULL &&
 80049a6:	2d00      	cmp	r5, #0
 80049a8:	d170      	bne.n	8004a8c <tcp_output+0x154>
  if (pcb->unsent == NULL) {
 80049aa:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80049ac:	b90b      	cbnz	r3, 80049b2 <tcp_output+0x7a>
    pcb->unsent_oversize = 0;
 80049ae:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  pcb->flags &= ~TF_NAGLEMEMERR;
 80049b2:	7ea3      	ldrb	r3, [r4, #26]
 80049b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049b8:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 80049ba:	2000      	movs	r0, #0
 80049bc:	e0f0      	b.n	8004ba0 <tcp_output+0x268>
 80049be:	461e      	mov	r6, r3
    for (; useg->next != NULL; useg = useg->next);
 80049c0:	6833      	ldr	r3, [r6, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1fb      	bne.n	80049be <tcp_output+0x86>
 80049c6:	e7dd      	b.n	8004984 <tcp_output+0x4c>
    pcb->unsent = seg->next;
 80049c8:	682b      	ldr	r3, [r5, #0]
 80049ca:	66a3      	str	r3, [r4, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 80049cc:	7d23      	ldrb	r3, [r4, #20]
 80049ce:	2b02      	cmp	r3, #2
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80049d0:	bf1e      	ittt	ne
 80049d2:	7ea3      	ldrbne	r3, [r4, #26]
 80049d4:	f023 0303 	bicne.w	r3, r3, #3
 80049d8:	76a3      	strbne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80049da:	68eb      	ldr	r3, [r5, #12]
 80049dc:	6858      	ldr	r0, [r3, #4]
 80049de:	f7fc ff52 	bl	8001886 <lwip_htonl>
 80049e2:	892a      	ldrh	r2, [r5, #8]
 80049e4:	68e9      	ldr	r1, [r5, #12]
 80049e6:	9204      	str	r2, [sp, #16]
 80049e8:	9005      	str	r0, [sp, #20]
 80049ea:	8988      	ldrh	r0, [r1, #12]
 80049ec:	f7fc ff48 	bl	8001880 <lwip_htons>
 80049f0:	9a04      	ldr	r2, [sp, #16]
 80049f2:	9b05      	ldr	r3, [sp, #20]
 80049f4:	f010 0003 	ands.w	r0, r0, #3
 80049f8:	4413      	add	r3, r2
 80049fa:	bf18      	it	ne
 80049fc:	2001      	movne	r0, #1
 80049fe:	4418      	add	r0, r3
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8004a00:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 8004a02:	68ea      	ldr	r2, [r5, #12]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8004a04:	1a1b      	subs	r3, r3, r0
 8004a06:	2b00      	cmp	r3, #0
    if (TCP_TCPLEN(seg) > 0) {
 8004a08:	892b      	ldrh	r3, [r5, #8]
      pcb->snd_nxt = snd_nxt;
 8004a0a:	bfb8      	it	lt
 8004a0c:	64e0      	strlt	r0, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 8004a0e:	9304      	str	r3, [sp, #16]
 8004a10:	8990      	ldrh	r0, [r2, #12]
 8004a12:	f7fc ff35 	bl	8001880 <lwip_htons>
 8004a16:	9b04      	ldr	r3, [sp, #16]
 8004a18:	f010 0003 	ands.w	r0, r0, #3
 8004a1c:	bf18      	it	ne
 8004a1e:	2001      	movne	r0, #1
 8004a20:	42d8      	cmn	r0, r3
 8004a22:	d02f      	beq.n	8004a84 <tcp_output+0x14c>
      if (pcb->unacked == NULL) {
 8004a24:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
      seg->next = NULL;
 8004a26:	f8c5 8000 	str.w	r8, [r5]
      if (pcb->unacked == NULL) {
 8004a2a:	b913      	cbnz	r3, 8004a32 <tcp_output+0xfa>
        pcb->unacked = seg;
 8004a2c:	66e5      	str	r5, [r4, #108]	; 0x6c
          useg->next = seg;
 8004a2e:	462e      	mov	r6, r5
 8004a30:	e013      	b.n	8004a5a <tcp_output+0x122>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8004a32:	68eb      	ldr	r3, [r5, #12]
 8004a34:	6858      	ldr	r0, [r3, #4]
 8004a36:	f7fc ff26 	bl	8001886 <lwip_htonl>
 8004a3a:	68f2      	ldr	r2, [r6, #12]
 8004a3c:	9004      	str	r0, [sp, #16]
 8004a3e:	6850      	ldr	r0, [r2, #4]
 8004a40:	f7fc ff21 	bl	8001886 <lwip_htonl>
 8004a44:	9b04      	ldr	r3, [sp, #16]
 8004a46:	1a18      	subs	r0, r3, r0
 8004a48:	2800      	cmp	r0, #0
 8004a4a:	da19      	bge.n	8004a80 <tcp_output+0x148>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8004a4c:	f104 036c 	add.w	r3, r4, #108	; 0x6c
          while (*cur_seg &&
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	b922      	cbnz	r2, 8004a5e <tcp_output+0x126>
          seg->next = (*cur_seg);
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 8004a58:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 8004a5a:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 8004a5c:	e7a3      	b.n	80049a6 <tcp_output+0x6e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8004a5e:	68d2      	ldr	r2, [r2, #12]
 8004a60:	9305      	str	r3, [sp, #20]
 8004a62:	6850      	ldr	r0, [r2, #4]
 8004a64:	f7fc ff0f 	bl	8001886 <lwip_htonl>
 8004a68:	68e9      	ldr	r1, [r5, #12]
 8004a6a:	9004      	str	r0, [sp, #16]
 8004a6c:	6848      	ldr	r0, [r1, #4]
 8004a6e:	f7fc ff0a 	bl	8001886 <lwip_htonl>
 8004a72:	9a04      	ldr	r2, [sp, #16]
          while (*cur_seg &&
 8004a74:	9b05      	ldr	r3, [sp, #20]
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8004a76:	1a10      	subs	r0, r2, r0
          while (*cur_seg &&
 8004a78:	2800      	cmp	r0, #0
 8004a7a:	daeb      	bge.n	8004a54 <tcp_output+0x11c>
              cur_seg = &((*cur_seg)->next );
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	e7e7      	b.n	8004a50 <tcp_output+0x118>
          useg->next = seg;
 8004a80:	6035      	str	r5, [r6, #0]
 8004a82:	e7d4      	b.n	8004a2e <tcp_output+0xf6>
      tcp_seg_free(seg);
 8004a84:	4628      	mov	r0, r5
 8004a86:	f7fe fa9a 	bl	8002fbe <tcp_seg_free>
 8004a8a:	e7e6      	b.n	8004a5a <tcp_output+0x122>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8004a8c:	68eb      	ldr	r3, [r5, #12]
 8004a8e:	6858      	ldr	r0, [r3, #4]
 8004a90:	f7fc fef9 	bl	8001886 <lwip_htonl>
 8004a94:	892b      	ldrh	r3, [r5, #8]
 8004a96:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004a98:	1a9b      	subs	r3, r3, r2
 8004a9a:	4418      	add	r0, r3
  while (seg != NULL &&
 8004a9c:	4287      	cmp	r7, r0
 8004a9e:	d384      	bcc.n	80049aa <tcp_output+0x72>
    LWIP_ASSERT("RST not expected here!",
 8004aa0:	68eb      	ldr	r3, [r5, #12]
 8004aa2:	8998      	ldrh	r0, [r3, #12]
 8004aa4:	f7fc feec 	bl	8001880 <lwip_htons>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8004aa8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004aaa:	b193      	cbz	r3, 8004ad2 <tcp_output+0x19a>
 8004aac:	7ea2      	ldrb	r2, [r4, #26]
 8004aae:	f012 0f44 	tst.w	r2, #68	; 0x44
 8004ab2:	d10e      	bne.n	8004ad2 <tcp_output+0x19a>
 8004ab4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8004ab6:	b12b      	cbz	r3, 8004ac4 <tcp_output+0x18c>
 8004ab8:	6819      	ldr	r1, [r3, #0]
 8004aba:	b951      	cbnz	r1, 8004ad2 <tcp_output+0x19a>
 8004abc:	8919      	ldrh	r1, [r3, #8]
 8004abe:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8004ac0:	4299      	cmp	r1, r3
 8004ac2:	d206      	bcs.n	8004ad2 <tcp_output+0x19a>
 8004ac4:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8004ac8:	b11b      	cbz	r3, 8004ad2 <tcp_output+0x19a>
 8004aca:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8004ace:	2b08      	cmp	r3, #8
 8004ad0:	d96c      	bls.n	8004bac <tcp_output+0x274>
    if (pcb->state != SYN_SENT) {
 8004ad2:	7d23      	ldrb	r3, [r4, #20]
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d00a      	beq.n	8004aee <tcp_output+0x1b6>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8004ad8:	68ea      	ldr	r2, [r5, #12]
 8004ada:	2010      	movs	r0, #16
 8004adc:	8993      	ldrh	r3, [r2, #12]
 8004ade:	9304      	str	r3, [sp, #16]
 8004ae0:	9205      	str	r2, [sp, #20]
 8004ae2:	f7fc fecd 	bl	8001880 <lwip_htons>
 8004ae6:	9b04      	ldr	r3, [sp, #16]
 8004ae8:	9a05      	ldr	r2, [sp, #20]
 8004aea:	4318      	orrs	r0, r3
 8004aec:	8190      	strh	r0, [r2, #12]
  if (seg->p->ref != 1) {
 8004aee:	686b      	ldr	r3, [r5, #4]
 8004af0:	89db      	ldrh	r3, [r3, #14]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	f47f af68 	bne.w	80049c8 <tcp_output+0x90>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8004af8:	68eb      	ldr	r3, [r5, #12]
 8004afa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004afc:	9304      	str	r3, [sp, #16]
 8004afe:	f7fc fec2 	bl	8001886 <lwip_htonl>
 8004b02:	9b04      	ldr	r3, [sp, #16]
 8004b04:	6098      	str	r0, [r3, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8004b06:	68eb      	ldr	r3, [r5, #12]
 8004b08:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8004b0a:	9304      	str	r3, [sp, #16]
 8004b0c:	f7fc feb8 	bl	8001880 <lwip_htons>
 8004b10:	9b04      	ldr	r3, [sp, #16]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8004b12:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8004b14:	81d8      	strh	r0, [r3, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8004b16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b18:	4413      	add	r3, r2
 8004b1a:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8004b1c:	7aab      	ldrb	r3, [r5, #10]
 8004b1e:	07db      	lsls	r3, r3, #31
 8004b20:	d50c      	bpl.n	8004b3c <tcp_output+0x204>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8004b22:	68eb      	ldr	r3, [r5, #12]
 8004b24:	9304      	str	r3, [sp, #16]
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8004b26:	4649      	mov	r1, r9
 8004b28:	f44f 7006 	mov.w	r0, #536	; 0x218
 8004b2c:	f7fe fcea 	bl	8003504 <tcp_eff_send_mss_impl>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8004b30:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 8004b34:	f7fc fea7 	bl	8001886 <lwip_htonl>
 8004b38:	9b04      	ldr	r3, [sp, #16]
 8004b3a:	6158      	str	r0, [r3, #20]
  if (pcb->rtime < 0) {
 8004b3c:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8004b40:	2b00      	cmp	r3, #0
  if (pcb->rttest == 0) {
 8004b42:	6b63      	ldr	r3, [r4, #52]	; 0x34
    pcb->rtime = 0;
 8004b44:	bfb8      	it	lt
 8004b46:	f8a4 8030 	strhlt.w	r8, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 8004b4a:	b93b      	cbnz	r3, 8004b5c <tcp_output+0x224>
    pcb->rttest = tcp_ticks;
 8004b4c:	f8db 3000 	ldr.w	r3, [fp]
 8004b50:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8004b52:	68eb      	ldr	r3, [r5, #12]
 8004b54:	6858      	ldr	r0, [r3, #4]
 8004b56:	f7fc fe96 	bl	8001886 <lwip_htonl>
 8004b5a:	63a0      	str	r0, [r4, #56]	; 0x38
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8004b5c:	6868      	ldr	r0, [r5, #4]
 8004b5e:	68ea      	ldr	r2, [r5, #12]
 8004b60:	6843      	ldr	r3, [r0, #4]
  seg->p->len -= len;
 8004b62:	8941      	ldrh	r1, [r0, #10]
  seg->p->payload = seg->tcphdr;
 8004b64:	6042      	str	r2, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 8004b6a:	1ac9      	subs	r1, r1, r3
 8004b6c:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 8004b6e:	8901      	ldrh	r1, [r0, #8]
 8004b70:	1acb      	subs	r3, r1, r3
 8004b72:	8103      	strh	r3, [r0, #8]
  seg->tcphdr->chksum = 0;
 8004b74:	f882 8010 	strb.w	r8, [r2, #16]
 8004b78:	f882 8011 	strb.w	r8, [r2, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8004b7c:	2206      	movs	r2, #6
 8004b7e:	9201      	str	r2, [sp, #4]
 8004b80:	7a62      	ldrb	r2, [r4, #9]
 8004b82:	9200      	str	r2, [sp, #0]
 8004b84:	7aa3      	ldrb	r3, [r4, #10]
 8004b86:	f8cd a008 	str.w	sl, [sp, #8]
 8004b8a:	464a      	mov	r2, r9
 8004b8c:	4621      	mov	r1, r4
 8004b8e:	f7fd fb39 	bl	8002204 <ip4_output_if>
    if (err != ERR_OK) {
 8004b92:	2800      	cmp	r0, #0
 8004b94:	f43f af18 	beq.w	80049c8 <tcp_output+0x90>
      pcb->flags |= TF_NAGLEMEMERR;
 8004b98:	7ea3      	ldrb	r3, [r4, #26]
 8004b9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b9e:	76a3      	strb	r3, [r4, #26]
}
 8004ba0:	b007      	add	sp, #28
 8004ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return ERR_RTE;
 8004ba6:	f06f 0003 	mvn.w	r0, #3
 8004baa:	e7f9      	b.n	8004ba0 <tcp_output+0x268>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8004bac:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 8004bb0:	d18f      	bne.n	8004ad2 <tcp_output+0x19a>
 8004bb2:	e6fa      	b.n	80049aa <tcp_output+0x72>
 8004bb4:	2000370c 	.word	0x2000370c
 8004bb8:	200036fc 	.word	0x200036fc

08004bbc <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8004bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bc0:	b085      	sub	sp, #20
 8004bc2:	4681      	mov	r9, r0
 8004bc4:	460d      	mov	r5, r1
 8004bc6:	4690      	mov	r8, r2
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8004bc8:	2114      	movs	r1, #20
 8004bca:	2200      	movs	r2, #0
 8004bcc:	2001      	movs	r0, #1
{
 8004bce:	461f      	mov	r7, r3
 8004bd0:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
 8004bd4:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8004bd8:	f7fe f864 	bl	8002ca4 <pbuf_alloc>
  if (p == NULL) {
 8004bdc:	4606      	mov	r6, r0
 8004bde:	b390      	cbz	r0, 8004c46 <tcp_rst+0x8a>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8004be0:	6844      	ldr	r4, [r0, #4]
  tcphdr->src = lwip_htons(local_port);
 8004be2:	4658      	mov	r0, fp
 8004be4:	f7fc fe4c 	bl	8001880 <lwip_htons>
 8004be8:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8004bea:	4650      	mov	r0, sl
 8004bec:	f7fc fe48 	bl	8001880 <lwip_htons>
 8004bf0:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8004bf2:	4648      	mov	r0, r9
 8004bf4:	f7fc fe47 	bl	8001886 <lwip_htonl>
 8004bf8:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	f7fc fe43 	bl	8001886 <lwip_htonl>
 8004c00:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8004c02:	f245 0014 	movw	r0, #20500	; 0x5014
 8004c06:	f7fc fe3b 	bl	8001880 <lwip_htons>
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8004c0a:	2308      	movs	r3, #8
 8004c0c:	2500      	movs	r5, #0
 8004c0e:	73a3      	strb	r3, [r4, #14]
 8004c10:	2360      	movs	r3, #96	; 0x60
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8004c12:	81a0      	strh	r0, [r4, #12]
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8004c14:	73e3      	strb	r3, [r4, #15]
#endif
  tcphdr->chksum = 0;
 8004c16:	7425      	strb	r5, [r4, #16]
 8004c18:	7465      	strb	r5, [r4, #17]
  tcphdr->urgp = 0;
 8004c1a:	74a5      	strb	r5, [r4, #18]
 8004c1c:	74e5      	strb	r5, [r4, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8004c1e:	4638      	mov	r0, r7
 8004c20:	f7fd f9aa 	bl	8001f78 <ip4_route>
  if (netif != NULL) {
 8004c24:	b148      	cbz	r0, 8004c3a <tcp_rst+0x7e>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8004c26:	2306      	movs	r3, #6
 8004c28:	9002      	str	r0, [sp, #8]
 8004c2a:	9301      	str	r3, [sp, #4]
 8004c2c:	9500      	str	r5, [sp, #0]
 8004c2e:	23ff      	movs	r3, #255	; 0xff
 8004c30:	463a      	mov	r2, r7
 8004c32:	4641      	mov	r1, r8
 8004c34:	4630      	mov	r0, r6
 8004c36:	f7fd fae5 	bl	8002204 <ip4_output_if>
  }
  pbuf_free(p);
 8004c3a:	4630      	mov	r0, r6
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8004c3c:	b005      	add	sp, #20
 8004c3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8004c42:	f7fe b807 	b.w	8002c54 <pbuf_free>
}
 8004c46:	b005      	add	sp, #20
 8004c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004c4c <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8004c4c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
{
 8004c4e:	b410      	push	{r4}
  if (pcb->unacked == NULL) {
 8004c50:	b192      	cbz	r2, 8004c78 <tcp_rexmit_rto+0x2c>
 8004c52:	4611      	mov	r1, r2
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8004c54:	680b      	ldr	r3, [r1, #0]
 8004c56:	b96b      	cbnz	r3, 8004c74 <tcp_rexmit_rto+0x28>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8004c58:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8004c5a:	600c      	str	r4, [r1, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8004c5c:	6682      	str	r2, [r0, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;

  /* increment number of retransmissions */
  ++pcb->nrtx;
 8004c5e:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
  pcb->unacked = NULL;
 8004c62:	66c3      	str	r3, [r0, #108]	; 0x6c
  ++pcb->nrtx;
 8004c64:	3201      	adds	r2, #1
 8004c66:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8004c6a:	6343      	str	r3, [r0, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
}
 8004c6c:	f85d 4b04 	ldr.w	r4, [sp], #4
  tcp_output(pcb);
 8004c70:	f7ff be62 	b.w	8004938 <tcp_output>
 8004c74:	4619      	mov	r1, r3
 8004c76:	e7ed      	b.n	8004c54 <tcp_rexmit_rto+0x8>
}
 8004c78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8004c7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8004c80:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
{
 8004c82:	4604      	mov	r4, r0
  if (pcb->unacked == NULL) {
 8004c84:	b19d      	cbz	r5, 8004cae <tcp_rexmit+0x30>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 8004c86:	682b      	ldr	r3, [r5, #0]
 8004c88:	66c3      	str	r3, [r0, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8004c8a:	f100 0668 	add.w	r6, r0, #104	; 0x68
  while (*cur_seg &&
 8004c8e:	6833      	ldr	r3, [r6, #0]
 8004c90:	b973      	cbnz	r3, 8004cb0 <tcp_rexmit+0x32>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
 8004c92:	6833      	ldr	r3, [r6, #0]
 8004c94:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 8004c96:	6035      	str	r5, [r6, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8004c98:	682b      	ldr	r3, [r5, #0]
 8004c9a:	b90b      	cbnz	r3, 8004ca0 <tcp_rexmit+0x22>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8004c9c:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  ++pcb->nrtx;
 8004ca0:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8004caa:	2300      	movs	r3, #0
 8004cac:	6363      	str	r3, [r4, #52]	; 0x34
 8004cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	6858      	ldr	r0, [r3, #4]
 8004cb4:	f7fc fde7 	bl	8001886 <lwip_htonl>
 8004cb8:	68eb      	ldr	r3, [r5, #12]
 8004cba:	4607      	mov	r7, r0
 8004cbc:	6858      	ldr	r0, [r3, #4]
 8004cbe:	f7fc fde2 	bl	8001886 <lwip_htonl>
 8004cc2:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 8004cc4:	2800      	cmp	r0, #0
 8004cc6:	dae4      	bge.n	8004c92 <tcp_rexmit+0x14>
      cur_seg = &((*cur_seg)->next );
 8004cc8:	6836      	ldr	r6, [r6, #0]
 8004cca:	e7e0      	b.n	8004c8e <tcp_rexmit+0x10>

08004ccc <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8004ccc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
 8004cce:	b510      	push	{r4, lr}
 8004cd0:	4604      	mov	r4, r0
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8004cd2:	b323      	cbz	r3, 8004d1e <tcp_rexmit_fast+0x52>
 8004cd4:	7e83      	ldrb	r3, [r0, #26]
 8004cd6:	075b      	lsls	r3, r3, #29
 8004cd8:	d421      	bmi.n	8004d1e <tcp_rexmit_fast+0x52>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8004cda:	f7ff ffd0 	bl	8004c7e <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    if (pcb->cwnd > pcb->snd_wnd) {
 8004cde:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8004ce2:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 8004ce6:	4293      	cmp	r3, r2
      pcb->ssthresh = pcb->snd_wnd / 2;
 8004ce8:	bf8b      	itete	hi
 8004cea:	0852      	lsrhi	r2, r2, #1
    } else {
      pcb->ssthresh = pcb->cwnd / 2;
 8004cec:	085b      	lsrls	r3, r3, #1
      pcb->ssthresh = pcb->snd_wnd / 2;
 8004cee:	f8a4 204a 	strhhi.w	r2, [r4, #74]	; 0x4a
      pcb->ssthresh = pcb->cwnd / 2;
 8004cf2:	f8a4 304a 	strhls.w	r3, [r4, #74]	; 0x4a
    }

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8004cf6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8004cf8:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 8004cfc:	005a      	lsls	r2, r3, #1
 8004cfe:	4291      	cmp	r1, r2
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8004d00:	bf38      	it	cc
 8004d02:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8004d06:	4413      	add	r3, r2
 8004d08:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8004d12:	7ea3      	ldrb	r3, [r4, #26]
 8004d14:	f043 0304 	orr.w	r3, r3, #4
 8004d18:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	8623      	strh	r3, [r4, #48]	; 0x30
 8004d1e:	bd10      	pop	{r4, pc}

08004d20 <tcp_timer_needed>:

#else /* LWIP_TIMERS && !LWIP_TIMERS_CUSTOM */
/* Satisfy the TCP code which calls this function */
void
tcp_timer_needed(void)
{
 8004d20:	4770      	bx	lr

08004d22 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8004d22:	4770      	bx	lr

08004d24 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8004d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8004d28:	8943      	ldrh	r3, [r0, #10]
 8004d2a:	2b07      	cmp	r3, #7
{
 8004d2c:	b085      	sub	sp, #20
 8004d2e:	4606      	mov	r6, r0
 8004d30:	4689      	mov	r9, r1
  if (p->len < UDP_HLEN) {
 8004d32:	d805      	bhi.n	8004d40 <udp_input+0x1c>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8004d34:	4630      	mov	r0, r6
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8004d36:	b005      	add	sp, #20
 8004d38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pbuf_free(p);
 8004d3c:	f7fd bf8a 	b.w	8002c54 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8004d40:	4d3b      	ldr	r5, [pc, #236]	; (8004e30 <udp_input+0x10c>)
  udphdr = (struct udp_hdr *)p->payload;
 8004d42:	6844      	ldr	r4, [r0, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8004d44:	6829      	ldr	r1, [r5, #0]
 8004d46:	6968      	ldr	r0, [r5, #20]
 8004d48:	f7fd fa6d 	bl	8002226 <ip4_addr_isbroadcast_u32>
 8004d4c:	4607      	mov	r7, r0
  src = lwip_ntohs(udphdr->src);
 8004d4e:	8820      	ldrh	r0, [r4, #0]
 8004d50:	f7fc fd96 	bl	8001880 <lwip_htons>
 8004d54:	4680      	mov	r8, r0
  dest = lwip_ntohs(udphdr->dest);
 8004d56:	8860      	ldrh	r0, [r4, #2]
 8004d58:	f7fc fd92 	bl	8001880 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8004d5c:	4a35      	ldr	r2, [pc, #212]	; (8004e34 <udp_input+0x110>)
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8004d5e:	692b      	ldr	r3, [r5, #16]
       ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8004d60:	f8d5 e014 	ldr.w	lr, [r5, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8004d64:	9303      	str	r3, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 8004d66:	4682      	mov	sl, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8004d68:	6810      	ldr	r0, [r2, #0]
  uncon_pcb = NULL;
 8004d6a:	2400      	movs	r4, #0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8004d6c:	4603      	mov	r3, r0
  prev = NULL;
 8004d6e:	46a4      	mov	ip, r4
 8004d70:	4693      	mov	fp, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8004d72:	b92b      	cbnz	r3, 8004d80 <udp_input+0x5c>
  if (pcb != NULL) {
 8004d74:	bb14      	cbnz	r4, 8004dbc <udp_input+0x98>
  if (for_us) {
 8004d76:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004d7a:	4573      	cmp	r3, lr
 8004d7c:	d1da      	bne.n	8004d34 <udp_input+0x10>
 8004d7e:	e01d      	b.n	8004dbc <udp_input+0x98>
    if ((pcb->local_port == dest) &&
 8004d80:	8a5a      	ldrh	r2, [r3, #18]
 8004d82:	4552      	cmp	r2, sl
 8004d84:	d133      	bne.n	8004dee <udp_input+0xca>
 8004d86:	6819      	ldr	r1, [r3, #0]
    if (broadcast != 0) {
 8004d88:	b36f      	cbz	r7, 8004de6 <udp_input+0xc2>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8004d8a:	b141      	cbz	r1, 8004d9e <udp_input+0x7a>
 8004d8c:	f1be 3fff 	cmp.w	lr, #4294967295
 8004d90:	d005      	beq.n	8004d9e <udp_input+0x7a>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8004d92:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8004d96:	ea81 010e 	eor.w	r1, r1, lr
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8004d9a:	4211      	tst	r1, r2
 8004d9c:	d127      	bne.n	8004dee <udp_input+0xca>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8004d9e:	7c1a      	ldrb	r2, [r3, #16]
 8004da0:	0752      	lsls	r2, r2, #29
 8004da2:	d402      	bmi.n	8004daa <udp_input+0x86>
 8004da4:	2c00      	cmp	r4, #0
 8004da6:	bf08      	it	eq
 8004da8:	461c      	moveq	r4, r3
      if ((pcb->remote_port == src) &&
 8004daa:	8a9a      	ldrh	r2, [r3, #20]
 8004dac:	4542      	cmp	r2, r8
 8004dae:	d11e      	bne.n	8004dee <udp_input+0xca>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8004db0:	685a      	ldr	r2, [r3, #4]
      if ((pcb->remote_port == src) &&
 8004db2:	b9fa      	cbnz	r2, 8004df4 <udp_input+0xd0>
        if (prev != NULL) {
 8004db4:	f1bc 0f00 	cmp.w	ip, #0
 8004db8:	d120      	bne.n	8004dfc <udp_input+0xd8>
 8004dba:	461c      	mov	r4, r3
    if (pbuf_header(p, -UDP_HLEN)) {
 8004dbc:	f06f 0107 	mvn.w	r1, #7
 8004dc0:	4630      	mov	r0, r6
 8004dc2:	f7fd ff39 	bl	8002c38 <pbuf_header>
 8004dc6:	2800      	cmp	r0, #0
 8004dc8:	d1b4      	bne.n	8004d34 <udp_input+0x10>
    if (pcb != NULL) {
 8004dca:	b1f4      	cbz	r4, 8004e0a <udp_input+0xe6>
      if (pcb->recv != NULL) {
 8004dcc:	69a5      	ldr	r5, [r4, #24]
 8004dce:	2d00      	cmp	r5, #0
 8004dd0:	d0b0      	beq.n	8004d34 <udp_input+0x10>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8004dd2:	f8cd 8000 	str.w	r8, [sp]
 8004dd6:	4b18      	ldr	r3, [pc, #96]	; (8004e38 <udp_input+0x114>)
 8004dd8:	69e0      	ldr	r0, [r4, #28]
 8004dda:	4632      	mov	r2, r6
 8004ddc:	4621      	mov	r1, r4
 8004dde:	47a8      	blx	r5
}
 8004de0:	b005      	add	sp, #20
 8004de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ip_addr_isany(&pcb->local_ip) ||
 8004de6:	2900      	cmp	r1, #0
 8004de8:	d0d9      	beq.n	8004d9e <udp_input+0x7a>
 8004dea:	4571      	cmp	r1, lr
 8004dec:	d0d7      	beq.n	8004d9e <udp_input+0x7a>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8004dee:	469c      	mov	ip, r3
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	e7be      	b.n	8004d72 <udp_input+0x4e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8004df4:	9903      	ldr	r1, [sp, #12]
 8004df6:	428a      	cmp	r2, r1
 8004df8:	d1f9      	bne.n	8004dee <udp_input+0xca>
 8004dfa:	e7db      	b.n	8004db4 <udp_input+0x90>
          prev->next = pcb->next;
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	f8cc 200c 	str.w	r2, [ip, #12]
          udp_pcbs = pcb;
 8004e02:	f8cb 3000 	str.w	r3, [fp]
          pcb->next = udp_pcbs;
 8004e06:	60d8      	str	r0, [r3, #12]
 8004e08:	e7d7      	b.n	8004dba <udp_input+0x96>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8004e0a:	2f00      	cmp	r7, #0
 8004e0c:	d192      	bne.n	8004d34 <udp_input+0x10>
 8004e0e:	696b      	ldr	r3, [r5, #20]
 8004e10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e14:	2be0      	cmp	r3, #224	; 0xe0
 8004e16:	d08d      	beq.n	8004d34 <udp_input+0x10>
        pbuf_header_force(p, ip_current_header_tot_len() + UDP_HLEN);
 8004e18:	89a9      	ldrh	r1, [r5, #12]
 8004e1a:	3108      	adds	r1, #8
 8004e1c:	b209      	sxth	r1, r1
 8004e1e:	4630      	mov	r0, r6
 8004e20:	f7fd ff11 	bl	8002c46 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8004e24:	2103      	movs	r1, #3
 8004e26:	4630      	mov	r0, r6
 8004e28:	f7fd f89c 	bl	8001f64 <icmp_dest_unreach>
 8004e2c:	e782      	b.n	8004d34 <udp_input+0x10>
 8004e2e:	bf00      	nop
 8004e30:	20000204 	.word	0x20000204
 8004e34:	20003710 	.word	0x20003710
 8004e38:	20000214 	.word	0x20000214

08004e3c <udp_bind>:
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 8004e3c:	4b26      	ldr	r3, [pc, #152]	; (8004ed8 <udp_bind+0x9c>)
{
 8004e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 8004e42:	2900      	cmp	r1, #0
 8004e44:	bf08      	it	eq
 8004e46:	4619      	moveq	r1, r3
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL) || !IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ipaddr)) {
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	d040      	beq.n	8004ece <udp_bind+0x92>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8004e4c:	4e23      	ldr	r6, [pc, #140]	; (8004edc <udp_bind+0xa0>)
 8004e4e:	f8d6 e000 	ldr.w	lr, [r6]
 8004e52:	4675      	mov	r5, lr
 8004e54:	b96d      	cbnz	r5, 8004e72 <udp_bind+0x36>
      break;
    }
  }

  /* no port specified? */
  if (port == 0) {
 8004e56:	b192      	cbz	r2, 8004e7e <udp_bind+0x42>
 8004e58:	4673      	mov	r3, lr
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8004e5a:	b1fb      	cbz	r3, 8004e9c <udp_bind+0x60>
      if (pcb != ipcb) {
 8004e5c:	4283      	cmp	r3, r0
 8004e5e:	d006      	beq.n	8004e6e <udp_bind+0x32>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8004e60:	8a5c      	ldrh	r4, [r3, #18]
 8004e62:	4294      	cmp	r4, r2
 8004e64:	d103      	bne.n	8004e6e <udp_bind+0x32>
 8004e66:	681f      	ldr	r7, [r3, #0]
 8004e68:	680c      	ldr	r4, [r1, #0]
 8004e6a:	42a7      	cmp	r7, r4
 8004e6c:	d029      	beq.n	8004ec2 <udp_bind+0x86>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	e7f3      	b.n	8004e5a <udp_bind+0x1e>
    if (pcb == ipcb) {
 8004e72:	4285      	cmp	r5, r0
 8004e74:	d001      	beq.n	8004e7a <udp_bind+0x3e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8004e76:	68ed      	ldr	r5, [r5, #12]
 8004e78:	e7ec      	b.n	8004e54 <udp_bind+0x18>
      rebind = 1;
 8004e7a:	2501      	movs	r5, #1
 8004e7c:	e7eb      	b.n	8004e56 <udp_bind+0x1a>
 8004e7e:	4b18      	ldr	r3, [pc, #96]	; (8004ee0 <udp_bind+0xa4>)
 8004e80:	881a      	ldrh	r2, [r3, #0]
  if (port == 0) {
 8004e82:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8004e86:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8004e8a:	4562      	cmp	r2, ip
 8004e8c:	bf1a      	itte	ne
 8004e8e:	3201      	addne	r2, #1
 8004e90:	b292      	uxthne	r2, r2
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8004e92:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8004e96:	4677      	mov	r7, lr
 8004e98:	b957      	cbnz	r7, 8004eb0 <udp_bind+0x74>
 8004e9a:	801a      	strh	r2, [r3, #0]
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8004e9c:	680b      	ldr	r3, [r1, #0]
 8004e9e:	6003      	str	r3, [r0, #0]

  pcb->local_port = port;
 8004ea0:	8242      	strh	r2, [r0, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8004ea2:	b915      	cbnz	r5, 8004eaa <udp_bind+0x6e>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8004ea4:	f8c0 e00c 	str.w	lr, [r0, #12]
    udp_pcbs = pcb;
 8004ea8:	6030      	str	r0, [r6, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8004eaa:	2000      	movs	r0, #0
 8004eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pcb->local_port == udp_port) {
 8004eb0:	f8b7 8012 	ldrh.w	r8, [r7, #18]
 8004eb4:	4590      	cmp	r8, r2
 8004eb6:	d108      	bne.n	8004eca <udp_bind+0x8e>
 8004eb8:	3c01      	subs	r4, #1
 8004eba:	b2a4      	uxth	r4, r4
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8004ebc:	2c00      	cmp	r4, #0
 8004ebe:	d1e4      	bne.n	8004e8a <udp_bind+0x4e>
 8004ec0:	801a      	strh	r2, [r3, #0]
      return ERR_USE;
 8004ec2:	f06f 0007 	mvn.w	r0, #7
 8004ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8004eca:	68ff      	ldr	r7, [r7, #12]
 8004ecc:	e7e4      	b.n	8004e98 <udp_bind+0x5c>
    return ERR_VAL;
 8004ece:	f06f 0005 	mvn.w	r0, #5
}
 8004ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ed6:	bf00      	nop
 8004ed8:	08006274 	.word	0x08006274
 8004edc:	20003710 	.word	0x20003710
 8004ee0:	20000004 	.word	0x20000004

08004ee4 <udp_sendto_if_src>:
{
 8004ee4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ee8:	460e      	mov	r6, r1
 8004eea:	b085      	sub	sp, #20
 8004eec:	4690      	mov	r8, r2
 8004eee:	4699      	mov	r9, r3
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 8004ef0:	4607      	mov	r7, r0
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	d044      	beq.n	8004f80 <udp_sendto_if_src+0x9c>
 8004ef6:	2a00      	cmp	r2, #0
 8004ef8:	d042      	beq.n	8004f80 <udp_sendto_if_src+0x9c>
  if (pcb->local_port == 0) {
 8004efa:	8a42      	ldrh	r2, [r0, #18]
 8004efc:	b342      	cbz	r2, 8004f50 <udp_sendto_if_src+0x6c>
  if (pbuf_header(p, UDP_HLEN)) {
 8004efe:	2108      	movs	r1, #8
 8004f00:	4630      	mov	r0, r6
 8004f02:	f7fd fe99 	bl	8002c38 <pbuf_header>
 8004f06:	bb68      	cbnz	r0, 8004f64 <udp_sendto_if_src+0x80>
 8004f08:	4635      	mov	r5, r6
  udphdr->src = lwip_htons(pcb->local_port);
 8004f0a:	8a78      	ldrh	r0, [r7, #18]
  udphdr = (struct udp_hdr *)q->payload;
 8004f0c:	686c      	ldr	r4, [r5, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 8004f0e:	f7fc fcb7 	bl	8001880 <lwip_htons>
 8004f12:	8020      	strh	r0, [r4, #0]
  udphdr->dest = lwip_htons(dst_port);
 8004f14:	4648      	mov	r0, r9
 8004f16:	f7fc fcb3 	bl	8001880 <lwip_htons>
  udphdr->chksum = 0x0000;
 8004f1a:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 8004f1c:	8060      	strh	r0, [r4, #2]
  udphdr->chksum = 0x0000;
 8004f1e:	71a3      	strb	r3, [r4, #6]
 8004f20:	71e3      	strb	r3, [r4, #7]
    udphdr->len = lwip_htons(q->tot_len);
 8004f22:	8928      	ldrh	r0, [r5, #8]
 8004f24:	f7fc fcac 	bl	8001880 <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8004f28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    udphdr->len = lwip_htons(q->tot_len);
 8004f2a:	80a0      	strh	r0, [r4, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8004f2c:	7abb      	ldrb	r3, [r7, #10]
 8004f2e:	9202      	str	r2, [sp, #8]
 8004f30:	2211      	movs	r2, #17
 8004f32:	9201      	str	r2, [sp, #4]
 8004f34:	7a7a      	ldrb	r2, [r7, #9]
 8004f36:	9200      	str	r2, [sp, #0]
 8004f38:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004f3a:	4642      	mov	r2, r8
 8004f3c:	4628      	mov	r0, r5
 8004f3e:	f7fd f905 	bl	800214c <ip4_output_if_src>
  if (q != p) {
 8004f42:	42b5      	cmp	r5, r6
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8004f44:	4604      	mov	r4, r0
  if (q != p) {
 8004f46:	d009      	beq.n	8004f5c <udp_sendto_if_src+0x78>
    pbuf_free(q);
 8004f48:	4628      	mov	r0, r5
 8004f4a:	f7fd fe83 	bl	8002c54 <pbuf_free>
 8004f4e:	e005      	b.n	8004f5c <udp_sendto_if_src+0x78>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8004f50:	4601      	mov	r1, r0
 8004f52:	f7ff ff73 	bl	8004e3c <udp_bind>
    if (err != ERR_OK) {
 8004f56:	4604      	mov	r4, r0
 8004f58:	2800      	cmp	r0, #0
 8004f5a:	d0d0      	beq.n	8004efe <udp_sendto_if_src+0x1a>
}
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	b005      	add	sp, #20
 8004f60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8004f64:	2200      	movs	r2, #0
 8004f66:	2108      	movs	r1, #8
 8004f68:	2001      	movs	r0, #1
 8004f6a:	f7fd fe9b 	bl	8002ca4 <pbuf_alloc>
    if (q == NULL) {
 8004f6e:	4605      	mov	r5, r0
 8004f70:	b148      	cbz	r0, 8004f86 <udp_sendto_if_src+0xa2>
    if (p->tot_len != 0) {
 8004f72:	8933      	ldrh	r3, [r6, #8]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d0c8      	beq.n	8004f0a <udp_sendto_if_src+0x26>
      pbuf_chain(q, p);
 8004f78:	4631      	mov	r1, r6
 8004f7a:	f7fd ff63 	bl	8002e44 <pbuf_chain>
 8004f7e:	e7c4      	b.n	8004f0a <udp_sendto_if_src+0x26>
    return ERR_VAL;
 8004f80:	f06f 0405 	mvn.w	r4, #5
 8004f84:	e7ea      	b.n	8004f5c <udp_sendto_if_src+0x78>
      return ERR_MEM;
 8004f86:	f04f 34ff 	mov.w	r4, #4294967295
 8004f8a:	e7e7      	b.n	8004f5c <udp_sendto_if_src+0x78>

08004f8c <udp_sendto_if>:
{
 8004f8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f8e:	9c06      	ldr	r4, [sp, #24]
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 8004f90:	b190      	cbz	r0, 8004fb8 <udp_sendto_if+0x2c>
 8004f92:	b18a      	cbz	r2, 8004fb8 <udp_sendto_if+0x2c>
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8004f94:	6805      	ldr	r5, [r0, #0]
 8004f96:	b11d      	cbz	r5, 8004fa0 <udp_sendto_if+0x14>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8004f98:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8004f9c:	2ee0      	cmp	r6, #224	; 0xe0
 8004f9e:	d106      	bne.n	8004fae <udp_sendto_if+0x22>
    src_ip = netif_ip_addr4(netif);
 8004fa0:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8004fa2:	e88d 0030 	stmia.w	sp, {r4, r5}
 8004fa6:	f7ff ff9d 	bl	8004ee4 <udp_sendto_if_src>
}
 8004faa:	b002      	add	sp, #8
 8004fac:	bd70      	pop	{r4, r5, r6, pc}
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8004fae:	6866      	ldr	r6, [r4, #4]
 8004fb0:	42b5      	cmp	r5, r6
 8004fb2:	d101      	bne.n	8004fb8 <udp_sendto_if+0x2c>
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8004fb4:	4605      	mov	r5, r0
 8004fb6:	e7f4      	b.n	8004fa2 <udp_sendto_if+0x16>
    return ERR_VAL;
 8004fb8:	f06f 0005 	mvn.w	r0, #5
 8004fbc:	e7f5      	b.n	8004faa <udp_sendto_if+0x1e>

08004fbe <udp_sendto>:
{
 8004fbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fc0:	460e      	mov	r6, r1
 8004fc2:	4614      	mov	r4, r2
 8004fc4:	461f      	mov	r7, r3
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 8004fc6:	4605      	mov	r5, r0
 8004fc8:	b168      	cbz	r0, 8004fe6 <udp_sendto+0x28>
 8004fca:	b162      	cbz	r2, 8004fe6 <udp_sendto+0x28>
  netif = ip_route(&pcb->local_ip, dst_ip_route);
 8004fcc:	4610      	mov	r0, r2
 8004fce:	f7fc ffd3 	bl	8001f78 <ip4_route>
  if (netif == NULL) {
 8004fd2:	b158      	cbz	r0, 8004fec <udp_sendto+0x2e>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8004fd4:	9000      	str	r0, [sp, #0]
 8004fd6:	463b      	mov	r3, r7
 8004fd8:	4622      	mov	r2, r4
 8004fda:	4631      	mov	r1, r6
 8004fdc:	4628      	mov	r0, r5
 8004fde:	f7ff ffd5 	bl	8004f8c <udp_sendto_if>
}
 8004fe2:	b003      	add	sp, #12
 8004fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_VAL;
 8004fe6:	f06f 0005 	mvn.w	r0, #5
 8004fea:	e7fa      	b.n	8004fe2 <udp_sendto+0x24>
    return ERR_RTE;
 8004fec:	f06f 0003 	mvn.w	r0, #3
 8004ff0:	e7f7      	b.n	8004fe2 <udp_sendto+0x24>

08004ff2 <udp_send>:
  if ((pcb == NULL) || IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	b118      	cbz	r0, 8004ffe <udp_send+0xc>
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8004ff6:	8a83      	ldrh	r3, [r0, #20]
 8004ff8:	3204      	adds	r2, #4
 8004ffa:	f7ff bfe0 	b.w	8004fbe <udp_sendto>
}
 8004ffe:	f06f 0005 	mvn.w	r0, #5
 8005002:	4770      	bx	lr

08005004 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8005004:	b570      	push	{r4, r5, r6, lr}
 8005006:	460d      	mov	r5, r1
 8005008:	4616      	mov	r6, r2
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
 800500a:	4604      	mov	r4, r0
 800500c:	b1d0      	cbz	r0, 8005044 <udp_connect+0x40>
 800500e:	b1c9      	cbz	r1, 8005044 <udp_connect+0x40>
    return ERR_VAL;
  }

  if (pcb->local_port == 0) {
 8005010:	8a42      	ldrh	r2, [r0, #18]
 8005012:	b16a      	cbz	r2, 8005030 <udp_connect+0x2c>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8005014:	682b      	ldr	r3, [r5, #0]
 8005016:	6063      	str	r3, [r4, #4]
  pcb->remote_port = port;
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8005018:	7c23      	ldrb	r3, [r4, #16]
  pcb->remote_port = port;
 800501a:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800501c:	f043 0304 	orr.w	r3, r3, #4
 8005020:	7423      	strb	r3, [r4, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8005022:	4b0b      	ldr	r3, [pc, #44]	; (8005050 <udp_connect+0x4c>)
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	4610      	mov	r0, r2
 8005028:	b940      	cbnz	r0, 800503c <udp_connect+0x38>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800502a:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 800502c:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800502e:	bd70      	pop	{r4, r5, r6, pc}
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8005030:	4601      	mov	r1, r0
 8005032:	f7ff ff03 	bl	8004e3c <udp_bind>
    if (err != ERR_OK) {
 8005036:	2800      	cmp	r0, #0
 8005038:	d0ec      	beq.n	8005014 <udp_connect+0x10>
 800503a:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb == ipcb) {
 800503c:	42a0      	cmp	r0, r4
 800503e:	d004      	beq.n	800504a <udp_connect+0x46>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8005040:	68c0      	ldr	r0, [r0, #12]
 8005042:	e7f1      	b.n	8005028 <udp_connect+0x24>
    return ERR_VAL;
 8005044:	f06f 0005 	mvn.w	r0, #5
 8005048:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_OK;
 800504a:	2000      	movs	r0, #0
}
 800504c:	bd70      	pop	{r4, r5, r6, pc}
 800504e:	bf00      	nop
 8005050:	20003710 	.word	0x20003710

08005054 <udp_recv>:
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  /* remember recv() callback and user data */
  pcb->recv = recv;
 8005054:	6181      	str	r1, [r0, #24]
  pcb->recv_arg = recv_arg;
 8005056:	61c2      	str	r2, [r0, #28]
 8005058:	4770      	bx	lr

0800505a <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800505a:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800505c:	2000      	movs	r0, #0
 800505e:	f7fd fce1 	bl	8002a24 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8005062:	4604      	mov	r4, r0
 8005064:	b128      	cbz	r0, 8005072 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8005066:	2220      	movs	r2, #32
 8005068:	2100      	movs	r1, #0
 800506a:	f000 fcbb 	bl	80059e4 <memset>
    pcb->ttl = UDP_TTL;
 800506e:	23ff      	movs	r3, #255	; 0xff
 8005070:	72a3      	strb	r3, [r4, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 8005072:	4620      	mov	r0, r4
 8005074:	bd10      	pop	{r4, pc}
	...

08005078 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8005078:	b510      	push	{r4, lr}
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800507a:	b138      	cbz	r0, 800508c <udp_netif_ip_addr_changed+0x14>
 800507c:	6803      	ldr	r3, [r0, #0]
 800507e:	b12b      	cbz	r3, 800508c <udp_netif_ip_addr_changed+0x14>
 8005080:	b121      	cbz	r1, 800508c <udp_netif_ip_addr_changed+0x14>
 8005082:	680b      	ldr	r3, [r1, #0]
 8005084:	b113      	cbz	r3, 800508c <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8005086:	4b06      	ldr	r3, [pc, #24]	; (80050a0 <udp_netif_ip_addr_changed+0x28>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	b903      	cbnz	r3, 800508e <udp_netif_ip_addr_changed+0x16>
 800508c:	bd10      	pop	{r4, pc}
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800508e:	681c      	ldr	r4, [r3, #0]
 8005090:	6802      	ldr	r2, [r0, #0]
 8005092:	4294      	cmp	r4, r2
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8005094:	bf04      	itt	eq
 8005096:	680a      	ldreq	r2, [r1, #0]
 8005098:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	e7f5      	b.n	800508a <udp_netif_ip_addr_changed+0x12>
 800509e:	bf00      	nop
 80050a0:	20003710 	.word	0x20003710

080050a4 <ethernet_input>:
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 80050a4:	8943      	ldrh	r3, [r0, #10]
 80050a6:	2b0e      	cmp	r3, #14
{
 80050a8:	b570      	push	{r4, r5, r6, lr}
 80050aa:	4604      	mov	r4, r0
 80050ac:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 80050ae:	d914      	bls.n	80050da <ethernet_input+0x36>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80050b0:	6840      	ldr	r0, [r0, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80050b2:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 80050b4:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 80050b6:	07d9      	lsls	r1, r3, #31
 80050b8:	d50a      	bpl.n	80050d0 <ethernet_input+0x2c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d111      	bne.n	80050e2 <ethernet_input+0x3e>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80050be:	7843      	ldrb	r3, [r0, #1]
 80050c0:	b933      	cbnz	r3, 80050d0 <ethernet_input+0x2c>
 80050c2:	7883      	ldrb	r3, [r0, #2]
 80050c4:	2b5e      	cmp	r3, #94	; 0x5e
 80050c6:	d103      	bne.n	80050d0 <ethernet_input+0x2c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80050c8:	7b63      	ldrb	r3, [r4, #13]
 80050ca:	f043 0310 	orr.w	r3, r3, #16
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80050ce:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 80050d0:	2e08      	cmp	r6, #8
 80050d2:	d010      	beq.n	80050f6 <ethernet_input+0x52>
 80050d4:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 80050d8:	d01e      	beq.n	8005118 <ethernet_input+0x74>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 80050da:	4620      	mov	r0, r4
 80050dc:	f7fd fdba 	bl	8002c54 <pbuf_free>
  return ERR_OK;
 80050e0:	e018      	b.n	8005114 <ethernet_input+0x70>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80050e2:	2206      	movs	r2, #6
 80050e4:	4914      	ldr	r1, [pc, #80]	; (8005138 <ethernet_input+0x94>)
 80050e6:	f000 fc63 	bl	80059b0 <memcmp>
 80050ea:	2800      	cmp	r0, #0
 80050ec:	d1f0      	bne.n	80050d0 <ethernet_input+0x2c>
      p->flags |= PBUF_FLAG_LLBCAST;
 80050ee:	7b63      	ldrb	r3, [r4, #13]
 80050f0:	f043 0308 	orr.w	r3, r3, #8
 80050f4:	e7eb      	b.n	80050ce <ethernet_input+0x2a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80050f6:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 80050fa:	071a      	lsls	r2, r3, #28
 80050fc:	d5ed      	bpl.n	80050da <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80050fe:	f06f 010d 	mvn.w	r1, #13
 8005102:	4620      	mov	r0, r4
 8005104:	f7fd fd98 	bl	8002c38 <pbuf_header>
 8005108:	2800      	cmp	r0, #0
 800510a:	d1e6      	bne.n	80050da <ethernet_input+0x36>
        ip4_input(p, netif);
 800510c:	4629      	mov	r1, r5
 800510e:	4620      	mov	r0, r4
 8005110:	f7fc ff5e 	bl	8001fd0 <ip4_input>
}
 8005114:	2000      	movs	r0, #0
 8005116:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8005118:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800511c:	071b      	lsls	r3, r3, #28
 800511e:	d5dc      	bpl.n	80050da <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8005120:	f06f 010d 	mvn.w	r1, #13
 8005124:	4620      	mov	r0, r4
 8005126:	f7fd fd87 	bl	8002c38 <pbuf_header>
 800512a:	2800      	cmp	r0, #0
 800512c:	d1d5      	bne.n	80050da <ethernet_input+0x36>
        etharp_input(p, netif);
 800512e:	4629      	mov	r1, r5
 8005130:	4620      	mov	r0, r4
 8005132:	f7fc fc8b 	bl	8001a4c <etharp_input>
      break;
 8005136:	e7ed      	b.n	8005114 <ethernet_input+0x70>
 8005138:	08006308 	.word	0x08006308

0800513c <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800513c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005140:	4605      	mov	r5, r0
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8005142:	f8bd 0018 	ldrh.w	r0, [sp, #24]
{
 8005146:	460c      	mov	r4, r1
 8005148:	4616      	mov	r6, r2
 800514a:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800514c:	f7fc fb98 	bl	8001880 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8005150:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 8005152:	4680      	mov	r8, r0
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8005154:	4620      	mov	r0, r4
 8005156:	f7fd fd6f 	bl	8002c38 <pbuf_header>
 800515a:	b988      	cbnz	r0, 8005180 <ethernet_output+0x44>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800515c:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 800515e:	f8a1 800c 	strh.w	r8, [r1, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	600b      	str	r3, [r1, #0]
 8005166:	88bb      	ldrh	r3, [r7, #4]
 8005168:	808b      	strh	r3, [r1, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 800516a:	6833      	ldr	r3, [r6, #0]
 800516c:	f8c1 3006 	str.w	r3, [r1, #6]
 8005170:	88b3      	ldrh	r3, [r6, #4]
 8005172:	814b      	strh	r3, [r1, #10]
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8005174:	69ab      	ldr	r3, [r5, #24]
 8005176:	4621      	mov	r1, r4
 8005178:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800517a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800517e:	4718      	bx	r3
}
 8005180:	f06f 0001 	mvn.w	r0, #1
 8005184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005188 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005188:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800518c:	4a25      	ldr	r2, [pc, #148]	; (8005224 <low_level_output+0x9c>)
 800518e:	9200      	str	r2, [sp, #0]
 8005190:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  uint32_t framelength = 0;
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;
 8005192:	f04f 0800 	mov.w	r8, #0
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8005196:	68ab      	ldr	r3, [r5, #8]
{
 8005198:	460c      	mov	r4, r1
  uint32_t framelength = 0;
 800519a:	4647      	mov	r7, r8
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800519c:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  for(q = p; q != NULL; q = q->next)
 80051a0:	b92c      	cbnz	r4, 80051ae <low_level_output+0x26>
      bufferoffset = bufferoffset + byteslefttocopy;
      framelength = framelength + byteslefttocopy;
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 80051a2:	4639      	mov	r1, r7
 80051a4:	481f      	ldr	r0, [pc, #124]	; (8005224 <low_level_output+0x9c>)
 80051a6:	f7fb fbd5 	bl	8000954 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 80051aa:	4620      	mov	r0, r4
 80051ac:	e004      	b.n	80051b8 <low_level_output+0x30>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80051ae:	682a      	ldr	r2, [r5, #0]
 80051b0:	2a00      	cmp	r2, #0
 80051b2:	da11      	bge.n	80051d8 <low_level_output+0x50>
        errval = ERR_USE;
 80051b4:	f06f 0007 	mvn.w	r0, #7
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80051b8:	9b00      	ldr	r3, [sp, #0]
 80051ba:	f241 0214 	movw	r2, #4116	; 0x1014
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	5899      	ldr	r1, [r3, r2]
 80051c2:	0689      	lsls	r1, r1, #26
 80051c4:	d505      	bpl.n	80051d2 <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80051c6:	2120      	movs	r1, #32
 80051c8:	5099      	str	r1, [r3, r2]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80051ca:	f241 0204 	movw	r2, #4100	; 0x1004
 80051ce:	2100      	movs	r1, #0
 80051d0:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 80051d2:	b003      	add	sp, #12
 80051d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      byteslefttocopy = q->len;
 80051d8:	f8b4 900a 	ldrh.w	r9, [r4, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80051dc:	4646      	mov	r6, r8
      payloadoffset = 0;
 80051de:	f04f 0a00 	mov.w	sl, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80051e2:	eb06 0809 	add.w	r8, r6, r9
 80051e6:	45d8      	cmp	r8, fp
 80051e8:	eb03 0006 	add.w	r0, r3, r6
 80051ec:	6861      	ldr	r1, [r4, #4]
 80051ee:	d808      	bhi.n	8005202 <low_level_output+0x7a>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80051f0:	464a      	mov	r2, r9
 80051f2:	4451      	add	r1, sl
 80051f4:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 80051f6:	444f      	add	r7, r9
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80051f8:	f000 fbe9 	bl	80059ce <memcpy>
  for(q = p; q != NULL; q = q->next)
 80051fc:	6824      	ldr	r4, [r4, #0]
 80051fe:	9b01      	ldr	r3, [sp, #4]
 8005200:	e7ce      	b.n	80051a0 <low_level_output+0x18>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8005202:	ebab 0606 	sub.w	r6, fp, r6
 8005206:	4632      	mov	r2, r6
 8005208:	4451      	add	r1, sl
 800520a:	f000 fbe0 	bl	80059ce <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800520e:	68ed      	ldr	r5, [r5, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005210:	682b      	ldr	r3, [r5, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	dbce      	blt.n	80051b4 <low_level_output+0x2c>
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8005216:	44b2      	add	sl, r6
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8005218:	4437      	add	r7, r6
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800521a:	68ab      	ldr	r3, [r5, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800521c:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        bufferoffset = 0;
 8005220:	2600      	movs	r6, #0
 8005222:	e7de      	b.n	80051e2 <low_level_output+0x5a>
 8005224:	20004fe4 	.word	0x20004fe4

08005228 <HAL_ETH_MspInit>:
{
 8005228:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 800522a:	6802      	ldr	r2, [r0, #0]
 800522c:	4b24      	ldr	r3, [pc, #144]	; (80052c0 <HAL_ETH_MspInit+0x98>)
 800522e:	429a      	cmp	r2, r3
{
 8005230:	b089      	sub	sp, #36	; 0x24
  if(ethHandle->Instance==ETH)
 8005232:	d142      	bne.n	80052ba <HAL_ETH_MspInit+0x92>
    __HAL_RCC_ETH_CLK_ENABLE();
 8005234:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 8005238:	2400      	movs	r4, #0
 800523a:	9400      	str	r4, [sp, #0]
 800523c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800523e:	4821      	ldr	r0, [pc, #132]	; (80052c4 <HAL_ETH_MspInit+0x9c>)
    __HAL_RCC_ETH_CLK_ENABLE();
 8005240:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8005244:	631a      	str	r2, [r3, #48]	; 0x30
 8005246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005248:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800524c:	9200      	str	r2, [sp, #0]
 800524e:	9a00      	ldr	r2, [sp, #0]
 8005250:	9401      	str	r4, [sp, #4]
 8005252:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005254:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005258:	631a      	str	r2, [r3, #48]	; 0x30
 800525a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800525c:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8005260:	9201      	str	r2, [sp, #4]
 8005262:	9a01      	ldr	r2, [sp, #4]
 8005264:	9402      	str	r4, [sp, #8]
 8005266:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005268:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800526c:	631a      	str	r2, [r3, #48]	; 0x30
 800526e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005270:	9405      	str	r4, [sp, #20]
    __HAL_RCC_ETH_CLK_ENABLE();
 8005272:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005276:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005278:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800527a:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800527c:	250b      	movs	r5, #11
    __HAL_RCC_ETH_CLK_ENABLE();
 800527e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005280:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005282:	2332      	movs	r3, #50	; 0x32
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005284:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005286:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005288:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800528a:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800528c:	f7fb fdbe 	bl	8000e0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005290:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005292:	a903      	add	r1, sp, #12
 8005294:	480c      	ldr	r0, [pc, #48]	; (80052c8 <HAL_ETH_MspInit+0xa0>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005296:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005298:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800529a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800529c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800529e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052a0:	f7fb fdb4 	bl	8000e0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80052a4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052a8:	a903      	add	r1, sp, #12
 80052aa:	4808      	ldr	r0, [pc, #32]	; (80052cc <HAL_ETH_MspInit+0xa4>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80052ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ae:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052b0:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052b2:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80052b4:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052b6:	f7fb fda9 	bl	8000e0c <HAL_GPIO_Init>
}
 80052ba:	b009      	add	sp, #36	; 0x24
 80052bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052be:	bf00      	nop
 80052c0:	40028000 	.word	0x40028000
 80052c4:	40020800 	.word	0x40020800
 80052c8:	40020000 	.word	0x40020000
 80052cc:	40020400 	.word	0x40020400

080052d0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80052d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80052d4:	4c35      	ldr	r4, [pc, #212]	; (80053ac <ethernetif_input+0xdc>)
{
 80052d6:	9001      	str	r0, [sp, #4]
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80052d8:	4620      	mov	r0, r4
 80052da:	f7fb fbaf 	bl	8000a3c <HAL_ETH_GetReceivedFrame>
 80052de:	4605      	mov	r5, r0
 80052e0:	2800      	cmp	r0, #0
 80052e2:	d160      	bne.n	80053a6 <ethernetif_input+0xd6>
  len = heth.RxFrameInfos.length;
 80052e4:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80052e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052e8:	9300      	str	r3, [sp, #0]
  if (len > 0)
 80052ea:	bb19      	cbnz	r1, 8005334 <ethernetif_input+0x64>
  struct pbuf *p = NULL;
 80052ec:	2700      	movs	r7, #0
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80052ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80052f0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80052f2:	2200      	movs	r2, #0
 80052f4:	4282      	cmp	r2, r0
 80052f6:	d14f      	bne.n	8005398 <ethernetif_input+0xc8>
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 80052f8:	f241 0114 	movw	r1, #4116	; 0x1014
 80052fc:	6823      	ldr	r3, [r4, #0]
 80052fe:	5858      	ldr	r0, [r3, r1]
 8005300:	0600      	lsls	r0, r0, #24
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005302:	bf42      	ittt	mi
 8005304:	2080      	movmi	r0, #128	; 0x80
 8005306:	5058      	strmi	r0, [r3, r1]
    heth.Instance->DMARPDR = 0;
 8005308:	f241 0108 	movwmi	r1, #4104	; 0x1008
    heth.RxFrameInfos.SegCount =0;  
 800530c:	f04f 0200 	mov.w	r2, #0
 8005310:	63a2      	str	r2, [r4, #56]	; 0x38
    heth.Instance->DMARPDR = 0;
 8005312:	bf48      	it	mi
 8005314:	505a      	strmi	r2, [r3, r1]

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8005316:	2f00      	cmp	r7, #0
 8005318:	d045      	beq.n	80053a6 <ethernetif_input+0xd6>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800531a:	9b01      	ldr	r3, [sp, #4]
 800531c:	9901      	ldr	r1, [sp, #4]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	4638      	mov	r0, r7
 8005322:	4798      	blx	r3
    
  if (err != ERR_OK)
 8005324:	2800      	cmp	r0, #0
 8005326:	d03e      	beq.n	80053a6 <ethernetif_input+0xd6>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8005328:	4638      	mov	r0, r7
    p = NULL;    
  }
}
 800532a:	b003      	add	sp, #12
 800532c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pbuf_free(p);
 8005330:	f7fd bc90 	b.w	8002c54 <pbuf_free>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005334:	2203      	movs	r2, #3
 8005336:	2004      	movs	r0, #4
 8005338:	f7fd fcb4 	bl	8002ca4 <pbuf_alloc>
  if (p != NULL)
 800533c:	4607      	mov	r7, r0
 800533e:	2800      	cmp	r0, #0
 8005340:	d0d4      	beq.n	80052ec <ethernetif_input+0x1c>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005342:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8005346:	4680      	mov	r8, r0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005348:	f240 5bf4 	movw	fp, #1524	; 0x5f4
      byteslefttocopy = q->len;
 800534c:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 8005350:	462e      	mov	r6, r5
      payloadoffset = 0;
 8005352:	f04f 0900 	mov.w	r9, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005356:	18b5      	adds	r5, r6, r2
 8005358:	9b00      	ldr	r3, [sp, #0]
 800535a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800535e:	455d      	cmp	r5, fp
 8005360:	eb03 0106 	add.w	r1, r3, r6
 8005364:	d808      	bhi.n	8005378 <ethernetif_input+0xa8>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8005366:	4448      	add	r0, r9
 8005368:	f000 fb31 	bl	80059ce <memcpy>
    for(q = p; q != NULL; q = q->next)
 800536c:	f8d8 8000 	ldr.w	r8, [r8]
 8005370:	f1b8 0f00 	cmp.w	r8, #0
 8005374:	d1ea      	bne.n	800534c <ethernetif_input+0x7c>
 8005376:	e7ba      	b.n	80052ee <ethernetif_input+0x1e>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005378:	ebab 0606 	sub.w	r6, fp, r6
 800537c:	4632      	mov	r2, r6
 800537e:	4448      	add	r0, r9
 8005380:	f000 fb25 	bl	80059ce <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005384:	f8da a00c 	ldr.w	sl, [sl, #12]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8005388:	f8da 3008 	ldr.w	r3, [sl, #8]
 800538c:	9300      	str	r3, [sp, #0]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800538e:	44b1      	add	r9, r6
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005390:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        bufferoffset = 0;
 8005394:	2600      	movs	r6, #0
 8005396:	e7de      	b.n	8005356 <ethernetif_input+0x86>
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005398:	6819      	ldr	r1, [r3, #0]
 800539a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800539e:	6019      	str	r1, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80053a0:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80053a2:	3201      	adds	r2, #1
 80053a4:	e7a6      	b.n	80052f4 <ethernetif_input+0x24>
}
 80053a6:	b003      	add	sp, #12
 80053a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ac:	20004fe4 	.word	0x20004fe4

080053b0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80053b0:	b530      	push	{r4, r5, lr}
  heth.Instance = ETH;
 80053b2:	4d3c      	ldr	r5, [pc, #240]	; (80054a4 <ethernetif_init+0xf4>)
 80053b4:	4a3c      	ldr	r2, [pc, #240]	; (80054a8 <ethernetif_init+0xf8>)
 80053b6:	602a      	str	r2, [r5, #0]
{
 80053b8:	b085      	sub	sp, #20
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80053ba:	2201      	movs	r2, #1
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80053bc:	2373      	movs	r3, #115	; 0x73
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80053be:	606a      	str	r2, [r5, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80053c0:	822a      	strh	r2, [r5, #16]
  MACAddr[1] = 0x13;
 80053c2:	2213      	movs	r2, #19
  netif->name[0] = IFNAME0;
 80053c4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  MACAddr[1] = 0x13;
 80053c8:	f88d 2009 	strb.w	r2, [sp, #9]
  netif->name[1] = IFNAME1;
 80053cc:	2374      	movs	r3, #116	; 0x74
  MACAddr[2] = 0x45;
 80053ce:	2245      	movs	r2, #69	; 0x45
  netif->name[1] = IFNAME1;
 80053d0:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  MACAddr[2] = 0x45;
 80053d4:	f88d 200a 	strb.w	r2, [sp, #10]
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80053d8:	4b34      	ldr	r3, [pc, #208]	; (80054ac <ethernetif_init+0xfc>)
 80053da:	6143      	str	r3, [r0, #20]
  MACAddr[3] = 0x12;
 80053dc:	2212      	movs	r2, #18
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80053de:	4b34      	ldr	r3, [pc, #208]	; (80054b0 <ethernetif_init+0x100>)
  MACAddr[3] = 0x12;
 80053e0:	f88d 200b 	strb.w	r2, [sp, #11]
  MACAddr[4] = 0x34;
 80053e4:	2234      	movs	r2, #52	; 0x34
  netif->linkoutput = low_level_output;
 80053e6:	6183      	str	r3, [r0, #24]
  MACAddr[4] = 0x34;
 80053e8:	f88d 200c 	strb.w	r2, [sp, #12]
  uint32_t regvalue = 0;
 80053ec:	2300      	movs	r3, #0
  MACAddr[5] = 0x56;
 80053ee:	2256      	movs	r2, #86	; 0x56
{
 80053f0:	4604      	mov	r4, r0
  uint32_t regvalue = 0;
 80053f2:	9301      	str	r3, [sp, #4]
  MACAddr[0] = 0x00;
 80053f4:	f88d 3008 	strb.w	r3, [sp, #8]
  MACAddr[5] = 0x56;
 80053f8:	f88d 200d 	strb.w	r2, [sp, #13]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80053fc:	61ab      	str	r3, [r5, #24]
  heth.Init.MACAddr = &MACAddr[0];
 80053fe:	aa02      	add	r2, sp, #8
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005400:	61eb      	str	r3, [r5, #28]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005402:	4628      	mov	r0, r5
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8005404:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  heth.Init.MACAddr = &MACAddr[0];
 8005408:	616a      	str	r2, [r5, #20]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800540a:	622b      	str	r3, [r5, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800540c:	f7fb fbc6 	bl	8000b9c <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 8005410:	b928      	cbnz	r0, 800541e <ethernetif_init+0x6e>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8005412:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8005416:	f043 0304 	orr.w	r3, r3, #4
 800541a:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800541e:	2304      	movs	r3, #4
 8005420:	4a24      	ldr	r2, [pc, #144]	; (80054b4 <ethernetif_init+0x104>)
 8005422:	4925      	ldr	r1, [pc, #148]	; (80054b8 <ethernetif_init+0x108>)
 8005424:	481f      	ldr	r0, [pc, #124]	; (80054a4 <ethernetif_init+0xf4>)
 8005426:	f7fb fa1b 	bl	8000860 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800542a:	4924      	ldr	r1, [pc, #144]	; (80054bc <ethernetif_init+0x10c>)
 800542c:	4a24      	ldr	r2, [pc, #144]	; (80054c0 <ethernetif_init+0x110>)
 800542e:	481d      	ldr	r0, [pc, #116]	; (80054a4 <ethernetif_init+0xf4>)
 8005430:	2304      	movs	r3, #4
 8005432:	f7fb fa52 	bl	80008da <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005436:	2306      	movs	r3, #6
 8005438:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800543c:	696b      	ldr	r3, [r5, #20]
  HAL_ETH_Start(&heth);
 800543e:	4819      	ldr	r0, [pc, #100]	; (80054a4 <ethernetif_init+0xf4>)
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005440:	781a      	ldrb	r2, [r3, #0]
 8005442:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005446:	785a      	ldrb	r2, [r3, #1]
 8005448:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800544c:	789a      	ldrb	r2, [r3, #2]
 800544e:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005452:	78da      	ldrb	r2, [r3, #3]
 8005454:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005458:	791a      	ldrb	r2, [r3, #4]
 800545a:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800545e:	795b      	ldrb	r3, [r3, #5]
 8005460:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  netif->mtu = 1500;
 8005464:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8005468:	8463      	strh	r3, [r4, #34]	; 0x22
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800546a:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800546e:	f043 030a 	orr.w	r3, r3, #10
 8005472:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  HAL_ETH_Start(&heth);
 8005476:	f7fb fc8d 	bl	8000d94 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800547a:	aa01      	add	r2, sp, #4
 800547c:	210b      	movs	r1, #11
 800547e:	4809      	ldr	r0, [pc, #36]	; (80054a4 <ethernetif_init+0xf4>)
 8005480:	f7fb fb1b 	bl	8000aba <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8005484:	9a01      	ldr	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8005486:	4807      	ldr	r0, [pc, #28]	; (80054a4 <ethernetif_init+0xf4>)
  regvalue |= (PHY_ISFR_INT4);
 8005488:	f042 020b 	orr.w	r2, r2, #11
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800548c:	210b      	movs	r1, #11
  regvalue |= (PHY_ISFR_INT4);
 800548e:	9201      	str	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8005490:	f7fb fb4d 	bl	8000b2e <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8005494:	aa01      	add	r2, sp, #4
 8005496:	210b      	movs	r1, #11
 8005498:	4802      	ldr	r0, [pc, #8]	; (80054a4 <ethernetif_init+0xf4>)
 800549a:	f7fb fb0e 	bl	8000aba <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 800549e:	2000      	movs	r0, #0
 80054a0:	b005      	add	sp, #20
 80054a2:	bd30      	pop	{r4, r5, pc}
 80054a4:	20004fe4 	.word	0x20004fe4
 80054a8:	40028000 	.word	0x40028000
 80054ac:	08001d05 	.word	0x08001d05
 80054b0:	08005189 	.word	0x08005189
 80054b4:	2000502c 	.word	0x2000502c
 80054b8:	20003714 	.word	0x20003714
 80054bc:	20004f64 	.word	0x20004f64
 80054c0:	20003794 	.word	0x20003794

080054c4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80054c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* IP addresses initialization */
  IP_ADDRESS[0] = 169;
 80054c6:	4f1e      	ldr	r7, [pc, #120]	; (8005540 <MX_LWIP_Init+0x7c>)
  IP_ADDRESS[3] = 15;
  NETMASK_ADDRESS[0] = 255;
  NETMASK_ADDRESS[1] = 255;
  NETMASK_ADDRESS[2] = 0;
  NETMASK_ADDRESS[3] = 0;
  GATEWAY_ADDRESS[0] = 0;
 80054c8:	4d1e      	ldr	r5, [pc, #120]	; (8005544 <MX_LWIP_Init+0x80>)
  NETMASK_ADDRESS[0] = 255;
 80054ca:	4e1f      	ldr	r6, [pc, #124]	; (8005548 <MX_LWIP_Init+0x84>)
  IP_ADDRESS[0] = 169;
 80054cc:	23a9      	movs	r3, #169	; 0xa9
 80054ce:	703b      	strb	r3, [r7, #0]
  IP_ADDRESS[1] = 254;
 80054d0:	23fe      	movs	r3, #254	; 0xfe
 80054d2:	707b      	strb	r3, [r7, #1]
  IP_ADDRESS[2] = 183;
 80054d4:	23b7      	movs	r3, #183	; 0xb7
 80054d6:	70bb      	strb	r3, [r7, #2]
  IP_ADDRESS[3] = 15;
 80054d8:	230f      	movs	r3, #15
  NETMASK_ADDRESS[2] = 0;
 80054da:	2400      	movs	r4, #0
{
 80054dc:	b085      	sub	sp, #20
  IP_ADDRESS[3] = 15;
 80054de:	70fb      	strb	r3, [r7, #3]
  NETMASK_ADDRESS[0] = 255;
 80054e0:	23ff      	movs	r3, #255	; 0xff
 80054e2:	7033      	strb	r3, [r6, #0]
  NETMASK_ADDRESS[1] = 255;
 80054e4:	7073      	strb	r3, [r6, #1]
  GATEWAY_ADDRESS[0] = 0;
 80054e6:	702c      	strb	r4, [r5, #0]
  GATEWAY_ADDRESS[1] = 0;
 80054e8:	706c      	strb	r4, [r5, #1]
  GATEWAY_ADDRESS[2] = 0;
 80054ea:	70ac      	strb	r4, [r5, #2]
  GATEWAY_ADDRESS[3] = 0;
 80054ec:	70ec      	strb	r4, [r5, #3]
  NETMASK_ADDRESS[2] = 0;
 80054ee:	70b4      	strb	r4, [r6, #2]
  NETMASK_ADDRESS[3] = 0;
 80054f0:	70f4      	strb	r4, [r6, #3]
  
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80054f2:	f7fc f9ca 	bl	800188a <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80054f6:	4915      	ldr	r1, [pc, #84]	; (800554c <MX_LWIP_Init+0x88>)
 80054f8:	683b      	ldr	r3, [r7, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80054fa:	4a15      	ldr	r2, [pc, #84]	; (8005550 <MX_LWIP_Init+0x8c>)
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80054fc:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80054fe:	6833      	ldr	r3, [r6, #0]
 8005500:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005502:	4b14      	ldr	r3, [pc, #80]	; (8005554 <MX_LWIP_Init+0x90>)
 8005504:	6828      	ldr	r0, [r5, #0]
 8005506:	6018      	str	r0, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8005508:	4d13      	ldr	r5, [pc, #76]	; (8005558 <MX_LWIP_Init+0x94>)
 800550a:	4814      	ldr	r0, [pc, #80]	; (800555c <MX_LWIP_Init+0x98>)
 800550c:	9002      	str	r0, [sp, #8]
 800550e:	4814      	ldr	r0, [pc, #80]	; (8005560 <MX_LWIP_Init+0x9c>)
 8005510:	9001      	str	r0, [sp, #4]
 8005512:	9400      	str	r4, [sp, #0]
 8005514:	4628      	mov	r0, r5
 8005516:	f7fd faeb 	bl	8002af0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800551a:	4628      	mov	r0, r5
 800551c:	f7fd fb12 	bl	8002b44 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005520:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8005524:	075b      	lsls	r3, r3, #29
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005526:	4628      	mov	r0, r5
  if (netif_is_link_up(&gnetif))
 8005528:	d504      	bpl.n	8005534 <MX_LWIP_Init+0x70>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800552a:	b005      	add	sp, #20
 800552c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    netif_set_up(&gnetif);
 8005530:	f7fd bb0e 	b.w	8002b50 <netif_set_up>
}
 8005534:	b005      	add	sp, #20
 8005536:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    netif_set_down(&gnetif);
 800553a:	f7fd bb18 	b.w	8002b6e <netif_set_down>
 800553e:	bf00      	nop
 8005540:	20006838 	.word	0x20006838
 8005544:	200067fc 	.word	0x200067fc
 8005548:	20006834 	.word	0x20006834
 800554c:	20006830 	.word	0x20006830
 8005550:	2000683c 	.word	0x2000683c
 8005554:	20006840 	.word	0x20006840
 8005558:	20006800 	.word	0x20006800
 800555c:	080050a5 	.word	0x080050a5
 8005560:	080053b1 	.word	0x080053b1

08005564 <MX_LWIP_Process>:
 */
void MX_LWIP_Process(void)
{
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8005564:	4801      	ldr	r0, [pc, #4]	; (800556c <MX_LWIP_Process+0x8>)
 8005566:	f7ff beb3 	b.w	80052d0 <ethernetif_input>
 800556a:	bf00      	nop
 800556c:	20006800 	.word	0x20006800

08005570 <HAL_TIM_PeriodElapsedCallback>:

}
//////$$$$$$$$$$$$$$$$$$$$$$$$$///////
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  if(htim==&htim2)
 8005570:	4b02      	ldr	r3, [pc, #8]	; (800557c <HAL_TIM_PeriodElapsedCallback+0xc>)
 8005572:	4283      	cmp	r3, r0
 8005574:	d101      	bne.n	800557a <HAL_TIM_PeriodElapsedCallback+0xa>
  {
    TIM1_Callback();
 8005576:	f000 b939 	b.w	80057ec <TIM1_Callback>
 800557a:	4770      	bx	lr
 800557c:	20006844 	.word	0x20006844

08005580 <SystemClock_Config>:
//////$$$$$$$$$$$$$$$$$$$$$$$$$///////

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8005580:	b570      	push	{r4, r5, r6, lr}
 8005582:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005584:	2400      	movs	r4, #0
 8005586:	4b25      	ldr	r3, [pc, #148]	; (800561c <SystemClock_Config+0x9c>)
 8005588:	9401      	str	r4, [sp, #4]
 800558a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800558c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005590:	641a      	str	r2, [r3, #64]	; 0x40
 8005592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005598:	9301      	str	r3, [sp, #4]
 800559a:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800559c:	4b20      	ldr	r3, [pc, #128]	; (8005620 <SystemClock_Config+0xa0>)
 800559e:	9402      	str	r4, [sp, #8]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055ae:	9302      	str	r3, [sp, #8]
 80055b0:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80055b2:	2301      	movs	r3, #1
 80055b4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80055b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80055ba:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80055bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80055c0:	2602      	movs	r6, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 80055c2:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80055c4:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80055c6:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 168;
 80055c8:	23a8      	movs	r3, #168	; 0xa8
 80055ca:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80055cc:	960e      	str	r6, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80055ce:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80055d0:	9612      	str	r6, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80055d2:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80055d4:	f7fb fd04 	bl	8000fe0 <HAL_RCC_OscConfig>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80055d8:	230f      	movs	r3, #15
 80055da:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80055dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80055e0:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80055e2:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80055e4:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80055e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055ea:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80055ec:	9604      	str	r6, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80055ee:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80055f0:	f7fb fe9a 	bl	8001328 <HAL_RCC_ClockConfig>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80055f4:	f7fb ff32 	bl	800145c <HAL_RCC_GetHCLKFreq>
 80055f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80055fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8005600:	f7fb f864 	bl	80006cc <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8005604:	4628      	mov	r0, r5
 8005606:	f7fb f877 	bl	80006f8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800560a:	4622      	mov	r2, r4
 800560c:	4621      	mov	r1, r4
 800560e:	f04f 30ff 	mov.w	r0, #4294967295
 8005612:	f7fb f81b 	bl	800064c <HAL_NVIC_SetPriority>
}
 8005616:	b014      	add	sp, #80	; 0x50
 8005618:	bd70      	pop	{r4, r5, r6, pc}
 800561a:	bf00      	nop
 800561c:	40023800 	.word	0x40023800
 8005620:	40007000 	.word	0x40007000

08005624 <main>:
{
 8005624:	b500      	push	{lr}
 8005626:	b08d      	sub	sp, #52	; 0x34
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005628:	2400      	movs	r4, #0
  HAL_Init();
 800562a:	f7fa ffc5 	bl	80005b8 <HAL_Init>
  SystemClock_Config();
 800562e:	f7ff ffa7 	bl	8005580 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005632:	4b38      	ldr	r3, [pc, #224]	; (8005714 <main+0xf0>)
 8005634:	9400      	str	r4, [sp, #0]
 8005636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8005638:	4837      	ldr	r0, [pc, #220]	; (8005718 <main+0xf4>)
  htim2.Instance = TIM2;
 800563a:	4d38      	ldr	r5, [pc, #224]	; (800571c <main+0xf8>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800563c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005640:	631a      	str	r2, [r3, #48]	; 0x30
 8005642:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005644:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005648:	9200      	str	r2, [sp, #0]
 800564a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800564c:	9401      	str	r4, [sp, #4]
 800564e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005650:	f042 0204 	orr.w	r2, r2, #4
 8005654:	631a      	str	r2, [r3, #48]	; 0x30
 8005656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005658:	f002 0204 	and.w	r2, r2, #4
 800565c:	9201      	str	r2, [sp, #4]
 800565e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005660:	9402      	str	r4, [sp, #8]
 8005662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005664:	f042 0201 	orr.w	r2, r2, #1
 8005668:	631a      	str	r2, [r3, #48]	; 0x30
 800566a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800566c:	f002 0201 	and.w	r2, r2, #1
 8005670:	9202      	str	r2, [sp, #8]
 8005672:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005674:	9403      	str	r4, [sp, #12]
 8005676:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005678:	f042 0202 	orr.w	r2, r2, #2
 800567c:	631a      	str	r2, [r3, #48]	; 0x30
 800567e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005680:	f002 0202 	and.w	r2, r2, #2
 8005684:	9203      	str	r2, [sp, #12]
 8005686:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005688:	9404      	str	r4, [sp, #16]
 800568a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800568c:	f042 0208 	orr.w	r2, r2, #8
 8005690:	631a      	str	r2, [r3, #48]	; 0x30
 8005692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005694:	f003 0308 	and.w	r3, r3, #8
 8005698:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800569a:	4622      	mov	r2, r4
 800569c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80056a0:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80056a2:	f7fb fc93 	bl	8000fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80056a6:	2201      	movs	r2, #1
 80056a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056ac:	481a      	ldr	r0, [pc, #104]	; (8005718 <main+0xf4>)
 80056ae:	f7fb fc8d 	bl	8000fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 80056b2:	f44f 4310 	mov.w	r3, #36864	; 0x9000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80056b6:	a907      	add	r1, sp, #28
 80056b8:	4817      	ldr	r0, [pc, #92]	; (8005718 <main+0xf4>)
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 80056ba:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056bc:	2301      	movs	r3, #1
 80056be:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80056c0:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056c2:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80056c4:	f7fb fba2 	bl	8000e0c <HAL_GPIO_Init>
  MX_LWIP_Init();
 80056c8:	f7ff fefc 	bl	80054c4 <MX_LWIP_Init>
  htim2.Init.Prescaler = 41999;
 80056cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80056d0:	f24a 430f 	movw	r3, #41999	; 0xa40f
 80056d4:	e885 000c 	stmia.w	r5, {r2, r3}
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80056d8:	4628      	mov	r0, r5
  htim2.Init.Period = 1999;
 80056da:	f240 73cf 	movw	r3, #1999	; 0x7cf
 80056de:	60eb      	str	r3, [r5, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056e0:	60ac      	str	r4, [r5, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056e2:	612c      	str	r4, [r5, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80056e4:	f7fc f88e 	bl	8001804 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80056e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80056ec:	a907      	add	r1, sp, #28
 80056ee:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80056f0:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80056f2:	f7fb fec4 	bl	800147e <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80056f6:	2320      	movs	r3, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80056f8:	a905      	add	r1, sp, #20
 80056fa:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80056fc:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056fe:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005700:	f7fc f89a 	bl	8001838 <HAL_TIMEx_MasterConfigSynchronization>
  HAL_TIM_Base_Start_IT(&htim2);
 8005704:	4628      	mov	r0, r5
 8005706:	f7fb feaf 	bl	8001468 <HAL_TIM_Base_Start_IT>
  udp_client_connect();
 800570a:	f000 f823 	bl	8005754 <udp_client_connect>
	  MX_LWIP_Process();
 800570e:	f7ff ff29 	bl	8005564 <MX_LWIP_Process>
 8005712:	e7fc      	b.n	800570e <main+0xea>
 8005714:	40023800 	.word	0x40023800
 8005718:	40020c00 	.word	0x40020c00
 800571c:	20006844 	.word	0x20006844

08005720 <udp_receive_callback>:
    pbuf_free(p);
  }
}
//-----------------------------------------------
void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8005720:	b538      	push	{r3, r4, r5, lr}
 8005722:	4614      	mov	r4, r2
  strncpy(str1,p->payload,p->len);
 8005724:	4d09      	ldr	r5, [pc, #36]	; (800574c <udp_receive_callback+0x2c>)
 8005726:	6861      	ldr	r1, [r4, #4]
 8005728:	8952      	ldrh	r2, [r2, #10]
 800572a:	4628      	mov	r0, r5
 800572c:	f000 f986 	bl	8005a3c <strncpy>
  str1[p->len]=0;
 8005730:	8963      	ldrh	r3, [r4, #10]
 8005732:	2200      	movs	r2, #0
  pbuf_free(p);
 8005734:	4620      	mov	r0, r4
  str1[p->len]=0;
 8005736:	54ea      	strb	r2, [r5, r3]
  pbuf_free(p);
 8005738:	f7fd fa8c 	bl	8002c54 <pbuf_free>
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800573c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005740:	4803      	ldr	r0, [pc, #12]	; (8005750 <udp_receive_callback+0x30>)
}
 8005742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8005746:	f7fb bc46 	b.w	8000fd6 <HAL_GPIO_TogglePin>
 800574a:	bf00      	nop
 800574c:	20006884 	.word	0x20006884
 8005750:	40020c00 	.word	0x40020c00

08005754 <udp_client_connect>:
{
 8005754:	b513      	push	{r0, r1, r4, lr}
  upcb = udp_new();
 8005756:	f7ff fc80 	bl	800505a <udp_new>
 800575a:	4c0b      	ldr	r4, [pc, #44]	; (8005788 <udp_client_connect+0x34>)
 800575c:	6020      	str	r0, [r4, #0]
  if (upcb!=NULL)
 800575e:	b180      	cbz	r0, 8005782 <udp_client_connect+0x2e>
    IP4_ADDR( &DestIPaddr, 169, 254, 183, 105);
 8005760:	a902      	add	r1, sp, #8
 8005762:	4a0a      	ldr	r2, [pc, #40]	; (800578c <udp_client_connect+0x38>)
 8005764:	f841 2d04 	str.w	r2, [r1, #-4]!
    upcb->local_port = 1555;
 8005768:	f240 6213 	movw	r2, #1555	; 0x613
 800576c:	8242      	strh	r2, [r0, #18]
    err= udp_connect(upcb, &DestIPaddr, 1556);
 800576e:	f240 6214 	movw	r2, #1556	; 0x614
 8005772:	f7ff fc47 	bl	8005004 <udp_connect>
    if (err == ERR_OK)
 8005776:	4602      	mov	r2, r0
 8005778:	b918      	cbnz	r0, 8005782 <udp_client_connect+0x2e>
      udp_recv(upcb, udp_receive_callback, NULL);
 800577a:	4905      	ldr	r1, [pc, #20]	; (8005790 <udp_client_connect+0x3c>)
 800577c:	6820      	ldr	r0, [r4, #0]
 800577e:	f7ff fc69 	bl	8005054 <udp_recv>
}
 8005782:	b002      	add	sp, #8
 8005784:	bd10      	pop	{r4, pc}
 8005786:	bf00      	nop
 8005788:	20006880 	.word	0x20006880
 800578c:	69b7fea9 	.word	0x69b7fea9
 8005790:	08005721 	.word	0x08005721

08005794 <udp_client_send>:
{
 8005794:	b510      	push	{r4, lr}
  sprintf(str1,"%lu\r\n",HAL_GetTick());
 8005796:	f7fa ff31 	bl	80005fc <HAL_GetTick>
 800579a:	4911      	ldr	r1, [pc, #68]	; (80057e0 <udp_client_send+0x4c>)
 800579c:	4602      	mov	r2, r0
 800579e:	4811      	ldr	r0, [pc, #68]	; (80057e4 <udp_client_send+0x50>)
 80057a0:	f000 f928 	bl	80059f4 <siprintf>
  p = pbuf_alloc(PBUF_TRANSPORT, strlen(str1), PBUF_POOL);
 80057a4:	480f      	ldr	r0, [pc, #60]	; (80057e4 <udp_client_send+0x50>)
 80057a6:	f7fa fd13 	bl	80001d0 <strlen>
 80057aa:	2203      	movs	r2, #3
 80057ac:	b281      	uxth	r1, r0
 80057ae:	2000      	movs	r0, #0
 80057b0:	f7fd fa78 	bl	8002ca4 <pbuf_alloc>
  if (p != NULL)
 80057b4:	4604      	mov	r4, r0
 80057b6:	b188      	cbz	r0, 80057dc <udp_client_send+0x48>
    pbuf_take(p, (void *) str1, strlen(str1));
 80057b8:	480a      	ldr	r0, [pc, #40]	; (80057e4 <udp_client_send+0x50>)
 80057ba:	f7fa fd09 	bl	80001d0 <strlen>
 80057be:	4909      	ldr	r1, [pc, #36]	; (80057e4 <udp_client_send+0x50>)
 80057c0:	b282      	uxth	r2, r0
 80057c2:	4620      	mov	r0, r4
 80057c4:	f7fd fb94 	bl	8002ef0 <pbuf_take>
    udp_send(upcb, p);
 80057c8:	4b07      	ldr	r3, [pc, #28]	; (80057e8 <udp_client_send+0x54>)
 80057ca:	4621      	mov	r1, r4
 80057cc:	6818      	ldr	r0, [r3, #0]
 80057ce:	f7ff fc10 	bl	8004ff2 <udp_send>
    pbuf_free(p);
 80057d2:	4620      	mov	r0, r4
}
 80057d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    pbuf_free(p);
 80057d8:	f7fd ba3c 	b.w	8002c54 <pbuf_free>
 80057dc:	bd10      	pop	{r4, pc}
 80057de:	bf00      	nop
 80057e0:	08006314 	.word	0x08006314
 80057e4:	20006884 	.word	0x20006884
 80057e8:	20006880 	.word	0x20006880

080057ec <TIM1_Callback>:

//-----------------------------------------------
void TIM1_Callback(void)
{
 80057ec:	b508      	push	{r3, lr}
  udp_client_send();
 80057ee:	f7ff ffd1 	bl	8005794 <udp_client_send>
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80057f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057f6:	4802      	ldr	r0, [pc, #8]	; (8005800 <TIM1_Callback+0x14>)
}
 80057f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80057fc:	f7fb bbeb 	b.w	8000fd6 <HAL_GPIO_TogglePin>
 8005800:	40020c00 	.word	0x40020c00

08005804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005804:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005806:	2003      	movs	r0, #3
 8005808:	f7fa ff0e 	bl	8000628 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800580c:	2200      	movs	r2, #0
 800580e:	4611      	mov	r1, r2
 8005810:	f06f 000b 	mvn.w	r0, #11
 8005814:	f7fa ff1a 	bl	800064c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8005818:	2200      	movs	r2, #0
 800581a:	4611      	mov	r1, r2
 800581c:	f06f 000a 	mvn.w	r0, #10
 8005820:	f7fa ff14 	bl	800064c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8005824:	2200      	movs	r2, #0
 8005826:	4611      	mov	r1, r2
 8005828:	f06f 0009 	mvn.w	r0, #9
 800582c:	f7fa ff0e 	bl	800064c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8005830:	2200      	movs	r2, #0
 8005832:	4611      	mov	r1, r2
 8005834:	f06f 0004 	mvn.w	r0, #4
 8005838:	f7fa ff08 	bl	800064c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800583c:	2200      	movs	r2, #0
 800583e:	4611      	mov	r1, r2
 8005840:	f06f 0003 	mvn.w	r0, #3
 8005844:	f7fa ff02 	bl	800064c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8005848:	2200      	movs	r2, #0
 800584a:	4611      	mov	r1, r2
 800584c:	f06f 0001 	mvn.w	r0, #1
 8005850:	f7fa fefc 	bl	800064c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005854:	2200      	movs	r2, #0
 8005856:	4611      	mov	r1, r2
 8005858:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800585c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005860:	f7fa bef4 	b.w	800064c <HAL_NVIC_SetPriority>

08005864 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 8005864:	6803      	ldr	r3, [r0, #0]
 8005866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 800586a:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 800586c:	d113      	bne.n	8005896 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800586e:	2200      	movs	r2, #0
 8005870:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8005874:	9201      	str	r2, [sp, #4]
 8005876:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005878:	f041 0101 	orr.w	r1, r1, #1
 800587c:	6419      	str	r1, [r3, #64]	; 0x40
 800587e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	9301      	str	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005886:	201c      	movs	r0, #28
 8005888:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 800588a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800588c:	f7fa fede 	bl	800064c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005890:	201c      	movs	r0, #28
 8005892:	f7fa ff0f 	bl	80006b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005896:	b003      	add	sp, #12
 8005898:	f85d fb04 	ldr.w	pc, [sp], #4

0800589c <NMI_Handler>:
 800589c:	4770      	bx	lr

0800589e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800589e:	e7fe      	b.n	800589e <HardFault_Handler>

080058a0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80058a0:	e7fe      	b.n	80058a0 <MemManage_Handler>

080058a2 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80058a2:	e7fe      	b.n	80058a2 <BusFault_Handler>

080058a4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80058a4:	e7fe      	b.n	80058a4 <UsageFault_Handler>

080058a6 <SVC_Handler>:
 80058a6:	4770      	bx	lr

080058a8 <DebugMon_Handler>:
 80058a8:	4770      	bx	lr

080058aa <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80058aa:	4770      	bx	lr

080058ac <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80058ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80058ae:	f7fa fe9d 	bl	80005ec <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80058b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80058b6:	f7fa bf2c 	b.w	8000712 <HAL_SYSTICK_IRQHandler>
	...

080058bc <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80058bc:	4801      	ldr	r0, [pc, #4]	; (80058c4 <TIM2_IRQHandler+0x8>)
 80058be:	f7fb be9b 	b.w	80015f8 <HAL_TIM_IRQHandler>
 80058c2:	bf00      	nop
 80058c4:	20006844 	.word	0x20006844

080058c8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80058c8:	490f      	ldr	r1, [pc, #60]	; (8005908 <SystemInit+0x40>)
 80058ca:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80058ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80058d6:	4b0d      	ldr	r3, [pc, #52]	; (800590c <SystemInit+0x44>)
 80058d8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80058da:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80058dc:	f042 0201 	orr.w	r2, r2, #1
 80058e0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80058e2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80058ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80058ee:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80058f0:	4a07      	ldr	r2, [pc, #28]	; (8005910 <SystemInit+0x48>)
 80058f2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80058fa:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80058fc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80058fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005902:	608b      	str	r3, [r1, #8]
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	e000ed00 	.word	0xe000ed00
 800590c:	40023800 	.word	0x40023800
 8005910:	24003010 	.word	0x24003010

08005914 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005914:	f8df d034 	ldr.w	sp, [pc, #52]	; 800594c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005918:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800591a:	e003      	b.n	8005924 <LoopCopyDataInit>

0800591c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800591c:	4b0c      	ldr	r3, [pc, #48]	; (8005950 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800591e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005920:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005922:	3104      	adds	r1, #4

08005924 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005924:	480b      	ldr	r0, [pc, #44]	; (8005954 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005926:	4b0c      	ldr	r3, [pc, #48]	; (8005958 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005928:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800592a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800592c:	d3f6      	bcc.n	800591c <CopyDataInit>
  ldr  r2, =_sbss
 800592e:	4a0b      	ldr	r2, [pc, #44]	; (800595c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005930:	e002      	b.n	8005938 <LoopFillZerobss>

08005932 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005932:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005934:	f842 3b04 	str.w	r3, [r2], #4

08005938 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005938:	4b09      	ldr	r3, [pc, #36]	; (8005960 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800593a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800593c:	d3f9      	bcc.n	8005932 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800593e:	f7ff ffc3 	bl	80058c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005942:	f000 f811 	bl	8005968 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005946:	f7ff fe6d 	bl	8005624 <main>
  bx  lr    
 800594a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800594c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005950:	08006370 	.word	0x08006370
  ldr  r0, =_sdata
 8005954:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005958:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800595c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8005960:	200068a8 	.word	0x200068a8

08005964 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005964:	e7fe      	b.n	8005964 <ADC_IRQHandler>
	...

08005968 <__libc_init_array>:
 8005968:	b570      	push	{r4, r5, r6, lr}
 800596a:	4e0d      	ldr	r6, [pc, #52]	; (80059a0 <__libc_init_array+0x38>)
 800596c:	4c0d      	ldr	r4, [pc, #52]	; (80059a4 <__libc_init_array+0x3c>)
 800596e:	1ba4      	subs	r4, r4, r6
 8005970:	10a4      	asrs	r4, r4, #2
 8005972:	2500      	movs	r5, #0
 8005974:	42a5      	cmp	r5, r4
 8005976:	d109      	bne.n	800598c <__libc_init_array+0x24>
 8005978:	4e0b      	ldr	r6, [pc, #44]	; (80059a8 <__libc_init_array+0x40>)
 800597a:	4c0c      	ldr	r4, [pc, #48]	; (80059ac <__libc_init_array+0x44>)
 800597c:	f000 fc6e 	bl	800625c <_init>
 8005980:	1ba4      	subs	r4, r4, r6
 8005982:	10a4      	asrs	r4, r4, #2
 8005984:	2500      	movs	r5, #0
 8005986:	42a5      	cmp	r5, r4
 8005988:	d105      	bne.n	8005996 <__libc_init_array+0x2e>
 800598a:	bd70      	pop	{r4, r5, r6, pc}
 800598c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005990:	4798      	blx	r3
 8005992:	3501      	adds	r5, #1
 8005994:	e7ee      	b.n	8005974 <__libc_init_array+0xc>
 8005996:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800599a:	4798      	blx	r3
 800599c:	3501      	adds	r5, #1
 800599e:	e7f2      	b.n	8005986 <__libc_init_array+0x1e>
 80059a0:	08006368 	.word	0x08006368
 80059a4:	08006368 	.word	0x08006368
 80059a8:	08006368 	.word	0x08006368
 80059ac:	0800636c 	.word	0x0800636c

080059b0 <memcmp>:
 80059b0:	b510      	push	{r4, lr}
 80059b2:	3901      	subs	r1, #1
 80059b4:	4402      	add	r2, r0
 80059b6:	4290      	cmp	r0, r2
 80059b8:	d101      	bne.n	80059be <memcmp+0xe>
 80059ba:	2000      	movs	r0, #0
 80059bc:	bd10      	pop	{r4, pc}
 80059be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80059c2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80059c6:	42a3      	cmp	r3, r4
 80059c8:	d0f5      	beq.n	80059b6 <memcmp+0x6>
 80059ca:	1b18      	subs	r0, r3, r4
 80059cc:	bd10      	pop	{r4, pc}

080059ce <memcpy>:
 80059ce:	b510      	push	{r4, lr}
 80059d0:	1e43      	subs	r3, r0, #1
 80059d2:	440a      	add	r2, r1
 80059d4:	4291      	cmp	r1, r2
 80059d6:	d100      	bne.n	80059da <memcpy+0xc>
 80059d8:	bd10      	pop	{r4, pc}
 80059da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059e2:	e7f7      	b.n	80059d4 <memcpy+0x6>

080059e4 <memset>:
 80059e4:	4402      	add	r2, r0
 80059e6:	4603      	mov	r3, r0
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d100      	bne.n	80059ee <memset+0xa>
 80059ec:	4770      	bx	lr
 80059ee:	f803 1b01 	strb.w	r1, [r3], #1
 80059f2:	e7f9      	b.n	80059e8 <memset+0x4>

080059f4 <siprintf>:
 80059f4:	b40e      	push	{r1, r2, r3}
 80059f6:	b500      	push	{lr}
 80059f8:	b09c      	sub	sp, #112	; 0x70
 80059fa:	f44f 7102 	mov.w	r1, #520	; 0x208
 80059fe:	ab1d      	add	r3, sp, #116	; 0x74
 8005a00:	f8ad 1014 	strh.w	r1, [sp, #20]
 8005a04:	9002      	str	r0, [sp, #8]
 8005a06:	9006      	str	r0, [sp, #24]
 8005a08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a0c:	480a      	ldr	r0, [pc, #40]	; (8005a38 <siprintf+0x44>)
 8005a0e:	9104      	str	r1, [sp, #16]
 8005a10:	9107      	str	r1, [sp, #28]
 8005a12:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005a16:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a1a:	f8ad 1016 	strh.w	r1, [sp, #22]
 8005a1e:	6800      	ldr	r0, [r0, #0]
 8005a20:	9301      	str	r3, [sp, #4]
 8005a22:	a902      	add	r1, sp, #8
 8005a24:	f000 f87a 	bl	8005b1c <_svfiprintf_r>
 8005a28:	9b02      	ldr	r3, [sp, #8]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	701a      	strb	r2, [r3, #0]
 8005a2e:	b01c      	add	sp, #112	; 0x70
 8005a30:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a34:	b003      	add	sp, #12
 8005a36:	4770      	bx	lr
 8005a38:	2000000c 	.word	0x2000000c

08005a3c <strncpy>:
 8005a3c:	b570      	push	{r4, r5, r6, lr}
 8005a3e:	4604      	mov	r4, r0
 8005a40:	b902      	cbnz	r2, 8005a44 <strncpy+0x8>
 8005a42:	bd70      	pop	{r4, r5, r6, pc}
 8005a44:	4623      	mov	r3, r4
 8005a46:	f811 5b01 	ldrb.w	r5, [r1], #1
 8005a4a:	f803 5b01 	strb.w	r5, [r3], #1
 8005a4e:	1e56      	subs	r6, r2, #1
 8005a50:	b91d      	cbnz	r5, 8005a5a <strncpy+0x1e>
 8005a52:	4414      	add	r4, r2
 8005a54:	42a3      	cmp	r3, r4
 8005a56:	d103      	bne.n	8005a60 <strncpy+0x24>
 8005a58:	bd70      	pop	{r4, r5, r6, pc}
 8005a5a:	461c      	mov	r4, r3
 8005a5c:	4632      	mov	r2, r6
 8005a5e:	e7ef      	b.n	8005a40 <strncpy+0x4>
 8005a60:	f803 5b01 	strb.w	r5, [r3], #1
 8005a64:	e7f6      	b.n	8005a54 <strncpy+0x18>

08005a66 <__ssputs_r>:
 8005a66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a6a:	688e      	ldr	r6, [r1, #8]
 8005a6c:	429e      	cmp	r6, r3
 8005a6e:	4682      	mov	sl, r0
 8005a70:	460c      	mov	r4, r1
 8005a72:	4691      	mov	r9, r2
 8005a74:	4698      	mov	r8, r3
 8005a76:	d835      	bhi.n	8005ae4 <__ssputs_r+0x7e>
 8005a78:	898a      	ldrh	r2, [r1, #12]
 8005a7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a7e:	d031      	beq.n	8005ae4 <__ssputs_r+0x7e>
 8005a80:	6825      	ldr	r5, [r4, #0]
 8005a82:	6909      	ldr	r1, [r1, #16]
 8005a84:	1a6f      	subs	r7, r5, r1
 8005a86:	6965      	ldr	r5, [r4, #20]
 8005a88:	2302      	movs	r3, #2
 8005a8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a8e:	fb95 f5f3 	sdiv	r5, r5, r3
 8005a92:	f108 0301 	add.w	r3, r8, #1
 8005a96:	443b      	add	r3, r7
 8005a98:	429d      	cmp	r5, r3
 8005a9a:	bf38      	it	cc
 8005a9c:	461d      	movcc	r5, r3
 8005a9e:	0553      	lsls	r3, r2, #21
 8005aa0:	d531      	bpl.n	8005b06 <__ssputs_r+0xa0>
 8005aa2:	4629      	mov	r1, r5
 8005aa4:	f000 fb2c 	bl	8006100 <_malloc_r>
 8005aa8:	4606      	mov	r6, r0
 8005aaa:	b950      	cbnz	r0, 8005ac2 <__ssputs_r+0x5c>
 8005aac:	230c      	movs	r3, #12
 8005aae:	f8ca 3000 	str.w	r3, [sl]
 8005ab2:	89a3      	ldrh	r3, [r4, #12]
 8005ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ab8:	81a3      	strh	r3, [r4, #12]
 8005aba:	f04f 30ff 	mov.w	r0, #4294967295
 8005abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ac2:	463a      	mov	r2, r7
 8005ac4:	6921      	ldr	r1, [r4, #16]
 8005ac6:	f7ff ff82 	bl	80059ce <memcpy>
 8005aca:	89a3      	ldrh	r3, [r4, #12]
 8005acc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ad4:	81a3      	strh	r3, [r4, #12]
 8005ad6:	6126      	str	r6, [r4, #16]
 8005ad8:	6165      	str	r5, [r4, #20]
 8005ada:	443e      	add	r6, r7
 8005adc:	1bed      	subs	r5, r5, r7
 8005ade:	6026      	str	r6, [r4, #0]
 8005ae0:	60a5      	str	r5, [r4, #8]
 8005ae2:	4646      	mov	r6, r8
 8005ae4:	4546      	cmp	r6, r8
 8005ae6:	bf28      	it	cs
 8005ae8:	4646      	movcs	r6, r8
 8005aea:	4632      	mov	r2, r6
 8005aec:	4649      	mov	r1, r9
 8005aee:	6820      	ldr	r0, [r4, #0]
 8005af0:	f000 fa9e 	bl	8006030 <memmove>
 8005af4:	68a3      	ldr	r3, [r4, #8]
 8005af6:	1b9b      	subs	r3, r3, r6
 8005af8:	60a3      	str	r3, [r4, #8]
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	441e      	add	r6, r3
 8005afe:	6026      	str	r6, [r4, #0]
 8005b00:	2000      	movs	r0, #0
 8005b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b06:	462a      	mov	r2, r5
 8005b08:	f000 fb58 	bl	80061bc <_realloc_r>
 8005b0c:	4606      	mov	r6, r0
 8005b0e:	2800      	cmp	r0, #0
 8005b10:	d1e1      	bne.n	8005ad6 <__ssputs_r+0x70>
 8005b12:	6921      	ldr	r1, [r4, #16]
 8005b14:	4650      	mov	r0, sl
 8005b16:	f000 faa5 	bl	8006064 <_free_r>
 8005b1a:	e7c7      	b.n	8005aac <__ssputs_r+0x46>

08005b1c <_svfiprintf_r>:
 8005b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b20:	b09d      	sub	sp, #116	; 0x74
 8005b22:	4680      	mov	r8, r0
 8005b24:	9303      	str	r3, [sp, #12]
 8005b26:	898b      	ldrh	r3, [r1, #12]
 8005b28:	061c      	lsls	r4, r3, #24
 8005b2a:	460d      	mov	r5, r1
 8005b2c:	4616      	mov	r6, r2
 8005b2e:	d50f      	bpl.n	8005b50 <_svfiprintf_r+0x34>
 8005b30:	690b      	ldr	r3, [r1, #16]
 8005b32:	b96b      	cbnz	r3, 8005b50 <_svfiprintf_r+0x34>
 8005b34:	2140      	movs	r1, #64	; 0x40
 8005b36:	f000 fae3 	bl	8006100 <_malloc_r>
 8005b3a:	6028      	str	r0, [r5, #0]
 8005b3c:	6128      	str	r0, [r5, #16]
 8005b3e:	b928      	cbnz	r0, 8005b4c <_svfiprintf_r+0x30>
 8005b40:	230c      	movs	r3, #12
 8005b42:	f8c8 3000 	str.w	r3, [r8]
 8005b46:	f04f 30ff 	mov.w	r0, #4294967295
 8005b4a:	e0c5      	b.n	8005cd8 <_svfiprintf_r+0x1bc>
 8005b4c:	2340      	movs	r3, #64	; 0x40
 8005b4e:	616b      	str	r3, [r5, #20]
 8005b50:	2300      	movs	r3, #0
 8005b52:	9309      	str	r3, [sp, #36]	; 0x24
 8005b54:	2320      	movs	r3, #32
 8005b56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b5a:	2330      	movs	r3, #48	; 0x30
 8005b5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b60:	f04f 0b01 	mov.w	fp, #1
 8005b64:	4637      	mov	r7, r6
 8005b66:	463c      	mov	r4, r7
 8005b68:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d13c      	bne.n	8005bea <_svfiprintf_r+0xce>
 8005b70:	ebb7 0a06 	subs.w	sl, r7, r6
 8005b74:	d00b      	beq.n	8005b8e <_svfiprintf_r+0x72>
 8005b76:	4653      	mov	r3, sl
 8005b78:	4632      	mov	r2, r6
 8005b7a:	4629      	mov	r1, r5
 8005b7c:	4640      	mov	r0, r8
 8005b7e:	f7ff ff72 	bl	8005a66 <__ssputs_r>
 8005b82:	3001      	adds	r0, #1
 8005b84:	f000 80a3 	beq.w	8005cce <_svfiprintf_r+0x1b2>
 8005b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b8a:	4453      	add	r3, sl
 8005b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8005b8e:	783b      	ldrb	r3, [r7, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f000 809c 	beq.w	8005cce <_svfiprintf_r+0x1b2>
 8005b96:	2300      	movs	r3, #0
 8005b98:	f04f 32ff 	mov.w	r2, #4294967295
 8005b9c:	9304      	str	r3, [sp, #16]
 8005b9e:	9307      	str	r3, [sp, #28]
 8005ba0:	9205      	str	r2, [sp, #20]
 8005ba2:	9306      	str	r3, [sp, #24]
 8005ba4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ba8:	931a      	str	r3, [sp, #104]	; 0x68
 8005baa:	2205      	movs	r2, #5
 8005bac:	7821      	ldrb	r1, [r4, #0]
 8005bae:	4850      	ldr	r0, [pc, #320]	; (8005cf0 <_svfiprintf_r+0x1d4>)
 8005bb0:	f7fa fb16 	bl	80001e0 <memchr>
 8005bb4:	1c67      	adds	r7, r4, #1
 8005bb6:	9b04      	ldr	r3, [sp, #16]
 8005bb8:	b9d8      	cbnz	r0, 8005bf2 <_svfiprintf_r+0xd6>
 8005bba:	06d9      	lsls	r1, r3, #27
 8005bbc:	bf44      	itt	mi
 8005bbe:	2220      	movmi	r2, #32
 8005bc0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005bc4:	071a      	lsls	r2, r3, #28
 8005bc6:	bf44      	itt	mi
 8005bc8:	222b      	movmi	r2, #43	; 0x2b
 8005bca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005bce:	7822      	ldrb	r2, [r4, #0]
 8005bd0:	2a2a      	cmp	r2, #42	; 0x2a
 8005bd2:	d016      	beq.n	8005c02 <_svfiprintf_r+0xe6>
 8005bd4:	9a07      	ldr	r2, [sp, #28]
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	200a      	movs	r0, #10
 8005bda:	4627      	mov	r7, r4
 8005bdc:	3401      	adds	r4, #1
 8005bde:	783b      	ldrb	r3, [r7, #0]
 8005be0:	3b30      	subs	r3, #48	; 0x30
 8005be2:	2b09      	cmp	r3, #9
 8005be4:	d951      	bls.n	8005c8a <_svfiprintf_r+0x16e>
 8005be6:	b1c9      	cbz	r1, 8005c1c <_svfiprintf_r+0x100>
 8005be8:	e011      	b.n	8005c0e <_svfiprintf_r+0xf2>
 8005bea:	2b25      	cmp	r3, #37	; 0x25
 8005bec:	d0c0      	beq.n	8005b70 <_svfiprintf_r+0x54>
 8005bee:	4627      	mov	r7, r4
 8005bf0:	e7b9      	b.n	8005b66 <_svfiprintf_r+0x4a>
 8005bf2:	4a3f      	ldr	r2, [pc, #252]	; (8005cf0 <_svfiprintf_r+0x1d4>)
 8005bf4:	1a80      	subs	r0, r0, r2
 8005bf6:	fa0b f000 	lsl.w	r0, fp, r0
 8005bfa:	4318      	orrs	r0, r3
 8005bfc:	9004      	str	r0, [sp, #16]
 8005bfe:	463c      	mov	r4, r7
 8005c00:	e7d3      	b.n	8005baa <_svfiprintf_r+0x8e>
 8005c02:	9a03      	ldr	r2, [sp, #12]
 8005c04:	1d11      	adds	r1, r2, #4
 8005c06:	6812      	ldr	r2, [r2, #0]
 8005c08:	9103      	str	r1, [sp, #12]
 8005c0a:	2a00      	cmp	r2, #0
 8005c0c:	db01      	blt.n	8005c12 <_svfiprintf_r+0xf6>
 8005c0e:	9207      	str	r2, [sp, #28]
 8005c10:	e004      	b.n	8005c1c <_svfiprintf_r+0x100>
 8005c12:	4252      	negs	r2, r2
 8005c14:	f043 0302 	orr.w	r3, r3, #2
 8005c18:	9207      	str	r2, [sp, #28]
 8005c1a:	9304      	str	r3, [sp, #16]
 8005c1c:	783b      	ldrb	r3, [r7, #0]
 8005c1e:	2b2e      	cmp	r3, #46	; 0x2e
 8005c20:	d10e      	bne.n	8005c40 <_svfiprintf_r+0x124>
 8005c22:	787b      	ldrb	r3, [r7, #1]
 8005c24:	2b2a      	cmp	r3, #42	; 0x2a
 8005c26:	f107 0101 	add.w	r1, r7, #1
 8005c2a:	d132      	bne.n	8005c92 <_svfiprintf_r+0x176>
 8005c2c:	9b03      	ldr	r3, [sp, #12]
 8005c2e:	1d1a      	adds	r2, r3, #4
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	9203      	str	r2, [sp, #12]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	bfb8      	it	lt
 8005c38:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c3c:	3702      	adds	r7, #2
 8005c3e:	9305      	str	r3, [sp, #20]
 8005c40:	4c2c      	ldr	r4, [pc, #176]	; (8005cf4 <_svfiprintf_r+0x1d8>)
 8005c42:	7839      	ldrb	r1, [r7, #0]
 8005c44:	2203      	movs	r2, #3
 8005c46:	4620      	mov	r0, r4
 8005c48:	f7fa faca 	bl	80001e0 <memchr>
 8005c4c:	b138      	cbz	r0, 8005c5e <_svfiprintf_r+0x142>
 8005c4e:	2340      	movs	r3, #64	; 0x40
 8005c50:	1b00      	subs	r0, r0, r4
 8005c52:	fa03 f000 	lsl.w	r0, r3, r0
 8005c56:	9b04      	ldr	r3, [sp, #16]
 8005c58:	4303      	orrs	r3, r0
 8005c5a:	9304      	str	r3, [sp, #16]
 8005c5c:	3701      	adds	r7, #1
 8005c5e:	7839      	ldrb	r1, [r7, #0]
 8005c60:	4825      	ldr	r0, [pc, #148]	; (8005cf8 <_svfiprintf_r+0x1dc>)
 8005c62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c66:	2206      	movs	r2, #6
 8005c68:	1c7e      	adds	r6, r7, #1
 8005c6a:	f7fa fab9 	bl	80001e0 <memchr>
 8005c6e:	2800      	cmp	r0, #0
 8005c70:	d035      	beq.n	8005cde <_svfiprintf_r+0x1c2>
 8005c72:	4b22      	ldr	r3, [pc, #136]	; (8005cfc <_svfiprintf_r+0x1e0>)
 8005c74:	b9fb      	cbnz	r3, 8005cb6 <_svfiprintf_r+0x19a>
 8005c76:	9b03      	ldr	r3, [sp, #12]
 8005c78:	3307      	adds	r3, #7
 8005c7a:	f023 0307 	bic.w	r3, r3, #7
 8005c7e:	3308      	adds	r3, #8
 8005c80:	9303      	str	r3, [sp, #12]
 8005c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c84:	444b      	add	r3, r9
 8005c86:	9309      	str	r3, [sp, #36]	; 0x24
 8005c88:	e76c      	b.n	8005b64 <_svfiprintf_r+0x48>
 8005c8a:	fb00 3202 	mla	r2, r0, r2, r3
 8005c8e:	2101      	movs	r1, #1
 8005c90:	e7a3      	b.n	8005bda <_svfiprintf_r+0xbe>
 8005c92:	2300      	movs	r3, #0
 8005c94:	9305      	str	r3, [sp, #20]
 8005c96:	4618      	mov	r0, r3
 8005c98:	240a      	movs	r4, #10
 8005c9a:	460f      	mov	r7, r1
 8005c9c:	3101      	adds	r1, #1
 8005c9e:	783a      	ldrb	r2, [r7, #0]
 8005ca0:	3a30      	subs	r2, #48	; 0x30
 8005ca2:	2a09      	cmp	r2, #9
 8005ca4:	d903      	bls.n	8005cae <_svfiprintf_r+0x192>
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d0ca      	beq.n	8005c40 <_svfiprintf_r+0x124>
 8005caa:	9005      	str	r0, [sp, #20]
 8005cac:	e7c8      	b.n	8005c40 <_svfiprintf_r+0x124>
 8005cae:	fb04 2000 	mla	r0, r4, r0, r2
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e7f1      	b.n	8005c9a <_svfiprintf_r+0x17e>
 8005cb6:	ab03      	add	r3, sp, #12
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	462a      	mov	r2, r5
 8005cbc:	4b10      	ldr	r3, [pc, #64]	; (8005d00 <_svfiprintf_r+0x1e4>)
 8005cbe:	a904      	add	r1, sp, #16
 8005cc0:	4640      	mov	r0, r8
 8005cc2:	f3af 8000 	nop.w
 8005cc6:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005cca:	4681      	mov	r9, r0
 8005ccc:	d1d9      	bne.n	8005c82 <_svfiprintf_r+0x166>
 8005cce:	89ab      	ldrh	r3, [r5, #12]
 8005cd0:	065b      	lsls	r3, r3, #25
 8005cd2:	f53f af38 	bmi.w	8005b46 <_svfiprintf_r+0x2a>
 8005cd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cd8:	b01d      	add	sp, #116	; 0x74
 8005cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cde:	ab03      	add	r3, sp, #12
 8005ce0:	9300      	str	r3, [sp, #0]
 8005ce2:	462a      	mov	r2, r5
 8005ce4:	4b06      	ldr	r3, [pc, #24]	; (8005d00 <_svfiprintf_r+0x1e4>)
 8005ce6:	a904      	add	r1, sp, #16
 8005ce8:	4640      	mov	r0, r8
 8005cea:	f000 f881 	bl	8005df0 <_printf_i>
 8005cee:	e7ea      	b.n	8005cc6 <_svfiprintf_r+0x1aa>
 8005cf0:	0800632a 	.word	0x0800632a
 8005cf4:	08006330 	.word	0x08006330
 8005cf8:	08006334 	.word	0x08006334
 8005cfc:	00000000 	.word	0x00000000
 8005d00:	08005a67 	.word	0x08005a67

08005d04 <_printf_common>:
 8005d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d08:	4691      	mov	r9, r2
 8005d0a:	461f      	mov	r7, r3
 8005d0c:	688a      	ldr	r2, [r1, #8]
 8005d0e:	690b      	ldr	r3, [r1, #16]
 8005d10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d14:	4293      	cmp	r3, r2
 8005d16:	bfb8      	it	lt
 8005d18:	4613      	movlt	r3, r2
 8005d1a:	f8c9 3000 	str.w	r3, [r9]
 8005d1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d22:	4606      	mov	r6, r0
 8005d24:	460c      	mov	r4, r1
 8005d26:	b112      	cbz	r2, 8005d2e <_printf_common+0x2a>
 8005d28:	3301      	adds	r3, #1
 8005d2a:	f8c9 3000 	str.w	r3, [r9]
 8005d2e:	6823      	ldr	r3, [r4, #0]
 8005d30:	0699      	lsls	r1, r3, #26
 8005d32:	bf42      	ittt	mi
 8005d34:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005d38:	3302      	addmi	r3, #2
 8005d3a:	f8c9 3000 	strmi.w	r3, [r9]
 8005d3e:	6825      	ldr	r5, [r4, #0]
 8005d40:	f015 0506 	ands.w	r5, r5, #6
 8005d44:	d107      	bne.n	8005d56 <_printf_common+0x52>
 8005d46:	f104 0a19 	add.w	sl, r4, #25
 8005d4a:	68e3      	ldr	r3, [r4, #12]
 8005d4c:	f8d9 2000 	ldr.w	r2, [r9]
 8005d50:	1a9b      	subs	r3, r3, r2
 8005d52:	429d      	cmp	r5, r3
 8005d54:	db29      	blt.n	8005daa <_printf_common+0xa6>
 8005d56:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005d5a:	6822      	ldr	r2, [r4, #0]
 8005d5c:	3300      	adds	r3, #0
 8005d5e:	bf18      	it	ne
 8005d60:	2301      	movne	r3, #1
 8005d62:	0692      	lsls	r2, r2, #26
 8005d64:	d42e      	bmi.n	8005dc4 <_printf_common+0xc0>
 8005d66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d6a:	4639      	mov	r1, r7
 8005d6c:	4630      	mov	r0, r6
 8005d6e:	47c0      	blx	r8
 8005d70:	3001      	adds	r0, #1
 8005d72:	d021      	beq.n	8005db8 <_printf_common+0xb4>
 8005d74:	6823      	ldr	r3, [r4, #0]
 8005d76:	68e5      	ldr	r5, [r4, #12]
 8005d78:	f8d9 2000 	ldr.w	r2, [r9]
 8005d7c:	f003 0306 	and.w	r3, r3, #6
 8005d80:	2b04      	cmp	r3, #4
 8005d82:	bf08      	it	eq
 8005d84:	1aad      	subeq	r5, r5, r2
 8005d86:	68a3      	ldr	r3, [r4, #8]
 8005d88:	6922      	ldr	r2, [r4, #16]
 8005d8a:	bf0c      	ite	eq
 8005d8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d90:	2500      	movne	r5, #0
 8005d92:	4293      	cmp	r3, r2
 8005d94:	bfc4      	itt	gt
 8005d96:	1a9b      	subgt	r3, r3, r2
 8005d98:	18ed      	addgt	r5, r5, r3
 8005d9a:	f04f 0900 	mov.w	r9, #0
 8005d9e:	341a      	adds	r4, #26
 8005da0:	454d      	cmp	r5, r9
 8005da2:	d11b      	bne.n	8005ddc <_printf_common+0xd8>
 8005da4:	2000      	movs	r0, #0
 8005da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005daa:	2301      	movs	r3, #1
 8005dac:	4652      	mov	r2, sl
 8005dae:	4639      	mov	r1, r7
 8005db0:	4630      	mov	r0, r6
 8005db2:	47c0      	blx	r8
 8005db4:	3001      	adds	r0, #1
 8005db6:	d103      	bne.n	8005dc0 <_printf_common+0xbc>
 8005db8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dc0:	3501      	adds	r5, #1
 8005dc2:	e7c2      	b.n	8005d4a <_printf_common+0x46>
 8005dc4:	18e1      	adds	r1, r4, r3
 8005dc6:	1c5a      	adds	r2, r3, #1
 8005dc8:	2030      	movs	r0, #48	; 0x30
 8005dca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005dce:	4422      	add	r2, r4
 8005dd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005dd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005dd8:	3302      	adds	r3, #2
 8005dda:	e7c4      	b.n	8005d66 <_printf_common+0x62>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	4622      	mov	r2, r4
 8005de0:	4639      	mov	r1, r7
 8005de2:	4630      	mov	r0, r6
 8005de4:	47c0      	blx	r8
 8005de6:	3001      	adds	r0, #1
 8005de8:	d0e6      	beq.n	8005db8 <_printf_common+0xb4>
 8005dea:	f109 0901 	add.w	r9, r9, #1
 8005dee:	e7d7      	b.n	8005da0 <_printf_common+0x9c>

08005df0 <_printf_i>:
 8005df0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005df4:	4617      	mov	r7, r2
 8005df6:	7e0a      	ldrb	r2, [r1, #24]
 8005df8:	b085      	sub	sp, #20
 8005dfa:	2a6e      	cmp	r2, #110	; 0x6e
 8005dfc:	4698      	mov	r8, r3
 8005dfe:	4606      	mov	r6, r0
 8005e00:	460c      	mov	r4, r1
 8005e02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e04:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005e08:	f000 80bc 	beq.w	8005f84 <_printf_i+0x194>
 8005e0c:	d81a      	bhi.n	8005e44 <_printf_i+0x54>
 8005e0e:	2a63      	cmp	r2, #99	; 0x63
 8005e10:	d02e      	beq.n	8005e70 <_printf_i+0x80>
 8005e12:	d80a      	bhi.n	8005e2a <_printf_i+0x3a>
 8005e14:	2a00      	cmp	r2, #0
 8005e16:	f000 80c8 	beq.w	8005faa <_printf_i+0x1ba>
 8005e1a:	2a58      	cmp	r2, #88	; 0x58
 8005e1c:	f000 808a 	beq.w	8005f34 <_printf_i+0x144>
 8005e20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e24:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005e28:	e02a      	b.n	8005e80 <_printf_i+0x90>
 8005e2a:	2a64      	cmp	r2, #100	; 0x64
 8005e2c:	d001      	beq.n	8005e32 <_printf_i+0x42>
 8005e2e:	2a69      	cmp	r2, #105	; 0x69
 8005e30:	d1f6      	bne.n	8005e20 <_printf_i+0x30>
 8005e32:	6821      	ldr	r1, [r4, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005e3a:	d023      	beq.n	8005e84 <_printf_i+0x94>
 8005e3c:	1d11      	adds	r1, r2, #4
 8005e3e:	6019      	str	r1, [r3, #0]
 8005e40:	6813      	ldr	r3, [r2, #0]
 8005e42:	e027      	b.n	8005e94 <_printf_i+0xa4>
 8005e44:	2a73      	cmp	r2, #115	; 0x73
 8005e46:	f000 80b4 	beq.w	8005fb2 <_printf_i+0x1c2>
 8005e4a:	d808      	bhi.n	8005e5e <_printf_i+0x6e>
 8005e4c:	2a6f      	cmp	r2, #111	; 0x6f
 8005e4e:	d02a      	beq.n	8005ea6 <_printf_i+0xb6>
 8005e50:	2a70      	cmp	r2, #112	; 0x70
 8005e52:	d1e5      	bne.n	8005e20 <_printf_i+0x30>
 8005e54:	680a      	ldr	r2, [r1, #0]
 8005e56:	f042 0220 	orr.w	r2, r2, #32
 8005e5a:	600a      	str	r2, [r1, #0]
 8005e5c:	e003      	b.n	8005e66 <_printf_i+0x76>
 8005e5e:	2a75      	cmp	r2, #117	; 0x75
 8005e60:	d021      	beq.n	8005ea6 <_printf_i+0xb6>
 8005e62:	2a78      	cmp	r2, #120	; 0x78
 8005e64:	d1dc      	bne.n	8005e20 <_printf_i+0x30>
 8005e66:	2278      	movs	r2, #120	; 0x78
 8005e68:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005e6c:	496e      	ldr	r1, [pc, #440]	; (8006028 <_printf_i+0x238>)
 8005e6e:	e064      	b.n	8005f3a <_printf_i+0x14a>
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8005e76:	1d11      	adds	r1, r2, #4
 8005e78:	6019      	str	r1, [r3, #0]
 8005e7a:	6813      	ldr	r3, [r2, #0]
 8005e7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e80:	2301      	movs	r3, #1
 8005e82:	e0a3      	b.n	8005fcc <_printf_i+0x1dc>
 8005e84:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005e88:	f102 0104 	add.w	r1, r2, #4
 8005e8c:	6019      	str	r1, [r3, #0]
 8005e8e:	d0d7      	beq.n	8005e40 <_printf_i+0x50>
 8005e90:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	da03      	bge.n	8005ea0 <_printf_i+0xb0>
 8005e98:	222d      	movs	r2, #45	; 0x2d
 8005e9a:	425b      	negs	r3, r3
 8005e9c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005ea0:	4962      	ldr	r1, [pc, #392]	; (800602c <_printf_i+0x23c>)
 8005ea2:	220a      	movs	r2, #10
 8005ea4:	e017      	b.n	8005ed6 <_printf_i+0xe6>
 8005ea6:	6820      	ldr	r0, [r4, #0]
 8005ea8:	6819      	ldr	r1, [r3, #0]
 8005eaa:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005eae:	d003      	beq.n	8005eb8 <_printf_i+0xc8>
 8005eb0:	1d08      	adds	r0, r1, #4
 8005eb2:	6018      	str	r0, [r3, #0]
 8005eb4:	680b      	ldr	r3, [r1, #0]
 8005eb6:	e006      	b.n	8005ec6 <_printf_i+0xd6>
 8005eb8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ebc:	f101 0004 	add.w	r0, r1, #4
 8005ec0:	6018      	str	r0, [r3, #0]
 8005ec2:	d0f7      	beq.n	8005eb4 <_printf_i+0xc4>
 8005ec4:	880b      	ldrh	r3, [r1, #0]
 8005ec6:	4959      	ldr	r1, [pc, #356]	; (800602c <_printf_i+0x23c>)
 8005ec8:	2a6f      	cmp	r2, #111	; 0x6f
 8005eca:	bf14      	ite	ne
 8005ecc:	220a      	movne	r2, #10
 8005ece:	2208      	moveq	r2, #8
 8005ed0:	2000      	movs	r0, #0
 8005ed2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005ed6:	6865      	ldr	r5, [r4, #4]
 8005ed8:	60a5      	str	r5, [r4, #8]
 8005eda:	2d00      	cmp	r5, #0
 8005edc:	f2c0 809c 	blt.w	8006018 <_printf_i+0x228>
 8005ee0:	6820      	ldr	r0, [r4, #0]
 8005ee2:	f020 0004 	bic.w	r0, r0, #4
 8005ee6:	6020      	str	r0, [r4, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d13f      	bne.n	8005f6c <_printf_i+0x17c>
 8005eec:	2d00      	cmp	r5, #0
 8005eee:	f040 8095 	bne.w	800601c <_printf_i+0x22c>
 8005ef2:	4675      	mov	r5, lr
 8005ef4:	2a08      	cmp	r2, #8
 8005ef6:	d10b      	bne.n	8005f10 <_printf_i+0x120>
 8005ef8:	6823      	ldr	r3, [r4, #0]
 8005efa:	07da      	lsls	r2, r3, #31
 8005efc:	d508      	bpl.n	8005f10 <_printf_i+0x120>
 8005efe:	6923      	ldr	r3, [r4, #16]
 8005f00:	6862      	ldr	r2, [r4, #4]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	bfde      	ittt	le
 8005f06:	2330      	movle	r3, #48	; 0x30
 8005f08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f10:	ebae 0305 	sub.w	r3, lr, r5
 8005f14:	6123      	str	r3, [r4, #16]
 8005f16:	f8cd 8000 	str.w	r8, [sp]
 8005f1a:	463b      	mov	r3, r7
 8005f1c:	aa03      	add	r2, sp, #12
 8005f1e:	4621      	mov	r1, r4
 8005f20:	4630      	mov	r0, r6
 8005f22:	f7ff feef 	bl	8005d04 <_printf_common>
 8005f26:	3001      	adds	r0, #1
 8005f28:	d155      	bne.n	8005fd6 <_printf_i+0x1e6>
 8005f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f2e:	b005      	add	sp, #20
 8005f30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f34:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005f38:	493c      	ldr	r1, [pc, #240]	; (800602c <_printf_i+0x23c>)
 8005f3a:	6822      	ldr	r2, [r4, #0]
 8005f3c:	6818      	ldr	r0, [r3, #0]
 8005f3e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005f42:	f100 0504 	add.w	r5, r0, #4
 8005f46:	601d      	str	r5, [r3, #0]
 8005f48:	d001      	beq.n	8005f4e <_printf_i+0x15e>
 8005f4a:	6803      	ldr	r3, [r0, #0]
 8005f4c:	e002      	b.n	8005f54 <_printf_i+0x164>
 8005f4e:	0655      	lsls	r5, r2, #25
 8005f50:	d5fb      	bpl.n	8005f4a <_printf_i+0x15a>
 8005f52:	8803      	ldrh	r3, [r0, #0]
 8005f54:	07d0      	lsls	r0, r2, #31
 8005f56:	bf44      	itt	mi
 8005f58:	f042 0220 	orrmi.w	r2, r2, #32
 8005f5c:	6022      	strmi	r2, [r4, #0]
 8005f5e:	b91b      	cbnz	r3, 8005f68 <_printf_i+0x178>
 8005f60:	6822      	ldr	r2, [r4, #0]
 8005f62:	f022 0220 	bic.w	r2, r2, #32
 8005f66:	6022      	str	r2, [r4, #0]
 8005f68:	2210      	movs	r2, #16
 8005f6a:	e7b1      	b.n	8005ed0 <_printf_i+0xe0>
 8005f6c:	4675      	mov	r5, lr
 8005f6e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f72:	fb02 3310 	mls	r3, r2, r0, r3
 8005f76:	5ccb      	ldrb	r3, [r1, r3]
 8005f78:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2800      	cmp	r0, #0
 8005f80:	d1f5      	bne.n	8005f6e <_printf_i+0x17e>
 8005f82:	e7b7      	b.n	8005ef4 <_printf_i+0x104>
 8005f84:	6808      	ldr	r0, [r1, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	6949      	ldr	r1, [r1, #20]
 8005f8a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005f8e:	d004      	beq.n	8005f9a <_printf_i+0x1aa>
 8005f90:	1d10      	adds	r0, r2, #4
 8005f92:	6018      	str	r0, [r3, #0]
 8005f94:	6813      	ldr	r3, [r2, #0]
 8005f96:	6019      	str	r1, [r3, #0]
 8005f98:	e007      	b.n	8005faa <_printf_i+0x1ba>
 8005f9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f9e:	f102 0004 	add.w	r0, r2, #4
 8005fa2:	6018      	str	r0, [r3, #0]
 8005fa4:	6813      	ldr	r3, [r2, #0]
 8005fa6:	d0f6      	beq.n	8005f96 <_printf_i+0x1a6>
 8005fa8:	8019      	strh	r1, [r3, #0]
 8005faa:	2300      	movs	r3, #0
 8005fac:	6123      	str	r3, [r4, #16]
 8005fae:	4675      	mov	r5, lr
 8005fb0:	e7b1      	b.n	8005f16 <_printf_i+0x126>
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	1d11      	adds	r1, r2, #4
 8005fb6:	6019      	str	r1, [r3, #0]
 8005fb8:	6815      	ldr	r5, [r2, #0]
 8005fba:	6862      	ldr	r2, [r4, #4]
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	4628      	mov	r0, r5
 8005fc0:	f7fa f90e 	bl	80001e0 <memchr>
 8005fc4:	b108      	cbz	r0, 8005fca <_printf_i+0x1da>
 8005fc6:	1b40      	subs	r0, r0, r5
 8005fc8:	6060      	str	r0, [r4, #4]
 8005fca:	6863      	ldr	r3, [r4, #4]
 8005fcc:	6123      	str	r3, [r4, #16]
 8005fce:	2300      	movs	r3, #0
 8005fd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fd4:	e79f      	b.n	8005f16 <_printf_i+0x126>
 8005fd6:	6923      	ldr	r3, [r4, #16]
 8005fd8:	462a      	mov	r2, r5
 8005fda:	4639      	mov	r1, r7
 8005fdc:	4630      	mov	r0, r6
 8005fde:	47c0      	blx	r8
 8005fe0:	3001      	adds	r0, #1
 8005fe2:	d0a2      	beq.n	8005f2a <_printf_i+0x13a>
 8005fe4:	6823      	ldr	r3, [r4, #0]
 8005fe6:	079b      	lsls	r3, r3, #30
 8005fe8:	d507      	bpl.n	8005ffa <_printf_i+0x20a>
 8005fea:	2500      	movs	r5, #0
 8005fec:	f104 0919 	add.w	r9, r4, #25
 8005ff0:	68e3      	ldr	r3, [r4, #12]
 8005ff2:	9a03      	ldr	r2, [sp, #12]
 8005ff4:	1a9b      	subs	r3, r3, r2
 8005ff6:	429d      	cmp	r5, r3
 8005ff8:	db05      	blt.n	8006006 <_printf_i+0x216>
 8005ffa:	68e0      	ldr	r0, [r4, #12]
 8005ffc:	9b03      	ldr	r3, [sp, #12]
 8005ffe:	4298      	cmp	r0, r3
 8006000:	bfb8      	it	lt
 8006002:	4618      	movlt	r0, r3
 8006004:	e793      	b.n	8005f2e <_printf_i+0x13e>
 8006006:	2301      	movs	r3, #1
 8006008:	464a      	mov	r2, r9
 800600a:	4639      	mov	r1, r7
 800600c:	4630      	mov	r0, r6
 800600e:	47c0      	blx	r8
 8006010:	3001      	adds	r0, #1
 8006012:	d08a      	beq.n	8005f2a <_printf_i+0x13a>
 8006014:	3501      	adds	r5, #1
 8006016:	e7eb      	b.n	8005ff0 <_printf_i+0x200>
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1a7      	bne.n	8005f6c <_printf_i+0x17c>
 800601c:	780b      	ldrb	r3, [r1, #0]
 800601e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006022:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006026:	e765      	b.n	8005ef4 <_printf_i+0x104>
 8006028:	0800634c 	.word	0x0800634c
 800602c:	0800633b 	.word	0x0800633b

08006030 <memmove>:
 8006030:	4288      	cmp	r0, r1
 8006032:	b510      	push	{r4, lr}
 8006034:	eb01 0302 	add.w	r3, r1, r2
 8006038:	d803      	bhi.n	8006042 <memmove+0x12>
 800603a:	1e42      	subs	r2, r0, #1
 800603c:	4299      	cmp	r1, r3
 800603e:	d10c      	bne.n	800605a <memmove+0x2a>
 8006040:	bd10      	pop	{r4, pc}
 8006042:	4298      	cmp	r0, r3
 8006044:	d2f9      	bcs.n	800603a <memmove+0xa>
 8006046:	1881      	adds	r1, r0, r2
 8006048:	1ad2      	subs	r2, r2, r3
 800604a:	42d3      	cmn	r3, r2
 800604c:	d100      	bne.n	8006050 <memmove+0x20>
 800604e:	bd10      	pop	{r4, pc}
 8006050:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006054:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006058:	e7f7      	b.n	800604a <memmove+0x1a>
 800605a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800605e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006062:	e7eb      	b.n	800603c <memmove+0xc>

08006064 <_free_r>:
 8006064:	b538      	push	{r3, r4, r5, lr}
 8006066:	4605      	mov	r5, r0
 8006068:	2900      	cmp	r1, #0
 800606a:	d045      	beq.n	80060f8 <_free_r+0x94>
 800606c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006070:	1f0c      	subs	r4, r1, #4
 8006072:	2b00      	cmp	r3, #0
 8006074:	bfb8      	it	lt
 8006076:	18e4      	addlt	r4, r4, r3
 8006078:	f000 f8d6 	bl	8006228 <__malloc_lock>
 800607c:	4a1f      	ldr	r2, [pc, #124]	; (80060fc <_free_r+0x98>)
 800607e:	6813      	ldr	r3, [r2, #0]
 8006080:	4610      	mov	r0, r2
 8006082:	b933      	cbnz	r3, 8006092 <_free_r+0x2e>
 8006084:	6063      	str	r3, [r4, #4]
 8006086:	6014      	str	r4, [r2, #0]
 8006088:	4628      	mov	r0, r5
 800608a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800608e:	f000 b8cc 	b.w	800622a <__malloc_unlock>
 8006092:	42a3      	cmp	r3, r4
 8006094:	d90c      	bls.n	80060b0 <_free_r+0x4c>
 8006096:	6821      	ldr	r1, [r4, #0]
 8006098:	1862      	adds	r2, r4, r1
 800609a:	4293      	cmp	r3, r2
 800609c:	bf04      	itt	eq
 800609e:	681a      	ldreq	r2, [r3, #0]
 80060a0:	685b      	ldreq	r3, [r3, #4]
 80060a2:	6063      	str	r3, [r4, #4]
 80060a4:	bf04      	itt	eq
 80060a6:	1852      	addeq	r2, r2, r1
 80060a8:	6022      	streq	r2, [r4, #0]
 80060aa:	6004      	str	r4, [r0, #0]
 80060ac:	e7ec      	b.n	8006088 <_free_r+0x24>
 80060ae:	4613      	mov	r3, r2
 80060b0:	685a      	ldr	r2, [r3, #4]
 80060b2:	b10a      	cbz	r2, 80060b8 <_free_r+0x54>
 80060b4:	42a2      	cmp	r2, r4
 80060b6:	d9fa      	bls.n	80060ae <_free_r+0x4a>
 80060b8:	6819      	ldr	r1, [r3, #0]
 80060ba:	1858      	adds	r0, r3, r1
 80060bc:	42a0      	cmp	r0, r4
 80060be:	d10b      	bne.n	80060d8 <_free_r+0x74>
 80060c0:	6820      	ldr	r0, [r4, #0]
 80060c2:	4401      	add	r1, r0
 80060c4:	1858      	adds	r0, r3, r1
 80060c6:	4282      	cmp	r2, r0
 80060c8:	6019      	str	r1, [r3, #0]
 80060ca:	d1dd      	bne.n	8006088 <_free_r+0x24>
 80060cc:	6810      	ldr	r0, [r2, #0]
 80060ce:	6852      	ldr	r2, [r2, #4]
 80060d0:	605a      	str	r2, [r3, #4]
 80060d2:	4401      	add	r1, r0
 80060d4:	6019      	str	r1, [r3, #0]
 80060d6:	e7d7      	b.n	8006088 <_free_r+0x24>
 80060d8:	d902      	bls.n	80060e0 <_free_r+0x7c>
 80060da:	230c      	movs	r3, #12
 80060dc:	602b      	str	r3, [r5, #0]
 80060de:	e7d3      	b.n	8006088 <_free_r+0x24>
 80060e0:	6820      	ldr	r0, [r4, #0]
 80060e2:	1821      	adds	r1, r4, r0
 80060e4:	428a      	cmp	r2, r1
 80060e6:	bf04      	itt	eq
 80060e8:	6811      	ldreq	r1, [r2, #0]
 80060ea:	6852      	ldreq	r2, [r2, #4]
 80060ec:	6062      	str	r2, [r4, #4]
 80060ee:	bf04      	itt	eq
 80060f0:	1809      	addeq	r1, r1, r0
 80060f2:	6021      	streq	r1, [r4, #0]
 80060f4:	605c      	str	r4, [r3, #4]
 80060f6:	e7c7      	b.n	8006088 <_free_r+0x24>
 80060f8:	bd38      	pop	{r3, r4, r5, pc}
 80060fa:	bf00      	nop
 80060fc:	200001f4 	.word	0x200001f4

08006100 <_malloc_r>:
 8006100:	b570      	push	{r4, r5, r6, lr}
 8006102:	1ccd      	adds	r5, r1, #3
 8006104:	f025 0503 	bic.w	r5, r5, #3
 8006108:	3508      	adds	r5, #8
 800610a:	2d0c      	cmp	r5, #12
 800610c:	bf38      	it	cc
 800610e:	250c      	movcc	r5, #12
 8006110:	2d00      	cmp	r5, #0
 8006112:	4606      	mov	r6, r0
 8006114:	db01      	blt.n	800611a <_malloc_r+0x1a>
 8006116:	42a9      	cmp	r1, r5
 8006118:	d903      	bls.n	8006122 <_malloc_r+0x22>
 800611a:	230c      	movs	r3, #12
 800611c:	6033      	str	r3, [r6, #0]
 800611e:	2000      	movs	r0, #0
 8006120:	bd70      	pop	{r4, r5, r6, pc}
 8006122:	f000 f881 	bl	8006228 <__malloc_lock>
 8006126:	4a23      	ldr	r2, [pc, #140]	; (80061b4 <_malloc_r+0xb4>)
 8006128:	6814      	ldr	r4, [r2, #0]
 800612a:	4621      	mov	r1, r4
 800612c:	b991      	cbnz	r1, 8006154 <_malloc_r+0x54>
 800612e:	4c22      	ldr	r4, [pc, #136]	; (80061b8 <_malloc_r+0xb8>)
 8006130:	6823      	ldr	r3, [r4, #0]
 8006132:	b91b      	cbnz	r3, 800613c <_malloc_r+0x3c>
 8006134:	4630      	mov	r0, r6
 8006136:	f000 f867 	bl	8006208 <_sbrk_r>
 800613a:	6020      	str	r0, [r4, #0]
 800613c:	4629      	mov	r1, r5
 800613e:	4630      	mov	r0, r6
 8006140:	f000 f862 	bl	8006208 <_sbrk_r>
 8006144:	1c43      	adds	r3, r0, #1
 8006146:	d126      	bne.n	8006196 <_malloc_r+0x96>
 8006148:	230c      	movs	r3, #12
 800614a:	6033      	str	r3, [r6, #0]
 800614c:	4630      	mov	r0, r6
 800614e:	f000 f86c 	bl	800622a <__malloc_unlock>
 8006152:	e7e4      	b.n	800611e <_malloc_r+0x1e>
 8006154:	680b      	ldr	r3, [r1, #0]
 8006156:	1b5b      	subs	r3, r3, r5
 8006158:	d41a      	bmi.n	8006190 <_malloc_r+0x90>
 800615a:	2b0b      	cmp	r3, #11
 800615c:	d90f      	bls.n	800617e <_malloc_r+0x7e>
 800615e:	600b      	str	r3, [r1, #0]
 8006160:	50cd      	str	r5, [r1, r3]
 8006162:	18cc      	adds	r4, r1, r3
 8006164:	4630      	mov	r0, r6
 8006166:	f000 f860 	bl	800622a <__malloc_unlock>
 800616a:	f104 000b 	add.w	r0, r4, #11
 800616e:	1d23      	adds	r3, r4, #4
 8006170:	f020 0007 	bic.w	r0, r0, #7
 8006174:	1ac3      	subs	r3, r0, r3
 8006176:	d01b      	beq.n	80061b0 <_malloc_r+0xb0>
 8006178:	425a      	negs	r2, r3
 800617a:	50e2      	str	r2, [r4, r3]
 800617c:	bd70      	pop	{r4, r5, r6, pc}
 800617e:	428c      	cmp	r4, r1
 8006180:	bf0d      	iteet	eq
 8006182:	6863      	ldreq	r3, [r4, #4]
 8006184:	684b      	ldrne	r3, [r1, #4]
 8006186:	6063      	strne	r3, [r4, #4]
 8006188:	6013      	streq	r3, [r2, #0]
 800618a:	bf18      	it	ne
 800618c:	460c      	movne	r4, r1
 800618e:	e7e9      	b.n	8006164 <_malloc_r+0x64>
 8006190:	460c      	mov	r4, r1
 8006192:	6849      	ldr	r1, [r1, #4]
 8006194:	e7ca      	b.n	800612c <_malloc_r+0x2c>
 8006196:	1cc4      	adds	r4, r0, #3
 8006198:	f024 0403 	bic.w	r4, r4, #3
 800619c:	42a0      	cmp	r0, r4
 800619e:	d005      	beq.n	80061ac <_malloc_r+0xac>
 80061a0:	1a21      	subs	r1, r4, r0
 80061a2:	4630      	mov	r0, r6
 80061a4:	f000 f830 	bl	8006208 <_sbrk_r>
 80061a8:	3001      	adds	r0, #1
 80061aa:	d0cd      	beq.n	8006148 <_malloc_r+0x48>
 80061ac:	6025      	str	r5, [r4, #0]
 80061ae:	e7d9      	b.n	8006164 <_malloc_r+0x64>
 80061b0:	bd70      	pop	{r4, r5, r6, pc}
 80061b2:	bf00      	nop
 80061b4:	200001f4 	.word	0x200001f4
 80061b8:	200001f8 	.word	0x200001f8

080061bc <_realloc_r>:
 80061bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061be:	4607      	mov	r7, r0
 80061c0:	4614      	mov	r4, r2
 80061c2:	460e      	mov	r6, r1
 80061c4:	b921      	cbnz	r1, 80061d0 <_realloc_r+0x14>
 80061c6:	4611      	mov	r1, r2
 80061c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80061cc:	f7ff bf98 	b.w	8006100 <_malloc_r>
 80061d0:	b922      	cbnz	r2, 80061dc <_realloc_r+0x20>
 80061d2:	f7ff ff47 	bl	8006064 <_free_r>
 80061d6:	4625      	mov	r5, r4
 80061d8:	4628      	mov	r0, r5
 80061da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061dc:	f000 f826 	bl	800622c <_malloc_usable_size_r>
 80061e0:	4284      	cmp	r4, r0
 80061e2:	d90f      	bls.n	8006204 <_realloc_r+0x48>
 80061e4:	4621      	mov	r1, r4
 80061e6:	4638      	mov	r0, r7
 80061e8:	f7ff ff8a 	bl	8006100 <_malloc_r>
 80061ec:	4605      	mov	r5, r0
 80061ee:	2800      	cmp	r0, #0
 80061f0:	d0f2      	beq.n	80061d8 <_realloc_r+0x1c>
 80061f2:	4631      	mov	r1, r6
 80061f4:	4622      	mov	r2, r4
 80061f6:	f7ff fbea 	bl	80059ce <memcpy>
 80061fa:	4631      	mov	r1, r6
 80061fc:	4638      	mov	r0, r7
 80061fe:	f7ff ff31 	bl	8006064 <_free_r>
 8006202:	e7e9      	b.n	80061d8 <_realloc_r+0x1c>
 8006204:	4635      	mov	r5, r6
 8006206:	e7e7      	b.n	80061d8 <_realloc_r+0x1c>

08006208 <_sbrk_r>:
 8006208:	b538      	push	{r3, r4, r5, lr}
 800620a:	4c06      	ldr	r4, [pc, #24]	; (8006224 <_sbrk_r+0x1c>)
 800620c:	2300      	movs	r3, #0
 800620e:	4605      	mov	r5, r0
 8006210:	4608      	mov	r0, r1
 8006212:	6023      	str	r3, [r4, #0]
 8006214:	f000 f814 	bl	8006240 <_sbrk>
 8006218:	1c43      	adds	r3, r0, #1
 800621a:	d102      	bne.n	8006222 <_sbrk_r+0x1a>
 800621c:	6823      	ldr	r3, [r4, #0]
 800621e:	b103      	cbz	r3, 8006222 <_sbrk_r+0x1a>
 8006220:	602b      	str	r3, [r5, #0]
 8006222:	bd38      	pop	{r3, r4, r5, pc}
 8006224:	200068a4 	.word	0x200068a4

08006228 <__malloc_lock>:
 8006228:	4770      	bx	lr

0800622a <__malloc_unlock>:
 800622a:	4770      	bx	lr

0800622c <_malloc_usable_size_r>:
 800622c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006230:	2800      	cmp	r0, #0
 8006232:	f1a0 0004 	sub.w	r0, r0, #4
 8006236:	bfbc      	itt	lt
 8006238:	580b      	ldrlt	r3, [r1, r0]
 800623a:	18c0      	addlt	r0, r0, r3
 800623c:	4770      	bx	lr
	...

08006240 <_sbrk>:
 8006240:	4b04      	ldr	r3, [pc, #16]	; (8006254 <_sbrk+0x14>)
 8006242:	6819      	ldr	r1, [r3, #0]
 8006244:	4602      	mov	r2, r0
 8006246:	b909      	cbnz	r1, 800624c <_sbrk+0xc>
 8006248:	4903      	ldr	r1, [pc, #12]	; (8006258 <_sbrk+0x18>)
 800624a:	6019      	str	r1, [r3, #0]
 800624c:	6818      	ldr	r0, [r3, #0]
 800624e:	4402      	add	r2, r0
 8006250:	601a      	str	r2, [r3, #0]
 8006252:	4770      	bx	lr
 8006254:	200001fc 	.word	0x200001fc
 8006258:	200068a8 	.word	0x200068a8

0800625c <_init>:
 800625c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800625e:	bf00      	nop
 8006260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006262:	bc08      	pop	{r3}
 8006264:	469e      	mov	lr, r3
 8006266:	4770      	bx	lr

08006268 <_fini>:
 8006268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800626a:	bf00      	nop
 800626c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800626e:	bc08      	pop	{r3}
 8006270:	469e      	mov	lr, r3
 8006272:	4770      	bx	lr
